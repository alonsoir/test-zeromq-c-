---
name: C++20 Sniffer CI/CD Pipeline - v3 Ultra

on:
  push:
    branches:
      - "**"           # cualquier rama
    tags:
      - "v*.*.*"
  pull_request:
  workflow_dispatch:   # permite ejecuci√≥n manual

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Virtualization Environment
        run: |
          set -e
          echo "üöÄ Updating system and installing virtualization packages..."
          sudo apt-get update -y
          echo virtualbox-ext-pack virtualbox-ext-pack/license select true \
            | sudo debconf-set-selections
          sudo apt-get install -y \
            build-essential \
            curl \
            jq \
            netcat-openbsd \
            qemu-kvm \
            libvirt-daemon-system \
            libvirt-clients \
            virt-manager \
            virtualbox \
            virtualbox-dkms \
            virtualbox-ext-pack
          sudo modprobe kvm
          echo "‚úÖ Virtualization environment ready"

      - name: Install Vagrant
        run: |
          set -e
          sudo apt-get install -y vagrant
          echo "‚úÖ Vagrant installed"

      - name: Install Docker & Docker Compose
        run: |
          set -e
          sudo apt-get install -y docker.io
          sudo systemctl enable --now docker
          sudo usermod -aG docker $USER
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker --version
          docker-compose --version
          echo "‚úÖ Docker & Docker Compose installed"

      - name: Start Vagrant VM
        run: |
          set -e
          for i in {1..3}; do
            echo "‚è≥ Attempt $i: Starting Vagrant VM..."
            if vagrant up --provider=virtualbox --provision; then
              echo "‚úÖ Vagrant VM is up"
              break
            else
              echo "‚ö†Ô∏è Vagrant up failed, retrying..."
              sleep 10
            fi
          done
          vagrant ssh -c "echo '‚úÖ Vagrant VM provisioned and ready'"

      - name: Build & Start Sniffer
        run: |
          set -e
          echo "üì¶ Compiling & launching sniffer..."
          vagrant ssh -c "cd /vagrant && make sniffer-start || echo '‚ö†Ô∏è Sniffer failed'"

      - name: Build & Launch Docker Compose
        run: |
          set -e
          for i in {1..3}; do
            echo "‚è≥ Attempt $i: Building & launching Docker Compose..."
            if vagrant ssh -c "cd /vagrant && docker-compose -f docker-compose.yaml build \
              && docker-compose -f docker-compose.yaml up -d"; then
              echo "‚úÖ Docker Compose launched"
              break
            else
              echo "‚ö†Ô∏è Attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: Wait for services to be healthy
        run: |
          set -e
          echo "‚è≥ Waiting for Docker services to become healthy..."
          vagrant ssh -c "cd /vagrant && docker-compose -f docker-compose.yaml ps"
          vagrant ssh -c "cd /vagrant && for svc in $(docker-compose -f docker-compose.yaml ps \
            --services); do echo '‚è≥ Waiting service: '$svc; \
            until [ \"$(docker inspect --format='{{.State.Health.Status}}' $svc)\" \
            == 'healthy' ]; do echo '   ‚ùå Not healthy yet'; sleep 5; done; \
            echo '‚úÖ Service '$svc' is healthy'; done"

      - name: Run Tests or Checks
        run: |
          set -e
          echo "üß™ Running test scripts..."
          vagrant ssh -c "cd /vagrant && ./scripts/run_tests.sh || \
            echo '‚ö†Ô∏è Tests script not found, skipping'"

      - name: Capture logs if failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è Job failed, capturing container logs..."
          vagrant ssh -c "cd /vagrant && docker-compose -f docker-compose.yaml logs"

      - name: Pipeline Summary
        run: |
          echo "====================================="
          echo "‚úÖ CI/CD pipeline completed for branch/tag: $GITHUB_REF"
          echo "====================================="
