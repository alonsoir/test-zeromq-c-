---
name: C++20 Sniffer CI Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

jobs:
  build-sniffer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake pkg-config \
            clang llvm bpftool \
            libbpf-dev libzmq3-dev libprotobuf-dev \
            libjsoncpp-dev liblz4-dev libzstd-dev \
            protobuf-compiler

      - name: Build sniffer
        run: |
          cd sniffer
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Verify artifacts
        run: |
          test -f sniffer/build/sniffer || exit 1
          test -f sniffer/build/sniffer.bpf.o || exit 1
          echo "✅ Sniffer built successfully"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sniffer-binaries
          path: |
            sniffer/build/sniffer
            sniffer/build/sniffer.bpf.o

  build-services:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          docker-compose build --parallel

      - name: Verify images
        run: |
          docker images | grep vagrant-service

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-sniffer, build-services]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start etcd
        run: |
          docker-compose up -d etcd
          sleep 10

      - name: Verify etcd health
        run: |
          docker-compose exec -T etcd /usr/local/bin/etcdctl \
            --endpoints=http://localhost:2379 endpoint health

      - name: Start services
        run: |
          docker-compose up -d service1 service2 service3
          sleep 15

      - name: Check service health
        run: |
          docker-compose ps
          docker-compose logs service1 | grep -i "registered\|connected" || true

      - name: Capture logs on failure
        if: failure()
        run: docker-compose logs

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Makefile syntax
        run: |
          make -n help || echo "Makefile has issues"

      - name: Validate JSON configs
        run: |
          python3 -m json.tool sniffer/config/sniffer.json > /dev/null
          echo "✅ JSON configs valid"