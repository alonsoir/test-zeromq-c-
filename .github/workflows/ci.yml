name: C++20 Sniffer CI/CD Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

jobs:
  build-sniffer:
    runs-on: debian-bookworm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          set -e
          apt-get update
          apt-get install -y \
            build-essential cmake pkg-config \
            clang llvm \
            libbpf-dev bpftool \
            libzmq3-dev libprotobuf-dev \
            libjsoncpp-dev liblz4-dev libzstd-dev \
            protobuf-compiler linux-headers-amd64

      - name: Verify dependencies
        run: |
          pkg-config --exists libbpf && echo "libbpf OK"
          pkg-config --exists libzmq && echo "libzmq OK"
          pkg-config --exists jsoncpp && echo "jsoncpp OK"
          pkg-config --exists protobuf && echo "protobuf OK"
          clang --version
          bpftool version

      - name: Build sniffer
        run: |
          cd sniffer
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_C_COMPILER=clang \
                   -DCMAKE_CXX_COMPILER=clang++
          make -j$(nproc)

      - name: Verify build artifacts
        run: |
          test -f sniffer/build/sniffer || (echo "sniffer binary not found" && exit 1)
          test -f sniffer/build/sniffer.bpf.o || (echo "eBPF program not found" && exit 1)
          ls -lh sniffer/build/sniffer*

      - name: Upload sniffer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sniffer-binaries
          path: |
            sniffer/build/sniffer
            sniffer/build/sniffer.bpf.o
          retention-days: 7

  build-services:
    runs-on: debian-bookworm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build --parallel service1 service2 service3

      - name: Verify Docker images
        run: |
          docker images | grep -E "vagrant-service[1-3]"

  integration-test:
    runs-on: debian-bookworm
    needs: [build-sniffer, build-services]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start etcd
        run: |
          docker compose up -d etcd
          sleep 10

      - name: Verify etcd health
        run: |
          docker compose exec -T etcd /usr/local/bin/etcdctl \
            --endpoints=http://localhost:2379 endpoint health

      - name: Start pipeline services
        run: |
          docker compose up -d service1 service2 service3
          sleep 20

      - name: Check services status
        run: |
          docker compose ps
          docker compose logs --tail=50 service1
          docker compose logs --tail=50 service2

      - name: Verify service communication
        run: |
          docker compose logs service2 | grep -i "connected\|registered" || echo "Waiting for registration"
          docker compose exec -T etcd /usr/local/bin/etcdctl \
            --endpoints=http://localhost:2379 get --prefix /services/

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs
          docker compose ps -a

      - name: Cleanup
        if: always()
        run: docker compose down -v

  validate-configs:
    runs-on: debian-bookworm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate JSON configs
        run: |
          python3 -m json.tool sniffer/config/sniffer.json > /dev/null
          echo "sniffer.json is valid"

      - name: Check Makefile syntax
        run: |
          make help

      - name: Validate docker-compose
        run: |
          docker compose config > /dev/null
          echo "docker-compose.yaml is valid"

  summary:
    runs-on: debian-bookworm
    needs: [build-sniffer, build-services, integration-test, validate-configs]
    if: always()

    steps:
      - name: Pipeline summary
        run: |
          echo "======================================"
          echo "CI/CD Pipeline Summary"
          echo "Branch/Tag: $GITHUB_REF"
          echo "Commit: $GITHUB_SHA"
          echo "======================================"
