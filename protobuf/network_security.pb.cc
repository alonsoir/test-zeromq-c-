// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/network_security.proto

#include "protobuf/network_security.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DistributedNode_NodeCapabilitiesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_CountryDistributionEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_PortDistributionEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_ProtocolDistributionEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeoLocationInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkFeatures_CustomFeaturesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkFeatures_FeatureMetadataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PipelineTracking_ComponentMetadataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_NetworkSecurityEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HumanFeedback;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RAGAnalysis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GeoEnrichment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HumanInTheLoopReview;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ModelPrediction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TimeWindow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DistributedNode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PipelineTracking;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TricapaMLAnalysis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_NetworkFeatures;
}  // namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto
namespace protobuf {
class NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkFeatures_CustomFeaturesEntry_DoNotUse>
      _instance;
} _NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_;
class NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkFeatures_FeatureMetadataEntry_DoNotUse>
      _instance;
} _NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_;
class NetworkFeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkFeatures>
      _instance;
} _NetworkFeatures_default_instance_;
class GeoLocationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoLocationInfo>
      _instance;
} _GeoLocationInfo_default_instance_;
class GeoEnrichmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoEnrichment>
      _instance;
} _GeoEnrichment_default_instance_;
class TimeWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeWindow>
      _instance;
} _TimeWindow_default_instance_;
class FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowAggregation_ProtocolDistributionEntry_DoNotUse>
      _instance;
} _FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowAggregation_PortDistributionEntry_DoNotUse>
      _instance;
} _FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowAggregation_CountryDistributionEntry_DoNotUse>
      _instance;
} _FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_;
class FlowAggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowAggregation>
      _instance;
} _FlowAggregation_default_instance_;
class ModelPredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelPrediction>
      _instance;
} _ModelPrediction_default_instance_;
class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse>
      _instance;
} _TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_;
class TricapaMLAnalysisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TricapaMLAnalysis>
      _instance;
} _TricapaMLAnalysis_default_instance_;
class DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedNode_NodeCapabilitiesEntry_DoNotUse>
      _instance;
} _DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_;
class DistributedNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedNode>
      _instance;
} _DistributedNode_default_instance_;
class PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PipelineTracking_ComponentMetadataEntry_DoNotUse>
      _instance;
} _PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_;
class PipelineTrackingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PipelineTracking>
      _instance;
} _PipelineTracking_default_instance_;
class RAGAnalysisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RAGAnalysis>
      _instance;
} _RAGAnalysis_default_instance_;
class HumanFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HumanFeedback>
      _instance;
} _HumanFeedback_default_instance_;
class HumanInTheLoopReviewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HumanInTheLoopReview>
      _instance;
} _HumanInTheLoopReview_default_instance_;
class NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse>
      _instance;
} _NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_;
class NetworkSecurityEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkSecurityEvent>
      _instance;
} _NetworkSecurityEvent_default_instance_;
class EventBatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventBatch>
      _instance;
} _EventBatch_default_instance_;
class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse>
      _instance;
} _SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_;
class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse>
      _instance;
} _SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_;
class SystemConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemConfiguration>
      _instance;
} _SystemConfiguration_default_instance_;
}  // namespace protobuf
namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto {
static void InitDefaultsNetworkFeatures_CustomFeaturesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse();
  }
  ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkFeatures_CustomFeaturesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkFeatures_CustomFeaturesEntry_DoNotUse}, {}};

static void InitDefaultsNetworkFeatures_FeatureMetadataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse();
  }
  ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkFeatures_FeatureMetadataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkFeatures_FeatureMetadataEntry_DoNotUse}, {}};

static void InitDefaultsNetworkFeatures() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_NetworkFeatures_default_instance_;
    new (ptr) ::protobuf::NetworkFeatures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::NetworkFeatures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_NetworkFeatures =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNetworkFeatures}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkFeatures_CustomFeaturesEntry_DoNotUse.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkFeatures_FeatureMetadataEntry_DoNotUse.base,}};

static void InitDefaultsGeoLocationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_GeoLocationInfo_default_instance_;
    new (ptr) ::protobuf::GeoLocationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::GeoLocationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeoLocationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeoLocationInfo}, {}};

static void InitDefaultsGeoEnrichment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_GeoEnrichment_default_instance_;
    new (ptr) ::protobuf::GeoEnrichment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::GeoEnrichment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GeoEnrichment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGeoEnrichment}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoLocationInfo.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTimeWindow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_TimeWindow_default_instance_;
    new (ptr) ::protobuf::TimeWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::TimeWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TimeWindow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTimeWindow}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsFlowAggregation_ProtocolDistributionEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse();
  }
  ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_ProtocolDistributionEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowAggregation_ProtocolDistributionEntry_DoNotUse}, {}};

static void InitDefaultsFlowAggregation_PortDistributionEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse();
  }
  ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_PortDistributionEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowAggregation_PortDistributionEntry_DoNotUse}, {}};

static void InitDefaultsFlowAggregation_CountryDistributionEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse();
  }
  ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowAggregation_CountryDistributionEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowAggregation_CountryDistributionEntry_DoNotUse}, {}};

static void InitDefaultsFlowAggregation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_FlowAggregation_default_instance_;
    new (ptr) ::protobuf::FlowAggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::FlowAggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FlowAggregation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFlowAggregation}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TimeWindow.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_FlowAggregation_ProtocolDistributionEntry_DoNotUse.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_FlowAggregation_PortDistributionEntry_DoNotUse.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_FlowAggregation_CountryDistributionEntry_DoNotUse.base,}};

static void InitDefaultsModelPrediction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_ModelPrediction_default_instance_;
    new (ptr) ::protobuf::ModelPrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::ModelPrediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ModelPrediction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsModelPrediction}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsTricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse();
  }
  ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse}, {}};

static void InitDefaultsTricapaMLAnalysis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_TricapaMLAnalysis_default_instance_;
    new (ptr) ::protobuf::TricapaMLAnalysis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::TricapaMLAnalysis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TricapaMLAnalysis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTricapaMLAnalysis}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_ModelPrediction.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse.base,}};

static void InitDefaultsDistributedNode_NodeCapabilitiesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse();
  }
  ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistributedNode_NodeCapabilitiesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistributedNode_NodeCapabilitiesEntry_DoNotUse}, {}};

static void InitDefaultsDistributedNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_DistributedNode_default_instance_;
    new (ptr) ::protobuf::DistributedNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::DistributedNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DistributedNode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDistributedNode}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_DistributedNode_NodeCapabilitiesEntry_DoNotUse.base,}};

static void InitDefaultsPipelineTracking_ComponentMetadataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse();
  }
  ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PipelineTracking_ComponentMetadataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPipelineTracking_ComponentMetadataEntry_DoNotUse}, {}};

static void InitDefaultsPipelineTracking() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_PipelineTracking_default_instance_;
    new (ptr) ::protobuf::PipelineTracking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::PipelineTracking::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PipelineTracking =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPipelineTracking}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_PipelineTracking_ComponentMetadataEntry_DoNotUse.base,}};

static void InitDefaultsRAGAnalysis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_RAGAnalysis_default_instance_;
    new (ptr) ::protobuf::RAGAnalysis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::RAGAnalysis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RAGAnalysis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRAGAnalysis}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsHumanFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HumanFeedback_default_instance_;
    new (ptr) ::protobuf::HumanFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::HumanFeedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HumanFeedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHumanFeedback}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsHumanInTheLoopReview() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HumanInTheLoopReview_default_instance_;
    new (ptr) ::protobuf::HumanInTheLoopReview();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::HumanInTheLoopReview::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HumanInTheLoopReview =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHumanInTheLoopReview}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanFeedback.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsNetworkSecurityEvent_CustomMetadataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse();
  }
  ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkSecurityEvent_CustomMetadataEntry_DoNotUse}, {}};

static void InitDefaultsNetworkSecurityEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_NetworkSecurityEvent_default_instance_;
    new (ptr) ::protobuf::NetworkSecurityEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::NetworkSecurityEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_NetworkSecurityEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsNetworkSecurityEvent}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkFeatures.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoEnrichment.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TimeWindow.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TricapaMLAnalysis.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_ModelPrediction.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_DistributedNode.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_PipelineTracking.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_RAGAnalysis.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanInTheLoopReview.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse.base,}};

static void InitDefaultsEventBatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_EventBatch_default_instance_;
    new (ptr) ::protobuf::EventBatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::EventBatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EventBatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEventBatch}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkSecurityEvent.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsSystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse();
  }
  ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse}, {}};

static void InitDefaultsSystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse();
  }
  ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse}, {}};

static void InitDefaultsSystemConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_SystemConfiguration_default_instance_;
    new (ptr) ::protobuf::SystemConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::SystemConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SystemConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSystemConfiguration}, {
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_DistributedNode.base,
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkFeatures_CustomFeaturesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkFeatures_FeatureMetadataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkFeatures.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoLocationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeoEnrichment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeWindow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowAggregation_ProtocolDistributionEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowAggregation_PortDistributionEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowAggregation_CountryDistributionEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowAggregation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelPrediction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TricapaMLAnalysis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedNode_NodeCapabilitiesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedNode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PipelineTracking_ComponentMetadataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PipelineTracking.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RAGAnalysis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HumanFeedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HumanInTheLoopReview.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkSecurityEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventBatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemConfiguration.base);
}

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, source_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, destination_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, source_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, destination_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, protocol_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, protocol_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_duration_microseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, total_forward_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, total_backward_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, total_forward_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, total_backward_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_packet_length_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_packet_length_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_packet_length_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_packet_length_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_packet_length_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_packet_length_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_packet_length_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_packet_length_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_bytes_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_packets_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_packets_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_packets_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, download_upload_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, average_packet_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, average_forward_segment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, average_backward_segment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_inter_arrival_time_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_inter_arrival_time_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_inter_arrival_time_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, flow_inter_arrival_time_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_inter_arrival_time_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_inter_arrival_time_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_inter_arrival_time_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_inter_arrival_time_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_inter_arrival_time_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_inter_arrival_time_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_inter_arrival_time_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_inter_arrival_time_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_inter_arrival_time_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_inter_arrival_time_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, fin_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, syn_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, rst_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, psh_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, ack_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, urg_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, cwe_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, ece_flag_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_psh_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_psh_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_urg_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_urg_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_header_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_header_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_average_bytes_bulk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_average_packets_bulk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, forward_average_bulk_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_average_bytes_bulk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_average_packets_bulk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, backward_average_bulk_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, minimum_packet_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, maximum_packet_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, packet_length_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, packet_length_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, packet_length_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, ddos_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, ransomware_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, general_attack_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, internal_traffic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, custom_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkFeatures, feature_metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, country_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, region_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, city_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, isp_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, organization_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, autonomous_system_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, is_anonymous_proxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, is_satellite_provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, is_tor_exit_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, is_known_malicious_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoLocationInfo, threat_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_node_geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, source_ip_geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, destination_ip_geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, source_destination_distance_km_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, source_destination_same_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, source_destination_same_continent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, distance_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_source_distance_km_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_source_same_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_source_relationship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_destination_distance_km_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_destination_same_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_destination_relationship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, threat_intelligence_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, threat_intelligence_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, geographic_anomaly_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, suspicious_geographic_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, sniffer_node_enriched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, source_ip_enriched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, destination_ip_enriched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, enrichment_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, public_ip_discovery_attempted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, original_private_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, discovered_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, ip_discovery_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, ip_discovery_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, enricher_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, geoip_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, geoip_database_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, fallback_coordinates_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, total_lookup_latency_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, cache_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, cache_misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, enrichment_success_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::GeoEnrichment, enrichment_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, window_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, window_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, window_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TimeWindow, window_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, time_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, total_flows_in_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, total_packets_in_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, total_bytes_in_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, protocol_distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, port_distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, country_distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::FlowAggregation, window_anomaly_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, model_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, model_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, prediction_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, confidence_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, class_probabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, prediction_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::ModelPrediction, processing_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, level1_general_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, attack_detected_level1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, level1_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, level2_context_classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, traffic_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, level3_specialized_predictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, final_threat_classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, ensemble_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, total_analysis_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, models_activated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, feature_importance_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, requires_human_review_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, physical_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, last_heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, operating_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, os_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, agent_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, cpu_usage_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, memory_usage_mb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, active_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, queue_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, node_capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, supported_protocols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::DistributedNode, configuration_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, pipeline_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, pipeline_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, sniffer_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, processor_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, enricher_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, analyzer_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, detector_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, controller_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, packet_captured_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, features_extracted_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, geoip_enriched_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, ml_analyzed_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, threat_detected_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, action_taken_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, total_processing_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, pipeline_hops_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, processing_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, retry_attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, processing_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, requires_reprocessing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, component_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::PipelineTracking, processing_tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, retrieved_knowledge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, relevance_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, ai_generated_analysis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, analysis_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, knowledge_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::RAGAnalysis, analysis_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, feedback_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, analyst_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, event_reference_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, feedback_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, confirmed_true_positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, confirmed_false_positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, analyst_explanation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, analyst_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, analyst_confidence_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanFeedback, feedback_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, requires_human_analysis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, review_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, review_reasons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, analyst_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, escalated_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, reviewed_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, review_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, event_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, originating_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, network_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, geo_enrichment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, time_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, ml_analysis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, additional_model_predictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, capturing_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, pipeline_tracking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, rag_analysis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, human_review_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, overall_threat_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, final_classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, threat_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, related_event_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, event_chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, schema_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, custom_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, event_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, protobuf_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, batch_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, batch_created_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, processing_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::EventBatch, batch_source_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, enabled_ml_models_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, threat_score_thresholds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, time_window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, max_events_per_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, cluster_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, node_role_assignments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, encryption_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, compression_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, encryption_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, rag_analysis_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, rag_model_endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SystemConfiguration, knowledge_base_sources_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse)},
  { 9, 16, sizeof(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse)},
  { 18, -1, sizeof(::protobuf::NetworkFeatures)},
  { 97, -1, sizeof(::protobuf::GeoLocationInfo)},
  { 117, -1, sizeof(::protobuf::GeoEnrichment)},
  { 157, -1, sizeof(::protobuf::TimeWindow)},
  { 167, 174, sizeof(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse)},
  { 176, 183, sizeof(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse)},
  { 185, 192, sizeof(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse)},
  { 194, -1, sizeof(::protobuf::FlowAggregation)},
  { 207, -1, sizeof(::protobuf::ModelPrediction)},
  { 220, 227, sizeof(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse)},
  { 229, -1, sizeof(::protobuf::TricapaMLAnalysis)},
  { 246, 253, sizeof(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse)},
  { 255, -1, sizeof(::protobuf::DistributedNode)},
  { 281, 288, sizeof(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse)},
  { 290, -1, sizeof(::protobuf::PipelineTracking)},
  { 317, -1, sizeof(::protobuf::RAGAnalysis)},
  { 329, -1, sizeof(::protobuf::HumanFeedback)},
  { 344, -1, sizeof(::protobuf::HumanInTheLoopReview)},
  { 356, 363, sizeof(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse)},
  { 365, -1, sizeof(::protobuf::NetworkSecurityEvent)},
  { 392, -1, sizeof(::protobuf::EventBatch)},
  { 403, 410, sizeof(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse)},
  { 412, 419, sizeof(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse)},
  { 421, -1, sizeof(::protobuf::SystemConfiguration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_NetworkFeatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_GeoLocationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_GeoEnrichment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_TimeWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_FlowAggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_ModelPrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_TricapaMLAnalysis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_DistributedNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_PipelineTracking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_RAGAnalysis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_HumanFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_HumanInTheLoopReview_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_NetworkSecurityEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_EventBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_SystemConfiguration_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protobuf/network_security.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037protobuf/network_security.proto\022\010proto"
      "buf\032\037google/protobuf/timestamp.proto\032\036go"
      "ogle/protobuf/duration.proto\"\330\024\n\017Network"
      "Features\022\021\n\tsource_ip\030\001 \001(\t\022\026\n\016destinati"
      "on_ip\030\002 \001(\t\022\023\n\013source_port\030\003 \001(\r\022\030\n\020dest"
      "ination_port\030\004 \001(\r\022\027\n\017protocol_number\030\005 "
      "\001(\r\022\025\n\rprotocol_name\030\006 \001(\t\0223\n\017flow_start"
      "_time\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
      "0\n\rflow_duration\030\010 \001(\0132\031.google.protobuf"
      ".Duration\022\"\n\032flow_duration_microseconds\030"
      "\t \001(\004\022\035\n\025total_forward_packets\030\n \001(\004\022\036\n\026"
      "total_backward_packets\030\013 \001(\004\022\033\n\023total_fo"
      "rward_bytes\030\014 \001(\004\022\034\n\024total_backward_byte"
      "s\030\r \001(\004\022!\n\031forward_packet_length_max\030\024 \001"
      "(\004\022!\n\031forward_packet_length_min\030\025 \001(\004\022\"\n"
      "\032forward_packet_length_mean\030\026 \001(\001\022!\n\031for"
      "ward_packet_length_std\030\027 \001(\001\022\"\n\032backward"
      "_packet_length_max\030\036 \001(\004\022\"\n\032backward_pac"
      "ket_length_min\030\037 \001(\004\022#\n\033backward_packet_"
      "length_mean\030  \001(\001\022\"\n\032backward_packet_len"
      "gth_std\030! \001(\001\022\035\n\025flow_bytes_per_second\030("
      " \001(\001\022\037\n\027flow_packets_per_second\030) \001(\001\022\"\n"
      "\032forward_packets_per_second\030* \001(\001\022#\n\033bac"
      "kward_packets_per_second\030+ \001(\001\022\035\n\025downlo"
      "ad_upload_ratio\030, \001(\001\022\033\n\023average_packet_"
      "size\030- \001(\001\022$\n\034average_forward_segment_si"
      "ze\030. \001(\001\022%\n\035average_backward_segment_siz"
      "e\030/ \001(\001\022$\n\034flow_inter_arrival_time_mean\030"
      "2 \001(\001\022#\n\033flow_inter_arrival_time_std\0303 \001"
      "(\001\022#\n\033flow_inter_arrival_time_max\0304 \001(\004\022"
      "#\n\033flow_inter_arrival_time_min\0305 \001(\004\022(\n "
      "forward_inter_arrival_time_total\0306 \001(\001\022\'"
      "\n\037forward_inter_arrival_time_mean\0307 \001(\001\022"
      "&\n\036forward_inter_arrival_time_std\0308 \001(\001\022"
      "&\n\036forward_inter_arrival_time_max\0309 \001(\004\022"
      "&\n\036forward_inter_arrival_time_min\030: \001(\004\022"
      ")\n!backward_inter_arrival_time_total\030; \001"
      "(\001\022(\n backward_inter_arrival_time_mean\030<"
      " \001(\001\022\'\n\037backward_inter_arrival_time_std\030"
      "= \001(\001\022\'\n\037backward_inter_arrival_time_max"
      "\030> \001(\004\022\'\n\037backward_inter_arrival_time_mi"
      "n\030\? \001(\004\022\026\n\016fin_flag_count\030F \001(\r\022\026\n\016syn_f"
      "lag_count\030G \001(\r\022\026\n\016rst_flag_count\030H \001(\r\022"
      "\026\n\016psh_flag_count\030I \001(\r\022\026\n\016ack_flag_coun"
      "t\030J \001(\r\022\026\n\016urg_flag_count\030K \001(\r\022\026\n\016cwe_f"
      "lag_count\030L \001(\r\022\026\n\016ece_flag_count\030M \001(\r\022"
      "\031\n\021forward_psh_flags\030N \001(\r\022\032\n\022backward_p"
      "sh_flags\030O \001(\r\022\031\n\021forward_urg_flags\030P \001("
      "\r\022\032\n\022backward_urg_flags\030Q \001(\r\022\035\n\025forward"
      "_header_length\030U \001(\001\022\036\n\026backward_header_"
      "length\030V \001(\001\022\"\n\032forward_average_bytes_bu"
      "lk\030W \001(\001\022$\n\034forward_average_packets_bulk"
      "\030X \001(\001\022!\n\031forward_average_bulk_rate\030Y \001("
      "\001\022#\n\033backward_average_bytes_bulk\030Z \001(\001\022%"
      "\n\035backward_average_packets_bulk\030[ \001(\001\022\"\n"
      "\032backward_average_bulk_rate\030\\ \001(\001\022\035\n\025min"
      "imum_packet_length\030_ \001(\004\022\035\n\025maximum_pack"
      "et_length\030` \001(\004\022\032\n\022packet_length_mean\030a "
      "\001(\001\022\031\n\021packet_length_std\030b \001(\001\022\036\n\026packet"
      "_length_variance\030c \001(\001\022\025\n\rddos_features\030"
      "d \003(\001\022\033\n\023ransomware_features\030e \003(\001\022\037\n\027ge"
      "neral_attack_features\030f \003(\001\022!\n\031internal_"
      "traffic_features\030g \003(\001\022F\n\017custom_feature"
      "s\030n \003(\0132-.protobuf.NetworkFeatures.Custo"
      "mFeaturesEntry\022H\n\020feature_metadata\030o \003(\013"
      "2..protobuf.NetworkFeatures.FeatureMetad"
      "ataEntry\0325\n\023CustomFeaturesEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0326\n\024FeatureMetada"
      "taEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
      "\342\003\n\017GeoLocationInfo\022\024\n\014country_name\030\001 \001("
      "\t\022\024\n\014country_code\030\002 \001(\t\022\023\n\013region_name\030\003"
      " \001(\t\022\021\n\tcity_name\030\004 \001(\t\022\020\n\010latitude\030\005 \001("
      "\001\022\021\n\tlongitude\030\006 \001(\001\022\020\n\010timezone\030\007 \001(\t\022\020"
      "\n\010isp_name\030\010 \001(\t\022\031\n\021organization_name\030\t "
      "\001(\t\022 \n\030autonomous_system_number\030\n \001(\t\022\032\n"
      "\022is_anonymous_proxy\030\013 \001(\010\022\035\n\025is_satellit"
      "e_provider\030\014 \001(\010\022\030\n\020is_tor_exit_node\030\r \001"
      "(\010\022\032\n\022is_known_malicious\030\016 \001(\010\022;\n\014threat"
      "_level\030\017 \001(\0162%.protobuf.GeoLocationInfo."
      "ThreatLevel\"G\n\013ThreatLevel\022\013\n\007UNKNOWN\020\000\022"
      "\007\n\003LOW\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004HIGH\020\003\022\014\n\010CRITIC"
      "AL\020\004\"\212\n\n\rGeoEnrichment\0223\n\020sniffer_node_g"
      "eo\030\001 \001(\0132\031.protobuf.GeoLocationInfo\0220\n\rs"
      "ource_ip_geo\030\002 \001(\0132\031.protobuf.GeoLocatio"
      "nInfo\0225\n\022destination_ip_geo\030\003 \001(\0132\031.prot"
      "obuf.GeoLocationInfo\022&\n\036source_destinati"
      "on_distance_km\030\n \001(\001\022\'\n\037source_destinati"
      "on_same_country\030\013 \001(\010\022)\n!source_destinat"
      "ion_same_continent\030\014 \001(\010\022\031\n\021distance_cat"
      "egory\030\r \001(\t\022\"\n\032sniffer_source_distance_k"
      "m\030\024 \001(\001\022#\n\033sniffer_source_same_country\030\025"
      " \001(\010\022#\n\033sniffer_source_relationship\030\026 \001("
      "\t\022\'\n\037sniffer_destination_distance_km\030\031 \001"
      "(\001\022(\n sniffer_destination_same_country\030\032"
      " \001(\010\022(\n sniffer_destination_relationship"
      "\030\033 \001(\t\022#\n\033threat_intelligence_matches\030\036 "
      "\003(\t\022\"\n\032threat_intelligence_source\030\037 \001(\t\022"
      " \n\030geographic_anomaly_score\030  \001(\002\022%\n\035sus"
      "picious_geographic_pattern\030! \001(\010\022\035\n\025snif"
      "fer_node_enriched\030( \001(\010\022\032\n\022source_ip_enr"
      "iched\030) \001(\010\022\037\n\027destination_ip_enriched\030*"
      " \001(\010\022\033\n\023enrichment_complete\030+ \001(\010\022%\n\035pub"
      "lic_ip_discovery_attempted\030- \001(\010\022\033\n\023orig"
      "inal_private_ip\030. \001(\t\022\034\n\024discovered_publ"
      "ic_ip\030/ \001(\t\022\034\n\024ip_discovery_service\0300 \001("
      "\t\0225\n\021ip_discovery_time\0301 \001(\0132\032.google.pr"
      "otobuf.Timestamp\022\030\n\020enricher_version\0302 \001"
      "(\t\022\024\n\014geoip_method\0303 \001(\t\022\036\n\026geoip_databa"
      "se_version\0304 \001(\t\022!\n\031fallback_coordinates"
      "_used\0305 \001(\010\022\037\n\027total_lookup_latency_ms\0306"
      " \001(\002\022\022\n\ncache_hits\0307 \001(\005\022\024\n\014cache_misses"
      "\0308 \001(\005\022\037\n\027enrichment_success_rate\0309 \001(\002\022"
      "8\n\024enrichment_timestamp\030: \001(\0132\032.google.p"
      "rotobuf.Timestamp\"\273\002\n\nTimeWindow\0220\n\014wind"
      "ow_start\030\001 \001(\0132\032.google.protobuf.Timesta"
      "mp\022.\n\nwindow_end\030\002 \001(\0132\032.google.protobuf"
      ".Timestamp\0222\n\017window_duration\030\003 \001(\0132\031.go"
      "ogle.protobuf.Duration\022\027\n\017sequence_numbe"
      "r\030\004 \001(\004\0224\n\013window_type\030\005 \001(\0162\037.protobuf."
      "TimeWindow.WindowType\"H\n\nWindowType\022\013\n\007S"
      "LIDING\020\000\022\014\n\010TUMBLING\020\001\022\021\n\rSESSION_BASED\020"
      "\002\022\014\n\010ADAPTIVE\020\003\"\335\004\n\017FlowAggregation\022)\n\013t"
      "ime_window\030\001 \001(\0132\024.protobuf.TimeWindow\022\035"
      "\n\025total_flows_in_window\030\002 \001(\004\022\037\n\027total_p"
      "ackets_in_window\030\003 \001(\004\022\035\n\025total_bytes_in"
      "_window\030\004 \001(\004\022R\n\025protocol_distribution\030\005"
      " \003(\01323.protobuf.FlowAggregation.Protocol"
      "DistributionEntry\022J\n\021port_distribution\030\006"
      " \003(\0132/.protobuf.FlowAggregation.PortDist"
      "ributionEntry\022P\n\024country_distribution\030\007 "
      "\003(\01322.protobuf.FlowAggregation.CountryDi"
      "stributionEntry\022\034\n\024window_anomaly_score\030"
      "\010 \001(\001\032;\n\031ProtocolDistributionEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\004:\0028\001\0327\n\025PortDistri"
      "butionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\004:"
      "\0028\001\032:\n\030CountryDistributionEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\004:\0028\001\"\344\003\n\017ModelPredict"
      "ion\022\022\n\nmodel_name\030\001 \001(\t\022\025\n\rmodel_version"
      "\030\002 \001(\t\0227\n\nmodel_type\030\003 \001(\0162#.protobuf.Mo"
      "delPrediction.ModelType\022\030\n\020prediction_cl"
      "ass\030\004 \001(\t\022\030\n\020confidence_score\030\005 \001(\001\022\033\n\023c"
      "lass_probabilities\030\006 \003(\001\0228\n\024prediction_t"
      "imestamp\030\007 \001(\0132\032.google.protobuf.Timesta"
      "mp\0226\n\023processing_duration\030\010 \001(\0132\031.google"
      ".protobuf.Duration\"\251\001\n\tModelType\022\031\n\025RAND"
      "OM_FOREST_GENERAL\020\000\022\021\n\rLIGHTGBM_DDOS\020\001\022\035"
      "\n\031NEURAL_NETWORK_RANSOMWARE\020\002\022\024\n\020ENSEMBL"
      "E_TRICAPA\020\003\022\037\n\033INTERNAL_TRAFFIC_CLASSIFI"
      "ER\020\004\022\030\n\024TRANSFORMER_ADVANCED\020\005\"\375\004\n\021Trica"
      "paMLAnalysis\022;\n\030level1_general_detection"
      "\030\001 \001(\0132\031.protobuf.ModelPrediction\022\036\n\026att"
      "ack_detected_level1\030\002 \001(\010\022\031\n\021level1_conf"
      "idence\030\003 \001(\001\022@\n\035level2_context_classific"
      "ation\030\004 \001(\0132\031.protobuf.ModelPrediction\022\027"
      "\n\017traffic_context\030\005 \001(\t\022A\n\036level3_specia"
      "lized_predictions\030\006 \003(\0132\031.protobuf.Model"
      "Prediction\022#\n\033final_threat_classificatio"
      "n\030\007 \001(\t\022\033\n\023ensemble_confidence\030\010 \001(\001\022:\n\027"
      "total_analysis_duration\030\n \001(\0132\031.google.p"
      "rotobuf.Duration\022\030\n\020models_activated\030\013 \003"
      "(\t\022[\n\031feature_importance_scores\030\014 \003(\01328."
      "protobuf.TricapaMLAnalysis.FeatureImport"
      "anceScoresEntry\022\035\n\025requires_human_review"
      "\030\r \001(\010\032>\n\034FeatureImportanceScoresEntry\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\236\010\n\017Distr"
      "ibutedNode\022\017\n\007node_id\030\001 \001(\t\022\025\n\rnode_host"
      "name\030\002 \001(\t\022\027\n\017node_ip_address\030\003 \001(\t\022\031\n\021p"
      "hysical_location\030\004 \001(\t\0225\n\tnode_role\030\005 \001("
      "\0162\".protobuf.DistributedNode.NodeRole\0229\n"
      "\013node_status\030\006 \001(\0162$.protobuf.Distribute"
      "dNode.NodeStatus\0222\n\016last_heartbeat\030\007 \001(\013"
      "2\032.google.protobuf.Timestamp\022\030\n\020operatin"
      "g_system\030\010 \001(\t\022\022\n\nos_version\030\t \001(\t\022\025\n\rag"
      "ent_version\030\n \001(\t\022\022\n\nprocess_id\030\013 \001(\005\022\024\n"
      "\014container_id\030\014 \001(\t\022\024\n\014cluster_name\030\r \001("
      "\t\022\031\n\021cpu_usage_percent\030\017 \001(\002\022\027\n\017memory_u"
      "sage_mb\030\020 \001(\002\022\032\n\022active_connections\030\021 \001("
      "\005\022\023\n\013queue_depth\030\022 \001(\005\022)\n\006uptime\030\023 \001(\0132\031"
      ".google.protobuf.Duration\022J\n\021node_capabi"
      "lities\030\024 \003(\0132/.protobuf.DistributedNode."
      "NodeCapabilitiesEntry\022\033\n\023supported_proto"
      "cols\030\025 \003(\t\022\035\n\025configuration_version\030\026 \001("
      "\t\0327\n\025NodeCapabilitiesEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\t:\0028\001\"\320\001\n\010NodeRole\022\022\n\016PACKE"
      "T_SNIFFER\020\000\022\025\n\021FEATURE_PROCESSOR\020\001\022\022\n\016GE"
      "OIP_ENRICHER\020\002\022\017\n\013ML_ANALYZER\020\003\022\023\n\017THREA"
      "T_DETECTOR\020\004\022\027\n\023FIREWALL_CONTROLLER\020\005\022\023\n"
      "\017DATA_AGGREGATOR\020\006\022\030\n\024DASHBOARD_VISUALIZ"
      "ER\020\007\022\027\n\023CLUSTER_COORDINATOR\020\010\"`\n\nNodeSta"
      "tus\022\n\n\006ACTIVE\020\000\022\014\n\010STARTING\020\001\022\014\n\010STOPPIN"
      "G\020\002\022\t\n\005ERROR\020\003\022\017\n\013MAINTENANCE\020\004\022\016\n\nOVERL"
      "OADED\020\005\"\275\007\n\020PipelineTracking\022\023\n\013pipeline"
      "_id\030\001 \001(\t\0222\n\016pipeline_start\030\002 \001(\0132\032.goog"
      "le.protobuf.Timestamp\022\032\n\022sniffer_process"
      "_id\030\003 \001(\005\022\034\n\024processor_process_id\030\004 \001(\005\022"
      "\033\n\023enricher_process_id\030\005 \001(\005\022\033\n\023analyzer"
      "_process_id\030\006 \001(\005\022\033\n\023detector_process_id"
      "\030\007 \001(\005\022\035\n\025controller_process_id\030\010 \001(\005\0226\n"
      "\022packet_captured_at\030\n \001(\0132\032.google.proto"
      "buf.Timestamp\0229\n\025features_extracted_at\030\013"
      " \001(\0132\032.google.protobuf.Timestamp\0225\n\021geoi"
      "p_enriched_at\030\014 \001(\0132\032.google.protobuf.Ti"
      "mestamp\0222\n\016ml_analyzed_at\030\r \001(\0132\032.google"
      ".protobuf.Timestamp\0226\n\022threat_detected_a"
      "t\030\016 \001(\0132\032.google.protobuf.Timestamp\0223\n\017a"
      "ction_taken_at\030\017 \001(\0132\032.google.protobuf.T"
      "imestamp\022;\n\030total_processing_latency\030\024 \001"
      "(\0132\031.google.protobuf.Duration\022\033\n\023pipelin"
      "e_hops_count\030\025 \001(\005\022\027\n\017processing_path\030\026 "
      "\001(\t\022\026\n\016retry_attempts\030\031 \001(\005\022\031\n\021processin"
      "g_errors\030\032 \003(\t\022\035\n\025requires_reprocessing\030"
      "\033 \001(\010\022M\n\022component_metadata\030\036 \003(\01321.prot"
      "obuf.PipelineTracking.ComponentMetadataE"
      "ntry\022\027\n\017processing_tags\030\037 \003(\t\0328\n\026Compone"
      "ntMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\"\347\001\n\013RAGAnalysis\022\022\n\nquery_text\030\001 "
      "\001(\t\022\033\n\023retrieved_knowledge\030\002 \003(\t\022\030\n\020rele"
      "vance_scores\030\003 \003(\001\022\035\n\025ai_generated_analy"
      "sis\030\004 \001(\t\022\033\n\023analysis_confidence\030\005 \001(\001\022\031"
      "\n\021knowledge_sources\030\006 \003(\t\0226\n\022analysis_ti"
      "mestamp\030\007 \001(\0132\032.google.protobuf.Timestam"
      "p\"\333\003\n\rHumanFeedback\022\023\n\013feedback_id\030\001 \001(\t"
      "\022\027\n\017analyst_user_id\030\002 \001(\t\022\032\n\022event_refer"
      "ence_id\030\003 \001(\t\022;\n\rfeedback_type\030\004 \001(\0162$.p"
      "rotobuf.HumanFeedback.FeedbackType\022\037\n\027co"
      "nfirmed_true_positive\030\005 \001(\010\022 \n\030confirmed"
      "_false_positive\030\006 \001(\010\022\033\n\023analyst_explana"
      "tion\030\007 \001(\t\022\024\n\014analyst_tags\030\010 \003(\t\022!\n\031anal"
      "yst_confidence_rating\030\t \001(\005\0226\n\022feedback_"
      "timestamp\030\n \001(\0132\032.google.protobuf.Timest"
      "amp\"r\n\014FeedbackType\022\016\n\nVALIDATION\020\000\022\016\n\nC"
      "ORRECTION\020\001\022\017\n\013ENHANCEMENT\020\002\022\031\n\025FALSE_PO"
      "SITIVE_REPORT\020\003\022\026\n\022ADDITIONAL_CONTEXT\020\004\""
      "\243\003\n\024HumanInTheLoopReview\022\037\n\027requires_hum"
      "an_analysis\030\001 \001(\010\022F\n\017review_priority\030\002 \001"
      "(\0162-.protobuf.HumanInTheLoopReview.Revie"
      "wPriority\022\026\n\016review_reasons\030\003 \003(\t\0221\n\020ana"
      "lyst_feedback\030\004 \001(\0132\027.protobuf.HumanFeed"
      "back\0227\n\023escalated_timestamp\030\005 \001(\0132\032.goog"
      "le.protobuf.Timestamp\0226\n\022reviewed_timest"
      "amp\030\006 \001(\0132\032.google.protobuf.Timestamp\022\030\n"
      "\020review_completed\030\007 \001(\010\"L\n\016ReviewPriorit"
      "y\022\007\n\003LOW\020\000\022\n\n\006MEDIUM\020\001\022\010\n\004HIGH\020\002\022\014\n\010CRIT"
      "ICAL\020\003\022\r\n\tEMERGENCY\020\004\"\265\007\n\024NetworkSecurit"
      "yEvent\022\020\n\010event_id\030\001 \001(\t\0223\n\017event_timest"
      "amp\030\002 \001(\0132\032.google.protobuf.Timestamp\022\033\n"
      "\023originating_node_id\030\003 \001(\t\0223\n\020network_fe"
      "atures\030\004 \001(\0132\031.protobuf.NetworkFeatures\022"
      "/\n\016geo_enrichment\030\005 \001(\0132\027.protobuf.GeoEn"
      "richment\022)\n\013time_window\030\006 \001(\0132\024.protobuf"
      ".TimeWindow\0220\n\013ml_analysis\030\007 \001(\0132\033.proto"
      "buf.TricapaMLAnalysis\022\?\n\034additional_mode"
      "l_predictions\030\010 \003(\0132\031.protobuf.ModelPred"
      "iction\0221\n\016capturing_node\030\t \001(\0132\031.protobu"
      "f.DistributedNode\0225\n\021pipeline_tracking\030\n"
      " \001(\0132\032.protobuf.PipelineTracking\022+\n\014rag_"
      "analysis\030\013 \001(\0132\025.protobuf.RAGAnalysis\0224\n"
      "\014human_review\030\014 \001(\0132\036.protobuf.HumanInTh"
      "eLoopReview\022\034\n\024overall_threat_score\030\017 \001("
      "\001\022\034\n\024final_classification\030\020 \001(\t\022\027\n\017threa"
      "t_category\030\021 \001(\t\022\026\n\016correlation_id\030\024 \001(\t"
      "\022\031\n\021related_event_ids\030\025 \003(\t\022\026\n\016event_cha"
      "in_id\030\026 \001(\t\022\026\n\016schema_version\030\031 \001(\r\022K\n\017c"
      "ustom_metadata\030\032 \003(\01322.protobuf.NetworkS"
      "ecurityEvent.CustomMetadataEntry\022\022\n\neven"
      "t_tags\030\033 \003(\t\022\030\n\020protobuf_version\030\034 \001(\t\0325"
      "\n\023CustomMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\t:\0028\001\"\325\002\n\nEventBatch\022.\n\006events\030\001"
      " \003(\0132\036.protobuf.NetworkSecurityEvent\022\020\n\010"
      "batch_id\030\002 \001(\004\0224\n\020batch_created_at\030\003 \001(\013"
      "2\032.google.protobuf.Timestamp\022\022\n\nbatch_si"
      "ze\030\004 \001(\r\022<\n\017processing_mode\030\005 \001(\0162#.prot"
      "obuf.EventBatch.ProcessingMode\022\031\n\021batch_"
      "source_node\030\006 \001(\t\"b\n\016ProcessingMode\022\r\n\tR"
      "EAL_TIME\020\000\022\022\n\016NEAR_REAL_TIME\020\001\022\024\n\020BATCH_"
      "PROCESSING\020\002\022\027\n\023HISTORICAL_ANALYSIS\020\003\"\223\005"
      "\n\023SystemConfiguration\022\031\n\021enabled_ml_mode"
      "ls\030\001 \003(\t\022Y\n\027threat_score_thresholds\030\002 \003("
      "\01328.protobuf.SystemConfiguration.ThreatS"
      "coreThresholdsEntry\0223\n\020time_window_size\030"
      "\003 \001(\0132\031.google.protobuf.Duration\022\035\n\025max_"
      "events_per_window\030\004 \001(\r\0220\n\rcluster_nodes"
      "\030\005 \003(\0132\031.protobuf.DistributedNode\022U\n\025nod"
      "e_role_assignments\030\006 \003(\01326.protobuf.Syst"
      "emConfiguration.NodeRoleAssignmentsEntry"
      "\022\032\n\022encryption_enabled\030\007 \001(\010\022\033\n\023compress"
      "ion_enabled\030\010 \001(\010\022\034\n\024encryption_algorith"
      "m\030\t \001(\t\022\034\n\024rag_analysis_enabled\030\n \001(\010\022\032\n"
      "\022rag_model_endpoint\030\013 \001(\t\022\036\n\026knowledge_b"
      "ase_sources\030\014 \003(\t\032<\n\032ThreatScoreThreshol"
      "dsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\032"
      ":\n\030NodeRoleAssignmentsEntry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 11707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/network_security.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto
namespace protobuf {
const ::google::protobuf::EnumDescriptor* GeoLocationInfo_ThreatLevel_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[0];
}
bool GeoLocationInfo_ThreatLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GeoLocationInfo_ThreatLevel GeoLocationInfo::UNKNOWN;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::LOW;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::MEDIUM;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::HIGH;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::CRITICAL;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::ThreatLevel_MIN;
const GeoLocationInfo_ThreatLevel GeoLocationInfo::ThreatLevel_MAX;
const int GeoLocationInfo::ThreatLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeWindow_WindowType_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[1];
}
bool TimeWindow_WindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeWindow_WindowType TimeWindow::SLIDING;
const TimeWindow_WindowType TimeWindow::TUMBLING;
const TimeWindow_WindowType TimeWindow::SESSION_BASED;
const TimeWindow_WindowType TimeWindow::ADAPTIVE;
const TimeWindow_WindowType TimeWindow::WindowType_MIN;
const TimeWindow_WindowType TimeWindow::WindowType_MAX;
const int TimeWindow::WindowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ModelPrediction_ModelType_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[2];
}
bool ModelPrediction_ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelPrediction_ModelType ModelPrediction::RANDOM_FOREST_GENERAL;
const ModelPrediction_ModelType ModelPrediction::LIGHTGBM_DDOS;
const ModelPrediction_ModelType ModelPrediction::NEURAL_NETWORK_RANSOMWARE;
const ModelPrediction_ModelType ModelPrediction::ENSEMBLE_TRICAPA;
const ModelPrediction_ModelType ModelPrediction::INTERNAL_TRAFFIC_CLASSIFIER;
const ModelPrediction_ModelType ModelPrediction::TRANSFORMER_ADVANCED;
const ModelPrediction_ModelType ModelPrediction::ModelType_MIN;
const ModelPrediction_ModelType ModelPrediction::ModelType_MAX;
const int ModelPrediction::ModelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DistributedNode_NodeRole_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[3];
}
bool DistributedNode_NodeRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DistributedNode_NodeRole DistributedNode::PACKET_SNIFFER;
const DistributedNode_NodeRole DistributedNode::FEATURE_PROCESSOR;
const DistributedNode_NodeRole DistributedNode::GEOIP_ENRICHER;
const DistributedNode_NodeRole DistributedNode::ML_ANALYZER;
const DistributedNode_NodeRole DistributedNode::THREAT_DETECTOR;
const DistributedNode_NodeRole DistributedNode::FIREWALL_CONTROLLER;
const DistributedNode_NodeRole DistributedNode::DATA_AGGREGATOR;
const DistributedNode_NodeRole DistributedNode::DASHBOARD_VISUALIZER;
const DistributedNode_NodeRole DistributedNode::CLUSTER_COORDINATOR;
const DistributedNode_NodeRole DistributedNode::NodeRole_MIN;
const DistributedNode_NodeRole DistributedNode::NodeRole_MAX;
const int DistributedNode::NodeRole_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DistributedNode_NodeStatus_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[4];
}
bool DistributedNode_NodeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DistributedNode_NodeStatus DistributedNode::ACTIVE;
const DistributedNode_NodeStatus DistributedNode::STARTING;
const DistributedNode_NodeStatus DistributedNode::STOPPING;
const DistributedNode_NodeStatus DistributedNode::ERROR;
const DistributedNode_NodeStatus DistributedNode::MAINTENANCE;
const DistributedNode_NodeStatus DistributedNode::OVERLOADED;
const DistributedNode_NodeStatus DistributedNode::NodeStatus_MIN;
const DistributedNode_NodeStatus DistributedNode::NodeStatus_MAX;
const int DistributedNode::NodeStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HumanFeedback_FeedbackType_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[5];
}
bool HumanFeedback_FeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HumanFeedback_FeedbackType HumanFeedback::VALIDATION;
const HumanFeedback_FeedbackType HumanFeedback::CORRECTION;
const HumanFeedback_FeedbackType HumanFeedback::ENHANCEMENT;
const HumanFeedback_FeedbackType HumanFeedback::FALSE_POSITIVE_REPORT;
const HumanFeedback_FeedbackType HumanFeedback::ADDITIONAL_CONTEXT;
const HumanFeedback_FeedbackType HumanFeedback::FeedbackType_MIN;
const HumanFeedback_FeedbackType HumanFeedback::FeedbackType_MAX;
const int HumanFeedback::FeedbackType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HumanInTheLoopReview_ReviewPriority_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[6];
}
bool HumanInTheLoopReview_ReviewPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::LOW;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::MEDIUM;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::HIGH;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::CRITICAL;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::EMERGENCY;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::ReviewPriority_MIN;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::ReviewPriority_MAX;
const int HumanInTheLoopReview::ReviewPriority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EventBatch_ProcessingMode_descriptor() {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_enum_descriptors[7];
}
bool EventBatch_ProcessingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventBatch_ProcessingMode EventBatch::REAL_TIME;
const EventBatch_ProcessingMode EventBatch::NEAR_REAL_TIME;
const EventBatch_ProcessingMode EventBatch::BATCH_PROCESSING;
const EventBatch_ProcessingMode EventBatch::HISTORICAL_ANALYSIS;
const EventBatch_ProcessingMode EventBatch::ProcessingMode_MIN;
const EventBatch_ProcessingMode EventBatch::ProcessingMode_MAX;
const int EventBatch::ProcessingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

NetworkFeatures_CustomFeaturesEntry_DoNotUse::NetworkFeatures_CustomFeaturesEntry_DoNotUse() {}
NetworkFeatures_CustomFeaturesEntry_DoNotUse::NetworkFeatures_CustomFeaturesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NetworkFeatures_CustomFeaturesEntry_DoNotUse::MergeFrom(const NetworkFeatures_CustomFeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NetworkFeatures_CustomFeaturesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[0];
}
void NetworkFeatures_CustomFeaturesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

NetworkFeatures_FeatureMetadataEntry_DoNotUse::NetworkFeatures_FeatureMetadataEntry_DoNotUse() {}
NetworkFeatures_FeatureMetadataEntry_DoNotUse::NetworkFeatures_FeatureMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NetworkFeatures_FeatureMetadataEntry_DoNotUse::MergeFrom(const NetworkFeatures_FeatureMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NetworkFeatures_FeatureMetadataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[1];
}
void NetworkFeatures_FeatureMetadataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void NetworkFeatures::InitAsDefaultInstance() {
  ::protobuf::_NetworkFeatures_default_instance_._instance.get_mutable()->flow_start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_NetworkFeatures_default_instance_._instance.get_mutable()->flow_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void NetworkFeatures::clear_flow_start_time() {
  if (GetArenaNoVirtual() == NULL && flow_start_time_ != NULL) {
    delete flow_start_time_;
  }
  flow_start_time_ = NULL;
}
void NetworkFeatures::clear_flow_duration() {
  if (GetArenaNoVirtual() == NULL && flow_duration_ != NULL) {
    delete flow_duration_;
  }
  flow_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkFeatures::kSourceIpFieldNumber;
const int NetworkFeatures::kDestinationIpFieldNumber;
const int NetworkFeatures::kSourcePortFieldNumber;
const int NetworkFeatures::kDestinationPortFieldNumber;
const int NetworkFeatures::kProtocolNumberFieldNumber;
const int NetworkFeatures::kProtocolNameFieldNumber;
const int NetworkFeatures::kFlowStartTimeFieldNumber;
const int NetworkFeatures::kFlowDurationFieldNumber;
const int NetworkFeatures::kFlowDurationMicrosecondsFieldNumber;
const int NetworkFeatures::kTotalForwardPacketsFieldNumber;
const int NetworkFeatures::kTotalBackwardPacketsFieldNumber;
const int NetworkFeatures::kTotalForwardBytesFieldNumber;
const int NetworkFeatures::kTotalBackwardBytesFieldNumber;
const int NetworkFeatures::kForwardPacketLengthMaxFieldNumber;
const int NetworkFeatures::kForwardPacketLengthMinFieldNumber;
const int NetworkFeatures::kForwardPacketLengthMeanFieldNumber;
const int NetworkFeatures::kForwardPacketLengthStdFieldNumber;
const int NetworkFeatures::kBackwardPacketLengthMaxFieldNumber;
const int NetworkFeatures::kBackwardPacketLengthMinFieldNumber;
const int NetworkFeatures::kBackwardPacketLengthMeanFieldNumber;
const int NetworkFeatures::kBackwardPacketLengthStdFieldNumber;
const int NetworkFeatures::kFlowBytesPerSecondFieldNumber;
const int NetworkFeatures::kFlowPacketsPerSecondFieldNumber;
const int NetworkFeatures::kForwardPacketsPerSecondFieldNumber;
const int NetworkFeatures::kBackwardPacketsPerSecondFieldNumber;
const int NetworkFeatures::kDownloadUploadRatioFieldNumber;
const int NetworkFeatures::kAveragePacketSizeFieldNumber;
const int NetworkFeatures::kAverageForwardSegmentSizeFieldNumber;
const int NetworkFeatures::kAverageBackwardSegmentSizeFieldNumber;
const int NetworkFeatures::kFlowInterArrivalTimeMeanFieldNumber;
const int NetworkFeatures::kFlowInterArrivalTimeStdFieldNumber;
const int NetworkFeatures::kFlowInterArrivalTimeMaxFieldNumber;
const int NetworkFeatures::kFlowInterArrivalTimeMinFieldNumber;
const int NetworkFeatures::kForwardInterArrivalTimeTotalFieldNumber;
const int NetworkFeatures::kForwardInterArrivalTimeMeanFieldNumber;
const int NetworkFeatures::kForwardInterArrivalTimeStdFieldNumber;
const int NetworkFeatures::kForwardInterArrivalTimeMaxFieldNumber;
const int NetworkFeatures::kForwardInterArrivalTimeMinFieldNumber;
const int NetworkFeatures::kBackwardInterArrivalTimeTotalFieldNumber;
const int NetworkFeatures::kBackwardInterArrivalTimeMeanFieldNumber;
const int NetworkFeatures::kBackwardInterArrivalTimeStdFieldNumber;
const int NetworkFeatures::kBackwardInterArrivalTimeMaxFieldNumber;
const int NetworkFeatures::kBackwardInterArrivalTimeMinFieldNumber;
const int NetworkFeatures::kFinFlagCountFieldNumber;
const int NetworkFeatures::kSynFlagCountFieldNumber;
const int NetworkFeatures::kRstFlagCountFieldNumber;
const int NetworkFeatures::kPshFlagCountFieldNumber;
const int NetworkFeatures::kAckFlagCountFieldNumber;
const int NetworkFeatures::kUrgFlagCountFieldNumber;
const int NetworkFeatures::kCweFlagCountFieldNumber;
const int NetworkFeatures::kEceFlagCountFieldNumber;
const int NetworkFeatures::kForwardPshFlagsFieldNumber;
const int NetworkFeatures::kBackwardPshFlagsFieldNumber;
const int NetworkFeatures::kForwardUrgFlagsFieldNumber;
const int NetworkFeatures::kBackwardUrgFlagsFieldNumber;
const int NetworkFeatures::kForwardHeaderLengthFieldNumber;
const int NetworkFeatures::kBackwardHeaderLengthFieldNumber;
const int NetworkFeatures::kForwardAverageBytesBulkFieldNumber;
const int NetworkFeatures::kForwardAveragePacketsBulkFieldNumber;
const int NetworkFeatures::kForwardAverageBulkRateFieldNumber;
const int NetworkFeatures::kBackwardAverageBytesBulkFieldNumber;
const int NetworkFeatures::kBackwardAveragePacketsBulkFieldNumber;
const int NetworkFeatures::kBackwardAverageBulkRateFieldNumber;
const int NetworkFeatures::kMinimumPacketLengthFieldNumber;
const int NetworkFeatures::kMaximumPacketLengthFieldNumber;
const int NetworkFeatures::kPacketLengthMeanFieldNumber;
const int NetworkFeatures::kPacketLengthStdFieldNumber;
const int NetworkFeatures::kPacketLengthVarianceFieldNumber;
const int NetworkFeatures::kDdosFeaturesFieldNumber;
const int NetworkFeatures::kRansomwareFeaturesFieldNumber;
const int NetworkFeatures::kGeneralAttackFeaturesFieldNumber;
const int NetworkFeatures::kInternalTrafficFeaturesFieldNumber;
const int NetworkFeatures::kCustomFeaturesFieldNumber;
const int NetworkFeatures::kFeatureMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkFeatures::NetworkFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkFeatures.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.NetworkFeatures)
}
NetworkFeatures::NetworkFeatures(const NetworkFeatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ddos_features_(from.ddos_features_),
      ransomware_features_(from.ransomware_features_),
      general_attack_features_(from.general_attack_features_),
      internal_traffic_features_(from.internal_traffic_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_features_.MergeFrom(from.custom_features_);
  feature_metadata_.MergeFrom(from.feature_metadata_);
  source_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_ip().size() > 0) {
    source_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_ip_);
  }
  destination_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_ip().size() > 0) {
    destination_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_ip_);
  }
  protocol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol_name().size() > 0) {
    protocol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_name_);
  }
  if (from.has_flow_start_time()) {
    flow_start_time_ = new ::google::protobuf::Timestamp(*from.flow_start_time_);
  } else {
    flow_start_time_ = NULL;
  }
  if (from.has_flow_duration()) {
    flow_duration_ = new ::google::protobuf::Duration(*from.flow_duration_);
  } else {
    flow_duration_ = NULL;
  }
  ::memcpy(&source_port_, &from.source_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_length_variance_) -
    reinterpret_cast<char*>(&source_port_)) + sizeof(packet_length_variance_));
  // @@protoc_insertion_point(copy_constructor:protobuf.NetworkFeatures)
}

void NetworkFeatures::SharedCtor() {
  source_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flow_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_length_variance_) -
      reinterpret_cast<char*>(&flow_start_time_)) + sizeof(packet_length_variance_));
}

NetworkFeatures::~NetworkFeatures() {
  // @@protoc_insertion_point(destructor:protobuf.NetworkFeatures)
  SharedDtor();
}

void NetworkFeatures::SharedDtor() {
  source_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flow_start_time_;
  if (this != internal_default_instance()) delete flow_duration_;
}

void NetworkFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkFeatures::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkFeatures& NetworkFeatures::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkFeatures.base);
  return *internal_default_instance();
}


void NetworkFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.NetworkFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ddos_features_.Clear();
  ransomware_features_.Clear();
  general_attack_features_.Clear();
  internal_traffic_features_.Clear();
  custom_features_.Clear();
  feature_metadata_.Clear();
  source_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && flow_start_time_ != NULL) {
    delete flow_start_time_;
  }
  flow_start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && flow_duration_ != NULL) {
    delete flow_duration_;
  }
  flow_duration_ = NULL;
  ::memset(&source_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_length_variance_) -
      reinterpret_cast<char*>(&source_port_)) + sizeof(packet_length_variance_));
  _internal_metadata_.Clear();
}

bool NetworkFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.NetworkFeatures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_ip().data(), static_cast<int>(this->source_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.source_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_ip().data(), static_cast<int>(this->destination_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.destination_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 destination_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_name().data(), static_cast<int>(this->protocol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.protocol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp flow_start_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flow_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration flow_duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flow_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 flow_duration_microseconds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flow_duration_microseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_forward_packets = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_forward_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_backward_packets = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_backward_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_forward_bytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_forward_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_backward_bytes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_backward_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_packet_length_max = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_packet_length_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_packet_length_min = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_packet_length_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_packet_length_mean = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_packet_length_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_packet_length_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_packet_length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backward_packet_length_max = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backward_packet_length_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backward_packet_length_min = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backward_packet_length_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_packet_length_mean = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_packet_length_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_packet_length_std = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_packet_length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flow_bytes_per_second = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flow_bytes_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flow_packets_per_second = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flow_packets_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_packets_per_second = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_packets_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_packets_per_second = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_packets_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double download_upload_ratio = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &download_upload_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_packet_size = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_packet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_forward_segment_size = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_forward_segment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_backward_segment_size = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 377 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_backward_segment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flow_inter_arrival_time_mean = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 401 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flow_inter_arrival_time_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flow_inter_arrival_time_std = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 409 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flow_inter_arrival_time_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 flow_inter_arrival_time_max = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flow_inter_arrival_time_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 flow_inter_arrival_time_min = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flow_inter_arrival_time_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_inter_arrival_time_total = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 433 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_inter_arrival_time_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_inter_arrival_time_mean = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 441 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_inter_arrival_time_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_inter_arrival_time_std = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 449 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_inter_arrival_time_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_inter_arrival_time_max = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_inter_arrival_time_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_inter_arrival_time_min = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_inter_arrival_time_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_inter_arrival_time_total = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 473 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_inter_arrival_time_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_inter_arrival_time_mean = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 481 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_inter_arrival_time_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_inter_arrival_time_std = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 489 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_inter_arrival_time_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backward_inter_arrival_time_max = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backward_inter_arrival_time_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backward_inter_arrival_time_min = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backward_inter_arrival_time_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fin_flag_count = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fin_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 syn_flag_count = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syn_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rst_flag_count = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rst_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 psh_flag_count = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &psh_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ack_flag_count = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 592 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 urg_flag_count = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 600 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urg_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cwe_flag_count = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cwe_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ece_flag_count = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ece_flag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_psh_flags = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_psh_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 backward_psh_flags = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 632 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backward_psh_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_urg_flags = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_urg_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 backward_urg_flags = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backward_urg_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_header_length = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 681 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_header_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_header_length = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 689 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_header_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_average_bytes_bulk = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 697 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_average_bytes_bulk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_average_packets_bulk = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 705 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_average_packets_bulk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward_average_bulk_rate = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 713 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_average_bulk_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_average_bytes_bulk = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 721 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_average_bytes_bulk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_average_packets_bulk = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 729 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_average_packets_bulk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double backward_average_bulk_rate = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 737 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backward_average_bulk_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minimum_packet_length = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 760 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_packet_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 maximum_packet_length = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 768 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_packet_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double packet_length_mean = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 777 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &packet_length_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double packet_length_std = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 785 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &packet_length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double packet_length_variance = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 793 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &packet_length_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ddos_features = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ddos_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 801 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 802u, input, this->mutable_ddos_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ransomware_features = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ransomware_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 809 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 810u, input, this->mutable_ransomware_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double general_attack_features = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_general_attack_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 817 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 818u, input, this->mutable_general_attack_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double internal_traffic_features = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_internal_traffic_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 825 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 826u, input, this->mutable_internal_traffic_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> custom_features = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          NetworkFeatures_CustomFeaturesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NetworkFeatures_CustomFeaturesEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&custom_features_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.CustomFeaturesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> feature_metadata = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
          NetworkFeatures_FeatureMetadataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NetworkFeatures_FeatureMetadataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&feature_metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.FeatureMetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkFeatures.FeatureMetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.NetworkFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.NetworkFeatures)
  return false;
#undef DO_
}

void NetworkFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.NetworkFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_ip = 1;
  if (this->source_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_ip().data(), static_cast<int>(this->source_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.source_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_ip(), output);
  }

  // string destination_ip = 2;
  if (this->destination_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_ip().data(), static_cast<int>(this->destination_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.destination_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination_ip(), output);
  }

  // uint32 source_port = 3;
  if (this->source_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_port(), output);
  }

  // uint32 destination_port = 4;
  if (this->destination_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destination_port(), output);
  }

  // uint32 protocol_number = 5;
  if (this->protocol_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->protocol_number(), output);
  }

  // string protocol_name = 6;
  if (this->protocol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_name().data(), static_cast<int>(this->protocol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.protocol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->protocol_name(), output);
  }

  // .google.protobuf.Timestamp flow_start_time = 7;
  if (this->has_flow_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_flow_start_time(), output);
  }

  // .google.protobuf.Duration flow_duration = 8;
  if (this->has_flow_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_flow_duration(), output);
  }

  // uint64 flow_duration_microseconds = 9;
  if (this->flow_duration_microseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->flow_duration_microseconds(), output);
  }

  // uint64 total_forward_packets = 10;
  if (this->total_forward_packets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_forward_packets(), output);
  }

  // uint64 total_backward_packets = 11;
  if (this->total_backward_packets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->total_backward_packets(), output);
  }

  // uint64 total_forward_bytes = 12;
  if (this->total_forward_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->total_forward_bytes(), output);
  }

  // uint64 total_backward_bytes = 13;
  if (this->total_backward_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->total_backward_bytes(), output);
  }

  // uint64 forward_packet_length_max = 20;
  if (this->forward_packet_length_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->forward_packet_length_max(), output);
  }

  // uint64 forward_packet_length_min = 21;
  if (this->forward_packet_length_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->forward_packet_length_min(), output);
  }

  // double forward_packet_length_mean = 22;
  if (this->forward_packet_length_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->forward_packet_length_mean(), output);
  }

  // double forward_packet_length_std = 23;
  if (this->forward_packet_length_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->forward_packet_length_std(), output);
  }

  // uint64 backward_packet_length_max = 30;
  if (this->backward_packet_length_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->backward_packet_length_max(), output);
  }

  // uint64 backward_packet_length_min = 31;
  if (this->backward_packet_length_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->backward_packet_length_min(), output);
  }

  // double backward_packet_length_mean = 32;
  if (this->backward_packet_length_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->backward_packet_length_mean(), output);
  }

  // double backward_packet_length_std = 33;
  if (this->backward_packet_length_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->backward_packet_length_std(), output);
  }

  // double flow_bytes_per_second = 40;
  if (this->flow_bytes_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->flow_bytes_per_second(), output);
  }

  // double flow_packets_per_second = 41;
  if (this->flow_packets_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->flow_packets_per_second(), output);
  }

  // double forward_packets_per_second = 42;
  if (this->forward_packets_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->forward_packets_per_second(), output);
  }

  // double backward_packets_per_second = 43;
  if (this->backward_packets_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->backward_packets_per_second(), output);
  }

  // double download_upload_ratio = 44;
  if (this->download_upload_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->download_upload_ratio(), output);
  }

  // double average_packet_size = 45;
  if (this->average_packet_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->average_packet_size(), output);
  }

  // double average_forward_segment_size = 46;
  if (this->average_forward_segment_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->average_forward_segment_size(), output);
  }

  // double average_backward_segment_size = 47;
  if (this->average_backward_segment_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->average_backward_segment_size(), output);
  }

  // double flow_inter_arrival_time_mean = 50;
  if (this->flow_inter_arrival_time_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->flow_inter_arrival_time_mean(), output);
  }

  // double flow_inter_arrival_time_std = 51;
  if (this->flow_inter_arrival_time_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->flow_inter_arrival_time_std(), output);
  }

  // uint64 flow_inter_arrival_time_max = 52;
  if (this->flow_inter_arrival_time_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->flow_inter_arrival_time_max(), output);
  }

  // uint64 flow_inter_arrival_time_min = 53;
  if (this->flow_inter_arrival_time_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->flow_inter_arrival_time_min(), output);
  }

  // double forward_inter_arrival_time_total = 54;
  if (this->forward_inter_arrival_time_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->forward_inter_arrival_time_total(), output);
  }

  // double forward_inter_arrival_time_mean = 55;
  if (this->forward_inter_arrival_time_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->forward_inter_arrival_time_mean(), output);
  }

  // double forward_inter_arrival_time_std = 56;
  if (this->forward_inter_arrival_time_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->forward_inter_arrival_time_std(), output);
  }

  // uint64 forward_inter_arrival_time_max = 57;
  if (this->forward_inter_arrival_time_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(57, this->forward_inter_arrival_time_max(), output);
  }

  // uint64 forward_inter_arrival_time_min = 58;
  if (this->forward_inter_arrival_time_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->forward_inter_arrival_time_min(), output);
  }

  // double backward_inter_arrival_time_total = 59;
  if (this->backward_inter_arrival_time_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->backward_inter_arrival_time_total(), output);
  }

  // double backward_inter_arrival_time_mean = 60;
  if (this->backward_inter_arrival_time_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->backward_inter_arrival_time_mean(), output);
  }

  // double backward_inter_arrival_time_std = 61;
  if (this->backward_inter_arrival_time_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->backward_inter_arrival_time_std(), output);
  }

  // uint64 backward_inter_arrival_time_max = 62;
  if (this->backward_inter_arrival_time_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(62, this->backward_inter_arrival_time_max(), output);
  }

  // uint64 backward_inter_arrival_time_min = 63;
  if (this->backward_inter_arrival_time_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(63, this->backward_inter_arrival_time_min(), output);
  }

  // uint32 fin_flag_count = 70;
  if (this->fin_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->fin_flag_count(), output);
  }

  // uint32 syn_flag_count = 71;
  if (this->syn_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->syn_flag_count(), output);
  }

  // uint32 rst_flag_count = 72;
  if (this->rst_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->rst_flag_count(), output);
  }

  // uint32 psh_flag_count = 73;
  if (this->psh_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->psh_flag_count(), output);
  }

  // uint32 ack_flag_count = 74;
  if (this->ack_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->ack_flag_count(), output);
  }

  // uint32 urg_flag_count = 75;
  if (this->urg_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->urg_flag_count(), output);
  }

  // uint32 cwe_flag_count = 76;
  if (this->cwe_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->cwe_flag_count(), output);
  }

  // uint32 ece_flag_count = 77;
  if (this->ece_flag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->ece_flag_count(), output);
  }

  // uint32 forward_psh_flags = 78;
  if (this->forward_psh_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->forward_psh_flags(), output);
  }

  // uint32 backward_psh_flags = 79;
  if (this->backward_psh_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->backward_psh_flags(), output);
  }

  // uint32 forward_urg_flags = 80;
  if (this->forward_urg_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->forward_urg_flags(), output);
  }

  // uint32 backward_urg_flags = 81;
  if (this->backward_urg_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->backward_urg_flags(), output);
  }

  // double forward_header_length = 85;
  if (this->forward_header_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(85, this->forward_header_length(), output);
  }

  // double backward_header_length = 86;
  if (this->backward_header_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(86, this->backward_header_length(), output);
  }

  // double forward_average_bytes_bulk = 87;
  if (this->forward_average_bytes_bulk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(87, this->forward_average_bytes_bulk(), output);
  }

  // double forward_average_packets_bulk = 88;
  if (this->forward_average_packets_bulk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(88, this->forward_average_packets_bulk(), output);
  }

  // double forward_average_bulk_rate = 89;
  if (this->forward_average_bulk_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(89, this->forward_average_bulk_rate(), output);
  }

  // double backward_average_bytes_bulk = 90;
  if (this->backward_average_bytes_bulk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(90, this->backward_average_bytes_bulk(), output);
  }

  // double backward_average_packets_bulk = 91;
  if (this->backward_average_packets_bulk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(91, this->backward_average_packets_bulk(), output);
  }

  // double backward_average_bulk_rate = 92;
  if (this->backward_average_bulk_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(92, this->backward_average_bulk_rate(), output);
  }

  // uint64 minimum_packet_length = 95;
  if (this->minimum_packet_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(95, this->minimum_packet_length(), output);
  }

  // uint64 maximum_packet_length = 96;
  if (this->maximum_packet_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(96, this->maximum_packet_length(), output);
  }

  // double packet_length_mean = 97;
  if (this->packet_length_mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(97, this->packet_length_mean(), output);
  }

  // double packet_length_std = 98;
  if (this->packet_length_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(98, this->packet_length_std(), output);
  }

  // double packet_length_variance = 99;
  if (this->packet_length_variance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(99, this->packet_length_variance(), output);
  }

  // repeated double ddos_features = 100;
  if (this->ddos_features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(100, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ddos_features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->ddos_features().data(), this->ddos_features_size(), output);
  }

  // repeated double ransomware_features = 101;
  if (this->ransomware_features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(101, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ransomware_features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->ransomware_features().data(), this->ransomware_features_size(), output);
  }

  // repeated double general_attack_features = 102;
  if (this->general_attack_features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(102, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _general_attack_features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->general_attack_features().data(), this->general_attack_features_size(), output);
  }

  // repeated double internal_traffic_features = 103;
  if (this->internal_traffic_features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(103, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _internal_traffic_features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->internal_traffic_features().data(), this->internal_traffic_features_size(), output);
  }

  // map<string, double> custom_features = 110;
  if (!this->custom_features().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.CustomFeaturesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->custom_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_features().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->custom_features().begin();
          it != this->custom_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkFeatures_CustomFeaturesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_features_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            110, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkFeatures_CustomFeaturesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->custom_features().begin();
          it != this->custom_features().end(); ++it) {
        entry.reset(custom_features_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            110, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> feature_metadata = 111;
  if (!this->feature_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.FeatureMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.FeatureMetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feature_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feature_metadata().begin();
          it != this->feature_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkFeatures_FeatureMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            111, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkFeatures_FeatureMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feature_metadata().begin();
          it != this->feature_metadata().end(); ++it) {
        entry.reset(feature_metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            111, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.NetworkFeatures)
}

::google::protobuf::uint8* NetworkFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.NetworkFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_ip = 1;
  if (this->source_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_ip().data(), static_cast<int>(this->source_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.source_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_ip(), target);
  }

  // string destination_ip = 2;
  if (this->destination_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_ip().data(), static_cast<int>(this->destination_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.destination_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination_ip(), target);
  }

  // uint32 source_port = 3;
  if (this->source_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_port(), target);
  }

  // uint32 destination_port = 4;
  if (this->destination_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destination_port(), target);
  }

  // uint32 protocol_number = 5;
  if (this->protocol_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->protocol_number(), target);
  }

  // string protocol_name = 6;
  if (this->protocol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_name().data(), static_cast<int>(this->protocol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.protocol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->protocol_name(), target);
  }

  // .google.protobuf.Timestamp flow_start_time = 7;
  if (this->has_flow_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_flow_start_time(), deterministic, target);
  }

  // .google.protobuf.Duration flow_duration = 8;
  if (this->has_flow_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_flow_duration(), deterministic, target);
  }

  // uint64 flow_duration_microseconds = 9;
  if (this->flow_duration_microseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->flow_duration_microseconds(), target);
  }

  // uint64 total_forward_packets = 10;
  if (this->total_forward_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_forward_packets(), target);
  }

  // uint64 total_backward_packets = 11;
  if (this->total_backward_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->total_backward_packets(), target);
  }

  // uint64 total_forward_bytes = 12;
  if (this->total_forward_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->total_forward_bytes(), target);
  }

  // uint64 total_backward_bytes = 13;
  if (this->total_backward_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->total_backward_bytes(), target);
  }

  // uint64 forward_packet_length_max = 20;
  if (this->forward_packet_length_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->forward_packet_length_max(), target);
  }

  // uint64 forward_packet_length_min = 21;
  if (this->forward_packet_length_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->forward_packet_length_min(), target);
  }

  // double forward_packet_length_mean = 22;
  if (this->forward_packet_length_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->forward_packet_length_mean(), target);
  }

  // double forward_packet_length_std = 23;
  if (this->forward_packet_length_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->forward_packet_length_std(), target);
  }

  // uint64 backward_packet_length_max = 30;
  if (this->backward_packet_length_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->backward_packet_length_max(), target);
  }

  // uint64 backward_packet_length_min = 31;
  if (this->backward_packet_length_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->backward_packet_length_min(), target);
  }

  // double backward_packet_length_mean = 32;
  if (this->backward_packet_length_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->backward_packet_length_mean(), target);
  }

  // double backward_packet_length_std = 33;
  if (this->backward_packet_length_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->backward_packet_length_std(), target);
  }

  // double flow_bytes_per_second = 40;
  if (this->flow_bytes_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->flow_bytes_per_second(), target);
  }

  // double flow_packets_per_second = 41;
  if (this->flow_packets_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->flow_packets_per_second(), target);
  }

  // double forward_packets_per_second = 42;
  if (this->forward_packets_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->forward_packets_per_second(), target);
  }

  // double backward_packets_per_second = 43;
  if (this->backward_packets_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->backward_packets_per_second(), target);
  }

  // double download_upload_ratio = 44;
  if (this->download_upload_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->download_upload_ratio(), target);
  }

  // double average_packet_size = 45;
  if (this->average_packet_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->average_packet_size(), target);
  }

  // double average_forward_segment_size = 46;
  if (this->average_forward_segment_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->average_forward_segment_size(), target);
  }

  // double average_backward_segment_size = 47;
  if (this->average_backward_segment_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->average_backward_segment_size(), target);
  }

  // double flow_inter_arrival_time_mean = 50;
  if (this->flow_inter_arrival_time_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->flow_inter_arrival_time_mean(), target);
  }

  // double flow_inter_arrival_time_std = 51;
  if (this->flow_inter_arrival_time_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->flow_inter_arrival_time_std(), target);
  }

  // uint64 flow_inter_arrival_time_max = 52;
  if (this->flow_inter_arrival_time_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->flow_inter_arrival_time_max(), target);
  }

  // uint64 flow_inter_arrival_time_min = 53;
  if (this->flow_inter_arrival_time_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->flow_inter_arrival_time_min(), target);
  }

  // double forward_inter_arrival_time_total = 54;
  if (this->forward_inter_arrival_time_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->forward_inter_arrival_time_total(), target);
  }

  // double forward_inter_arrival_time_mean = 55;
  if (this->forward_inter_arrival_time_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->forward_inter_arrival_time_mean(), target);
  }

  // double forward_inter_arrival_time_std = 56;
  if (this->forward_inter_arrival_time_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->forward_inter_arrival_time_std(), target);
  }

  // uint64 forward_inter_arrival_time_max = 57;
  if (this->forward_inter_arrival_time_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(57, this->forward_inter_arrival_time_max(), target);
  }

  // uint64 forward_inter_arrival_time_min = 58;
  if (this->forward_inter_arrival_time_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->forward_inter_arrival_time_min(), target);
  }

  // double backward_inter_arrival_time_total = 59;
  if (this->backward_inter_arrival_time_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->backward_inter_arrival_time_total(), target);
  }

  // double backward_inter_arrival_time_mean = 60;
  if (this->backward_inter_arrival_time_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->backward_inter_arrival_time_mean(), target);
  }

  // double backward_inter_arrival_time_std = 61;
  if (this->backward_inter_arrival_time_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->backward_inter_arrival_time_std(), target);
  }

  // uint64 backward_inter_arrival_time_max = 62;
  if (this->backward_inter_arrival_time_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(62, this->backward_inter_arrival_time_max(), target);
  }

  // uint64 backward_inter_arrival_time_min = 63;
  if (this->backward_inter_arrival_time_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(63, this->backward_inter_arrival_time_min(), target);
  }

  // uint32 fin_flag_count = 70;
  if (this->fin_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->fin_flag_count(), target);
  }

  // uint32 syn_flag_count = 71;
  if (this->syn_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->syn_flag_count(), target);
  }

  // uint32 rst_flag_count = 72;
  if (this->rst_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->rst_flag_count(), target);
  }

  // uint32 psh_flag_count = 73;
  if (this->psh_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->psh_flag_count(), target);
  }

  // uint32 ack_flag_count = 74;
  if (this->ack_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->ack_flag_count(), target);
  }

  // uint32 urg_flag_count = 75;
  if (this->urg_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->urg_flag_count(), target);
  }

  // uint32 cwe_flag_count = 76;
  if (this->cwe_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->cwe_flag_count(), target);
  }

  // uint32 ece_flag_count = 77;
  if (this->ece_flag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->ece_flag_count(), target);
  }

  // uint32 forward_psh_flags = 78;
  if (this->forward_psh_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->forward_psh_flags(), target);
  }

  // uint32 backward_psh_flags = 79;
  if (this->backward_psh_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->backward_psh_flags(), target);
  }

  // uint32 forward_urg_flags = 80;
  if (this->forward_urg_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->forward_urg_flags(), target);
  }

  // uint32 backward_urg_flags = 81;
  if (this->backward_urg_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->backward_urg_flags(), target);
  }

  // double forward_header_length = 85;
  if (this->forward_header_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(85, this->forward_header_length(), target);
  }

  // double backward_header_length = 86;
  if (this->backward_header_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(86, this->backward_header_length(), target);
  }

  // double forward_average_bytes_bulk = 87;
  if (this->forward_average_bytes_bulk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(87, this->forward_average_bytes_bulk(), target);
  }

  // double forward_average_packets_bulk = 88;
  if (this->forward_average_packets_bulk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(88, this->forward_average_packets_bulk(), target);
  }

  // double forward_average_bulk_rate = 89;
  if (this->forward_average_bulk_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(89, this->forward_average_bulk_rate(), target);
  }

  // double backward_average_bytes_bulk = 90;
  if (this->backward_average_bytes_bulk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(90, this->backward_average_bytes_bulk(), target);
  }

  // double backward_average_packets_bulk = 91;
  if (this->backward_average_packets_bulk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(91, this->backward_average_packets_bulk(), target);
  }

  // double backward_average_bulk_rate = 92;
  if (this->backward_average_bulk_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(92, this->backward_average_bulk_rate(), target);
  }

  // uint64 minimum_packet_length = 95;
  if (this->minimum_packet_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(95, this->minimum_packet_length(), target);
  }

  // uint64 maximum_packet_length = 96;
  if (this->maximum_packet_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(96, this->maximum_packet_length(), target);
  }

  // double packet_length_mean = 97;
  if (this->packet_length_mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(97, this->packet_length_mean(), target);
  }

  // double packet_length_std = 98;
  if (this->packet_length_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(98, this->packet_length_std(), target);
  }

  // double packet_length_variance = 99;
  if (this->packet_length_variance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(99, this->packet_length_variance(), target);
  }

  // repeated double ddos_features = 100;
  if (this->ddos_features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      100,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ddos_features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ddos_features_, target);
  }

  // repeated double ransomware_features = 101;
  if (this->ransomware_features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      101,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ransomware_features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ransomware_features_, target);
  }

  // repeated double general_attack_features = 102;
  if (this->general_attack_features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      102,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _general_attack_features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->general_attack_features_, target);
  }

  // repeated double internal_traffic_features = 103;
  if (this->internal_traffic_features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      103,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _internal_traffic_features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->internal_traffic_features_, target);
  }

  // map<string, double> custom_features = 110;
  if (!this->custom_features().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.CustomFeaturesEntry.key");
      }
    };

    if (deterministic &&
        this->custom_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_features().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->custom_features().begin();
          it != this->custom_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkFeatures_CustomFeaturesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_features_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       110, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkFeatures_CustomFeaturesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->custom_features().begin();
          it != this->custom_features().end(); ++it) {
        entry.reset(custom_features_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       110, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> feature_metadata = 111;
  if (!this->feature_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.FeatureMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkFeatures.FeatureMetadataEntry.value");
      }
    };

    if (deterministic &&
        this->feature_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feature_metadata().begin();
          it != this->feature_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkFeatures_FeatureMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       111, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkFeatures_FeatureMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feature_metadata().begin();
          it != this->feature_metadata().end(); ++it) {
        entry.reset(feature_metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       111, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.NetworkFeatures)
  return target;
}

size_t NetworkFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.NetworkFeatures)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double ddos_features = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->ddos_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ddos_features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ransomware_features = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->ransomware_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ransomware_features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double general_attack_features = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->general_attack_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _general_attack_features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double internal_traffic_features = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->internal_traffic_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _internal_traffic_features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, double> custom_features = 110;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->custom_features_size());
  {
    ::std::unique_ptr<NetworkFeatures_CustomFeaturesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->custom_features().begin();
        it != this->custom_features().end(); ++it) {
      entry.reset(custom_features_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> feature_metadata = 111;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->feature_metadata_size());
  {
    ::std::unique_ptr<NetworkFeatures_FeatureMetadataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->feature_metadata().begin();
        it != this->feature_metadata().end(); ++it) {
      entry.reset(feature_metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string source_ip = 1;
  if (this->source_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_ip());
  }

  // string destination_ip = 2;
  if (this->destination_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_ip());
  }

  // string protocol_name = 6;
  if (this->protocol_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_name());
  }

  // .google.protobuf.Timestamp flow_start_time = 7;
  if (this->has_flow_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *flow_start_time_);
  }

  // .google.protobuf.Duration flow_duration = 8;
  if (this->has_flow_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *flow_duration_);
  }

  // uint32 source_port = 3;
  if (this->source_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_port());
  }

  // uint32 destination_port = 4;
  if (this->destination_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->destination_port());
  }

  // uint64 flow_duration_microseconds = 9;
  if (this->flow_duration_microseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flow_duration_microseconds());
  }

  // uint64 total_forward_packets = 10;
  if (this->total_forward_packets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_forward_packets());
  }

  // uint64 total_backward_packets = 11;
  if (this->total_backward_packets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_backward_packets());
  }

  // uint64 total_forward_bytes = 12;
  if (this->total_forward_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_forward_bytes());
  }

  // uint64 total_backward_bytes = 13;
  if (this->total_backward_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_backward_bytes());
  }

  // uint64 forward_packet_length_max = 20;
  if (this->forward_packet_length_max() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_packet_length_max());
  }

  // uint64 forward_packet_length_min = 21;
  if (this->forward_packet_length_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_packet_length_min());
  }

  // double forward_packet_length_mean = 22;
  if (this->forward_packet_length_mean() != 0) {
    total_size += 2 + 8;
  }

  // double forward_packet_length_std = 23;
  if (this->forward_packet_length_std() != 0) {
    total_size += 2 + 8;
  }

  // uint64 backward_packet_length_max = 30;
  if (this->backward_packet_length_max() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backward_packet_length_max());
  }

  // uint64 backward_packet_length_min = 31;
  if (this->backward_packet_length_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backward_packet_length_min());
  }

  // double backward_packet_length_mean = 32;
  if (this->backward_packet_length_mean() != 0) {
    total_size += 2 + 8;
  }

  // double backward_packet_length_std = 33;
  if (this->backward_packet_length_std() != 0) {
    total_size += 2 + 8;
  }

  // uint32 protocol_number = 5;
  if (this->protocol_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_number());
  }

  // uint32 fin_flag_count = 70;
  if (this->fin_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fin_flag_count());
  }

  // double flow_bytes_per_second = 40;
  if (this->flow_bytes_per_second() != 0) {
    total_size += 2 + 8;
  }

  // double flow_packets_per_second = 41;
  if (this->flow_packets_per_second() != 0) {
    total_size += 2 + 8;
  }

  // double forward_packets_per_second = 42;
  if (this->forward_packets_per_second() != 0) {
    total_size += 2 + 8;
  }

  // double backward_packets_per_second = 43;
  if (this->backward_packets_per_second() != 0) {
    total_size += 2 + 8;
  }

  // double download_upload_ratio = 44;
  if (this->download_upload_ratio() != 0) {
    total_size += 2 + 8;
  }

  // double average_packet_size = 45;
  if (this->average_packet_size() != 0) {
    total_size += 2 + 8;
  }

  // double average_forward_segment_size = 46;
  if (this->average_forward_segment_size() != 0) {
    total_size += 2 + 8;
  }

  // double average_backward_segment_size = 47;
  if (this->average_backward_segment_size() != 0) {
    total_size += 2 + 8;
  }

  // double flow_inter_arrival_time_mean = 50;
  if (this->flow_inter_arrival_time_mean() != 0) {
    total_size += 2 + 8;
  }

  // double flow_inter_arrival_time_std = 51;
  if (this->flow_inter_arrival_time_std() != 0) {
    total_size += 2 + 8;
  }

  // uint64 flow_inter_arrival_time_max = 52;
  if (this->flow_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flow_inter_arrival_time_max());
  }

  // uint64 flow_inter_arrival_time_min = 53;
  if (this->flow_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flow_inter_arrival_time_min());
  }

  // double forward_inter_arrival_time_total = 54;
  if (this->forward_inter_arrival_time_total() != 0) {
    total_size += 2 + 8;
  }

  // double forward_inter_arrival_time_mean = 55;
  if (this->forward_inter_arrival_time_mean() != 0) {
    total_size += 2 + 8;
  }

  // double forward_inter_arrival_time_std = 56;
  if (this->forward_inter_arrival_time_std() != 0) {
    total_size += 2 + 8;
  }

  // uint64 forward_inter_arrival_time_max = 57;
  if (this->forward_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_inter_arrival_time_max());
  }

  // uint64 forward_inter_arrival_time_min = 58;
  if (this->forward_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_inter_arrival_time_min());
  }

  // double backward_inter_arrival_time_total = 59;
  if (this->backward_inter_arrival_time_total() != 0) {
    total_size += 2 + 8;
  }

  // double backward_inter_arrival_time_mean = 60;
  if (this->backward_inter_arrival_time_mean() != 0) {
    total_size += 2 + 8;
  }

  // double backward_inter_arrival_time_std = 61;
  if (this->backward_inter_arrival_time_std() != 0) {
    total_size += 2 + 8;
  }

  // uint64 backward_inter_arrival_time_max = 62;
  if (this->backward_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backward_inter_arrival_time_max());
  }

  // uint64 backward_inter_arrival_time_min = 63;
  if (this->backward_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backward_inter_arrival_time_min());
  }

  // uint32 syn_flag_count = 71;
  if (this->syn_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->syn_flag_count());
  }

  // uint32 rst_flag_count = 72;
  if (this->rst_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rst_flag_count());
  }

  // uint32 psh_flag_count = 73;
  if (this->psh_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->psh_flag_count());
  }

  // uint32 ack_flag_count = 74;
  if (this->ack_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ack_flag_count());
  }

  // uint32 backward_urg_flags = 81;
  if (this->backward_urg_flags() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->backward_urg_flags());
  }

  // uint32 urg_flag_count = 75;
  if (this->urg_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->urg_flag_count());
  }

  // uint32 cwe_flag_count = 76;
  if (this->cwe_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cwe_flag_count());
  }

  // uint32 ece_flag_count = 77;
  if (this->ece_flag_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ece_flag_count());
  }

  // uint32 forward_psh_flags = 78;
  if (this->forward_psh_flags() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_psh_flags());
  }

  // uint32 backward_psh_flags = 79;
  if (this->backward_psh_flags() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->backward_psh_flags());
  }

  // uint32 forward_urg_flags = 80;
  if (this->forward_urg_flags() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_urg_flags());
  }

  // double forward_header_length = 85;
  if (this->forward_header_length() != 0) {
    total_size += 2 + 8;
  }

  // double backward_header_length = 86;
  if (this->backward_header_length() != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_bytes_bulk = 87;
  if (this->forward_average_bytes_bulk() != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_packets_bulk = 88;
  if (this->forward_average_packets_bulk() != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_bulk_rate = 89;
  if (this->forward_average_bulk_rate() != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_bytes_bulk = 90;
  if (this->backward_average_bytes_bulk() != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_packets_bulk = 91;
  if (this->backward_average_packets_bulk() != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_bulk_rate = 92;
  if (this->backward_average_bulk_rate() != 0) {
    total_size += 2 + 8;
  }

  // uint64 minimum_packet_length = 95;
  if (this->minimum_packet_length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_packet_length());
  }

  // uint64 maximum_packet_length = 96;
  if (this->maximum_packet_length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maximum_packet_length());
  }

  // double packet_length_mean = 97;
  if (this->packet_length_mean() != 0) {
    total_size += 2 + 8;
  }

  // double packet_length_std = 98;
  if (this->packet_length_std() != 0) {
    total_size += 2 + 8;
  }

  // double packet_length_variance = 99;
  if (this->packet_length_variance() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.NetworkFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkFeatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.NetworkFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.NetworkFeatures)
    MergeFrom(*source);
  }
}

void NetworkFeatures::MergeFrom(const NetworkFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.NetworkFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ddos_features_.MergeFrom(from.ddos_features_);
  ransomware_features_.MergeFrom(from.ransomware_features_);
  general_attack_features_.MergeFrom(from.general_attack_features_);
  internal_traffic_features_.MergeFrom(from.internal_traffic_features_);
  custom_features_.MergeFrom(from.custom_features_);
  feature_metadata_.MergeFrom(from.feature_metadata_);
  if (from.source_ip().size() > 0) {

    source_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_ip_);
  }
  if (from.destination_ip().size() > 0) {

    destination_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_ip_);
  }
  if (from.protocol_name().size() > 0) {

    protocol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_name_);
  }
  if (from.has_flow_start_time()) {
    mutable_flow_start_time()->::google::protobuf::Timestamp::MergeFrom(from.flow_start_time());
  }
  if (from.has_flow_duration()) {
    mutable_flow_duration()->::google::protobuf::Duration::MergeFrom(from.flow_duration());
  }
  if (from.source_port() != 0) {
    set_source_port(from.source_port());
  }
  if (from.destination_port() != 0) {
    set_destination_port(from.destination_port());
  }
  if (from.flow_duration_microseconds() != 0) {
    set_flow_duration_microseconds(from.flow_duration_microseconds());
  }
  if (from.total_forward_packets() != 0) {
    set_total_forward_packets(from.total_forward_packets());
  }
  if (from.total_backward_packets() != 0) {
    set_total_backward_packets(from.total_backward_packets());
  }
  if (from.total_forward_bytes() != 0) {
    set_total_forward_bytes(from.total_forward_bytes());
  }
  if (from.total_backward_bytes() != 0) {
    set_total_backward_bytes(from.total_backward_bytes());
  }
  if (from.forward_packet_length_max() != 0) {
    set_forward_packet_length_max(from.forward_packet_length_max());
  }
  if (from.forward_packet_length_min() != 0) {
    set_forward_packet_length_min(from.forward_packet_length_min());
  }
  if (from.forward_packet_length_mean() != 0) {
    set_forward_packet_length_mean(from.forward_packet_length_mean());
  }
  if (from.forward_packet_length_std() != 0) {
    set_forward_packet_length_std(from.forward_packet_length_std());
  }
  if (from.backward_packet_length_max() != 0) {
    set_backward_packet_length_max(from.backward_packet_length_max());
  }
  if (from.backward_packet_length_min() != 0) {
    set_backward_packet_length_min(from.backward_packet_length_min());
  }
  if (from.backward_packet_length_mean() != 0) {
    set_backward_packet_length_mean(from.backward_packet_length_mean());
  }
  if (from.backward_packet_length_std() != 0) {
    set_backward_packet_length_std(from.backward_packet_length_std());
  }
  if (from.protocol_number() != 0) {
    set_protocol_number(from.protocol_number());
  }
  if (from.fin_flag_count() != 0) {
    set_fin_flag_count(from.fin_flag_count());
  }
  if (from.flow_bytes_per_second() != 0) {
    set_flow_bytes_per_second(from.flow_bytes_per_second());
  }
  if (from.flow_packets_per_second() != 0) {
    set_flow_packets_per_second(from.flow_packets_per_second());
  }
  if (from.forward_packets_per_second() != 0) {
    set_forward_packets_per_second(from.forward_packets_per_second());
  }
  if (from.backward_packets_per_second() != 0) {
    set_backward_packets_per_second(from.backward_packets_per_second());
  }
  if (from.download_upload_ratio() != 0) {
    set_download_upload_ratio(from.download_upload_ratio());
  }
  if (from.average_packet_size() != 0) {
    set_average_packet_size(from.average_packet_size());
  }
  if (from.average_forward_segment_size() != 0) {
    set_average_forward_segment_size(from.average_forward_segment_size());
  }
  if (from.average_backward_segment_size() != 0) {
    set_average_backward_segment_size(from.average_backward_segment_size());
  }
  if (from.flow_inter_arrival_time_mean() != 0) {
    set_flow_inter_arrival_time_mean(from.flow_inter_arrival_time_mean());
  }
  if (from.flow_inter_arrival_time_std() != 0) {
    set_flow_inter_arrival_time_std(from.flow_inter_arrival_time_std());
  }
  if (from.flow_inter_arrival_time_max() != 0) {
    set_flow_inter_arrival_time_max(from.flow_inter_arrival_time_max());
  }
  if (from.flow_inter_arrival_time_min() != 0) {
    set_flow_inter_arrival_time_min(from.flow_inter_arrival_time_min());
  }
  if (from.forward_inter_arrival_time_total() != 0) {
    set_forward_inter_arrival_time_total(from.forward_inter_arrival_time_total());
  }
  if (from.forward_inter_arrival_time_mean() != 0) {
    set_forward_inter_arrival_time_mean(from.forward_inter_arrival_time_mean());
  }
  if (from.forward_inter_arrival_time_std() != 0) {
    set_forward_inter_arrival_time_std(from.forward_inter_arrival_time_std());
  }
  if (from.forward_inter_arrival_time_max() != 0) {
    set_forward_inter_arrival_time_max(from.forward_inter_arrival_time_max());
  }
  if (from.forward_inter_arrival_time_min() != 0) {
    set_forward_inter_arrival_time_min(from.forward_inter_arrival_time_min());
  }
  if (from.backward_inter_arrival_time_total() != 0) {
    set_backward_inter_arrival_time_total(from.backward_inter_arrival_time_total());
  }
  if (from.backward_inter_arrival_time_mean() != 0) {
    set_backward_inter_arrival_time_mean(from.backward_inter_arrival_time_mean());
  }
  if (from.backward_inter_arrival_time_std() != 0) {
    set_backward_inter_arrival_time_std(from.backward_inter_arrival_time_std());
  }
  if (from.backward_inter_arrival_time_max() != 0) {
    set_backward_inter_arrival_time_max(from.backward_inter_arrival_time_max());
  }
  if (from.backward_inter_arrival_time_min() != 0) {
    set_backward_inter_arrival_time_min(from.backward_inter_arrival_time_min());
  }
  if (from.syn_flag_count() != 0) {
    set_syn_flag_count(from.syn_flag_count());
  }
  if (from.rst_flag_count() != 0) {
    set_rst_flag_count(from.rst_flag_count());
  }
  if (from.psh_flag_count() != 0) {
    set_psh_flag_count(from.psh_flag_count());
  }
  if (from.ack_flag_count() != 0) {
    set_ack_flag_count(from.ack_flag_count());
  }
  if (from.backward_urg_flags() != 0) {
    set_backward_urg_flags(from.backward_urg_flags());
  }
  if (from.urg_flag_count() != 0) {
    set_urg_flag_count(from.urg_flag_count());
  }
  if (from.cwe_flag_count() != 0) {
    set_cwe_flag_count(from.cwe_flag_count());
  }
  if (from.ece_flag_count() != 0) {
    set_ece_flag_count(from.ece_flag_count());
  }
  if (from.forward_psh_flags() != 0) {
    set_forward_psh_flags(from.forward_psh_flags());
  }
  if (from.backward_psh_flags() != 0) {
    set_backward_psh_flags(from.backward_psh_flags());
  }
  if (from.forward_urg_flags() != 0) {
    set_forward_urg_flags(from.forward_urg_flags());
  }
  if (from.forward_header_length() != 0) {
    set_forward_header_length(from.forward_header_length());
  }
  if (from.backward_header_length() != 0) {
    set_backward_header_length(from.backward_header_length());
  }
  if (from.forward_average_bytes_bulk() != 0) {
    set_forward_average_bytes_bulk(from.forward_average_bytes_bulk());
  }
  if (from.forward_average_packets_bulk() != 0) {
    set_forward_average_packets_bulk(from.forward_average_packets_bulk());
  }
  if (from.forward_average_bulk_rate() != 0) {
    set_forward_average_bulk_rate(from.forward_average_bulk_rate());
  }
  if (from.backward_average_bytes_bulk() != 0) {
    set_backward_average_bytes_bulk(from.backward_average_bytes_bulk());
  }
  if (from.backward_average_packets_bulk() != 0) {
    set_backward_average_packets_bulk(from.backward_average_packets_bulk());
  }
  if (from.backward_average_bulk_rate() != 0) {
    set_backward_average_bulk_rate(from.backward_average_bulk_rate());
  }
  if (from.minimum_packet_length() != 0) {
    set_minimum_packet_length(from.minimum_packet_length());
  }
  if (from.maximum_packet_length() != 0) {
    set_maximum_packet_length(from.maximum_packet_length());
  }
  if (from.packet_length_mean() != 0) {
    set_packet_length_mean(from.packet_length_mean());
  }
  if (from.packet_length_std() != 0) {
    set_packet_length_std(from.packet_length_std());
  }
  if (from.packet_length_variance() != 0) {
    set_packet_length_variance(from.packet_length_variance());
  }
}

void NetworkFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.NetworkFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkFeatures::CopyFrom(const NetworkFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.NetworkFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkFeatures::IsInitialized() const {
  return true;
}

void NetworkFeatures::Swap(NetworkFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkFeatures::InternalSwap(NetworkFeatures* other) {
  using std::swap;
  ddos_features_.InternalSwap(&other->ddos_features_);
  ransomware_features_.InternalSwap(&other->ransomware_features_);
  general_attack_features_.InternalSwap(&other->general_attack_features_);
  internal_traffic_features_.InternalSwap(&other->internal_traffic_features_);
  custom_features_.Swap(&other->custom_features_);
  feature_metadata_.Swap(&other->feature_metadata_);
  source_ip_.Swap(&other->source_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_ip_.Swap(&other->destination_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_name_.Swap(&other->protocol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flow_start_time_, other->flow_start_time_);
  swap(flow_duration_, other->flow_duration_);
  swap(source_port_, other->source_port_);
  swap(destination_port_, other->destination_port_);
  swap(flow_duration_microseconds_, other->flow_duration_microseconds_);
  swap(total_forward_packets_, other->total_forward_packets_);
  swap(total_backward_packets_, other->total_backward_packets_);
  swap(total_forward_bytes_, other->total_forward_bytes_);
  swap(total_backward_bytes_, other->total_backward_bytes_);
  swap(forward_packet_length_max_, other->forward_packet_length_max_);
  swap(forward_packet_length_min_, other->forward_packet_length_min_);
  swap(forward_packet_length_mean_, other->forward_packet_length_mean_);
  swap(forward_packet_length_std_, other->forward_packet_length_std_);
  swap(backward_packet_length_max_, other->backward_packet_length_max_);
  swap(backward_packet_length_min_, other->backward_packet_length_min_);
  swap(backward_packet_length_mean_, other->backward_packet_length_mean_);
  swap(backward_packet_length_std_, other->backward_packet_length_std_);
  swap(protocol_number_, other->protocol_number_);
  swap(fin_flag_count_, other->fin_flag_count_);
  swap(flow_bytes_per_second_, other->flow_bytes_per_second_);
  swap(flow_packets_per_second_, other->flow_packets_per_second_);
  swap(forward_packets_per_second_, other->forward_packets_per_second_);
  swap(backward_packets_per_second_, other->backward_packets_per_second_);
  swap(download_upload_ratio_, other->download_upload_ratio_);
  swap(average_packet_size_, other->average_packet_size_);
  swap(average_forward_segment_size_, other->average_forward_segment_size_);
  swap(average_backward_segment_size_, other->average_backward_segment_size_);
  swap(flow_inter_arrival_time_mean_, other->flow_inter_arrival_time_mean_);
  swap(flow_inter_arrival_time_std_, other->flow_inter_arrival_time_std_);
  swap(flow_inter_arrival_time_max_, other->flow_inter_arrival_time_max_);
  swap(flow_inter_arrival_time_min_, other->flow_inter_arrival_time_min_);
  swap(forward_inter_arrival_time_total_, other->forward_inter_arrival_time_total_);
  swap(forward_inter_arrival_time_mean_, other->forward_inter_arrival_time_mean_);
  swap(forward_inter_arrival_time_std_, other->forward_inter_arrival_time_std_);
  swap(forward_inter_arrival_time_max_, other->forward_inter_arrival_time_max_);
  swap(forward_inter_arrival_time_min_, other->forward_inter_arrival_time_min_);
  swap(backward_inter_arrival_time_total_, other->backward_inter_arrival_time_total_);
  swap(backward_inter_arrival_time_mean_, other->backward_inter_arrival_time_mean_);
  swap(backward_inter_arrival_time_std_, other->backward_inter_arrival_time_std_);
  swap(backward_inter_arrival_time_max_, other->backward_inter_arrival_time_max_);
  swap(backward_inter_arrival_time_min_, other->backward_inter_arrival_time_min_);
  swap(syn_flag_count_, other->syn_flag_count_);
  swap(rst_flag_count_, other->rst_flag_count_);
  swap(psh_flag_count_, other->psh_flag_count_);
  swap(ack_flag_count_, other->ack_flag_count_);
  swap(backward_urg_flags_, other->backward_urg_flags_);
  swap(urg_flag_count_, other->urg_flag_count_);
  swap(cwe_flag_count_, other->cwe_flag_count_);
  swap(ece_flag_count_, other->ece_flag_count_);
  swap(forward_psh_flags_, other->forward_psh_flags_);
  swap(backward_psh_flags_, other->backward_psh_flags_);
  swap(forward_urg_flags_, other->forward_urg_flags_);
  swap(forward_header_length_, other->forward_header_length_);
  swap(backward_header_length_, other->backward_header_length_);
  swap(forward_average_bytes_bulk_, other->forward_average_bytes_bulk_);
  swap(forward_average_packets_bulk_, other->forward_average_packets_bulk_);
  swap(forward_average_bulk_rate_, other->forward_average_bulk_rate_);
  swap(backward_average_bytes_bulk_, other->backward_average_bytes_bulk_);
  swap(backward_average_packets_bulk_, other->backward_average_packets_bulk_);
  swap(backward_average_bulk_rate_, other->backward_average_bulk_rate_);
  swap(minimum_packet_length_, other->minimum_packet_length_);
  swap(maximum_packet_length_, other->maximum_packet_length_);
  swap(packet_length_mean_, other->packet_length_mean_);
  swap(packet_length_std_, other->packet_length_std_);
  swap(packet_length_variance_, other->packet_length_variance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkFeatures::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeoLocationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoLocationInfo::kCountryNameFieldNumber;
const int GeoLocationInfo::kCountryCodeFieldNumber;
const int GeoLocationInfo::kRegionNameFieldNumber;
const int GeoLocationInfo::kCityNameFieldNumber;
const int GeoLocationInfo::kLatitudeFieldNumber;
const int GeoLocationInfo::kLongitudeFieldNumber;
const int GeoLocationInfo::kTimezoneFieldNumber;
const int GeoLocationInfo::kIspNameFieldNumber;
const int GeoLocationInfo::kOrganizationNameFieldNumber;
const int GeoLocationInfo::kAutonomousSystemNumberFieldNumber;
const int GeoLocationInfo::kIsAnonymousProxyFieldNumber;
const int GeoLocationInfo::kIsSatelliteProviderFieldNumber;
const int GeoLocationInfo::kIsTorExitNodeFieldNumber;
const int GeoLocationInfo::kIsKnownMaliciousFieldNumber;
const int GeoLocationInfo::kThreatLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoLocationInfo::GeoLocationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoLocationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.GeoLocationInfo)
}
GeoLocationInfo::GeoLocationInfo(const GeoLocationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country_name().size() > 0) {
    country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country_code().size() > 0) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  region_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region_name().size() > 0) {
    region_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_name_);
  }
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.city_name().size() > 0) {
    city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timezone().size() > 0) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  isp_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.isp_name().size() > 0) {
    isp_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.isp_name_);
  }
  organization_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.organization_name().size() > 0) {
    organization_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_name_);
  }
  autonomous_system_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.autonomous_system_number().size() > 0) {
    autonomous_system_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autonomous_system_number_);
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&threat_level_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(threat_level_));
  // @@protoc_insertion_point(copy_constructor:protobuf.GeoLocationInfo)
}

void GeoLocationInfo::SharedCtor() {
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autonomous_system_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threat_level_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(threat_level_));
}

GeoLocationInfo::~GeoLocationInfo() {
  // @@protoc_insertion_point(destructor:protobuf.GeoLocationInfo)
  SharedDtor();
}

void GeoLocationInfo::SharedDtor() {
  country_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autonomous_system_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoLocationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeoLocationInfo::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoLocationInfo& GeoLocationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoLocationInfo.base);
  return *internal_default_instance();
}


void GeoLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.GeoLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autonomous_system_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threat_level_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(threat_level_));
  _internal_metadata_.Clear();
}

bool GeoLocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.GeoLocationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string country_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_name().data(), static_cast<int>(this->country_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.country_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region_name().data(), static_cast<int>(this->region_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.region_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->city_name().data(), static_cast<int>(this->city_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.city_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timezone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), static_cast<int>(this->timezone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.timezone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string isp_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->isp_name().data(), static_cast<int>(this->isp_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.isp_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string organization_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->organization_name().data(), static_cast<int>(this->organization_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.organization_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string autonomous_system_number = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autonomous_system_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->autonomous_system_number().data(), static_cast<int>(this->autonomous_system_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoLocationInfo.autonomous_system_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_anonymous_proxy = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymous_proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_satellite_provider = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_satellite_provider_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_tor_exit_node = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tor_exit_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_known_malicious = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_known_malicious_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_threat_level(static_cast< ::protobuf::GeoLocationInfo_ThreatLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.GeoLocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.GeoLocationInfo)
  return false;
#undef DO_
}

void GeoLocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.GeoLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string country_name = 1;
  if (this->country_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_name().data(), static_cast<int>(this->country_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country_name(), output);
  }

  // string country_code = 2;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // string region_name = 3;
  if (this->region_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_name().data(), static_cast<int>(this->region_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.region_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->region_name(), output);
  }

  // string city_name = 4;
  if (this->city_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city_name().data(), static_cast<int>(this->city_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.city_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->city_name(), output);
  }

  // double latitude = 5;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // double longitude = 6;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude(), output);
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  // string isp_name = 8;
  if (this->isp_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->isp_name().data(), static_cast<int>(this->isp_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.isp_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->isp_name(), output);
  }

  // string organization_name = 9;
  if (this->organization_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization_name().data(), static_cast<int>(this->organization_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.organization_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->organization_name(), output);
  }

  // string autonomous_system_number = 10;
  if (this->autonomous_system_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autonomous_system_number().data(), static_cast<int>(this->autonomous_system_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.autonomous_system_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->autonomous_system_number(), output);
  }

  // bool is_anonymous_proxy = 11;
  if (this->is_anonymous_proxy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_anonymous_proxy(), output);
  }

  // bool is_satellite_provider = 12;
  if (this->is_satellite_provider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_satellite_provider(), output);
  }

  // bool is_tor_exit_node = 13;
  if (this->is_tor_exit_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_tor_exit_node(), output);
  }

  // bool is_known_malicious = 14;
  if (this->is_known_malicious() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_known_malicious(), output);
  }

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  if (this->threat_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->threat_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.GeoLocationInfo)
}

::google::protobuf::uint8* GeoLocationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GeoLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string country_name = 1;
  if (this->country_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_name().data(), static_cast<int>(this->country_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_name(), target);
  }

  // string country_code = 2;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // string region_name = 3;
  if (this->region_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_name().data(), static_cast<int>(this->region_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.region_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region_name(), target);
  }

  // string city_name = 4;
  if (this->city_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city_name().data(), static_cast<int>(this->city_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.city_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->city_name(), target);
  }

  // double latitude = 5;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // double longitude = 6;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude(), target);
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  // string isp_name = 8;
  if (this->isp_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->isp_name().data(), static_cast<int>(this->isp_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.isp_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->isp_name(), target);
  }

  // string organization_name = 9;
  if (this->organization_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization_name().data(), static_cast<int>(this->organization_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.organization_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->organization_name(), target);
  }

  // string autonomous_system_number = 10;
  if (this->autonomous_system_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autonomous_system_number().data(), static_cast<int>(this->autonomous_system_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.autonomous_system_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->autonomous_system_number(), target);
  }

  // bool is_anonymous_proxy = 11;
  if (this->is_anonymous_proxy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_anonymous_proxy(), target);
  }

  // bool is_satellite_provider = 12;
  if (this->is_satellite_provider() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_satellite_provider(), target);
  }

  // bool is_tor_exit_node = 13;
  if (this->is_tor_exit_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_tor_exit_node(), target);
  }

  // bool is_known_malicious = 14;
  if (this->is_known_malicious() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_known_malicious(), target);
  }

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  if (this->threat_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->threat_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GeoLocationInfo)
  return target;
}

size_t GeoLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.GeoLocationInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string country_name = 1;
  if (this->country_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_name());
  }

  // string country_code = 2;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_code());
  }

  // string region_name = 3;
  if (this->region_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region_name());
  }

  // string city_name = 4;
  if (this->city_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city_name());
  }

  // string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // string isp_name = 8;
  if (this->isp_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->isp_name());
  }

  // string organization_name = 9;
  if (this->organization_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->organization_name());
  }

  // string autonomous_system_number = 10;
  if (this->autonomous_system_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->autonomous_system_number());
  }

  // double latitude = 5;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 6;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // bool is_anonymous_proxy = 11;
  if (this->is_anonymous_proxy() != 0) {
    total_size += 1 + 1;
  }

  // bool is_satellite_provider = 12;
  if (this->is_satellite_provider() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tor_exit_node = 13;
  if (this->is_tor_exit_node() != 0) {
    total_size += 1 + 1;
  }

  // bool is_known_malicious = 14;
  if (this->is_known_malicious() != 0) {
    total_size += 1 + 1;
  }

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  if (this->threat_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->threat_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoLocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.GeoLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoLocationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoLocationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.GeoLocationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.GeoLocationInfo)
    MergeFrom(*source);
  }
}

void GeoLocationInfo::MergeFrom(const GeoLocationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.GeoLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country_name().size() > 0) {

    country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
  }
  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.region_name().size() > 0) {

    region_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_name_);
  }
  if (from.city_name().size() > 0) {

    city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.isp_name().size() > 0) {

    isp_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.isp_name_);
  }
  if (from.organization_name().size() > 0) {

    organization_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_name_);
  }
  if (from.autonomous_system_number().size() > 0) {

    autonomous_system_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autonomous_system_number_);
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.is_anonymous_proxy() != 0) {
    set_is_anonymous_proxy(from.is_anonymous_proxy());
  }
  if (from.is_satellite_provider() != 0) {
    set_is_satellite_provider(from.is_satellite_provider());
  }
  if (from.is_tor_exit_node() != 0) {
    set_is_tor_exit_node(from.is_tor_exit_node());
  }
  if (from.is_known_malicious() != 0) {
    set_is_known_malicious(from.is_known_malicious());
  }
  if (from.threat_level() != 0) {
    set_threat_level(from.threat_level());
  }
}

void GeoLocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.GeoLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLocationInfo::CopyFrom(const GeoLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.GeoLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLocationInfo::IsInitialized() const {
  return true;
}

void GeoLocationInfo::Swap(GeoLocationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoLocationInfo::InternalSwap(GeoLocationInfo* other) {
  using std::swap;
  country_name_.Swap(&other->country_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_name_.Swap(&other->region_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_name_.Swap(&other->city_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_.Swap(&other->timezone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  isp_name_.Swap(&other->isp_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  organization_name_.Swap(&other->organization_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  autonomous_system_number_.Swap(&other->autonomous_system_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(is_anonymous_proxy_, other->is_anonymous_proxy_);
  swap(is_satellite_provider_, other->is_satellite_provider_);
  swap(is_tor_exit_node_, other->is_tor_exit_node_);
  swap(is_known_malicious_, other->is_known_malicious_);
  swap(threat_level_, other->threat_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeoLocationInfo::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeoEnrichment::InitAsDefaultInstance() {
  ::protobuf::_GeoEnrichment_default_instance_._instance.get_mutable()->sniffer_node_geo_ = const_cast< ::protobuf::GeoLocationInfo*>(
      ::protobuf::GeoLocationInfo::internal_default_instance());
  ::protobuf::_GeoEnrichment_default_instance_._instance.get_mutable()->source_ip_geo_ = const_cast< ::protobuf::GeoLocationInfo*>(
      ::protobuf::GeoLocationInfo::internal_default_instance());
  ::protobuf::_GeoEnrichment_default_instance_._instance.get_mutable()->destination_ip_geo_ = const_cast< ::protobuf::GeoLocationInfo*>(
      ::protobuf::GeoLocationInfo::internal_default_instance());
  ::protobuf::_GeoEnrichment_default_instance_._instance.get_mutable()->ip_discovery_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_GeoEnrichment_default_instance_._instance.get_mutable()->enrichment_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void GeoEnrichment::clear_ip_discovery_time() {
  if (GetArenaNoVirtual() == NULL && ip_discovery_time_ != NULL) {
    delete ip_discovery_time_;
  }
  ip_discovery_time_ = NULL;
}
void GeoEnrichment::clear_enrichment_timestamp() {
  if (GetArenaNoVirtual() == NULL && enrichment_timestamp_ != NULL) {
    delete enrichment_timestamp_;
  }
  enrichment_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoEnrichment::kSnifferNodeGeoFieldNumber;
const int GeoEnrichment::kSourceIpGeoFieldNumber;
const int GeoEnrichment::kDestinationIpGeoFieldNumber;
const int GeoEnrichment::kSourceDestinationDistanceKmFieldNumber;
const int GeoEnrichment::kSourceDestinationSameCountryFieldNumber;
const int GeoEnrichment::kSourceDestinationSameContinentFieldNumber;
const int GeoEnrichment::kDistanceCategoryFieldNumber;
const int GeoEnrichment::kSnifferSourceDistanceKmFieldNumber;
const int GeoEnrichment::kSnifferSourceSameCountryFieldNumber;
const int GeoEnrichment::kSnifferSourceRelationshipFieldNumber;
const int GeoEnrichment::kSnifferDestinationDistanceKmFieldNumber;
const int GeoEnrichment::kSnifferDestinationSameCountryFieldNumber;
const int GeoEnrichment::kSnifferDestinationRelationshipFieldNumber;
const int GeoEnrichment::kThreatIntelligenceMatchesFieldNumber;
const int GeoEnrichment::kThreatIntelligenceSourceFieldNumber;
const int GeoEnrichment::kGeographicAnomalyScoreFieldNumber;
const int GeoEnrichment::kSuspiciousGeographicPatternFieldNumber;
const int GeoEnrichment::kSnifferNodeEnrichedFieldNumber;
const int GeoEnrichment::kSourceIpEnrichedFieldNumber;
const int GeoEnrichment::kDestinationIpEnrichedFieldNumber;
const int GeoEnrichment::kEnrichmentCompleteFieldNumber;
const int GeoEnrichment::kPublicIpDiscoveryAttemptedFieldNumber;
const int GeoEnrichment::kOriginalPrivateIpFieldNumber;
const int GeoEnrichment::kDiscoveredPublicIpFieldNumber;
const int GeoEnrichment::kIpDiscoveryServiceFieldNumber;
const int GeoEnrichment::kIpDiscoveryTimeFieldNumber;
const int GeoEnrichment::kEnricherVersionFieldNumber;
const int GeoEnrichment::kGeoipMethodFieldNumber;
const int GeoEnrichment::kGeoipDatabaseVersionFieldNumber;
const int GeoEnrichment::kFallbackCoordinatesUsedFieldNumber;
const int GeoEnrichment::kTotalLookupLatencyMsFieldNumber;
const int GeoEnrichment::kCacheHitsFieldNumber;
const int GeoEnrichment::kCacheMissesFieldNumber;
const int GeoEnrichment::kEnrichmentSuccessRateFieldNumber;
const int GeoEnrichment::kEnrichmentTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoEnrichment::GeoEnrichment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoEnrichment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.GeoEnrichment)
}
GeoEnrichment::GeoEnrichment(const GeoEnrichment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      threat_intelligence_matches_(from.threat_intelligence_matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.distance_category().size() > 0) {
    distance_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distance_category_);
  }
  sniffer_source_relationship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sniffer_source_relationship().size() > 0) {
    sniffer_source_relationship_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sniffer_source_relationship_);
  }
  sniffer_destination_relationship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sniffer_destination_relationship().size() > 0) {
    sniffer_destination_relationship_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sniffer_destination_relationship_);
  }
  threat_intelligence_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.threat_intelligence_source().size() > 0) {
    threat_intelligence_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threat_intelligence_source_);
  }
  original_private_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_private_ip().size() > 0) {
    original_private_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_private_ip_);
  }
  discovered_public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.discovered_public_ip().size() > 0) {
    discovered_public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discovered_public_ip_);
  }
  ip_discovery_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_discovery_service().size() > 0) {
    ip_discovery_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_discovery_service_);
  }
  enricher_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enricher_version().size() > 0) {
    enricher_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enricher_version_);
  }
  geoip_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geoip_method().size() > 0) {
    geoip_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoip_method_);
  }
  geoip_database_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geoip_database_version().size() > 0) {
    geoip_database_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoip_database_version_);
  }
  if (from.has_sniffer_node_geo()) {
    sniffer_node_geo_ = new ::protobuf::GeoLocationInfo(*from.sniffer_node_geo_);
  } else {
    sniffer_node_geo_ = NULL;
  }
  if (from.has_source_ip_geo()) {
    source_ip_geo_ = new ::protobuf::GeoLocationInfo(*from.source_ip_geo_);
  } else {
    source_ip_geo_ = NULL;
  }
  if (from.has_destination_ip_geo()) {
    destination_ip_geo_ = new ::protobuf::GeoLocationInfo(*from.destination_ip_geo_);
  } else {
    destination_ip_geo_ = NULL;
  }
  if (from.has_ip_discovery_time()) {
    ip_discovery_time_ = new ::google::protobuf::Timestamp(*from.ip_discovery_time_);
  } else {
    ip_discovery_time_ = NULL;
  }
  if (from.has_enrichment_timestamp()) {
    enrichment_timestamp_ = new ::google::protobuf::Timestamp(*from.enrichment_timestamp_);
  } else {
    enrichment_timestamp_ = NULL;
  }
  ::memcpy(&source_destination_distance_km_, &from.source_destination_distance_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&enrichment_success_rate_) -
    reinterpret_cast<char*>(&source_destination_distance_km_)) + sizeof(enrichment_success_rate_));
  // @@protoc_insertion_point(copy_constructor:protobuf.GeoEnrichment)
}

void GeoEnrichment::SharedCtor() {
  distance_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_source_relationship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_destination_relationship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_intelligence_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_private_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discovered_public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_discovery_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enricher_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_database_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sniffer_node_geo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enrichment_success_rate_) -
      reinterpret_cast<char*>(&sniffer_node_geo_)) + sizeof(enrichment_success_rate_));
}

GeoEnrichment::~GeoEnrichment() {
  // @@protoc_insertion_point(destructor:protobuf.GeoEnrichment)
  SharedDtor();
}

void GeoEnrichment::SharedDtor() {
  distance_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_source_relationship_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_destination_relationship_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_intelligence_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_private_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discovered_public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_discovery_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enricher_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_database_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sniffer_node_geo_;
  if (this != internal_default_instance()) delete source_ip_geo_;
  if (this != internal_default_instance()) delete destination_ip_geo_;
  if (this != internal_default_instance()) delete ip_discovery_time_;
  if (this != internal_default_instance()) delete enrichment_timestamp_;
}

void GeoEnrichment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeoEnrichment::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoEnrichment& GeoEnrichment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_GeoEnrichment.base);
  return *internal_default_instance();
}


void GeoEnrichment::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.GeoEnrichment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threat_intelligence_matches_.Clear();
  distance_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_source_relationship_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sniffer_destination_relationship_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_intelligence_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_private_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discovered_public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_discovery_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enricher_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoip_database_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sniffer_node_geo_ != NULL) {
    delete sniffer_node_geo_;
  }
  sniffer_node_geo_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_ip_geo_ != NULL) {
    delete source_ip_geo_;
  }
  source_ip_geo_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_ip_geo_ != NULL) {
    delete destination_ip_geo_;
  }
  destination_ip_geo_ = NULL;
  if (GetArenaNoVirtual() == NULL && ip_discovery_time_ != NULL) {
    delete ip_discovery_time_;
  }
  ip_discovery_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && enrichment_timestamp_ != NULL) {
    delete enrichment_timestamp_;
  }
  enrichment_timestamp_ = NULL;
  ::memset(&source_destination_distance_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enrichment_success_rate_) -
      reinterpret_cast<char*>(&source_destination_distance_km_)) + sizeof(enrichment_success_rate_));
  _internal_metadata_.Clear();
}

bool GeoEnrichment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.GeoEnrichment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sniffer_node_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.GeoLocationInfo source_ip_geo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_ip_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.GeoLocationInfo destination_ip_geo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_ip_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double source_destination_distance_km = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &source_destination_distance_km_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool source_destination_same_country = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_destination_same_country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool source_destination_same_continent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_destination_same_continent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string distance_category = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distance_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->distance_category().data(), static_cast<int>(this->distance_category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.distance_category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sniffer_source_distance_km = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sniffer_source_distance_km_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sniffer_source_same_country = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sniffer_source_same_country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sniffer_source_relationship = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sniffer_source_relationship()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sniffer_source_relationship().data(), static_cast<int>(this->sniffer_source_relationship().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.sniffer_source_relationship"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sniffer_destination_distance_km = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sniffer_destination_distance_km_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sniffer_destination_same_country = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sniffer_destination_same_country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sniffer_destination_relationship = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sniffer_destination_relationship()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sniffer_destination_relationship().data(), static_cast<int>(this->sniffer_destination_relationship().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.sniffer_destination_relationship"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string threat_intelligence_matches = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_threat_intelligence_matches()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->threat_intelligence_matches(this->threat_intelligence_matches_size() - 1).data(),
            static_cast<int>(this->threat_intelligence_matches(this->threat_intelligence_matches_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.threat_intelligence_matches"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string threat_intelligence_source = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_threat_intelligence_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->threat_intelligence_source().data(), static_cast<int>(this->threat_intelligence_source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.threat_intelligence_source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float geographic_anomaly_score = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &geographic_anomaly_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool suspicious_geographic_pattern = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspicious_geographic_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sniffer_node_enriched = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sniffer_node_enriched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool source_ip_enriched = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_ip_enriched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool destination_ip_enriched = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destination_ip_enriched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enrichment_complete = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enrichment_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool public_ip_discovery_attempted = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &public_ip_discovery_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string original_private_ip = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_private_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_private_ip().data(), static_cast<int>(this->original_private_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.original_private_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string discovered_public_ip = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discovered_public_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->discovered_public_ip().data(), static_cast<int>(this->discovered_public_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.discovered_public_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip_discovery_service = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_discovery_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_discovery_service().data(), static_cast<int>(this->ip_discovery_service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.ip_discovery_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp ip_discovery_time = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_discovery_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enricher_version = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enricher_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enricher_version().data(), static_cast<int>(this->enricher_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.enricher_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geoip_method = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geoip_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geoip_method().data(), static_cast<int>(this->geoip_method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.geoip_method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geoip_database_version = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geoip_database_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geoip_database_version().data(), static_cast<int>(this->geoip_database_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.GeoEnrichment.geoip_database_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fallback_coordinates_used = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fallback_coordinates_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float total_lookup_latency_ms = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_lookup_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cache_hits = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cache_misses = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float enrichment_success_rate = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 461 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enrichment_success_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp enrichment_timestamp = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enrichment_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.GeoEnrichment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.GeoEnrichment)
  return false;
#undef DO_
}

void GeoEnrichment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.GeoEnrichment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  if (this->has_sniffer_node_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sniffer_node_geo(), output);
  }

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  if (this->has_source_ip_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_source_ip_geo(), output);
  }

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  if (this->has_destination_ip_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_destination_ip_geo(), output);
  }

  // double source_destination_distance_km = 10;
  if (this->source_destination_distance_km() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->source_destination_distance_km(), output);
  }

  // bool source_destination_same_country = 11;
  if (this->source_destination_same_country() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->source_destination_same_country(), output);
  }

  // bool source_destination_same_continent = 12;
  if (this->source_destination_same_continent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->source_destination_same_continent(), output);
  }

  // string distance_category = 13;
  if (this->distance_category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->distance_category().data(), static_cast<int>(this->distance_category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.distance_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->distance_category(), output);
  }

  // double sniffer_source_distance_km = 20;
  if (this->sniffer_source_distance_km() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->sniffer_source_distance_km(), output);
  }

  // bool sniffer_source_same_country = 21;
  if (this->sniffer_source_same_country() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->sniffer_source_same_country(), output);
  }

  // string sniffer_source_relationship = 22;
  if (this->sniffer_source_relationship().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sniffer_source_relationship().data(), static_cast<int>(this->sniffer_source_relationship().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_source_relationship");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->sniffer_source_relationship(), output);
  }

  // double sniffer_destination_distance_km = 25;
  if (this->sniffer_destination_distance_km() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->sniffer_destination_distance_km(), output);
  }

  // bool sniffer_destination_same_country = 26;
  if (this->sniffer_destination_same_country() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->sniffer_destination_same_country(), output);
  }

  // string sniffer_destination_relationship = 27;
  if (this->sniffer_destination_relationship().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sniffer_destination_relationship().data(), static_cast<int>(this->sniffer_destination_relationship().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_destination_relationship");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->sniffer_destination_relationship(), output);
  }

  // repeated string threat_intelligence_matches = 30;
  for (int i = 0, n = this->threat_intelligence_matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_intelligence_matches(i).data(), static_cast<int>(this->threat_intelligence_matches(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_matches");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->threat_intelligence_matches(i), output);
  }

  // string threat_intelligence_source = 31;
  if (this->threat_intelligence_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_intelligence_source().data(), static_cast<int>(this->threat_intelligence_source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->threat_intelligence_source(), output);
  }

  // float geographic_anomaly_score = 32;
  if (this->geographic_anomaly_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->geographic_anomaly_score(), output);
  }

  // bool suspicious_geographic_pattern = 33;
  if (this->suspicious_geographic_pattern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->suspicious_geographic_pattern(), output);
  }

  // bool sniffer_node_enriched = 40;
  if (this->sniffer_node_enriched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->sniffer_node_enriched(), output);
  }

  // bool source_ip_enriched = 41;
  if (this->source_ip_enriched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->source_ip_enriched(), output);
  }

  // bool destination_ip_enriched = 42;
  if (this->destination_ip_enriched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->destination_ip_enriched(), output);
  }

  // bool enrichment_complete = 43;
  if (this->enrichment_complete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->enrichment_complete(), output);
  }

  // bool public_ip_discovery_attempted = 45;
  if (this->public_ip_discovery_attempted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->public_ip_discovery_attempted(), output);
  }

  // string original_private_ip = 46;
  if (this->original_private_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_private_ip().data(), static_cast<int>(this->original_private_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.original_private_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->original_private_ip(), output);
  }

  // string discovered_public_ip = 47;
  if (this->discovered_public_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discovered_public_ip().data(), static_cast<int>(this->discovered_public_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.discovered_public_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->discovered_public_ip(), output);
  }

  // string ip_discovery_service = 48;
  if (this->ip_discovery_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_discovery_service().data(), static_cast<int>(this->ip_discovery_service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.ip_discovery_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->ip_discovery_service(), output);
  }

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  if (this->has_ip_discovery_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->_internal_ip_discovery_time(), output);
  }

  // string enricher_version = 50;
  if (this->enricher_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enricher_version().data(), static_cast<int>(this->enricher_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.enricher_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->enricher_version(), output);
  }

  // string geoip_method = 51;
  if (this->geoip_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geoip_method().data(), static_cast<int>(this->geoip_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->geoip_method(), output);
  }

  // string geoip_database_version = 52;
  if (this->geoip_database_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geoip_database_version().data(), static_cast<int>(this->geoip_database_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_database_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->geoip_database_version(), output);
  }

  // bool fallback_coordinates_used = 53;
  if (this->fallback_coordinates_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->fallback_coordinates_used(), output);
  }

  // float total_lookup_latency_ms = 54;
  if (this->total_lookup_latency_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->total_lookup_latency_ms(), output);
  }

  // int32 cache_hits = 55;
  if (this->cache_hits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->cache_hits(), output);
  }

  // int32 cache_misses = 56;
  if (this->cache_misses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->cache_misses(), output);
  }

  // float enrichment_success_rate = 57;
  if (this->enrichment_success_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->enrichment_success_rate(), output);
  }

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  if (this->has_enrichment_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->_internal_enrichment_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.GeoEnrichment)
}

::google::protobuf::uint8* GeoEnrichment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GeoEnrichment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  if (this->has_sniffer_node_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sniffer_node_geo(), deterministic, target);
  }

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  if (this->has_source_ip_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_source_ip_geo(), deterministic, target);
  }

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  if (this->has_destination_ip_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_destination_ip_geo(), deterministic, target);
  }

  // double source_destination_distance_km = 10;
  if (this->source_destination_distance_km() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->source_destination_distance_km(), target);
  }

  // bool source_destination_same_country = 11;
  if (this->source_destination_same_country() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->source_destination_same_country(), target);
  }

  // bool source_destination_same_continent = 12;
  if (this->source_destination_same_continent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->source_destination_same_continent(), target);
  }

  // string distance_category = 13;
  if (this->distance_category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->distance_category().data(), static_cast<int>(this->distance_category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.distance_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->distance_category(), target);
  }

  // double sniffer_source_distance_km = 20;
  if (this->sniffer_source_distance_km() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->sniffer_source_distance_km(), target);
  }

  // bool sniffer_source_same_country = 21;
  if (this->sniffer_source_same_country() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->sniffer_source_same_country(), target);
  }

  // string sniffer_source_relationship = 22;
  if (this->sniffer_source_relationship().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sniffer_source_relationship().data(), static_cast<int>(this->sniffer_source_relationship().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_source_relationship");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->sniffer_source_relationship(), target);
  }

  // double sniffer_destination_distance_km = 25;
  if (this->sniffer_destination_distance_km() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->sniffer_destination_distance_km(), target);
  }

  // bool sniffer_destination_same_country = 26;
  if (this->sniffer_destination_same_country() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->sniffer_destination_same_country(), target);
  }

  // string sniffer_destination_relationship = 27;
  if (this->sniffer_destination_relationship().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sniffer_destination_relationship().data(), static_cast<int>(this->sniffer_destination_relationship().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_destination_relationship");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->sniffer_destination_relationship(), target);
  }

  // repeated string threat_intelligence_matches = 30;
  for (int i = 0, n = this->threat_intelligence_matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_intelligence_matches(i).data(), static_cast<int>(this->threat_intelligence_matches(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_matches");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->threat_intelligence_matches(i), target);
  }

  // string threat_intelligence_source = 31;
  if (this->threat_intelligence_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_intelligence_source().data(), static_cast<int>(this->threat_intelligence_source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->threat_intelligence_source(), target);
  }

  // float geographic_anomaly_score = 32;
  if (this->geographic_anomaly_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->geographic_anomaly_score(), target);
  }

  // bool suspicious_geographic_pattern = 33;
  if (this->suspicious_geographic_pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->suspicious_geographic_pattern(), target);
  }

  // bool sniffer_node_enriched = 40;
  if (this->sniffer_node_enriched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->sniffer_node_enriched(), target);
  }

  // bool source_ip_enriched = 41;
  if (this->source_ip_enriched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->source_ip_enriched(), target);
  }

  // bool destination_ip_enriched = 42;
  if (this->destination_ip_enriched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->destination_ip_enriched(), target);
  }

  // bool enrichment_complete = 43;
  if (this->enrichment_complete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->enrichment_complete(), target);
  }

  // bool public_ip_discovery_attempted = 45;
  if (this->public_ip_discovery_attempted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->public_ip_discovery_attempted(), target);
  }

  // string original_private_ip = 46;
  if (this->original_private_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_private_ip().data(), static_cast<int>(this->original_private_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.original_private_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->original_private_ip(), target);
  }

  // string discovered_public_ip = 47;
  if (this->discovered_public_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discovered_public_ip().data(), static_cast<int>(this->discovered_public_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.discovered_public_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->discovered_public_ip(), target);
  }

  // string ip_discovery_service = 48;
  if (this->ip_discovery_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_discovery_service().data(), static_cast<int>(this->ip_discovery_service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.ip_discovery_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->ip_discovery_service(), target);
  }

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  if (this->has_ip_discovery_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        49, this->_internal_ip_discovery_time(), deterministic, target);
  }

  // string enricher_version = 50;
  if (this->enricher_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enricher_version().data(), static_cast<int>(this->enricher_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.enricher_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->enricher_version(), target);
  }

  // string geoip_method = 51;
  if (this->geoip_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geoip_method().data(), static_cast<int>(this->geoip_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->geoip_method(), target);
  }

  // string geoip_database_version = 52;
  if (this->geoip_database_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geoip_database_version().data(), static_cast<int>(this->geoip_database_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_database_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->geoip_database_version(), target);
  }

  // bool fallback_coordinates_used = 53;
  if (this->fallback_coordinates_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->fallback_coordinates_used(), target);
  }

  // float total_lookup_latency_ms = 54;
  if (this->total_lookup_latency_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->total_lookup_latency_ms(), target);
  }

  // int32 cache_hits = 55;
  if (this->cache_hits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->cache_hits(), target);
  }

  // int32 cache_misses = 56;
  if (this->cache_misses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->cache_misses(), target);
  }

  // float enrichment_success_rate = 57;
  if (this->enrichment_success_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->enrichment_success_rate(), target);
  }

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  if (this->has_enrichment_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        58, this->_internal_enrichment_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GeoEnrichment)
  return target;
}

size_t GeoEnrichment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.GeoEnrichment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string threat_intelligence_matches = 30;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->threat_intelligence_matches_size());
  for (int i = 0, n = this->threat_intelligence_matches_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->threat_intelligence_matches(i));
  }

  // string distance_category = 13;
  if (this->distance_category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->distance_category());
  }

  // string sniffer_source_relationship = 22;
  if (this->sniffer_source_relationship().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sniffer_source_relationship());
  }

  // string sniffer_destination_relationship = 27;
  if (this->sniffer_destination_relationship().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sniffer_destination_relationship());
  }

  // string threat_intelligence_source = 31;
  if (this->threat_intelligence_source().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->threat_intelligence_source());
  }

  // string original_private_ip = 46;
  if (this->original_private_ip().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->original_private_ip());
  }

  // string discovered_public_ip = 47;
  if (this->discovered_public_ip().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->discovered_public_ip());
  }

  // string ip_discovery_service = 48;
  if (this->ip_discovery_service().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_discovery_service());
  }

  // string enricher_version = 50;
  if (this->enricher_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enricher_version());
  }

  // string geoip_method = 51;
  if (this->geoip_method().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geoip_method());
  }

  // string geoip_database_version = 52;
  if (this->geoip_database_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geoip_database_version());
  }

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  if (this->has_sniffer_node_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sniffer_node_geo_);
  }

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  if (this->has_source_ip_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_ip_geo_);
  }

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  if (this->has_destination_ip_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destination_ip_geo_);
  }

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  if (this->has_ip_discovery_time()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ip_discovery_time_);
  }

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  if (this->has_enrichment_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *enrichment_timestamp_);
  }

  // double source_destination_distance_km = 10;
  if (this->source_destination_distance_km() != 0) {
    total_size += 1 + 8;
  }

  // double sniffer_source_distance_km = 20;
  if (this->sniffer_source_distance_km() != 0) {
    total_size += 2 + 8;
  }

  // bool source_destination_same_country = 11;
  if (this->source_destination_same_country() != 0) {
    total_size += 1 + 1;
  }

  // bool source_destination_same_continent = 12;
  if (this->source_destination_same_continent() != 0) {
    total_size += 1 + 1;
  }

  // bool sniffer_source_same_country = 21;
  if (this->sniffer_source_same_country() != 0) {
    total_size += 2 + 1;
  }

  // bool sniffer_destination_same_country = 26;
  if (this->sniffer_destination_same_country() != 0) {
    total_size += 2 + 1;
  }

  // float geographic_anomaly_score = 32;
  if (this->geographic_anomaly_score() != 0) {
    total_size += 2 + 4;
  }

  // double sniffer_destination_distance_km = 25;
  if (this->sniffer_destination_distance_km() != 0) {
    total_size += 2 + 8;
  }

  // bool suspicious_geographic_pattern = 33;
  if (this->suspicious_geographic_pattern() != 0) {
    total_size += 2 + 1;
  }

  // bool sniffer_node_enriched = 40;
  if (this->sniffer_node_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool source_ip_enriched = 41;
  if (this->source_ip_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool destination_ip_enriched = 42;
  if (this->destination_ip_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool enrichment_complete = 43;
  if (this->enrichment_complete() != 0) {
    total_size += 2 + 1;
  }

  // bool public_ip_discovery_attempted = 45;
  if (this->public_ip_discovery_attempted() != 0) {
    total_size += 2 + 1;
  }

  // bool fallback_coordinates_used = 53;
  if (this->fallback_coordinates_used() != 0) {
    total_size += 2 + 1;
  }

  // float total_lookup_latency_ms = 54;
  if (this->total_lookup_latency_ms() != 0) {
    total_size += 2 + 4;
  }

  // int32 cache_hits = 55;
  if (this->cache_hits() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cache_hits());
  }

  // int32 cache_misses = 56;
  if (this->cache_misses() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cache_misses());
  }

  // float enrichment_success_rate = 57;
  if (this->enrichment_success_rate() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoEnrichment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.GeoEnrichment)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoEnrichment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoEnrichment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.GeoEnrichment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.GeoEnrichment)
    MergeFrom(*source);
  }
}

void GeoEnrichment::MergeFrom(const GeoEnrichment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.GeoEnrichment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threat_intelligence_matches_.MergeFrom(from.threat_intelligence_matches_);
  if (from.distance_category().size() > 0) {

    distance_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distance_category_);
  }
  if (from.sniffer_source_relationship().size() > 0) {

    sniffer_source_relationship_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sniffer_source_relationship_);
  }
  if (from.sniffer_destination_relationship().size() > 0) {

    sniffer_destination_relationship_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sniffer_destination_relationship_);
  }
  if (from.threat_intelligence_source().size() > 0) {

    threat_intelligence_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threat_intelligence_source_);
  }
  if (from.original_private_ip().size() > 0) {

    original_private_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_private_ip_);
  }
  if (from.discovered_public_ip().size() > 0) {

    discovered_public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discovered_public_ip_);
  }
  if (from.ip_discovery_service().size() > 0) {

    ip_discovery_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_discovery_service_);
  }
  if (from.enricher_version().size() > 0) {

    enricher_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enricher_version_);
  }
  if (from.geoip_method().size() > 0) {

    geoip_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoip_method_);
  }
  if (from.geoip_database_version().size() > 0) {

    geoip_database_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoip_database_version_);
  }
  if (from.has_sniffer_node_geo()) {
    mutable_sniffer_node_geo()->::protobuf::GeoLocationInfo::MergeFrom(from.sniffer_node_geo());
  }
  if (from.has_source_ip_geo()) {
    mutable_source_ip_geo()->::protobuf::GeoLocationInfo::MergeFrom(from.source_ip_geo());
  }
  if (from.has_destination_ip_geo()) {
    mutable_destination_ip_geo()->::protobuf::GeoLocationInfo::MergeFrom(from.destination_ip_geo());
  }
  if (from.has_ip_discovery_time()) {
    mutable_ip_discovery_time()->::google::protobuf::Timestamp::MergeFrom(from.ip_discovery_time());
  }
  if (from.has_enrichment_timestamp()) {
    mutable_enrichment_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.enrichment_timestamp());
  }
  if (from.source_destination_distance_km() != 0) {
    set_source_destination_distance_km(from.source_destination_distance_km());
  }
  if (from.sniffer_source_distance_km() != 0) {
    set_sniffer_source_distance_km(from.sniffer_source_distance_km());
  }
  if (from.source_destination_same_country() != 0) {
    set_source_destination_same_country(from.source_destination_same_country());
  }
  if (from.source_destination_same_continent() != 0) {
    set_source_destination_same_continent(from.source_destination_same_continent());
  }
  if (from.sniffer_source_same_country() != 0) {
    set_sniffer_source_same_country(from.sniffer_source_same_country());
  }
  if (from.sniffer_destination_same_country() != 0) {
    set_sniffer_destination_same_country(from.sniffer_destination_same_country());
  }
  if (from.geographic_anomaly_score() != 0) {
    set_geographic_anomaly_score(from.geographic_anomaly_score());
  }
  if (from.sniffer_destination_distance_km() != 0) {
    set_sniffer_destination_distance_km(from.sniffer_destination_distance_km());
  }
  if (from.suspicious_geographic_pattern() != 0) {
    set_suspicious_geographic_pattern(from.suspicious_geographic_pattern());
  }
  if (from.sniffer_node_enriched() != 0) {
    set_sniffer_node_enriched(from.sniffer_node_enriched());
  }
  if (from.source_ip_enriched() != 0) {
    set_source_ip_enriched(from.source_ip_enriched());
  }
  if (from.destination_ip_enriched() != 0) {
    set_destination_ip_enriched(from.destination_ip_enriched());
  }
  if (from.enrichment_complete() != 0) {
    set_enrichment_complete(from.enrichment_complete());
  }
  if (from.public_ip_discovery_attempted() != 0) {
    set_public_ip_discovery_attempted(from.public_ip_discovery_attempted());
  }
  if (from.fallback_coordinates_used() != 0) {
    set_fallback_coordinates_used(from.fallback_coordinates_used());
  }
  if (from.total_lookup_latency_ms() != 0) {
    set_total_lookup_latency_ms(from.total_lookup_latency_ms());
  }
  if (from.cache_hits() != 0) {
    set_cache_hits(from.cache_hits());
  }
  if (from.cache_misses() != 0) {
    set_cache_misses(from.cache_misses());
  }
  if (from.enrichment_success_rate() != 0) {
    set_enrichment_success_rate(from.enrichment_success_rate());
  }
}

void GeoEnrichment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.GeoEnrichment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoEnrichment::CopyFrom(const GeoEnrichment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.GeoEnrichment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoEnrichment::IsInitialized() const {
  return true;
}

void GeoEnrichment::Swap(GeoEnrichment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoEnrichment::InternalSwap(GeoEnrichment* other) {
  using std::swap;
  threat_intelligence_matches_.InternalSwap(CastToBase(&other->threat_intelligence_matches_));
  distance_category_.Swap(&other->distance_category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sniffer_source_relationship_.Swap(&other->sniffer_source_relationship_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sniffer_destination_relationship_.Swap(&other->sniffer_destination_relationship_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  threat_intelligence_source_.Swap(&other->threat_intelligence_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_private_ip_.Swap(&other->original_private_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  discovered_public_ip_.Swap(&other->discovered_public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_discovery_service_.Swap(&other->ip_discovery_service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enricher_version_.Swap(&other->enricher_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geoip_method_.Swap(&other->geoip_method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geoip_database_version_.Swap(&other->geoip_database_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sniffer_node_geo_, other->sniffer_node_geo_);
  swap(source_ip_geo_, other->source_ip_geo_);
  swap(destination_ip_geo_, other->destination_ip_geo_);
  swap(ip_discovery_time_, other->ip_discovery_time_);
  swap(enrichment_timestamp_, other->enrichment_timestamp_);
  swap(source_destination_distance_km_, other->source_destination_distance_km_);
  swap(sniffer_source_distance_km_, other->sniffer_source_distance_km_);
  swap(source_destination_same_country_, other->source_destination_same_country_);
  swap(source_destination_same_continent_, other->source_destination_same_continent_);
  swap(sniffer_source_same_country_, other->sniffer_source_same_country_);
  swap(sniffer_destination_same_country_, other->sniffer_destination_same_country_);
  swap(geographic_anomaly_score_, other->geographic_anomaly_score_);
  swap(sniffer_destination_distance_km_, other->sniffer_destination_distance_km_);
  swap(suspicious_geographic_pattern_, other->suspicious_geographic_pattern_);
  swap(sniffer_node_enriched_, other->sniffer_node_enriched_);
  swap(source_ip_enriched_, other->source_ip_enriched_);
  swap(destination_ip_enriched_, other->destination_ip_enriched_);
  swap(enrichment_complete_, other->enrichment_complete_);
  swap(public_ip_discovery_attempted_, other->public_ip_discovery_attempted_);
  swap(fallback_coordinates_used_, other->fallback_coordinates_used_);
  swap(total_lookup_latency_ms_, other->total_lookup_latency_ms_);
  swap(cache_hits_, other->cache_hits_);
  swap(cache_misses_, other->cache_misses_);
  swap(enrichment_success_rate_, other->enrichment_success_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeoEnrichment::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeWindow::InitAsDefaultInstance() {
  ::protobuf::_TimeWindow_default_instance_._instance.get_mutable()->window_start_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_TimeWindow_default_instance_._instance.get_mutable()->window_end_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_TimeWindow_default_instance_._instance.get_mutable()->window_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void TimeWindow::clear_window_start() {
  if (GetArenaNoVirtual() == NULL && window_start_ != NULL) {
    delete window_start_;
  }
  window_start_ = NULL;
}
void TimeWindow::clear_window_end() {
  if (GetArenaNoVirtual() == NULL && window_end_ != NULL) {
    delete window_end_;
  }
  window_end_ = NULL;
}
void TimeWindow::clear_window_duration() {
  if (GetArenaNoVirtual() == NULL && window_duration_ != NULL) {
    delete window_duration_;
  }
  window_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeWindow::kWindowStartFieldNumber;
const int TimeWindow::kWindowEndFieldNumber;
const int TimeWindow::kWindowDurationFieldNumber;
const int TimeWindow::kSequenceNumberFieldNumber;
const int TimeWindow::kWindowTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeWindow::TimeWindow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TimeWindow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.TimeWindow)
}
TimeWindow::TimeWindow(const TimeWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_window_start()) {
    window_start_ = new ::google::protobuf::Timestamp(*from.window_start_);
  } else {
    window_start_ = NULL;
  }
  if (from.has_window_end()) {
    window_end_ = new ::google::protobuf::Timestamp(*from.window_end_);
  } else {
    window_end_ = NULL;
  }
  if (from.has_window_duration()) {
    window_duration_ = new ::google::protobuf::Duration(*from.window_duration_);
  } else {
    window_duration_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_type_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(window_type_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TimeWindow)
}

void TimeWindow::SharedCtor() {
  ::memset(&window_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_type_) -
      reinterpret_cast<char*>(&window_start_)) + sizeof(window_type_));
}

TimeWindow::~TimeWindow() {
  // @@protoc_insertion_point(destructor:protobuf.TimeWindow)
  SharedDtor();
}

void TimeWindow::SharedDtor() {
  if (this != internal_default_instance()) delete window_start_;
  if (this != internal_default_instance()) delete window_end_;
  if (this != internal_default_instance()) delete window_duration_;
}

void TimeWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeWindow::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeWindow& TimeWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TimeWindow.base);
  return *internal_default_instance();
}


void TimeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TimeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && window_start_ != NULL) {
    delete window_start_;
  }
  window_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && window_end_ != NULL) {
    delete window_end_;
  }
  window_end_ = NULL;
  if (GetArenaNoVirtual() == NULL && window_duration_ != NULL) {
    delete window_duration_;
  }
  window_duration_ = NULL;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_type_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(window_type_));
  _internal_metadata_.Clear();
}

bool TimeWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.TimeWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp window_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_window_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp window_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_window_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration window_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_window_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.TimeWindow.WindowType window_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_window_type(static_cast< ::protobuf::TimeWindow_WindowType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.TimeWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.TimeWindow)
  return false;
#undef DO_
}

void TimeWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.TimeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp window_start = 1;
  if (this->has_window_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_window_start(), output);
  }

  // .google.protobuf.Timestamp window_end = 2;
  if (this->has_window_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_window_end(), output);
  }

  // .google.protobuf.Duration window_duration = 3;
  if (this->has_window_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_window_duration(), output);
  }

  // uint64 sequence_number = 4;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sequence_number(), output);
  }

  // .protobuf.TimeWindow.WindowType window_type = 5;
  if (this->window_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->window_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.TimeWindow)
}

::google::protobuf::uint8* TimeWindow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TimeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp window_start = 1;
  if (this->has_window_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_window_start(), deterministic, target);
  }

  // .google.protobuf.Timestamp window_end = 2;
  if (this->has_window_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_window_end(), deterministic, target);
  }

  // .google.protobuf.Duration window_duration = 3;
  if (this->has_window_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_window_duration(), deterministic, target);
  }

  // uint64 sequence_number = 4;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sequence_number(), target);
  }

  // .protobuf.TimeWindow.WindowType window_type = 5;
  if (this->window_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->window_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TimeWindow)
  return target;
}

size_t TimeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TimeWindow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp window_start = 1;
  if (this->has_window_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *window_start_);
  }

  // .google.protobuf.Timestamp window_end = 2;
  if (this->has_window_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *window_end_);
  }

  // .google.protobuf.Duration window_duration = 3;
  if (this->has_window_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *window_duration_);
  }

  // uint64 sequence_number = 4;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_number());
  }

  // .protobuf.TimeWindow.WindowType window_type = 5;
  if (this->window_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeWindow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeWindow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.TimeWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.TimeWindow)
    MergeFrom(*source);
  }
}

void TimeWindow::MergeFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_window_start()) {
    mutable_window_start()->::google::protobuf::Timestamp::MergeFrom(from.window_start());
  }
  if (from.has_window_end()) {
    mutable_window_end()->::google::protobuf::Timestamp::MergeFrom(from.window_end());
  }
  if (from.has_window_duration()) {
    mutable_window_duration()->::google::protobuf::Duration::MergeFrom(from.window_duration());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.window_type() != 0) {
    set_window_type(from.window_type());
  }
}

void TimeWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeWindow::CopyFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeWindow::IsInitialized() const {
  return true;
}

void TimeWindow::Swap(TimeWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeWindow::InternalSwap(TimeWindow* other) {
  using std::swap;
  swap(window_start_, other->window_start_);
  swap(window_end_, other->window_end_);
  swap(window_duration_, other->window_duration_);
  swap(sequence_number_, other->sequence_number_);
  swap(window_type_, other->window_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeWindow::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FlowAggregation_ProtocolDistributionEntry_DoNotUse::FlowAggregation_ProtocolDistributionEntry_DoNotUse() {}
FlowAggregation_ProtocolDistributionEntry_DoNotUse::FlowAggregation_ProtocolDistributionEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FlowAggregation_ProtocolDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_ProtocolDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FlowAggregation_ProtocolDistributionEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[6];
}
void FlowAggregation_ProtocolDistributionEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

FlowAggregation_PortDistributionEntry_DoNotUse::FlowAggregation_PortDistributionEntry_DoNotUse() {}
FlowAggregation_PortDistributionEntry_DoNotUse::FlowAggregation_PortDistributionEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FlowAggregation_PortDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_PortDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FlowAggregation_PortDistributionEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[7];
}
void FlowAggregation_PortDistributionEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

FlowAggregation_CountryDistributionEntry_DoNotUse::FlowAggregation_CountryDistributionEntry_DoNotUse() {}
FlowAggregation_CountryDistributionEntry_DoNotUse::FlowAggregation_CountryDistributionEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FlowAggregation_CountryDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_CountryDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FlowAggregation_CountryDistributionEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[8];
}
void FlowAggregation_CountryDistributionEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void FlowAggregation::InitAsDefaultInstance() {
  ::protobuf::_FlowAggregation_default_instance_._instance.get_mutable()->time_window_ = const_cast< ::protobuf::TimeWindow*>(
      ::protobuf::TimeWindow::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowAggregation::kTimeWindowFieldNumber;
const int FlowAggregation::kTotalFlowsInWindowFieldNumber;
const int FlowAggregation::kTotalPacketsInWindowFieldNumber;
const int FlowAggregation::kTotalBytesInWindowFieldNumber;
const int FlowAggregation::kProtocolDistributionFieldNumber;
const int FlowAggregation::kPortDistributionFieldNumber;
const int FlowAggregation::kCountryDistributionFieldNumber;
const int FlowAggregation::kWindowAnomalyScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowAggregation::FlowAggregation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_FlowAggregation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.FlowAggregation)
}
FlowAggregation::FlowAggregation(const FlowAggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_distribution_.MergeFrom(from.protocol_distribution_);
  port_distribution_.MergeFrom(from.port_distribution_);
  country_distribution_.MergeFrom(from.country_distribution_);
  if (from.has_time_window()) {
    time_window_ = new ::protobuf::TimeWindow(*from.time_window_);
  } else {
    time_window_ = NULL;
  }
  ::memcpy(&total_flows_in_window_, &from.total_flows_in_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_anomaly_score_) -
    reinterpret_cast<char*>(&total_flows_in_window_)) + sizeof(window_anomaly_score_));
  // @@protoc_insertion_point(copy_constructor:protobuf.FlowAggregation)
}

void FlowAggregation::SharedCtor() {
  ::memset(&time_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_anomaly_score_) -
      reinterpret_cast<char*>(&time_window_)) + sizeof(window_anomaly_score_));
}

FlowAggregation::~FlowAggregation() {
  // @@protoc_insertion_point(destructor:protobuf.FlowAggregation)
  SharedDtor();
}

void FlowAggregation::SharedDtor() {
  if (this != internal_default_instance()) delete time_window_;
}

void FlowAggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowAggregation::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowAggregation& FlowAggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_FlowAggregation.base);
  return *internal_default_instance();
}


void FlowAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.FlowAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_distribution_.Clear();
  port_distribution_.Clear();
  country_distribution_.Clear();
  if (GetArenaNoVirtual() == NULL && time_window_ != NULL) {
    delete time_window_;
  }
  time_window_ = NULL;
  ::memset(&total_flows_in_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_anomaly_score_) -
      reinterpret_cast<char*>(&total_flows_in_window_)) + sizeof(window_anomaly_score_));
  _internal_metadata_.Clear();
}

bool FlowAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.FlowAggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protobuf.TimeWindow time_window = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_flows_in_window = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_flows_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_packets_in_window = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_packets_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_bytes_in_window = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint64> protocol_distribution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          FlowAggregation_ProtocolDistributionEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FlowAggregation_ProtocolDistributionEntry_DoNotUse,
              ::std::string, ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 > > parser(&protocol_distribution_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.FlowAggregation.ProtocolDistributionEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint64> port_distribution = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          FlowAggregation_PortDistributionEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FlowAggregation_PortDistributionEntry_DoNotUse,
              ::std::string, ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 > > parser(&port_distribution_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.FlowAggregation.PortDistributionEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint64> country_distribution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          FlowAggregation_CountryDistributionEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FlowAggregation_CountryDistributionEntry_DoNotUse,
              ::std::string, ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 > > parser(&country_distribution_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.FlowAggregation.CountryDistributionEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double window_anomaly_score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_anomaly_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.FlowAggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.FlowAggregation)
  return false;
#undef DO_
}

void FlowAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.FlowAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.TimeWindow time_window = 1;
  if (this->has_time_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time_window(), output);
  }

  // uint64 total_flows_in_window = 2;
  if (this->total_flows_in_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_flows_in_window(), output);
  }

  // uint64 total_packets_in_window = 3;
  if (this->total_packets_in_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_packets_in_window(), output);
  }

  // uint64 total_bytes_in_window = 4;
  if (this->total_bytes_in_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_bytes_in_window(), output);
  }

  // map<string, uint64> protocol_distribution = 5;
  if (!this->protocol_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.ProtocolDistributionEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->protocol_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->protocol_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->protocol_distribution().begin();
          it != this->protocol_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_ProtocolDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(protocol_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_ProtocolDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->protocol_distribution().begin();
          it != this->protocol_distribution().end(); ++it) {
        entry.reset(protocol_distribution_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> port_distribution = 6;
  if (!this->port_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.PortDistributionEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->port_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->port_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->port_distribution().begin();
          it != this->port_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_PortDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(port_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_PortDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->port_distribution().begin();
          it != this->port_distribution().end(); ++it) {
        entry.reset(port_distribution_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> country_distribution = 7;
  if (!this->country_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.CountryDistributionEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->country_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->country_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->country_distribution().begin();
          it != this->country_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_CountryDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(country_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_CountryDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->country_distribution().begin();
          it != this->country_distribution().end(); ++it) {
        entry.reset(country_distribution_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // double window_anomaly_score = 8;
  if (this->window_anomaly_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->window_anomaly_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.FlowAggregation)
}

::google::protobuf::uint8* FlowAggregation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.FlowAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.TimeWindow time_window = 1;
  if (this->has_time_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time_window(), deterministic, target);
  }

  // uint64 total_flows_in_window = 2;
  if (this->total_flows_in_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_flows_in_window(), target);
  }

  // uint64 total_packets_in_window = 3;
  if (this->total_packets_in_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_packets_in_window(), target);
  }

  // uint64 total_bytes_in_window = 4;
  if (this->total_bytes_in_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_bytes_in_window(), target);
  }

  // map<string, uint64> protocol_distribution = 5;
  if (!this->protocol_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.ProtocolDistributionEntry.key");
      }
    };

    if (deterministic &&
        this->protocol_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->protocol_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->protocol_distribution().begin();
          it != this->protocol_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_ProtocolDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(protocol_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_ProtocolDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->protocol_distribution().begin();
          it != this->protocol_distribution().end(); ++it) {
        entry.reset(protocol_distribution_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> port_distribution = 6;
  if (!this->port_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.PortDistributionEntry.key");
      }
    };

    if (deterministic &&
        this->port_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->port_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->port_distribution().begin();
          it != this->port_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_PortDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(port_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_PortDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->port_distribution().begin();
          it != this->port_distribution().end(); ++it) {
        entry.reset(port_distribution_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> country_distribution = 7;
  if (!this->country_distribution().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.FlowAggregation.CountryDistributionEntry.key");
      }
    };

    if (deterministic &&
        this->country_distribution().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->country_distribution().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->country_distribution().begin();
          it != this->country_distribution().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FlowAggregation_CountryDistributionEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(country_distribution_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FlowAggregation_CountryDistributionEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->country_distribution().begin();
          it != this->country_distribution().end(); ++it) {
        entry.reset(country_distribution_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // double window_anomaly_score = 8;
  if (this->window_anomaly_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->window_anomaly_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.FlowAggregation)
  return target;
}

size_t FlowAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.FlowAggregation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, uint64> protocol_distribution = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->protocol_distribution_size());
  {
    ::std::unique_ptr<FlowAggregation_ProtocolDistributionEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
        it = this->protocol_distribution().begin();
        it != this->protocol_distribution().end(); ++it) {
      entry.reset(protocol_distribution_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, uint64> port_distribution = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->port_distribution_size());
  {
    ::std::unique_ptr<FlowAggregation_PortDistributionEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
        it = this->port_distribution().begin();
        it != this->port_distribution().end(); ++it) {
      entry.reset(port_distribution_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, uint64> country_distribution = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->country_distribution_size());
  {
    ::std::unique_ptr<FlowAggregation_CountryDistributionEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
        it = this->country_distribution().begin();
        it != this->country_distribution().end(); ++it) {
      entry.reset(country_distribution_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .protobuf.TimeWindow time_window = 1;
  if (this->has_time_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_window_);
  }

  // uint64 total_flows_in_window = 2;
  if (this->total_flows_in_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_flows_in_window());
  }

  // uint64 total_packets_in_window = 3;
  if (this->total_packets_in_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_packets_in_window());
  }

  // uint64 total_bytes_in_window = 4;
  if (this->total_bytes_in_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_bytes_in_window());
  }

  // double window_anomaly_score = 8;
  if (this->window_anomaly_score() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowAggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.FlowAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowAggregation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowAggregation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.FlowAggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.FlowAggregation)
    MergeFrom(*source);
  }
}

void FlowAggregation::MergeFrom(const FlowAggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.FlowAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocol_distribution_.MergeFrom(from.protocol_distribution_);
  port_distribution_.MergeFrom(from.port_distribution_);
  country_distribution_.MergeFrom(from.country_distribution_);
  if (from.has_time_window()) {
    mutable_time_window()->::protobuf::TimeWindow::MergeFrom(from.time_window());
  }
  if (from.total_flows_in_window() != 0) {
    set_total_flows_in_window(from.total_flows_in_window());
  }
  if (from.total_packets_in_window() != 0) {
    set_total_packets_in_window(from.total_packets_in_window());
  }
  if (from.total_bytes_in_window() != 0) {
    set_total_bytes_in_window(from.total_bytes_in_window());
  }
  if (from.window_anomaly_score() != 0) {
    set_window_anomaly_score(from.window_anomaly_score());
  }
}

void FlowAggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.FlowAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowAggregation::CopyFrom(const FlowAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.FlowAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowAggregation::IsInitialized() const {
  return true;
}

void FlowAggregation::Swap(FlowAggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowAggregation::InternalSwap(FlowAggregation* other) {
  using std::swap;
  protocol_distribution_.Swap(&other->protocol_distribution_);
  port_distribution_.Swap(&other->port_distribution_);
  country_distribution_.Swap(&other->country_distribution_);
  swap(time_window_, other->time_window_);
  swap(total_flows_in_window_, other->total_flows_in_window_);
  swap(total_packets_in_window_, other->total_packets_in_window_);
  swap(total_bytes_in_window_, other->total_bytes_in_window_);
  swap(window_anomaly_score_, other->window_anomaly_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowAggregation::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelPrediction::InitAsDefaultInstance() {
  ::protobuf::_ModelPrediction_default_instance_._instance.get_mutable()->prediction_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_ModelPrediction_default_instance_._instance.get_mutable()->processing_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void ModelPrediction::clear_prediction_timestamp() {
  if (GetArenaNoVirtual() == NULL && prediction_timestamp_ != NULL) {
    delete prediction_timestamp_;
  }
  prediction_timestamp_ = NULL;
}
void ModelPrediction::clear_processing_duration() {
  if (GetArenaNoVirtual() == NULL && processing_duration_ != NULL) {
    delete processing_duration_;
  }
  processing_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelPrediction::kModelNameFieldNumber;
const int ModelPrediction::kModelVersionFieldNumber;
const int ModelPrediction::kModelTypeFieldNumber;
const int ModelPrediction::kPredictionClassFieldNumber;
const int ModelPrediction::kConfidenceScoreFieldNumber;
const int ModelPrediction::kClassProbabilitiesFieldNumber;
const int ModelPrediction::kPredictionTimestampFieldNumber;
const int ModelPrediction::kProcessingDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelPrediction::ModelPrediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_ModelPrediction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.ModelPrediction)
}
ModelPrediction::ModelPrediction(const ModelPrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      class_probabilities_(from.class_probabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_version().size() > 0) {
    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  prediction_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prediction_class().size() > 0) {
    prediction_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prediction_class_);
  }
  if (from.has_prediction_timestamp()) {
    prediction_timestamp_ = new ::google::protobuf::Timestamp(*from.prediction_timestamp_);
  } else {
    prediction_timestamp_ = NULL;
  }
  if (from.has_processing_duration()) {
    processing_duration_ = new ::google::protobuf::Duration(*from.processing_duration_);
  } else {
    processing_duration_ = NULL;
  }
  ::memcpy(&confidence_score_, &from.confidence_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_type_) -
    reinterpret_cast<char*>(&confidence_score_)) + sizeof(model_type_));
  // @@protoc_insertion_point(copy_constructor:protobuf.ModelPrediction)
}

void ModelPrediction::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prediction_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prediction_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_type_) -
      reinterpret_cast<char*>(&prediction_timestamp_)) + sizeof(model_type_));
}

ModelPrediction::~ModelPrediction() {
  // @@protoc_insertion_point(destructor:protobuf.ModelPrediction)
  SharedDtor();
}

void ModelPrediction::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prediction_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prediction_timestamp_;
  if (this != internal_default_instance()) delete processing_duration_;
}

void ModelPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelPrediction::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelPrediction& ModelPrediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_ModelPrediction.base);
  return *internal_default_instance();
}


void ModelPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ModelPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_probabilities_.Clear();
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prediction_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && prediction_timestamp_ != NULL) {
    delete prediction_timestamp_;
  }
  prediction_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && processing_duration_ != NULL) {
    delete processing_duration_;
  }
  processing_duration_ = NULL;
  ::memset(&confidence_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_type_) -
      reinterpret_cast<char*>(&confidence_score_)) + sizeof(model_type_));
  _internal_metadata_.Clear();
}

bool ModelPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.ModelPrediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.ModelPrediction.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_version().data(), static_cast<int>(this->model_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.ModelPrediction.model_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.ModelPrediction.ModelType model_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model_type(static_cast< ::protobuf::ModelPrediction_ModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prediction_class = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prediction_class()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prediction_class().data(), static_cast<int>(this->prediction_class().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.ModelPrediction.prediction_class"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double class_probabilities = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_class_probabilities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_class_probabilities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp prediction_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prediction_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration processing_duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.ModelPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.ModelPrediction)
  return false;
#undef DO_
}

void ModelPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.ModelPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // string model_version = 2;
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_version(), output);
  }

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  if (this->model_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->model_type(), output);
  }

  // string prediction_class = 4;
  if (this->prediction_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prediction_class().data(), static_cast<int>(this->prediction_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.prediction_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prediction_class(), output);
  }

  // double confidence_score = 5;
  if (this->confidence_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->confidence_score(), output);
  }

  // repeated double class_probabilities = 6;
  if (this->class_probabilities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _class_probabilities_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->class_probabilities().data(), this->class_probabilities_size(), output);
  }

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  if (this->has_prediction_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_prediction_timestamp(), output);
  }

  // .google.protobuf.Duration processing_duration = 8;
  if (this->has_processing_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_processing_duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.ModelPrediction)
}

::google::protobuf::uint8* ModelPrediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ModelPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // string model_version = 2;
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_version(), target);
  }

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  if (this->model_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->model_type(), target);
  }

  // string prediction_class = 4;
  if (this->prediction_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prediction_class().data(), static_cast<int>(this->prediction_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.prediction_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prediction_class(), target);
  }

  // double confidence_score = 5;
  if (this->confidence_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->confidence_score(), target);
  }

  // repeated double class_probabilities = 6;
  if (this->class_probabilities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _class_probabilities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->class_probabilities_, target);
  }

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  if (this->has_prediction_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_prediction_timestamp(), deterministic, target);
  }

  // .google.protobuf.Duration processing_duration = 8;
  if (this->has_processing_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_processing_duration(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ModelPrediction)
  return target;
}

size_t ModelPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ModelPrediction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double class_probabilities = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->class_probabilities_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _class_probabilities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // string model_version = 2;
  if (this->model_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_version());
  }

  // string prediction_class = 4;
  if (this->prediction_class().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prediction_class());
  }

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  if (this->has_prediction_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prediction_timestamp_);
  }

  // .google.protobuf.Duration processing_duration = 8;
  if (this->has_processing_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *processing_duration_);
  }

  // double confidence_score = 5;
  if (this->confidence_score() != 0) {
    total_size += 1 + 8;
  }

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  if (this->model_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelPrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ModelPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelPrediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelPrediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ModelPrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ModelPrediction)
    MergeFrom(*source);
  }
}

void ModelPrediction::MergeFrom(const ModelPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ModelPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_probabilities_.MergeFrom(from.class_probabilities_);
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.model_version().size() > 0) {

    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  if (from.prediction_class().size() > 0) {

    prediction_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prediction_class_);
  }
  if (from.has_prediction_timestamp()) {
    mutable_prediction_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.prediction_timestamp());
  }
  if (from.has_processing_duration()) {
    mutable_processing_duration()->::google::protobuf::Duration::MergeFrom(from.processing_duration());
  }
  if (from.confidence_score() != 0) {
    set_confidence_score(from.confidence_score());
  }
  if (from.model_type() != 0) {
    set_model_type(from.model_type());
  }
}

void ModelPrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ModelPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelPrediction::CopyFrom(const ModelPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ModelPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPrediction::IsInitialized() const {
  return true;
}

void ModelPrediction::Swap(ModelPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelPrediction::InternalSwap(ModelPrediction* other) {
  using std::swap;
  class_probabilities_.InternalSwap(&other->class_probabilities_);
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_.Swap(&other->model_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prediction_class_.Swap(&other->prediction_class_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prediction_timestamp_, other->prediction_timestamp_);
  swap(processing_duration_, other->processing_duration_);
  swap(confidence_score_, other->confidence_score_);
  swap(model_type_, other->model_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelPrediction::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse() {}
TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::MergeFrom(const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[11];
}
void TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TricapaMLAnalysis::InitAsDefaultInstance() {
  ::protobuf::_TricapaMLAnalysis_default_instance_._instance.get_mutable()->level1_general_detection_ = const_cast< ::protobuf::ModelPrediction*>(
      ::protobuf::ModelPrediction::internal_default_instance());
  ::protobuf::_TricapaMLAnalysis_default_instance_._instance.get_mutable()->level2_context_classification_ = const_cast< ::protobuf::ModelPrediction*>(
      ::protobuf::ModelPrediction::internal_default_instance());
  ::protobuf::_TricapaMLAnalysis_default_instance_._instance.get_mutable()->total_analysis_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void TricapaMLAnalysis::clear_total_analysis_duration() {
  if (GetArenaNoVirtual() == NULL && total_analysis_duration_ != NULL) {
    delete total_analysis_duration_;
  }
  total_analysis_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TricapaMLAnalysis::kLevel1GeneralDetectionFieldNumber;
const int TricapaMLAnalysis::kAttackDetectedLevel1FieldNumber;
const int TricapaMLAnalysis::kLevel1ConfidenceFieldNumber;
const int TricapaMLAnalysis::kLevel2ContextClassificationFieldNumber;
const int TricapaMLAnalysis::kTrafficContextFieldNumber;
const int TricapaMLAnalysis::kLevel3SpecializedPredictionsFieldNumber;
const int TricapaMLAnalysis::kFinalThreatClassificationFieldNumber;
const int TricapaMLAnalysis::kEnsembleConfidenceFieldNumber;
const int TricapaMLAnalysis::kTotalAnalysisDurationFieldNumber;
const int TricapaMLAnalysis::kModelsActivatedFieldNumber;
const int TricapaMLAnalysis::kFeatureImportanceScoresFieldNumber;
const int TricapaMLAnalysis::kRequiresHumanReviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TricapaMLAnalysis::TricapaMLAnalysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TricapaMLAnalysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.TricapaMLAnalysis)
}
TricapaMLAnalysis::TricapaMLAnalysis(const TricapaMLAnalysis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      level3_specialized_predictions_(from.level3_specialized_predictions_),
      models_activated_(from.models_activated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_importance_scores_.MergeFrom(from.feature_importance_scores_);
  traffic_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_context().size() > 0) {
    traffic_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_context_);
  }
  final_threat_classification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.final_threat_classification().size() > 0) {
    final_threat_classification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_threat_classification_);
  }
  if (from.has_level1_general_detection()) {
    level1_general_detection_ = new ::protobuf::ModelPrediction(*from.level1_general_detection_);
  } else {
    level1_general_detection_ = NULL;
  }
  if (from.has_level2_context_classification()) {
    level2_context_classification_ = new ::protobuf::ModelPrediction(*from.level2_context_classification_);
  } else {
    level2_context_classification_ = NULL;
  }
  if (from.has_total_analysis_duration()) {
    total_analysis_duration_ = new ::google::protobuf::Duration(*from.total_analysis_duration_);
  } else {
    total_analysis_duration_ = NULL;
  }
  ::memcpy(&level1_confidence_, &from.level1_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&requires_human_review_) -
    reinterpret_cast<char*>(&level1_confidence_)) + sizeof(requires_human_review_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TricapaMLAnalysis)
}

void TricapaMLAnalysis::SharedCtor() {
  traffic_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_threat_classification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level1_general_detection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_human_review_) -
      reinterpret_cast<char*>(&level1_general_detection_)) + sizeof(requires_human_review_));
}

TricapaMLAnalysis::~TricapaMLAnalysis() {
  // @@protoc_insertion_point(destructor:protobuf.TricapaMLAnalysis)
  SharedDtor();
}

void TricapaMLAnalysis::SharedDtor() {
  traffic_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_threat_classification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete level1_general_detection_;
  if (this != internal_default_instance()) delete level2_context_classification_;
  if (this != internal_default_instance()) delete total_analysis_duration_;
}

void TricapaMLAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TricapaMLAnalysis::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TricapaMLAnalysis& TricapaMLAnalysis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_TricapaMLAnalysis.base);
  return *internal_default_instance();
}


void TricapaMLAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TricapaMLAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level3_specialized_predictions_.Clear();
  models_activated_.Clear();
  feature_importance_scores_.Clear();
  traffic_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_threat_classification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && level1_general_detection_ != NULL) {
    delete level1_general_detection_;
  }
  level1_general_detection_ = NULL;
  if (GetArenaNoVirtual() == NULL && level2_context_classification_ != NULL) {
    delete level2_context_classification_;
  }
  level2_context_classification_ = NULL;
  if (GetArenaNoVirtual() == NULL && total_analysis_duration_ != NULL) {
    delete total_analysis_duration_;
  }
  total_analysis_duration_ = NULL;
  ::memset(&level1_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_human_review_) -
      reinterpret_cast<char*>(&level1_confidence_)) + sizeof(requires_human_review_));
  _internal_metadata_.Clear();
}

bool TricapaMLAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.TricapaMLAnalysis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protobuf.ModelPrediction level1_general_detection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_level1_general_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool attack_detected_level1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attack_detected_level1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double level1_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &level1_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.ModelPrediction level2_context_classification = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_level2_context_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_context = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_context()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_context().data(), static_cast<int>(this->traffic_context().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.TricapaMLAnalysis.traffic_context"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_level3_specialized_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string final_threat_classification = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_threat_classification()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_threat_classification().data(), static_cast<int>(this->final_threat_classification().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.TricapaMLAnalysis.final_threat_classification"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ensemble_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ensemble_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration total_analysis_duration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_total_analysis_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string models_activated = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_models_activated()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->models_activated(this->models_activated_size() - 1).data(),
            static_cast<int>(this->models_activated(this->models_activated_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.TricapaMLAnalysis.models_activated"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> feature_importance_scores = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&feature_importance_scores_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.TricapaMLAnalysis.FeatureImportanceScoresEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool requires_human_review = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_human_review_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.TricapaMLAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.TricapaMLAnalysis)
  return false;
#undef DO_
}

void TricapaMLAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.TricapaMLAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.ModelPrediction level1_general_detection = 1;
  if (this->has_level1_general_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_level1_general_detection(), output);
  }

  // bool attack_detected_level1 = 2;
  if (this->attack_detected_level1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->attack_detected_level1(), output);
  }

  // double level1_confidence = 3;
  if (this->level1_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->level1_confidence(), output);
  }

  // .protobuf.ModelPrediction level2_context_classification = 4;
  if (this->has_level2_context_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_level2_context_classification(), output);
  }

  // string traffic_context = 5;
  if (this->traffic_context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_context().data(), static_cast<int>(this->traffic_context().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.traffic_context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->traffic_context(), output);
  }

  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->level3_specialized_predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->level3_specialized_predictions(static_cast<int>(i)),
      output);
  }

  // string final_threat_classification = 7;
  if (this->final_threat_classification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_threat_classification().data(), static_cast<int>(this->final_threat_classification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.final_threat_classification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->final_threat_classification(), output);
  }

  // double ensemble_confidence = 8;
  if (this->ensemble_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ensemble_confidence(), output);
  }

  // .google.protobuf.Duration total_analysis_duration = 10;
  if (this->has_total_analysis_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_total_analysis_duration(), output);
  }

  // repeated string models_activated = 11;
  for (int i = 0, n = this->models_activated_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->models_activated(i).data(), static_cast<int>(this->models_activated(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.models_activated");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->models_activated(i), output);
  }

  // map<string, double> feature_importance_scores = 12;
  if (!this->feature_importance_scores().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.TricapaMLAnalysis.FeatureImportanceScoresEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feature_importance_scores().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_importance_scores().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->feature_importance_scores().begin();
          it != this->feature_importance_scores().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_importance_scores_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->feature_importance_scores().begin();
          it != this->feature_importance_scores().end(); ++it) {
        entry.reset(feature_importance_scores_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool requires_human_review = 13;
  if (this->requires_human_review() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_human_review(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.TricapaMLAnalysis)
}

::google::protobuf::uint8* TricapaMLAnalysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TricapaMLAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.ModelPrediction level1_general_detection = 1;
  if (this->has_level1_general_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_level1_general_detection(), deterministic, target);
  }

  // bool attack_detected_level1 = 2;
  if (this->attack_detected_level1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->attack_detected_level1(), target);
  }

  // double level1_confidence = 3;
  if (this->level1_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->level1_confidence(), target);
  }

  // .protobuf.ModelPrediction level2_context_classification = 4;
  if (this->has_level2_context_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_level2_context_classification(), deterministic, target);
  }

  // string traffic_context = 5;
  if (this->traffic_context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_context().data(), static_cast<int>(this->traffic_context().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.traffic_context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->traffic_context(), target);
  }

  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->level3_specialized_predictions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->level3_specialized_predictions(static_cast<int>(i)), deterministic, target);
  }

  // string final_threat_classification = 7;
  if (this->final_threat_classification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_threat_classification().data(), static_cast<int>(this->final_threat_classification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.final_threat_classification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->final_threat_classification(), target);
  }

  // double ensemble_confidence = 8;
  if (this->ensemble_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ensemble_confidence(), target);
  }

  // .google.protobuf.Duration total_analysis_duration = 10;
  if (this->has_total_analysis_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_total_analysis_duration(), deterministic, target);
  }

  // repeated string models_activated = 11;
  for (int i = 0, n = this->models_activated_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->models_activated(i).data(), static_cast<int>(this->models_activated(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.models_activated");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->models_activated(i), target);
  }

  // map<string, double> feature_importance_scores = 12;
  if (!this->feature_importance_scores().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.TricapaMLAnalysis.FeatureImportanceScoresEntry.key");
      }
    };

    if (deterministic &&
        this->feature_importance_scores().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_importance_scores().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->feature_importance_scores().begin();
          it != this->feature_importance_scores().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_importance_scores_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->feature_importance_scores().begin();
          it != this->feature_importance_scores().end(); ++it) {
        entry.reset(feature_importance_scores_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool requires_human_review = 13;
  if (this->requires_human_review() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_human_review(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TricapaMLAnalysis)
  return target;
}

size_t TricapaMLAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TricapaMLAnalysis)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->level3_specialized_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->level3_specialized_predictions(static_cast<int>(i)));
    }
  }

  // repeated string models_activated = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->models_activated_size());
  for (int i = 0, n = this->models_activated_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->models_activated(i));
  }

  // map<string, double> feature_importance_scores = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feature_importance_scores_size());
  {
    ::std::unique_ptr<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->feature_importance_scores().begin();
        it != this->feature_importance_scores().end(); ++it) {
      entry.reset(feature_importance_scores_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string traffic_context = 5;
  if (this->traffic_context().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_context());
  }

  // string final_threat_classification = 7;
  if (this->final_threat_classification().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_threat_classification());
  }

  // .protobuf.ModelPrediction level1_general_detection = 1;
  if (this->has_level1_general_detection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *level1_general_detection_);
  }

  // .protobuf.ModelPrediction level2_context_classification = 4;
  if (this->has_level2_context_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *level2_context_classification_);
  }

  // .google.protobuf.Duration total_analysis_duration = 10;
  if (this->has_total_analysis_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *total_analysis_duration_);
  }

  // double level1_confidence = 3;
  if (this->level1_confidence() != 0) {
    total_size += 1 + 8;
  }

  // double ensemble_confidence = 8;
  if (this->ensemble_confidence() != 0) {
    total_size += 1 + 8;
  }

  // bool attack_detected_level1 = 2;
  if (this->attack_detected_level1() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_human_review = 13;
  if (this->requires_human_review() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TricapaMLAnalysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.TricapaMLAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const TricapaMLAnalysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TricapaMLAnalysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.TricapaMLAnalysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.TricapaMLAnalysis)
    MergeFrom(*source);
  }
}

void TricapaMLAnalysis::MergeFrom(const TricapaMLAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TricapaMLAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level3_specialized_predictions_.MergeFrom(from.level3_specialized_predictions_);
  models_activated_.MergeFrom(from.models_activated_);
  feature_importance_scores_.MergeFrom(from.feature_importance_scores_);
  if (from.traffic_context().size() > 0) {

    traffic_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_context_);
  }
  if (from.final_threat_classification().size() > 0) {

    final_threat_classification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_threat_classification_);
  }
  if (from.has_level1_general_detection()) {
    mutable_level1_general_detection()->::protobuf::ModelPrediction::MergeFrom(from.level1_general_detection());
  }
  if (from.has_level2_context_classification()) {
    mutable_level2_context_classification()->::protobuf::ModelPrediction::MergeFrom(from.level2_context_classification());
  }
  if (from.has_total_analysis_duration()) {
    mutable_total_analysis_duration()->::google::protobuf::Duration::MergeFrom(from.total_analysis_duration());
  }
  if (from.level1_confidence() != 0) {
    set_level1_confidence(from.level1_confidence());
  }
  if (from.ensemble_confidence() != 0) {
    set_ensemble_confidence(from.ensemble_confidence());
  }
  if (from.attack_detected_level1() != 0) {
    set_attack_detected_level1(from.attack_detected_level1());
  }
  if (from.requires_human_review() != 0) {
    set_requires_human_review(from.requires_human_review());
  }
}

void TricapaMLAnalysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.TricapaMLAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TricapaMLAnalysis::CopyFrom(const TricapaMLAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TricapaMLAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TricapaMLAnalysis::IsInitialized() const {
  return true;
}

void TricapaMLAnalysis::Swap(TricapaMLAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TricapaMLAnalysis::InternalSwap(TricapaMLAnalysis* other) {
  using std::swap;
  CastToBase(&level3_specialized_predictions_)->InternalSwap(CastToBase(&other->level3_specialized_predictions_));
  models_activated_.InternalSwap(CastToBase(&other->models_activated_));
  feature_importance_scores_.Swap(&other->feature_importance_scores_);
  traffic_context_.Swap(&other->traffic_context_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_threat_classification_.Swap(&other->final_threat_classification_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level1_general_detection_, other->level1_general_detection_);
  swap(level2_context_classification_, other->level2_context_classification_);
  swap(total_analysis_duration_, other->total_analysis_duration_);
  swap(level1_confidence_, other->level1_confidence_);
  swap(ensemble_confidence_, other->ensemble_confidence_);
  swap(attack_detected_level1_, other->attack_detected_level1_);
  swap(requires_human_review_, other->requires_human_review_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TricapaMLAnalysis::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DistributedNode_NodeCapabilitiesEntry_DoNotUse::DistributedNode_NodeCapabilitiesEntry_DoNotUse() {}
DistributedNode_NodeCapabilitiesEntry_DoNotUse::DistributedNode_NodeCapabilitiesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DistributedNode_NodeCapabilitiesEntry_DoNotUse::MergeFrom(const DistributedNode_NodeCapabilitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DistributedNode_NodeCapabilitiesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[13];
}
void DistributedNode_NodeCapabilitiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void DistributedNode::InitAsDefaultInstance() {
  ::protobuf::_DistributedNode_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_DistributedNode_default_instance_._instance.get_mutable()->uptime_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void DistributedNode::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
}
void DistributedNode::clear_uptime() {
  if (GetArenaNoVirtual() == NULL && uptime_ != NULL) {
    delete uptime_;
  }
  uptime_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributedNode::kNodeIdFieldNumber;
const int DistributedNode::kNodeHostnameFieldNumber;
const int DistributedNode::kNodeIpAddressFieldNumber;
const int DistributedNode::kPhysicalLocationFieldNumber;
const int DistributedNode::kNodeRoleFieldNumber;
const int DistributedNode::kNodeStatusFieldNumber;
const int DistributedNode::kLastHeartbeatFieldNumber;
const int DistributedNode::kOperatingSystemFieldNumber;
const int DistributedNode::kOsVersionFieldNumber;
const int DistributedNode::kAgentVersionFieldNumber;
const int DistributedNode::kProcessIdFieldNumber;
const int DistributedNode::kContainerIdFieldNumber;
const int DistributedNode::kClusterNameFieldNumber;
const int DistributedNode::kCpuUsagePercentFieldNumber;
const int DistributedNode::kMemoryUsageMbFieldNumber;
const int DistributedNode::kActiveConnectionsFieldNumber;
const int DistributedNode::kQueueDepthFieldNumber;
const int DistributedNode::kUptimeFieldNumber;
const int DistributedNode::kNodeCapabilitiesFieldNumber;
const int DistributedNode::kSupportedProtocolsFieldNumber;
const int DistributedNode::kConfigurationVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributedNode::DistributedNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_DistributedNode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.DistributedNode)
}
DistributedNode::DistributedNode(const DistributedNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      supported_protocols_(from.supported_protocols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_capabilities_.MergeFrom(from.node_capabilities_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  node_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_hostname().size() > 0) {
    node_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_hostname_);
  }
  node_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_ip_address().size() > 0) {
    node_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_address_);
  }
  physical_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.physical_location().size() > 0) {
    physical_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_location_);
  }
  operating_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operating_system().size() > 0) {
    operating_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_version().size() > 0) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  agent_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.agent_version().size() > 0) {
    agent_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agent_version_);
  }
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_id().size() > 0) {
    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  configuration_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.configuration_version().size() > 0) {
    configuration_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configuration_version_);
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::google::protobuf::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  if (from.has_uptime()) {
    uptime_ = new ::google::protobuf::Duration(*from.uptime_);
  } else {
    uptime_ = NULL;
  }
  ::memcpy(&node_role_, &from.node_role_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_depth_) -
    reinterpret_cast<char*>(&node_role_)) + sizeof(queue_depth_));
  // @@protoc_insertion_point(copy_constructor:protobuf.DistributedNode)
}

void DistributedNode::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_heartbeat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_depth_) -
      reinterpret_cast<char*>(&last_heartbeat_)) + sizeof(queue_depth_));
}

DistributedNode::~DistributedNode() {
  // @@protoc_insertion_point(destructor:protobuf.DistributedNode)
  SharedDtor();
}

void DistributedNode::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_heartbeat_;
  if (this != internal_default_instance()) delete uptime_;
}

void DistributedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DistributedNode::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistributedNode& DistributedNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_DistributedNode.base);
  return *internal_default_instance();
}


void DistributedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.DistributedNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_capabilities_.Clear();
  supported_protocols_.Clear();
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agent_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && uptime_ != NULL) {
    delete uptime_;
  }
  uptime_ = NULL;
  ::memset(&node_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_depth_) -
      reinterpret_cast<char*>(&node_role_)) + sizeof(queue_depth_));
  _internal_metadata_.Clear();
}

bool DistributedNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.DistributedNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_hostname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_hostname().data(), static_cast<int>(this->node_hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.node_hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_ip_address().data(), static_cast<int>(this->node_ip_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.node_ip_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string physical_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physical_location().data(), static_cast<int>(this->physical_location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.physical_location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.DistributedNode.NodeRole node_role = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node_role(static_cast< ::protobuf::DistributedNode_NodeRole >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.DistributedNode.NodeStatus node_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node_status(static_cast< ::protobuf::DistributedNode_NodeStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_heartbeat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operating_system = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operating_system().data(), static_cast<int>(this->operating_system().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.operating_system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_version().data(), static_cast<int>(this->os_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.os_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string agent_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agent_version().data(), static_cast<int>(this->agent_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.agent_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string container_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_id().data(), static_cast<int>(this->container_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.container_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_usage_percent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_usage_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float memory_usage_mb = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memory_usage_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_connections = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queue_depth = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration uptime = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> node_capabilities = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DistributedNode_NodeCapabilitiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DistributedNode_NodeCapabilitiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&node_capabilities_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.NodeCapabilitiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.NodeCapabilitiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string supported_protocols = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_supported_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_protocols(this->supported_protocols_size() - 1).data(),
            static_cast<int>(this->supported_protocols(this->supported_protocols_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.supported_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string configuration_version = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->configuration_version().data(), static_cast<int>(this->configuration_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.DistributedNode.configuration_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.DistributedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.DistributedNode)
  return false;
#undef DO_
}

void DistributedNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.DistributedNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string node_hostname = 2;
  if (this->node_hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_hostname().data(), static_cast<int>(this->node_hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_hostname(), output);
  }

  // string node_ip_address = 3;
  if (this->node_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ip_address().data(), static_cast<int>(this->node_ip_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_ip_address(), output);
  }

  // string physical_location = 4;
  if (this->physical_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_location().data(), static_cast<int>(this->physical_location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.physical_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->physical_location(), output);
  }

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  if (this->node_role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->node_role(), output);
  }

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  if (this->node_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->node_status(), output);
  }

  // .google.protobuf.Timestamp last_heartbeat = 7;
  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_last_heartbeat(), output);
  }

  // string operating_system = 8;
  if (this->operating_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operating_system().data(), static_cast<int>(this->operating_system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.operating_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->operating_system(), output);
  }

  // string os_version = 9;
  if (this->os_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->os_version(), output);
  }

  // string agent_version = 10;
  if (this->agent_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agent_version().data(), static_cast<int>(this->agent_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.agent_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->agent_version(), output);
  }

  // int32 process_id = 11;
  if (this->process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->process_id(), output);
  }

  // string container_id = 12;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), static_cast<int>(this->container_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.container_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->container_id(), output);
  }

  // string cluster_name = 13;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->cluster_name(), output);
  }

  // float cpu_usage_percent = 15;
  if (this->cpu_usage_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cpu_usage_percent(), output);
  }

  // float memory_usage_mb = 16;
  if (this->memory_usage_mb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->memory_usage_mb(), output);
  }

  // int32 active_connections = 17;
  if (this->active_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->active_connections(), output);
  }

  // int32 queue_depth = 18;
  if (this->queue_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->queue_depth(), output);
  }

  // .google.protobuf.Duration uptime = 19;
  if (this->has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_uptime(), output);
  }

  // map<string, string> node_capabilities = 20;
  if (!this->node_capabilities().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.DistributedNode.NodeCapabilitiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.DistributedNode.NodeCapabilitiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->node_capabilities().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_capabilities().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_capabilities().begin();
          it != this->node_capabilities().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DistributedNode_NodeCapabilitiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_capabilities_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            20, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DistributedNode_NodeCapabilitiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_capabilities().begin();
          it != this->node_capabilities().end(); ++it) {
        entry.reset(node_capabilities_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            20, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string supported_protocols = 21;
  for (int i = 0, n = this->supported_protocols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_protocols(i).data(), static_cast<int>(this->supported_protocols(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.supported_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->supported_protocols(i), output);
  }

  // string configuration_version = 22;
  if (this->configuration_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->configuration_version().data(), static_cast<int>(this->configuration_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.configuration_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->configuration_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.DistributedNode)
}

::google::protobuf::uint8* DistributedNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.DistributedNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string node_hostname = 2;
  if (this->node_hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_hostname().data(), static_cast<int>(this->node_hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_hostname(), target);
  }

  // string node_ip_address = 3;
  if (this->node_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ip_address().data(), static_cast<int>(this->node_ip_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_ip_address(), target);
  }

  // string physical_location = 4;
  if (this->physical_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_location().data(), static_cast<int>(this->physical_location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.physical_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->physical_location(), target);
  }

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  if (this->node_role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->node_role(), target);
  }

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  if (this->node_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->node_status(), target);
  }

  // .google.protobuf.Timestamp last_heartbeat = 7;
  if (this->has_last_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_last_heartbeat(), deterministic, target);
  }

  // string operating_system = 8;
  if (this->operating_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operating_system().data(), static_cast<int>(this->operating_system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.operating_system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->operating_system(), target);
  }

  // string os_version = 9;
  if (this->os_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->os_version(), target);
  }

  // string agent_version = 10;
  if (this->agent_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agent_version().data(), static_cast<int>(this->agent_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.agent_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->agent_version(), target);
  }

  // int32 process_id = 11;
  if (this->process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->process_id(), target);
  }

  // string container_id = 12;
  if (this->container_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_id().data(), static_cast<int>(this->container_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.container_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->container_id(), target);
  }

  // string cluster_name = 13;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cluster_name(), target);
  }

  // float cpu_usage_percent = 15;
  if (this->cpu_usage_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cpu_usage_percent(), target);
  }

  // float memory_usage_mb = 16;
  if (this->memory_usage_mb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->memory_usage_mb(), target);
  }

  // int32 active_connections = 17;
  if (this->active_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->active_connections(), target);
  }

  // int32 queue_depth = 18;
  if (this->queue_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->queue_depth(), target);
  }

  // .google.protobuf.Duration uptime = 19;
  if (this->has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_uptime(), deterministic, target);
  }

  // map<string, string> node_capabilities = 20;
  if (!this->node_capabilities().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.DistributedNode.NodeCapabilitiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.DistributedNode.NodeCapabilitiesEntry.value");
      }
    };

    if (deterministic &&
        this->node_capabilities().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_capabilities().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_capabilities().begin();
          it != this->node_capabilities().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DistributedNode_NodeCapabilitiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_capabilities_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       20, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DistributedNode_NodeCapabilitiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_capabilities().begin();
          it != this->node_capabilities().end(); ++it) {
        entry.reset(node_capabilities_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       20, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string supported_protocols = 21;
  for (int i = 0, n = this->supported_protocols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_protocols(i).data(), static_cast<int>(this->supported_protocols(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.supported_protocols");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->supported_protocols(i), target);
  }

  // string configuration_version = 22;
  if (this->configuration_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->configuration_version().data(), static_cast<int>(this->configuration_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.configuration_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->configuration_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.DistributedNode)
  return target;
}

size_t DistributedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.DistributedNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> node_capabilities = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->node_capabilities_size());
  {
    ::std::unique_ptr<DistributedNode_NodeCapabilitiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->node_capabilities().begin();
        it != this->node_capabilities().end(); ++it) {
      entry.reset(node_capabilities_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string supported_protocols = 21;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->supported_protocols_size());
  for (int i = 0, n = this->supported_protocols_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->supported_protocols(i));
  }

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string node_hostname = 2;
  if (this->node_hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_hostname());
  }

  // string node_ip_address = 3;
  if (this->node_ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_ip_address());
  }

  // string physical_location = 4;
  if (this->physical_location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physical_location());
  }

  // string operating_system = 8;
  if (this->operating_system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operating_system());
  }

  // string os_version = 9;
  if (this->os_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_version());
  }

  // string agent_version = 10;
  if (this->agent_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->agent_version());
  }

  // string container_id = 12;
  if (this->container_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_id());
  }

  // string cluster_name = 13;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string configuration_version = 22;
  if (this->configuration_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->configuration_version());
  }

  // .google.protobuf.Timestamp last_heartbeat = 7;
  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_heartbeat_);
  }

  // .google.protobuf.Duration uptime = 19;
  if (this->has_uptime()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  if (this->node_role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_role());
  }

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  if (this->node_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_status());
  }

  // int32 process_id = 11;
  if (this->process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_id());
  }

  // float cpu_usage_percent = 15;
  if (this->cpu_usage_percent() != 0) {
    total_size += 1 + 4;
  }

  // float memory_usage_mb = 16;
  if (this->memory_usage_mb() != 0) {
    total_size += 2 + 4;
  }

  // int32 active_connections = 17;
  if (this->active_connections() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_connections());
  }

  // int32 queue_depth = 18;
  if (this->queue_depth() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue_depth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributedNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.DistributedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributedNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistributedNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.DistributedNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.DistributedNode)
    MergeFrom(*source);
  }
}

void DistributedNode::MergeFrom(const DistributedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.DistributedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_capabilities_.MergeFrom(from.node_capabilities_);
  supported_protocols_.MergeFrom(from.supported_protocols_);
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.node_hostname().size() > 0) {

    node_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_hostname_);
  }
  if (from.node_ip_address().size() > 0) {

    node_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_address_);
  }
  if (from.physical_location().size() > 0) {

    physical_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_location_);
  }
  if (from.operating_system().size() > 0) {

    operating_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_);
  }
  if (from.os_version().size() > 0) {

    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  if (from.agent_version().size() > 0) {

    agent_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agent_version_);
  }
  if (from.container_id().size() > 0) {

    container_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.configuration_version().size() > 0) {

    configuration_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configuration_version_);
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::google::protobuf::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.has_uptime()) {
    mutable_uptime()->::google::protobuf::Duration::MergeFrom(from.uptime());
  }
  if (from.node_role() != 0) {
    set_node_role(from.node_role());
  }
  if (from.node_status() != 0) {
    set_node_status(from.node_status());
  }
  if (from.process_id() != 0) {
    set_process_id(from.process_id());
  }
  if (from.cpu_usage_percent() != 0) {
    set_cpu_usage_percent(from.cpu_usage_percent());
  }
  if (from.memory_usage_mb() != 0) {
    set_memory_usage_mb(from.memory_usage_mb());
  }
  if (from.active_connections() != 0) {
    set_active_connections(from.active_connections());
  }
  if (from.queue_depth() != 0) {
    set_queue_depth(from.queue_depth());
  }
}

void DistributedNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.DistributedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedNode::CopyFrom(const DistributedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.DistributedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedNode::IsInitialized() const {
  return true;
}

void DistributedNode::Swap(DistributedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributedNode::InternalSwap(DistributedNode* other) {
  using std::swap;
  node_capabilities_.Swap(&other->node_capabilities_);
  supported_protocols_.InternalSwap(CastToBase(&other->supported_protocols_));
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_hostname_.Swap(&other->node_hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_ip_address_.Swap(&other->node_ip_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  physical_location_.Swap(&other->physical_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operating_system_.Swap(&other->operating_system_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agent_version_.Swap(&other->agent_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  container_id_.Swap(&other->container_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cluster_name_.Swap(&other->cluster_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configuration_version_.Swap(&other->configuration_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(uptime_, other->uptime_);
  swap(node_role_, other->node_role_);
  swap(node_status_, other->node_status_);
  swap(process_id_, other->process_id_);
  swap(cpu_usage_percent_, other->cpu_usage_percent_);
  swap(memory_usage_mb_, other->memory_usage_mb_);
  swap(active_connections_, other->active_connections_);
  swap(queue_depth_, other->queue_depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DistributedNode::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PipelineTracking_ComponentMetadataEntry_DoNotUse::PipelineTracking_ComponentMetadataEntry_DoNotUse() {}
PipelineTracking_ComponentMetadataEntry_DoNotUse::PipelineTracking_ComponentMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PipelineTracking_ComponentMetadataEntry_DoNotUse::MergeFrom(const PipelineTracking_ComponentMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PipelineTracking_ComponentMetadataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[15];
}
void PipelineTracking_ComponentMetadataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PipelineTracking::InitAsDefaultInstance() {
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->pipeline_start_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->packet_captured_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->features_extracted_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->geoip_enriched_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->ml_analyzed_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->threat_detected_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->action_taken_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_PipelineTracking_default_instance_._instance.get_mutable()->total_processing_latency_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void PipelineTracking::clear_pipeline_start() {
  if (GetArenaNoVirtual() == NULL && pipeline_start_ != NULL) {
    delete pipeline_start_;
  }
  pipeline_start_ = NULL;
}
void PipelineTracking::clear_packet_captured_at() {
  if (GetArenaNoVirtual() == NULL && packet_captured_at_ != NULL) {
    delete packet_captured_at_;
  }
  packet_captured_at_ = NULL;
}
void PipelineTracking::clear_features_extracted_at() {
  if (GetArenaNoVirtual() == NULL && features_extracted_at_ != NULL) {
    delete features_extracted_at_;
  }
  features_extracted_at_ = NULL;
}
void PipelineTracking::clear_geoip_enriched_at() {
  if (GetArenaNoVirtual() == NULL && geoip_enriched_at_ != NULL) {
    delete geoip_enriched_at_;
  }
  geoip_enriched_at_ = NULL;
}
void PipelineTracking::clear_ml_analyzed_at() {
  if (GetArenaNoVirtual() == NULL && ml_analyzed_at_ != NULL) {
    delete ml_analyzed_at_;
  }
  ml_analyzed_at_ = NULL;
}
void PipelineTracking::clear_threat_detected_at() {
  if (GetArenaNoVirtual() == NULL && threat_detected_at_ != NULL) {
    delete threat_detected_at_;
  }
  threat_detected_at_ = NULL;
}
void PipelineTracking::clear_action_taken_at() {
  if (GetArenaNoVirtual() == NULL && action_taken_at_ != NULL) {
    delete action_taken_at_;
  }
  action_taken_at_ = NULL;
}
void PipelineTracking::clear_total_processing_latency() {
  if (GetArenaNoVirtual() == NULL && total_processing_latency_ != NULL) {
    delete total_processing_latency_;
  }
  total_processing_latency_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineTracking::kPipelineIdFieldNumber;
const int PipelineTracking::kPipelineStartFieldNumber;
const int PipelineTracking::kSnifferProcessIdFieldNumber;
const int PipelineTracking::kProcessorProcessIdFieldNumber;
const int PipelineTracking::kEnricherProcessIdFieldNumber;
const int PipelineTracking::kAnalyzerProcessIdFieldNumber;
const int PipelineTracking::kDetectorProcessIdFieldNumber;
const int PipelineTracking::kControllerProcessIdFieldNumber;
const int PipelineTracking::kPacketCapturedAtFieldNumber;
const int PipelineTracking::kFeaturesExtractedAtFieldNumber;
const int PipelineTracking::kGeoipEnrichedAtFieldNumber;
const int PipelineTracking::kMlAnalyzedAtFieldNumber;
const int PipelineTracking::kThreatDetectedAtFieldNumber;
const int PipelineTracking::kActionTakenAtFieldNumber;
const int PipelineTracking::kTotalProcessingLatencyFieldNumber;
const int PipelineTracking::kPipelineHopsCountFieldNumber;
const int PipelineTracking::kProcessingPathFieldNumber;
const int PipelineTracking::kRetryAttemptsFieldNumber;
const int PipelineTracking::kProcessingErrorsFieldNumber;
const int PipelineTracking::kRequiresReprocessingFieldNumber;
const int PipelineTracking::kComponentMetadataFieldNumber;
const int PipelineTracking::kProcessingTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineTracking::PipelineTracking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_PipelineTracking.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.PipelineTracking)
}
PipelineTracking::PipelineTracking(const PipelineTracking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      processing_errors_(from.processing_errors_),
      processing_tags_(from.processing_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  component_metadata_.MergeFrom(from.component_metadata_);
  pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pipeline_id().size() > 0) {
    pipeline_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pipeline_id_);
  }
  processing_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processing_path().size() > 0) {
    processing_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_path_);
  }
  if (from.has_pipeline_start()) {
    pipeline_start_ = new ::google::protobuf::Timestamp(*from.pipeline_start_);
  } else {
    pipeline_start_ = NULL;
  }
  if (from.has_packet_captured_at()) {
    packet_captured_at_ = new ::google::protobuf::Timestamp(*from.packet_captured_at_);
  } else {
    packet_captured_at_ = NULL;
  }
  if (from.has_features_extracted_at()) {
    features_extracted_at_ = new ::google::protobuf::Timestamp(*from.features_extracted_at_);
  } else {
    features_extracted_at_ = NULL;
  }
  if (from.has_geoip_enriched_at()) {
    geoip_enriched_at_ = new ::google::protobuf::Timestamp(*from.geoip_enriched_at_);
  } else {
    geoip_enriched_at_ = NULL;
  }
  if (from.has_ml_analyzed_at()) {
    ml_analyzed_at_ = new ::google::protobuf::Timestamp(*from.ml_analyzed_at_);
  } else {
    ml_analyzed_at_ = NULL;
  }
  if (from.has_threat_detected_at()) {
    threat_detected_at_ = new ::google::protobuf::Timestamp(*from.threat_detected_at_);
  } else {
    threat_detected_at_ = NULL;
  }
  if (from.has_action_taken_at()) {
    action_taken_at_ = new ::google::protobuf::Timestamp(*from.action_taken_at_);
  } else {
    action_taken_at_ = NULL;
  }
  if (from.has_total_processing_latency()) {
    total_processing_latency_ = new ::google::protobuf::Duration(*from.total_processing_latency_);
  } else {
    total_processing_latency_ = NULL;
  }
  ::memcpy(&sniffer_process_id_, &from.sniffer_process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&requires_reprocessing_) -
    reinterpret_cast<char*>(&sniffer_process_id_)) + sizeof(requires_reprocessing_));
  // @@protoc_insertion_point(copy_constructor:protobuf.PipelineTracking)
}

void PipelineTracking::SharedCtor() {
  pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pipeline_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_reprocessing_) -
      reinterpret_cast<char*>(&pipeline_start_)) + sizeof(requires_reprocessing_));
}

PipelineTracking::~PipelineTracking() {
  // @@protoc_insertion_point(destructor:protobuf.PipelineTracking)
  SharedDtor();
}

void PipelineTracking::SharedDtor() {
  pipeline_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pipeline_start_;
  if (this != internal_default_instance()) delete packet_captured_at_;
  if (this != internal_default_instance()) delete features_extracted_at_;
  if (this != internal_default_instance()) delete geoip_enriched_at_;
  if (this != internal_default_instance()) delete ml_analyzed_at_;
  if (this != internal_default_instance()) delete threat_detected_at_;
  if (this != internal_default_instance()) delete action_taken_at_;
  if (this != internal_default_instance()) delete total_processing_latency_;
}

void PipelineTracking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PipelineTracking::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PipelineTracking& PipelineTracking::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_PipelineTracking.base);
  return *internal_default_instance();
}


void PipelineTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.PipelineTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processing_errors_.Clear();
  component_metadata_.Clear();
  processing_tags_.Clear();
  pipeline_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pipeline_start_ != NULL) {
    delete pipeline_start_;
  }
  pipeline_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_captured_at_ != NULL) {
    delete packet_captured_at_;
  }
  packet_captured_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && features_extracted_at_ != NULL) {
    delete features_extracted_at_;
  }
  features_extracted_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && geoip_enriched_at_ != NULL) {
    delete geoip_enriched_at_;
  }
  geoip_enriched_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && ml_analyzed_at_ != NULL) {
    delete ml_analyzed_at_;
  }
  ml_analyzed_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && threat_detected_at_ != NULL) {
    delete threat_detected_at_;
  }
  threat_detected_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && action_taken_at_ != NULL) {
    delete action_taken_at_;
  }
  action_taken_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && total_processing_latency_ != NULL) {
    delete total_processing_latency_;
  }
  total_processing_latency_ = NULL;
  ::memset(&sniffer_process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_reprocessing_) -
      reinterpret_cast<char*>(&sniffer_process_id_)) + sizeof(requires_reprocessing_));
  _internal_metadata_.Clear();
}

bool PipelineTracking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.PipelineTracking)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pipeline_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeline_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pipeline_id().data(), static_cast<int>(this->pipeline_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.pipeline_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp pipeline_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pipeline_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sniffer_process_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sniffer_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 processor_process_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processor_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 enricher_process_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enricher_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 analyzer_process_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analyzer_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detector_process_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detector_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 controller_process_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp packet_captured_at = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packet_captured_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp features_extracted_at = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_features_extracted_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp geoip_enriched_at = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geoip_enriched_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp ml_analyzed_at = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ml_analyzed_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp threat_detected_at = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threat_detected_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp action_taken_at = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_taken_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration total_processing_latency = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_total_processing_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pipeline_hops_count = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pipeline_hops_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string processing_path = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processing_path().data(), static_cast<int>(this->processing_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.processing_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retry_attempts = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string processing_errors = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_processing_errors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processing_errors(this->processing_errors_size() - 1).data(),
            static_cast<int>(this->processing_errors(this->processing_errors_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.processing_errors"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool requires_reprocessing = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_reprocessing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> component_metadata = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          PipelineTracking_ComponentMetadataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PipelineTracking_ComponentMetadataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&component_metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.ComponentMetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.ComponentMetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string processing_tags = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_processing_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processing_tags(this->processing_tags_size() - 1).data(),
            static_cast<int>(this->processing_tags(this->processing_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.PipelineTracking.processing_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.PipelineTracking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.PipelineTracking)
  return false;
#undef DO_
}

void PipelineTracking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.PipelineTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), static_cast<int>(this->pipeline_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.pipeline_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pipeline_id(), output);
  }

  // .google.protobuf.Timestamp pipeline_start = 2;
  if (this->has_pipeline_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pipeline_start(), output);
  }

  // int32 sniffer_process_id = 3;
  if (this->sniffer_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sniffer_process_id(), output);
  }

  // int32 processor_process_id = 4;
  if (this->processor_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processor_process_id(), output);
  }

  // int32 enricher_process_id = 5;
  if (this->enricher_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enricher_process_id(), output);
  }

  // int32 analyzer_process_id = 6;
  if (this->analyzer_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->analyzer_process_id(), output);
  }

  // int32 detector_process_id = 7;
  if (this->detector_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->detector_process_id(), output);
  }

  // int32 controller_process_id = 8;
  if (this->controller_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->controller_process_id(), output);
  }

  // .google.protobuf.Timestamp packet_captured_at = 10;
  if (this->has_packet_captured_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_packet_captured_at(), output);
  }

  // .google.protobuf.Timestamp features_extracted_at = 11;
  if (this->has_features_extracted_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_features_extracted_at(), output);
  }

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  if (this->has_geoip_enriched_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_geoip_enriched_at(), output);
  }

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  if (this->has_ml_analyzed_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_ml_analyzed_at(), output);
  }

  // .google.protobuf.Timestamp threat_detected_at = 14;
  if (this->has_threat_detected_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_threat_detected_at(), output);
  }

  // .google.protobuf.Timestamp action_taken_at = 15;
  if (this->has_action_taken_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_action_taken_at(), output);
  }

  // .google.protobuf.Duration total_processing_latency = 20;
  if (this->has_total_processing_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_total_processing_latency(), output);
  }

  // int32 pipeline_hops_count = 21;
  if (this->pipeline_hops_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pipeline_hops_count(), output);
  }

  // string processing_path = 22;
  if (this->processing_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_path().data(), static_cast<int>(this->processing_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->processing_path(), output);
  }

  // int32 retry_attempts = 25;
  if (this->retry_attempts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->retry_attempts(), output);
  }

  // repeated string processing_errors = 26;
  for (int i = 0, n = this->processing_errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_errors(i).data(), static_cast<int>(this->processing_errors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_errors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->processing_errors(i), output);
  }

  // bool requires_reprocessing = 27;
  if (this->requires_reprocessing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->requires_reprocessing(), output);
  }

  // map<string, string> component_metadata = 30;
  if (!this->component_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.PipelineTracking.ComponentMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.PipelineTracking.ComponentMetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->component_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->component_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->component_metadata().begin();
          it != this->component_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PipelineTracking_ComponentMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(component_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PipelineTracking_ComponentMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->component_metadata().begin();
          it != this->component_metadata().end(); ++it) {
        entry.reset(component_metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            30, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string processing_tags = 31;
  for (int i = 0, n = this->processing_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_tags(i).data(), static_cast<int>(this->processing_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->processing_tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.PipelineTracking)
}

::google::protobuf::uint8* PipelineTracking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.PipelineTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), static_cast<int>(this->pipeline_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.pipeline_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipeline_id(), target);
  }

  // .google.protobuf.Timestamp pipeline_start = 2;
  if (this->has_pipeline_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pipeline_start(), deterministic, target);
  }

  // int32 sniffer_process_id = 3;
  if (this->sniffer_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sniffer_process_id(), target);
  }

  // int32 processor_process_id = 4;
  if (this->processor_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processor_process_id(), target);
  }

  // int32 enricher_process_id = 5;
  if (this->enricher_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enricher_process_id(), target);
  }

  // int32 analyzer_process_id = 6;
  if (this->analyzer_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->analyzer_process_id(), target);
  }

  // int32 detector_process_id = 7;
  if (this->detector_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->detector_process_id(), target);
  }

  // int32 controller_process_id = 8;
  if (this->controller_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->controller_process_id(), target);
  }

  // .google.protobuf.Timestamp packet_captured_at = 10;
  if (this->has_packet_captured_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_packet_captured_at(), deterministic, target);
  }

  // .google.protobuf.Timestamp features_extracted_at = 11;
  if (this->has_features_extracted_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_features_extracted_at(), deterministic, target);
  }

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  if (this->has_geoip_enriched_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_geoip_enriched_at(), deterministic, target);
  }

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  if (this->has_ml_analyzed_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_ml_analyzed_at(), deterministic, target);
  }

  // .google.protobuf.Timestamp threat_detected_at = 14;
  if (this->has_threat_detected_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_threat_detected_at(), deterministic, target);
  }

  // .google.protobuf.Timestamp action_taken_at = 15;
  if (this->has_action_taken_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_action_taken_at(), deterministic, target);
  }

  // .google.protobuf.Duration total_processing_latency = 20;
  if (this->has_total_processing_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_total_processing_latency(), deterministic, target);
  }

  // int32 pipeline_hops_count = 21;
  if (this->pipeline_hops_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pipeline_hops_count(), target);
  }

  // string processing_path = 22;
  if (this->processing_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_path().data(), static_cast<int>(this->processing_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->processing_path(), target);
  }

  // int32 retry_attempts = 25;
  if (this->retry_attempts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->retry_attempts(), target);
  }

  // repeated string processing_errors = 26;
  for (int i = 0, n = this->processing_errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_errors(i).data(), static_cast<int>(this->processing_errors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_errors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(26, this->processing_errors(i), target);
  }

  // bool requires_reprocessing = 27;
  if (this->requires_reprocessing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->requires_reprocessing(), target);
  }

  // map<string, string> component_metadata = 30;
  if (!this->component_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.PipelineTracking.ComponentMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.PipelineTracking.ComponentMetadataEntry.value");
      }
    };

    if (deterministic &&
        this->component_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->component_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->component_metadata().begin();
          it != this->component_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PipelineTracking_ComponentMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(component_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PipelineTracking_ComponentMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->component_metadata().begin();
          it != this->component_metadata().end(); ++it) {
        entry.reset(component_metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       30, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string processing_tags = 31;
  for (int i = 0, n = this->processing_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processing_tags(i).data(), static_cast<int>(this->processing_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(31, this->processing_tags(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.PipelineTracking)
  return target;
}

size_t PipelineTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.PipelineTracking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string processing_errors = 26;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->processing_errors_size());
  for (int i = 0, n = this->processing_errors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->processing_errors(i));
  }

  // map<string, string> component_metadata = 30;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->component_metadata_size());
  {
    ::std::unique_ptr<PipelineTracking_ComponentMetadataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->component_metadata().begin();
        it != this->component_metadata().end(); ++it) {
      entry.reset(component_metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string processing_tags = 31;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->processing_tags_size());
  for (int i = 0, n = this->processing_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->processing_tags(i));
  }

  // string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pipeline_id());
  }

  // string processing_path = 22;
  if (this->processing_path().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_path());
  }

  // .google.protobuf.Timestamp pipeline_start = 2;
  if (this->has_pipeline_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pipeline_start_);
  }

  // .google.protobuf.Timestamp packet_captured_at = 10;
  if (this->has_packet_captured_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *packet_captured_at_);
  }

  // .google.protobuf.Timestamp features_extracted_at = 11;
  if (this->has_features_extracted_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *features_extracted_at_);
  }

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  if (this->has_geoip_enriched_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geoip_enriched_at_);
  }

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  if (this->has_ml_analyzed_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ml_analyzed_at_);
  }

  // .google.protobuf.Timestamp threat_detected_at = 14;
  if (this->has_threat_detected_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threat_detected_at_);
  }

  // .google.protobuf.Timestamp action_taken_at = 15;
  if (this->has_action_taken_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *action_taken_at_);
  }

  // .google.protobuf.Duration total_processing_latency = 20;
  if (this->has_total_processing_latency()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *total_processing_latency_);
  }

  // int32 sniffer_process_id = 3;
  if (this->sniffer_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sniffer_process_id());
  }

  // int32 processor_process_id = 4;
  if (this->processor_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->processor_process_id());
  }

  // int32 enricher_process_id = 5;
  if (this->enricher_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enricher_process_id());
  }

  // int32 analyzer_process_id = 6;
  if (this->analyzer_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->analyzer_process_id());
  }

  // int32 detector_process_id = 7;
  if (this->detector_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->detector_process_id());
  }

  // int32 controller_process_id = 8;
  if (this->controller_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->controller_process_id());
  }

  // int32 pipeline_hops_count = 21;
  if (this->pipeline_hops_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pipeline_hops_count());
  }

  // int32 retry_attempts = 25;
  if (this->retry_attempts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retry_attempts());
  }

  // bool requires_reprocessing = 27;
  if (this->requires_reprocessing() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineTracking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.PipelineTracking)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineTracking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineTracking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.PipelineTracking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.PipelineTracking)
    MergeFrom(*source);
  }
}

void PipelineTracking::MergeFrom(const PipelineTracking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.PipelineTracking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processing_errors_.MergeFrom(from.processing_errors_);
  component_metadata_.MergeFrom(from.component_metadata_);
  processing_tags_.MergeFrom(from.processing_tags_);
  if (from.pipeline_id().size() > 0) {

    pipeline_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pipeline_id_);
  }
  if (from.processing_path().size() > 0) {

    processing_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_path_);
  }
  if (from.has_pipeline_start()) {
    mutable_pipeline_start()->::google::protobuf::Timestamp::MergeFrom(from.pipeline_start());
  }
  if (from.has_packet_captured_at()) {
    mutable_packet_captured_at()->::google::protobuf::Timestamp::MergeFrom(from.packet_captured_at());
  }
  if (from.has_features_extracted_at()) {
    mutable_features_extracted_at()->::google::protobuf::Timestamp::MergeFrom(from.features_extracted_at());
  }
  if (from.has_geoip_enriched_at()) {
    mutable_geoip_enriched_at()->::google::protobuf::Timestamp::MergeFrom(from.geoip_enriched_at());
  }
  if (from.has_ml_analyzed_at()) {
    mutable_ml_analyzed_at()->::google::protobuf::Timestamp::MergeFrom(from.ml_analyzed_at());
  }
  if (from.has_threat_detected_at()) {
    mutable_threat_detected_at()->::google::protobuf::Timestamp::MergeFrom(from.threat_detected_at());
  }
  if (from.has_action_taken_at()) {
    mutable_action_taken_at()->::google::protobuf::Timestamp::MergeFrom(from.action_taken_at());
  }
  if (from.has_total_processing_latency()) {
    mutable_total_processing_latency()->::google::protobuf::Duration::MergeFrom(from.total_processing_latency());
  }
  if (from.sniffer_process_id() != 0) {
    set_sniffer_process_id(from.sniffer_process_id());
  }
  if (from.processor_process_id() != 0) {
    set_processor_process_id(from.processor_process_id());
  }
  if (from.enricher_process_id() != 0) {
    set_enricher_process_id(from.enricher_process_id());
  }
  if (from.analyzer_process_id() != 0) {
    set_analyzer_process_id(from.analyzer_process_id());
  }
  if (from.detector_process_id() != 0) {
    set_detector_process_id(from.detector_process_id());
  }
  if (from.controller_process_id() != 0) {
    set_controller_process_id(from.controller_process_id());
  }
  if (from.pipeline_hops_count() != 0) {
    set_pipeline_hops_count(from.pipeline_hops_count());
  }
  if (from.retry_attempts() != 0) {
    set_retry_attempts(from.retry_attempts());
  }
  if (from.requires_reprocessing() != 0) {
    set_requires_reprocessing(from.requires_reprocessing());
  }
}

void PipelineTracking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.PipelineTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineTracking::CopyFrom(const PipelineTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.PipelineTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineTracking::IsInitialized() const {
  return true;
}

void PipelineTracking::Swap(PipelineTracking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PipelineTracking::InternalSwap(PipelineTracking* other) {
  using std::swap;
  processing_errors_.InternalSwap(CastToBase(&other->processing_errors_));
  component_metadata_.Swap(&other->component_metadata_);
  processing_tags_.InternalSwap(CastToBase(&other->processing_tags_));
  pipeline_id_.Swap(&other->pipeline_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  processing_path_.Swap(&other->processing_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pipeline_start_, other->pipeline_start_);
  swap(packet_captured_at_, other->packet_captured_at_);
  swap(features_extracted_at_, other->features_extracted_at_);
  swap(geoip_enriched_at_, other->geoip_enriched_at_);
  swap(ml_analyzed_at_, other->ml_analyzed_at_);
  swap(threat_detected_at_, other->threat_detected_at_);
  swap(action_taken_at_, other->action_taken_at_);
  swap(total_processing_latency_, other->total_processing_latency_);
  swap(sniffer_process_id_, other->sniffer_process_id_);
  swap(processor_process_id_, other->processor_process_id_);
  swap(enricher_process_id_, other->enricher_process_id_);
  swap(analyzer_process_id_, other->analyzer_process_id_);
  swap(detector_process_id_, other->detector_process_id_);
  swap(controller_process_id_, other->controller_process_id_);
  swap(pipeline_hops_count_, other->pipeline_hops_count_);
  swap(retry_attempts_, other->retry_attempts_);
  swap(requires_reprocessing_, other->requires_reprocessing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PipelineTracking::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RAGAnalysis::InitAsDefaultInstance() {
  ::protobuf::_RAGAnalysis_default_instance_._instance.get_mutable()->analysis_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void RAGAnalysis::clear_analysis_timestamp() {
  if (GetArenaNoVirtual() == NULL && analysis_timestamp_ != NULL) {
    delete analysis_timestamp_;
  }
  analysis_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RAGAnalysis::kQueryTextFieldNumber;
const int RAGAnalysis::kRetrievedKnowledgeFieldNumber;
const int RAGAnalysis::kRelevanceScoresFieldNumber;
const int RAGAnalysis::kAiGeneratedAnalysisFieldNumber;
const int RAGAnalysis::kAnalysisConfidenceFieldNumber;
const int RAGAnalysis::kKnowledgeSourcesFieldNumber;
const int RAGAnalysis::kAnalysisTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RAGAnalysis::RAGAnalysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_RAGAnalysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.RAGAnalysis)
}
RAGAnalysis::RAGAnalysis(const RAGAnalysis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      retrieved_knowledge_(from.retrieved_knowledge_),
      relevance_scores_(from.relevance_scores_),
      knowledge_sources_(from.knowledge_sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_text().size() > 0) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  ai_generated_analysis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ai_generated_analysis().size() > 0) {
    ai_generated_analysis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ai_generated_analysis_);
  }
  if (from.has_analysis_timestamp()) {
    analysis_timestamp_ = new ::google::protobuf::Timestamp(*from.analysis_timestamp_);
  } else {
    analysis_timestamp_ = NULL;
  }
  analysis_confidence_ = from.analysis_confidence_;
  // @@protoc_insertion_point(copy_constructor:protobuf.RAGAnalysis)
}

void RAGAnalysis::SharedCtor() {
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ai_generated_analysis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&analysis_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&analysis_confidence_) -
      reinterpret_cast<char*>(&analysis_timestamp_)) + sizeof(analysis_confidence_));
}

RAGAnalysis::~RAGAnalysis() {
  // @@protoc_insertion_point(destructor:protobuf.RAGAnalysis)
  SharedDtor();
}

void RAGAnalysis::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ai_generated_analysis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete analysis_timestamp_;
}

void RAGAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RAGAnalysis::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RAGAnalysis& RAGAnalysis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_RAGAnalysis.base);
  return *internal_default_instance();
}


void RAGAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RAGAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retrieved_knowledge_.Clear();
  relevance_scores_.Clear();
  knowledge_sources_.Clear();
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ai_generated_analysis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && analysis_timestamp_ != NULL) {
    delete analysis_timestamp_;
  }
  analysis_timestamp_ = NULL;
  analysis_confidence_ = 0;
  _internal_metadata_.Clear();
}

bool RAGAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.RAGAnalysis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.RAGAnalysis.query_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string retrieved_knowledge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_retrieved_knowledge()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retrieved_knowledge(this->retrieved_knowledge_size() - 1).data(),
            static_cast<int>(this->retrieved_knowledge(this->retrieved_knowledge_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.RAGAnalysis.retrieved_knowledge"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double relevance_scores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_relevance_scores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_relevance_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ai_generated_analysis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ai_generated_analysis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ai_generated_analysis().data(), static_cast<int>(this->ai_generated_analysis().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.RAGAnalysis.ai_generated_analysis"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double analysis_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &analysis_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string knowledge_sources = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_knowledge_sources()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->knowledge_sources(this->knowledge_sources_size() - 1).data(),
            static_cast<int>(this->knowledge_sources(this->knowledge_sources_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.RAGAnalysis.knowledge_sources"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp analysis_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_analysis_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.RAGAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.RAGAnalysis)
  return false;
#undef DO_
}

void RAGAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.RAGAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_text = 1;
  if (this->query_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated string retrieved_knowledge = 2;
  for (int i = 0, n = this->retrieved_knowledge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retrieved_knowledge(i).data(), static_cast<int>(this->retrieved_knowledge(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.retrieved_knowledge");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->retrieved_knowledge(i), output);
  }

  // repeated double relevance_scores = 3;
  if (this->relevance_scores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _relevance_scores_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->relevance_scores().data(), this->relevance_scores_size(), output);
  }

  // string ai_generated_analysis = 4;
  if (this->ai_generated_analysis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ai_generated_analysis().data(), static_cast<int>(this->ai_generated_analysis().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.ai_generated_analysis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ai_generated_analysis(), output);
  }

  // double analysis_confidence = 5;
  if (this->analysis_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->analysis_confidence(), output);
  }

  // repeated string knowledge_sources = 6;
  for (int i = 0, n = this->knowledge_sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->knowledge_sources(i).data(), static_cast<int>(this->knowledge_sources(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.knowledge_sources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->knowledge_sources(i), output);
  }

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  if (this->has_analysis_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_analysis_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.RAGAnalysis)
}

::google::protobuf::uint8* RAGAnalysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RAGAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_text = 1;
  if (this->query_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated string retrieved_knowledge = 2;
  for (int i = 0, n = this->retrieved_knowledge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retrieved_knowledge(i).data(), static_cast<int>(this->retrieved_knowledge(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.retrieved_knowledge");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->retrieved_knowledge(i), target);
  }

  // repeated double relevance_scores = 3;
  if (this->relevance_scores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _relevance_scores_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->relevance_scores_, target);
  }

  // string ai_generated_analysis = 4;
  if (this->ai_generated_analysis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ai_generated_analysis().data(), static_cast<int>(this->ai_generated_analysis().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.ai_generated_analysis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ai_generated_analysis(), target);
  }

  // double analysis_confidence = 5;
  if (this->analysis_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->analysis_confidence(), target);
  }

  // repeated string knowledge_sources = 6;
  for (int i = 0, n = this->knowledge_sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->knowledge_sources(i).data(), static_cast<int>(this->knowledge_sources(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.knowledge_sources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->knowledge_sources(i), target);
  }

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  if (this->has_analysis_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_analysis_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RAGAnalysis)
  return target;
}

size_t RAGAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RAGAnalysis)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string retrieved_knowledge = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->retrieved_knowledge_size());
  for (int i = 0, n = this->retrieved_knowledge_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->retrieved_knowledge(i));
  }

  // repeated double relevance_scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->relevance_scores_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _relevance_scores_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string knowledge_sources = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->knowledge_sources_size());
  for (int i = 0, n = this->knowledge_sources_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->knowledge_sources(i));
  }

  // string query_text = 1;
  if (this->query_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_text());
  }

  // string ai_generated_analysis = 4;
  if (this->ai_generated_analysis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ai_generated_analysis());
  }

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  if (this->has_analysis_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *analysis_timestamp_);
  }

  // double analysis_confidence = 5;
  if (this->analysis_confidence() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RAGAnalysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RAGAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const RAGAnalysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RAGAnalysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RAGAnalysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RAGAnalysis)
    MergeFrom(*source);
  }
}

void RAGAnalysis::MergeFrom(const RAGAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RAGAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  retrieved_knowledge_.MergeFrom(from.retrieved_knowledge_);
  relevance_scores_.MergeFrom(from.relevance_scores_);
  knowledge_sources_.MergeFrom(from.knowledge_sources_);
  if (from.query_text().size() > 0) {

    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  if (from.ai_generated_analysis().size() > 0) {

    ai_generated_analysis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ai_generated_analysis_);
  }
  if (from.has_analysis_timestamp()) {
    mutable_analysis_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.analysis_timestamp());
  }
  if (from.analysis_confidence() != 0) {
    set_analysis_confidence(from.analysis_confidence());
  }
}

void RAGAnalysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RAGAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RAGAnalysis::CopyFrom(const RAGAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RAGAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAGAnalysis::IsInitialized() const {
  return true;
}

void RAGAnalysis::Swap(RAGAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RAGAnalysis::InternalSwap(RAGAnalysis* other) {
  using std::swap;
  retrieved_knowledge_.InternalSwap(CastToBase(&other->retrieved_knowledge_));
  relevance_scores_.InternalSwap(&other->relevance_scores_);
  knowledge_sources_.InternalSwap(CastToBase(&other->knowledge_sources_));
  query_text_.Swap(&other->query_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ai_generated_analysis_.Swap(&other->ai_generated_analysis_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(analysis_timestamp_, other->analysis_timestamp_);
  swap(analysis_confidence_, other->analysis_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RAGAnalysis::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HumanFeedback::InitAsDefaultInstance() {
  ::protobuf::_HumanFeedback_default_instance_._instance.get_mutable()->feedback_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void HumanFeedback::clear_feedback_timestamp() {
  if (GetArenaNoVirtual() == NULL && feedback_timestamp_ != NULL) {
    delete feedback_timestamp_;
  }
  feedback_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HumanFeedback::kFeedbackIdFieldNumber;
const int HumanFeedback::kAnalystUserIdFieldNumber;
const int HumanFeedback::kEventReferenceIdFieldNumber;
const int HumanFeedback::kFeedbackTypeFieldNumber;
const int HumanFeedback::kConfirmedTruePositiveFieldNumber;
const int HumanFeedback::kConfirmedFalsePositiveFieldNumber;
const int HumanFeedback::kAnalystExplanationFieldNumber;
const int HumanFeedback::kAnalystTagsFieldNumber;
const int HumanFeedback::kAnalystConfidenceRatingFieldNumber;
const int HumanFeedback::kFeedbackTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HumanFeedback::HumanFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanFeedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.HumanFeedback)
}
HumanFeedback::HumanFeedback(const HumanFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      analyst_tags_(from.analyst_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feedback_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feedback_id().size() > 0) {
    feedback_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_id_);
  }
  analyst_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analyst_user_id().size() > 0) {
    analyst_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analyst_user_id_);
  }
  event_reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_reference_id().size() > 0) {
    event_reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_reference_id_);
  }
  analyst_explanation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analyst_explanation().size() > 0) {
    analyst_explanation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analyst_explanation_);
  }
  if (from.has_feedback_timestamp()) {
    feedback_timestamp_ = new ::google::protobuf::Timestamp(*from.feedback_timestamp_);
  } else {
    feedback_timestamp_ = NULL;
  }
  ::memcpy(&feedback_type_, &from.feedback_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&analyst_confidence_rating_) -
    reinterpret_cast<char*>(&feedback_type_)) + sizeof(analyst_confidence_rating_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HumanFeedback)
}

void HumanFeedback::SharedCtor() {
  feedback_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_explanation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&feedback_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&analyst_confidence_rating_) -
      reinterpret_cast<char*>(&feedback_timestamp_)) + sizeof(analyst_confidence_rating_));
}

HumanFeedback::~HumanFeedback() {
  // @@protoc_insertion_point(destructor:protobuf.HumanFeedback)
  SharedDtor();
}

void HumanFeedback::SharedDtor() {
  feedback_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_explanation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete feedback_timestamp_;
}

void HumanFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HumanFeedback::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HumanFeedback& HumanFeedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanFeedback.base);
  return *internal_default_instance();
}


void HumanFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HumanFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  analyst_tags_.Clear();
  feedback_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  analyst_explanation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && feedback_timestamp_ != NULL) {
    delete feedback_timestamp_;
  }
  feedback_timestamp_ = NULL;
  ::memset(&feedback_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&analyst_confidence_rating_) -
      reinterpret_cast<char*>(&feedback_type_)) + sizeof(analyst_confidence_rating_));
  _internal_metadata_.Clear();
}

bool HumanFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.HumanFeedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string feedback_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feedback_id().data(), static_cast<int>(this->feedback_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanFeedback.feedback_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string analyst_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analyst_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analyst_user_id().data(), static_cast<int>(this->analyst_user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanFeedback.analyst_user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_reference_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_reference_id().data(), static_cast<int>(this->event_reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanFeedback.event_reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_feedback_type(static_cast< ::protobuf::HumanFeedback_FeedbackType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool confirmed_true_positive = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirmed_true_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool confirmed_false_positive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirmed_false_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string analyst_explanation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analyst_explanation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analyst_explanation().data(), static_cast<int>(this->analyst_explanation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanFeedback.analyst_explanation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string analyst_tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_analyst_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analyst_tags(this->analyst_tags_size() - 1).data(),
            static_cast<int>(this->analyst_tags(this->analyst_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanFeedback.analyst_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 analyst_confidence_rating = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analyst_confidence_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp feedback_timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feedback_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.HumanFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.HumanFeedback)
  return false;
#undef DO_
}

void HumanFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.HumanFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feedback_id = 1;
  if (this->feedback_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feedback_id().data(), static_cast<int>(this->feedback_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.feedback_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feedback_id(), output);
  }

  // string analyst_user_id = 2;
  if (this->analyst_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_user_id().data(), static_cast<int>(this->analyst_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->analyst_user_id(), output);
  }

  // string event_reference_id = 3;
  if (this->event_reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_reference_id().data(), static_cast<int>(this->event_reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.event_reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->event_reference_id(), output);
  }

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  if (this->feedback_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->feedback_type(), output);
  }

  // bool confirmed_true_positive = 5;
  if (this->confirmed_true_positive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->confirmed_true_positive(), output);
  }

  // bool confirmed_false_positive = 6;
  if (this->confirmed_false_positive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->confirmed_false_positive(), output);
  }

  // string analyst_explanation = 7;
  if (this->analyst_explanation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_explanation().data(), static_cast<int>(this->analyst_explanation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_explanation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->analyst_explanation(), output);
  }

  // repeated string analyst_tags = 8;
  for (int i = 0, n = this->analyst_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_tags(i).data(), static_cast<int>(this->analyst_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->analyst_tags(i), output);
  }

  // int32 analyst_confidence_rating = 9;
  if (this->analyst_confidence_rating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->analyst_confidence_rating(), output);
  }

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  if (this->has_feedback_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_feedback_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.HumanFeedback)
}

::google::protobuf::uint8* HumanFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HumanFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feedback_id = 1;
  if (this->feedback_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feedback_id().data(), static_cast<int>(this->feedback_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.feedback_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feedback_id(), target);
  }

  // string analyst_user_id = 2;
  if (this->analyst_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_user_id().data(), static_cast<int>(this->analyst_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->analyst_user_id(), target);
  }

  // string event_reference_id = 3;
  if (this->event_reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_reference_id().data(), static_cast<int>(this->event_reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.event_reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_reference_id(), target);
  }

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  if (this->feedback_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->feedback_type(), target);
  }

  // bool confirmed_true_positive = 5;
  if (this->confirmed_true_positive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->confirmed_true_positive(), target);
  }

  // bool confirmed_false_positive = 6;
  if (this->confirmed_false_positive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->confirmed_false_positive(), target);
  }

  // string analyst_explanation = 7;
  if (this->analyst_explanation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_explanation().data(), static_cast<int>(this->analyst_explanation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_explanation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->analyst_explanation(), target);
  }

  // repeated string analyst_tags = 8;
  for (int i = 0, n = this->analyst_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analyst_tags(i).data(), static_cast<int>(this->analyst_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->analyst_tags(i), target);
  }

  // int32 analyst_confidence_rating = 9;
  if (this->analyst_confidence_rating() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->analyst_confidence_rating(), target);
  }

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  if (this->has_feedback_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_feedback_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HumanFeedback)
  return target;
}

size_t HumanFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HumanFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string analyst_tags = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->analyst_tags_size());
  for (int i = 0, n = this->analyst_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->analyst_tags(i));
  }

  // string feedback_id = 1;
  if (this->feedback_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback_id());
  }

  // string analyst_user_id = 2;
  if (this->analyst_user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analyst_user_id());
  }

  // string event_reference_id = 3;
  if (this->event_reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_reference_id());
  }

  // string analyst_explanation = 7;
  if (this->analyst_explanation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analyst_explanation());
  }

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  if (this->has_feedback_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feedback_timestamp_);
  }

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  if (this->feedback_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->feedback_type());
  }

  // bool confirmed_true_positive = 5;
  if (this->confirmed_true_positive() != 0) {
    total_size += 1 + 1;
  }

  // bool confirmed_false_positive = 6;
  if (this->confirmed_false_positive() != 0) {
    total_size += 1 + 1;
  }

  // int32 analyst_confidence_rating = 9;
  if (this->analyst_confidence_rating() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->analyst_confidence_rating());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumanFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.HumanFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const HumanFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HumanFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.HumanFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.HumanFeedback)
    MergeFrom(*source);
  }
}

void HumanFeedback::MergeFrom(const HumanFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HumanFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  analyst_tags_.MergeFrom(from.analyst_tags_);
  if (from.feedback_id().size() > 0) {

    feedback_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_id_);
  }
  if (from.analyst_user_id().size() > 0) {

    analyst_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analyst_user_id_);
  }
  if (from.event_reference_id().size() > 0) {

    event_reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_reference_id_);
  }
  if (from.analyst_explanation().size() > 0) {

    analyst_explanation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analyst_explanation_);
  }
  if (from.has_feedback_timestamp()) {
    mutable_feedback_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.feedback_timestamp());
  }
  if (from.feedback_type() != 0) {
    set_feedback_type(from.feedback_type());
  }
  if (from.confirmed_true_positive() != 0) {
    set_confirmed_true_positive(from.confirmed_true_positive());
  }
  if (from.confirmed_false_positive() != 0) {
    set_confirmed_false_positive(from.confirmed_false_positive());
  }
  if (from.analyst_confidence_rating() != 0) {
    set_analyst_confidence_rating(from.analyst_confidence_rating());
  }
}

void HumanFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.HumanFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanFeedback::CopyFrom(const HumanFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HumanFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanFeedback::IsInitialized() const {
  return true;
}

void HumanFeedback::Swap(HumanFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HumanFeedback::InternalSwap(HumanFeedback* other) {
  using std::swap;
  analyst_tags_.InternalSwap(CastToBase(&other->analyst_tags_));
  feedback_id_.Swap(&other->feedback_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  analyst_user_id_.Swap(&other->analyst_user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_reference_id_.Swap(&other->event_reference_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  analyst_explanation_.Swap(&other->analyst_explanation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(feedback_timestamp_, other->feedback_timestamp_);
  swap(feedback_type_, other->feedback_type_);
  swap(confirmed_true_positive_, other->confirmed_true_positive_);
  swap(confirmed_false_positive_, other->confirmed_false_positive_);
  swap(analyst_confidence_rating_, other->analyst_confidence_rating_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HumanFeedback::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HumanInTheLoopReview::InitAsDefaultInstance() {
  ::protobuf::_HumanInTheLoopReview_default_instance_._instance.get_mutable()->analyst_feedback_ = const_cast< ::protobuf::HumanFeedback*>(
      ::protobuf::HumanFeedback::internal_default_instance());
  ::protobuf::_HumanInTheLoopReview_default_instance_._instance.get_mutable()->escalated_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_HumanInTheLoopReview_default_instance_._instance.get_mutable()->reviewed_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void HumanInTheLoopReview::clear_escalated_timestamp() {
  if (GetArenaNoVirtual() == NULL && escalated_timestamp_ != NULL) {
    delete escalated_timestamp_;
  }
  escalated_timestamp_ = NULL;
}
void HumanInTheLoopReview::clear_reviewed_timestamp() {
  if (GetArenaNoVirtual() == NULL && reviewed_timestamp_ != NULL) {
    delete reviewed_timestamp_;
  }
  reviewed_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HumanInTheLoopReview::kRequiresHumanAnalysisFieldNumber;
const int HumanInTheLoopReview::kReviewPriorityFieldNumber;
const int HumanInTheLoopReview::kReviewReasonsFieldNumber;
const int HumanInTheLoopReview::kAnalystFeedbackFieldNumber;
const int HumanInTheLoopReview::kEscalatedTimestampFieldNumber;
const int HumanInTheLoopReview::kReviewedTimestampFieldNumber;
const int HumanInTheLoopReview::kReviewCompletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HumanInTheLoopReview::HumanInTheLoopReview()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanInTheLoopReview.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.HumanInTheLoopReview)
}
HumanInTheLoopReview::HumanInTheLoopReview(const HumanInTheLoopReview& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      review_reasons_(from.review_reasons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_analyst_feedback()) {
    analyst_feedback_ = new ::protobuf::HumanFeedback(*from.analyst_feedback_);
  } else {
    analyst_feedback_ = NULL;
  }
  if (from.has_escalated_timestamp()) {
    escalated_timestamp_ = new ::google::protobuf::Timestamp(*from.escalated_timestamp_);
  } else {
    escalated_timestamp_ = NULL;
  }
  if (from.has_reviewed_timestamp()) {
    reviewed_timestamp_ = new ::google::protobuf::Timestamp(*from.reviewed_timestamp_);
  } else {
    reviewed_timestamp_ = NULL;
  }
  ::memcpy(&review_priority_, &from.review_priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&review_completed_) -
    reinterpret_cast<char*>(&review_priority_)) + sizeof(review_completed_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HumanInTheLoopReview)
}

void HumanInTheLoopReview::SharedCtor() {
  ::memset(&analyst_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_completed_) -
      reinterpret_cast<char*>(&analyst_feedback_)) + sizeof(review_completed_));
}

HumanInTheLoopReview::~HumanInTheLoopReview() {
  // @@protoc_insertion_point(destructor:protobuf.HumanInTheLoopReview)
  SharedDtor();
}

void HumanInTheLoopReview::SharedDtor() {
  if (this != internal_default_instance()) delete analyst_feedback_;
  if (this != internal_default_instance()) delete escalated_timestamp_;
  if (this != internal_default_instance()) delete reviewed_timestamp_;
}

void HumanInTheLoopReview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HumanInTheLoopReview::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HumanInTheLoopReview& HumanInTheLoopReview::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_HumanInTheLoopReview.base);
  return *internal_default_instance();
}


void HumanInTheLoopReview::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HumanInTheLoopReview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  review_reasons_.Clear();
  if (GetArenaNoVirtual() == NULL && analyst_feedback_ != NULL) {
    delete analyst_feedback_;
  }
  analyst_feedback_ = NULL;
  if (GetArenaNoVirtual() == NULL && escalated_timestamp_ != NULL) {
    delete escalated_timestamp_;
  }
  escalated_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && reviewed_timestamp_ != NULL) {
    delete reviewed_timestamp_;
  }
  reviewed_timestamp_ = NULL;
  ::memset(&review_priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_completed_) -
      reinterpret_cast<char*>(&review_priority_)) + sizeof(review_completed_));
  _internal_metadata_.Clear();
}

bool HumanInTheLoopReview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.HumanInTheLoopReview)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool requires_human_analysis = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_human_analysis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_review_priority(static_cast< ::protobuf::HumanInTheLoopReview_ReviewPriority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string review_reasons = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_review_reasons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->review_reasons(this->review_reasons_size() - 1).data(),
            static_cast<int>(this->review_reasons(this->review_reasons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.HumanInTheLoopReview.review_reasons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.HumanFeedback analyst_feedback = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_analyst_feedback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp escalated_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_escalated_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp reviewed_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reviewed_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool review_completed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &review_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.HumanInTheLoopReview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.HumanInTheLoopReview)
  return false;
#undef DO_
}

void HumanInTheLoopReview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.HumanInTheLoopReview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool requires_human_analysis = 1;
  if (this->requires_human_analysis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->requires_human_analysis(), output);
  }

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  if (this->review_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->review_priority(), output);
  }

  // repeated string review_reasons = 3;
  for (int i = 0, n = this->review_reasons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->review_reasons(i).data(), static_cast<int>(this->review_reasons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanInTheLoopReview.review_reasons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->review_reasons(i), output);
  }

  // .protobuf.HumanFeedback analyst_feedback = 4;
  if (this->has_analyst_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_analyst_feedback(), output);
  }

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  if (this->has_escalated_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_escalated_timestamp(), output);
  }

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  if (this->has_reviewed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_reviewed_timestamp(), output);
  }

  // bool review_completed = 7;
  if (this->review_completed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->review_completed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.HumanInTheLoopReview)
}

::google::protobuf::uint8* HumanInTheLoopReview::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HumanInTheLoopReview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool requires_human_analysis = 1;
  if (this->requires_human_analysis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->requires_human_analysis(), target);
  }

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  if (this->review_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->review_priority(), target);
  }

  // repeated string review_reasons = 3;
  for (int i = 0, n = this->review_reasons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->review_reasons(i).data(), static_cast<int>(this->review_reasons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanInTheLoopReview.review_reasons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->review_reasons(i), target);
  }

  // .protobuf.HumanFeedback analyst_feedback = 4;
  if (this->has_analyst_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_analyst_feedback(), deterministic, target);
  }

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  if (this->has_escalated_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_escalated_timestamp(), deterministic, target);
  }

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  if (this->has_reviewed_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_reviewed_timestamp(), deterministic, target);
  }

  // bool review_completed = 7;
  if (this->review_completed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->review_completed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HumanInTheLoopReview)
  return target;
}

size_t HumanInTheLoopReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HumanInTheLoopReview)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string review_reasons = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->review_reasons_size());
  for (int i = 0, n = this->review_reasons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->review_reasons(i));
  }

  // .protobuf.HumanFeedback analyst_feedback = 4;
  if (this->has_analyst_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *analyst_feedback_);
  }

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  if (this->has_escalated_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *escalated_timestamp_);
  }

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  if (this->has_reviewed_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reviewed_timestamp_);
  }

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  if (this->review_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->review_priority());
  }

  // bool requires_human_analysis = 1;
  if (this->requires_human_analysis() != 0) {
    total_size += 1 + 1;
  }

  // bool review_completed = 7;
  if (this->review_completed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumanInTheLoopReview::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.HumanInTheLoopReview)
  GOOGLE_DCHECK_NE(&from, this);
  const HumanInTheLoopReview* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HumanInTheLoopReview>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.HumanInTheLoopReview)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.HumanInTheLoopReview)
    MergeFrom(*source);
  }
}

void HumanInTheLoopReview::MergeFrom(const HumanInTheLoopReview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HumanInTheLoopReview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  review_reasons_.MergeFrom(from.review_reasons_);
  if (from.has_analyst_feedback()) {
    mutable_analyst_feedback()->::protobuf::HumanFeedback::MergeFrom(from.analyst_feedback());
  }
  if (from.has_escalated_timestamp()) {
    mutable_escalated_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.escalated_timestamp());
  }
  if (from.has_reviewed_timestamp()) {
    mutable_reviewed_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.reviewed_timestamp());
  }
  if (from.review_priority() != 0) {
    set_review_priority(from.review_priority());
  }
  if (from.requires_human_analysis() != 0) {
    set_requires_human_analysis(from.requires_human_analysis());
  }
  if (from.review_completed() != 0) {
    set_review_completed(from.review_completed());
  }
}

void HumanInTheLoopReview::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.HumanInTheLoopReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanInTheLoopReview::CopyFrom(const HumanInTheLoopReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HumanInTheLoopReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanInTheLoopReview::IsInitialized() const {
  return true;
}

void HumanInTheLoopReview::Swap(HumanInTheLoopReview* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HumanInTheLoopReview::InternalSwap(HumanInTheLoopReview* other) {
  using std::swap;
  review_reasons_.InternalSwap(CastToBase(&other->review_reasons_));
  swap(analyst_feedback_, other->analyst_feedback_);
  swap(escalated_timestamp_, other->escalated_timestamp_);
  swap(reviewed_timestamp_, other->reviewed_timestamp_);
  swap(review_priority_, other->review_priority_);
  swap(requires_human_analysis_, other->requires_human_analysis_);
  swap(review_completed_, other->review_completed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HumanInTheLoopReview::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse() {}
NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::MergeFrom(const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[20];
}
void NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void NetworkSecurityEvent::InitAsDefaultInstance() {
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->event_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->network_features_ = const_cast< ::protobuf::NetworkFeatures*>(
      ::protobuf::NetworkFeatures::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->geo_enrichment_ = const_cast< ::protobuf::GeoEnrichment*>(
      ::protobuf::GeoEnrichment::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->time_window_ = const_cast< ::protobuf::TimeWindow*>(
      ::protobuf::TimeWindow::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->ml_analysis_ = const_cast< ::protobuf::TricapaMLAnalysis*>(
      ::protobuf::TricapaMLAnalysis::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->capturing_node_ = const_cast< ::protobuf::DistributedNode*>(
      ::protobuf::DistributedNode::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->pipeline_tracking_ = const_cast< ::protobuf::PipelineTracking*>(
      ::protobuf::PipelineTracking::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->rag_analysis_ = const_cast< ::protobuf::RAGAnalysis*>(
      ::protobuf::RAGAnalysis::internal_default_instance());
  ::protobuf::_NetworkSecurityEvent_default_instance_._instance.get_mutable()->human_review_ = const_cast< ::protobuf::HumanInTheLoopReview*>(
      ::protobuf::HumanInTheLoopReview::internal_default_instance());
}
void NetworkSecurityEvent::clear_event_timestamp() {
  if (GetArenaNoVirtual() == NULL && event_timestamp_ != NULL) {
    delete event_timestamp_;
  }
  event_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkSecurityEvent::kEventIdFieldNumber;
const int NetworkSecurityEvent::kEventTimestampFieldNumber;
const int NetworkSecurityEvent::kOriginatingNodeIdFieldNumber;
const int NetworkSecurityEvent::kNetworkFeaturesFieldNumber;
const int NetworkSecurityEvent::kGeoEnrichmentFieldNumber;
const int NetworkSecurityEvent::kTimeWindowFieldNumber;
const int NetworkSecurityEvent::kMlAnalysisFieldNumber;
const int NetworkSecurityEvent::kAdditionalModelPredictionsFieldNumber;
const int NetworkSecurityEvent::kCapturingNodeFieldNumber;
const int NetworkSecurityEvent::kPipelineTrackingFieldNumber;
const int NetworkSecurityEvent::kRagAnalysisFieldNumber;
const int NetworkSecurityEvent::kHumanReviewFieldNumber;
const int NetworkSecurityEvent::kOverallThreatScoreFieldNumber;
const int NetworkSecurityEvent::kFinalClassificationFieldNumber;
const int NetworkSecurityEvent::kThreatCategoryFieldNumber;
const int NetworkSecurityEvent::kCorrelationIdFieldNumber;
const int NetworkSecurityEvent::kRelatedEventIdsFieldNumber;
const int NetworkSecurityEvent::kEventChainIdFieldNumber;
const int NetworkSecurityEvent::kSchemaVersionFieldNumber;
const int NetworkSecurityEvent::kCustomMetadataFieldNumber;
const int NetworkSecurityEvent::kEventTagsFieldNumber;
const int NetworkSecurityEvent::kProtobufVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkSecurityEvent::NetworkSecurityEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkSecurityEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.NetworkSecurityEvent)
}
NetworkSecurityEvent::NetworkSecurityEvent(const NetworkSecurityEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_model_predictions_(from.additional_model_predictions_),
      related_event_ids_(from.related_event_ids_),
      event_tags_(from.event_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_metadata_.MergeFrom(from.custom_metadata_);
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_id().size() > 0) {
    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  originating_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.originating_node_id().size() > 0) {
    originating_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originating_node_id_);
  }
  final_classification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.final_classification().size() > 0) {
    final_classification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_classification_);
  }
  threat_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.threat_category().size() > 0) {
    threat_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threat_category_);
  }
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlation_id().size() > 0) {
    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  event_chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_chain_id().size() > 0) {
    event_chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_chain_id_);
  }
  protobuf_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protobuf_version().size() > 0) {
    protobuf_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protobuf_version_);
  }
  if (from.has_event_timestamp()) {
    event_timestamp_ = new ::google::protobuf::Timestamp(*from.event_timestamp_);
  } else {
    event_timestamp_ = NULL;
  }
  if (from.has_network_features()) {
    network_features_ = new ::protobuf::NetworkFeatures(*from.network_features_);
  } else {
    network_features_ = NULL;
  }
  if (from.has_geo_enrichment()) {
    geo_enrichment_ = new ::protobuf::GeoEnrichment(*from.geo_enrichment_);
  } else {
    geo_enrichment_ = NULL;
  }
  if (from.has_time_window()) {
    time_window_ = new ::protobuf::TimeWindow(*from.time_window_);
  } else {
    time_window_ = NULL;
  }
  if (from.has_ml_analysis()) {
    ml_analysis_ = new ::protobuf::TricapaMLAnalysis(*from.ml_analysis_);
  } else {
    ml_analysis_ = NULL;
  }
  if (from.has_capturing_node()) {
    capturing_node_ = new ::protobuf::DistributedNode(*from.capturing_node_);
  } else {
    capturing_node_ = NULL;
  }
  if (from.has_pipeline_tracking()) {
    pipeline_tracking_ = new ::protobuf::PipelineTracking(*from.pipeline_tracking_);
  } else {
    pipeline_tracking_ = NULL;
  }
  if (from.has_rag_analysis()) {
    rag_analysis_ = new ::protobuf::RAGAnalysis(*from.rag_analysis_);
  } else {
    rag_analysis_ = NULL;
  }
  if (from.has_human_review()) {
    human_review_ = new ::protobuf::HumanInTheLoopReview(*from.human_review_);
  } else {
    human_review_ = NULL;
  }
  ::memcpy(&overall_threat_score_, &from.overall_threat_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&schema_version_) -
    reinterpret_cast<char*>(&overall_threat_score_)) + sizeof(schema_version_));
  // @@protoc_insertion_point(copy_constructor:protobuf.NetworkSecurityEvent)
}

void NetworkSecurityEvent::SharedCtor() {
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originating_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_classification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protobuf_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_version_) -
      reinterpret_cast<char*>(&event_timestamp_)) + sizeof(schema_version_));
}

NetworkSecurityEvent::~NetworkSecurityEvent() {
  // @@protoc_insertion_point(destructor:protobuf.NetworkSecurityEvent)
  SharedDtor();
}

void NetworkSecurityEvent::SharedDtor() {
  event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originating_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_classification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protobuf_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_timestamp_;
  if (this != internal_default_instance()) delete network_features_;
  if (this != internal_default_instance()) delete geo_enrichment_;
  if (this != internal_default_instance()) delete time_window_;
  if (this != internal_default_instance()) delete ml_analysis_;
  if (this != internal_default_instance()) delete capturing_node_;
  if (this != internal_default_instance()) delete pipeline_tracking_;
  if (this != internal_default_instance()) delete rag_analysis_;
  if (this != internal_default_instance()) delete human_review_;
}

void NetworkSecurityEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkSecurityEvent::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkSecurityEvent& NetworkSecurityEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_NetworkSecurityEvent.base);
  return *internal_default_instance();
}


void NetworkSecurityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.NetworkSecurityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_model_predictions_.Clear();
  related_event_ids_.Clear();
  custom_metadata_.Clear();
  event_tags_.Clear();
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originating_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_classification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threat_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protobuf_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && event_timestamp_ != NULL) {
    delete event_timestamp_;
  }
  event_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_features_ != NULL) {
    delete network_features_;
  }
  network_features_ = NULL;
  if (GetArenaNoVirtual() == NULL && geo_enrichment_ != NULL) {
    delete geo_enrichment_;
  }
  geo_enrichment_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_window_ != NULL) {
    delete time_window_;
  }
  time_window_ = NULL;
  if (GetArenaNoVirtual() == NULL && ml_analysis_ != NULL) {
    delete ml_analysis_;
  }
  ml_analysis_ = NULL;
  if (GetArenaNoVirtual() == NULL && capturing_node_ != NULL) {
    delete capturing_node_;
  }
  capturing_node_ = NULL;
  if (GetArenaNoVirtual() == NULL && pipeline_tracking_ != NULL) {
    delete pipeline_tracking_;
  }
  pipeline_tracking_ = NULL;
  if (GetArenaNoVirtual() == NULL && rag_analysis_ != NULL) {
    delete rag_analysis_;
  }
  rag_analysis_ = NULL;
  if (GetArenaNoVirtual() == NULL && human_review_ != NULL) {
    delete human_review_;
  }
  human_review_ = NULL;
  ::memset(&overall_threat_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_version_) -
      reinterpret_cast<char*>(&overall_threat_score_)) + sizeof(schema_version_));
  _internal_metadata_.Clear();
}

bool NetworkSecurityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.NetworkSecurityEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_id().data(), static_cast<int>(this->event_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.event_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp event_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string originating_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originating_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->originating_node_id().data(), static_cast<int>(this->originating_node_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.originating_node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.NetworkFeatures network_features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_network_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.GeoEnrichment geo_enrichment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geo_enrichment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.TimeWindow time_window = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.TricapaMLAnalysis ml_analysis = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ml_analysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_model_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.DistributedNode capturing_node = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capturing_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.PipelineTracking pipeline_tracking = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pipeline_tracking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.RAGAnalysis rag_analysis = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rag_analysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.HumanInTheLoopReview human_review = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_human_review()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double overall_threat_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overall_threat_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string final_classification = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_classification()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_classification().data(), static_cast<int>(this->final_classification().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.final_classification"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string threat_category = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_threat_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->threat_category().data(), static_cast<int>(this->threat_category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.threat_category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string correlation_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_correlation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.correlation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string related_event_ids = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_related_event_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->related_event_ids(this->related_event_ids_size() - 1).data(),
            static_cast<int>(this->related_event_ids(this->related_event_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.related_event_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_chain_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_chain_id().data(), static_cast<int>(this->event_chain_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.event_chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schema_version = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schema_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> custom_metadata = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NetworkSecurityEvent_CustomMetadataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&custom_metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.CustomMetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.CustomMetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string event_tags = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_tags(this->event_tags_size() - 1).data(),
            static_cast<int>(this->event_tags(this->event_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.event_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protobuf_version = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protobuf_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protobuf_version().data(), static_cast<int>(this->protobuf_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.NetworkSecurityEvent.protobuf_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.NetworkSecurityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.NetworkSecurityEvent)
  return false;
#undef DO_
}

void NetworkSecurityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.NetworkSecurityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_id(), output);
  }

  // .google.protobuf.Timestamp event_timestamp = 2;
  if (this->has_event_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_event_timestamp(), output);
  }

  // string originating_node_id = 3;
  if (this->originating_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->originating_node_id().data(), static_cast<int>(this->originating_node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.originating_node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->originating_node_id(), output);
  }

  // .protobuf.NetworkFeatures network_features = 4;
  if (this->has_network_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_network_features(), output);
  }

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  if (this->has_geo_enrichment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_geo_enrichment(), output);
  }

  // .protobuf.TimeWindow time_window = 6;
  if (this->has_time_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_time_window(), output);
  }

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  if (this->has_ml_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_ml_analysis(), output);
  }

  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_model_predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->additional_model_predictions(static_cast<int>(i)),
      output);
  }

  // .protobuf.DistributedNode capturing_node = 9;
  if (this->has_capturing_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_capturing_node(), output);
  }

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  if (this->has_pipeline_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_pipeline_tracking(), output);
  }

  // .protobuf.RAGAnalysis rag_analysis = 11;
  if (this->has_rag_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_rag_analysis(), output);
  }

  // .protobuf.HumanInTheLoopReview human_review = 12;
  if (this->has_human_review()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_human_review(), output);
  }

  // double overall_threat_score = 15;
  if (this->overall_threat_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->overall_threat_score(), output);
  }

  // string final_classification = 16;
  if (this->final_classification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_classification().data(), static_cast<int>(this->final_classification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.final_classification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->final_classification(), output);
  }

  // string threat_category = 17;
  if (this->threat_category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_category().data(), static_cast<int>(this->threat_category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.threat_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->threat_category(), output);
  }

  // string correlation_id = 20;
  if (this->correlation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.correlation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->correlation_id(), output);
  }

  // repeated string related_event_ids = 21;
  for (int i = 0, n = this->related_event_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->related_event_ids(i).data(), static_cast<int>(this->related_event_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.related_event_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->related_event_ids(i), output);
  }

  // string event_chain_id = 22;
  if (this->event_chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_chain_id().data(), static_cast<int>(this->event_chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->event_chain_id(), output);
  }

  // uint32 schema_version = 25;
  if (this->schema_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->schema_version(), output);
  }

  // map<string, string> custom_metadata = 26;
  if (!this->custom_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkSecurityEvent.CustomMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkSecurityEvent.CustomMetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->custom_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_metadata().begin();
          it != this->custom_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            26, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_metadata().begin();
          it != this->custom_metadata().end(); ++it) {
        entry.reset(custom_metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            26, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string event_tags = 27;
  for (int i = 0, n = this->event_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_tags(i).data(), static_cast<int>(this->event_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->event_tags(i), output);
  }

  // string protobuf_version = 28;
  if (this->protobuf_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protobuf_version().data(), static_cast<int>(this->protobuf_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.protobuf_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->protobuf_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.NetworkSecurityEvent)
}

::google::protobuf::uint8* NetworkSecurityEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.NetworkSecurityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_id(), target);
  }

  // .google.protobuf.Timestamp event_timestamp = 2;
  if (this->has_event_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_event_timestamp(), deterministic, target);
  }

  // string originating_node_id = 3;
  if (this->originating_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->originating_node_id().data(), static_cast<int>(this->originating_node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.originating_node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->originating_node_id(), target);
  }

  // .protobuf.NetworkFeatures network_features = 4;
  if (this->has_network_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_network_features(), deterministic, target);
  }

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  if (this->has_geo_enrichment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_geo_enrichment(), deterministic, target);
  }

  // .protobuf.TimeWindow time_window = 6;
  if (this->has_time_window()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_time_window(), deterministic, target);
  }

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  if (this->has_ml_analysis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_ml_analysis(), deterministic, target);
  }

  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_model_predictions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->additional_model_predictions(static_cast<int>(i)), deterministic, target);
  }

  // .protobuf.DistributedNode capturing_node = 9;
  if (this->has_capturing_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_capturing_node(), deterministic, target);
  }

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  if (this->has_pipeline_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_pipeline_tracking(), deterministic, target);
  }

  // .protobuf.RAGAnalysis rag_analysis = 11;
  if (this->has_rag_analysis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_rag_analysis(), deterministic, target);
  }

  // .protobuf.HumanInTheLoopReview human_review = 12;
  if (this->has_human_review()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_human_review(), deterministic, target);
  }

  // double overall_threat_score = 15;
  if (this->overall_threat_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->overall_threat_score(), target);
  }

  // string final_classification = 16;
  if (this->final_classification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_classification().data(), static_cast<int>(this->final_classification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.final_classification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->final_classification(), target);
  }

  // string threat_category = 17;
  if (this->threat_category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->threat_category().data(), static_cast<int>(this->threat_category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.threat_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->threat_category(), target);
  }

  // string correlation_id = 20;
  if (this->correlation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->correlation_id().data(), static_cast<int>(this->correlation_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.correlation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->correlation_id(), target);
  }

  // repeated string related_event_ids = 21;
  for (int i = 0, n = this->related_event_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->related_event_ids(i).data(), static_cast<int>(this->related_event_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.related_event_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->related_event_ids(i), target);
  }

  // string event_chain_id = 22;
  if (this->event_chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_chain_id().data(), static_cast<int>(this->event_chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->event_chain_id(), target);
  }

  // uint32 schema_version = 25;
  if (this->schema_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->schema_version(), target);
  }

  // map<string, string> custom_metadata = 26;
  if (!this->custom_metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkSecurityEvent.CustomMetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.NetworkSecurityEvent.CustomMetadataEntry.value");
      }
    };

    if (deterministic &&
        this->custom_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_metadata().begin();
          it != this->custom_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_metadata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       26, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom_metadata().begin();
          it != this->custom_metadata().end(); ++it) {
        entry.reset(custom_metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       26, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string event_tags = 27;
  for (int i = 0, n = this->event_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_tags(i).data(), static_cast<int>(this->event_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(27, this->event_tags(i), target);
  }

  // string protobuf_version = 28;
  if (this->protobuf_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protobuf_version().data(), static_cast<int>(this->protobuf_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.protobuf_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->protobuf_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.NetworkSecurityEvent)
  return target;
}

size_t NetworkSecurityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.NetworkSecurityEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_model_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_model_predictions(static_cast<int>(i)));
    }
  }

  // repeated string related_event_ids = 21;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->related_event_ids_size());
  for (int i = 0, n = this->related_event_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->related_event_ids(i));
  }

  // map<string, string> custom_metadata = 26;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->custom_metadata_size());
  {
    ::std::unique_ptr<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->custom_metadata().begin();
        it != this->custom_metadata().end(); ++it) {
      entry.reset(custom_metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string event_tags = 27;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->event_tags_size());
  for (int i = 0, n = this->event_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_tags(i));
  }

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_id());
  }

  // string originating_node_id = 3;
  if (this->originating_node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->originating_node_id());
  }

  // string final_classification = 16;
  if (this->final_classification().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_classification());
  }

  // string threat_category = 17;
  if (this->threat_category().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->threat_category());
  }

  // string correlation_id = 20;
  if (this->correlation_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->correlation_id());
  }

  // string event_chain_id = 22;
  if (this->event_chain_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_chain_id());
  }

  // string protobuf_version = 28;
  if (this->protobuf_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protobuf_version());
  }

  // .google.protobuf.Timestamp event_timestamp = 2;
  if (this->has_event_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_timestamp_);
  }

  // .protobuf.NetworkFeatures network_features = 4;
  if (this->has_network_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *network_features_);
  }

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  if (this->has_geo_enrichment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geo_enrichment_);
  }

  // .protobuf.TimeWindow time_window = 6;
  if (this->has_time_window()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_window_);
  }

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  if (this->has_ml_analysis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ml_analysis_);
  }

  // .protobuf.DistributedNode capturing_node = 9;
  if (this->has_capturing_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capturing_node_);
  }

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  if (this->has_pipeline_tracking()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pipeline_tracking_);
  }

  // .protobuf.RAGAnalysis rag_analysis = 11;
  if (this->has_rag_analysis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rag_analysis_);
  }

  // .protobuf.HumanInTheLoopReview human_review = 12;
  if (this->has_human_review()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *human_review_);
  }

  // double overall_threat_score = 15;
  if (this->overall_threat_score() != 0) {
    total_size += 1 + 8;
  }

  // uint32 schema_version = 25;
  if (this->schema_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schema_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkSecurityEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.NetworkSecurityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSecurityEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkSecurityEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.NetworkSecurityEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.NetworkSecurityEvent)
    MergeFrom(*source);
  }
}

void NetworkSecurityEvent::MergeFrom(const NetworkSecurityEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.NetworkSecurityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_model_predictions_.MergeFrom(from.additional_model_predictions_);
  related_event_ids_.MergeFrom(from.related_event_ids_);
  custom_metadata_.MergeFrom(from.custom_metadata_);
  event_tags_.MergeFrom(from.event_tags_);
  if (from.event_id().size() > 0) {

    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  if (from.originating_node_id().size() > 0) {

    originating_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originating_node_id_);
  }
  if (from.final_classification().size() > 0) {

    final_classification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_classification_);
  }
  if (from.threat_category().size() > 0) {

    threat_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threat_category_);
  }
  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.event_chain_id().size() > 0) {

    event_chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_chain_id_);
  }
  if (from.protobuf_version().size() > 0) {

    protobuf_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protobuf_version_);
  }
  if (from.has_event_timestamp()) {
    mutable_event_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.event_timestamp());
  }
  if (from.has_network_features()) {
    mutable_network_features()->::protobuf::NetworkFeatures::MergeFrom(from.network_features());
  }
  if (from.has_geo_enrichment()) {
    mutable_geo_enrichment()->::protobuf::GeoEnrichment::MergeFrom(from.geo_enrichment());
  }
  if (from.has_time_window()) {
    mutable_time_window()->::protobuf::TimeWindow::MergeFrom(from.time_window());
  }
  if (from.has_ml_analysis()) {
    mutable_ml_analysis()->::protobuf::TricapaMLAnalysis::MergeFrom(from.ml_analysis());
  }
  if (from.has_capturing_node()) {
    mutable_capturing_node()->::protobuf::DistributedNode::MergeFrom(from.capturing_node());
  }
  if (from.has_pipeline_tracking()) {
    mutable_pipeline_tracking()->::protobuf::PipelineTracking::MergeFrom(from.pipeline_tracking());
  }
  if (from.has_rag_analysis()) {
    mutable_rag_analysis()->::protobuf::RAGAnalysis::MergeFrom(from.rag_analysis());
  }
  if (from.has_human_review()) {
    mutable_human_review()->::protobuf::HumanInTheLoopReview::MergeFrom(from.human_review());
  }
  if (from.overall_threat_score() != 0) {
    set_overall_threat_score(from.overall_threat_score());
  }
  if (from.schema_version() != 0) {
    set_schema_version(from.schema_version());
  }
}

void NetworkSecurityEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.NetworkSecurityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSecurityEvent::CopyFrom(const NetworkSecurityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.NetworkSecurityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSecurityEvent::IsInitialized() const {
  return true;
}

void NetworkSecurityEvent::Swap(NetworkSecurityEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkSecurityEvent::InternalSwap(NetworkSecurityEvent* other) {
  using std::swap;
  CastToBase(&additional_model_predictions_)->InternalSwap(CastToBase(&other->additional_model_predictions_));
  related_event_ids_.InternalSwap(CastToBase(&other->related_event_ids_));
  custom_metadata_.Swap(&other->custom_metadata_);
  event_tags_.InternalSwap(CastToBase(&other->event_tags_));
  event_id_.Swap(&other->event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  originating_node_id_.Swap(&other->originating_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_classification_.Swap(&other->final_classification_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  threat_category_.Swap(&other->threat_category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  correlation_id_.Swap(&other->correlation_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_chain_id_.Swap(&other->event_chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protobuf_version_.Swap(&other->protobuf_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_timestamp_, other->event_timestamp_);
  swap(network_features_, other->network_features_);
  swap(geo_enrichment_, other->geo_enrichment_);
  swap(time_window_, other->time_window_);
  swap(ml_analysis_, other->ml_analysis_);
  swap(capturing_node_, other->capturing_node_);
  swap(pipeline_tracking_, other->pipeline_tracking_);
  swap(rag_analysis_, other->rag_analysis_);
  swap(human_review_, other->human_review_);
  swap(overall_threat_score_, other->overall_threat_score_);
  swap(schema_version_, other->schema_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkSecurityEvent::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventBatch::InitAsDefaultInstance() {
  ::protobuf::_EventBatch_default_instance_._instance.get_mutable()->batch_created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void EventBatch::clear_batch_created_at() {
  if (GetArenaNoVirtual() == NULL && batch_created_at_ != NULL) {
    delete batch_created_at_;
  }
  batch_created_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventBatch::kEventsFieldNumber;
const int EventBatch::kBatchIdFieldNumber;
const int EventBatch::kBatchCreatedAtFieldNumber;
const int EventBatch::kBatchSizeFieldNumber;
const int EventBatch::kProcessingModeFieldNumber;
const int EventBatch::kBatchSourceNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventBatch::EventBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_EventBatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.EventBatch)
}
EventBatch::EventBatch(const EventBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_source_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.batch_source_node().size() > 0) {
    batch_source_node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batch_source_node_);
  }
  if (from.has_batch_created_at()) {
    batch_created_at_ = new ::google::protobuf::Timestamp(*from.batch_created_at_);
  } else {
    batch_created_at_ = NULL;
  }
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&processing_mode_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(processing_mode_));
  // @@protoc_insertion_point(copy_constructor:protobuf.EventBatch)
}

void EventBatch::SharedCtor() {
  batch_source_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processing_mode_) -
      reinterpret_cast<char*>(&batch_created_at_)) + sizeof(processing_mode_));
}

EventBatch::~EventBatch() {
  // @@protoc_insertion_point(destructor:protobuf.EventBatch)
  SharedDtor();
}

void EventBatch::SharedDtor() {
  batch_source_node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete batch_created_at_;
}

void EventBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EventBatch::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventBatch& EventBatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_EventBatch.base);
  return *internal_default_instance();
}


void EventBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.EventBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  batch_source_node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && batch_created_at_ != NULL) {
    delete batch_created_at_;
  }
  batch_created_at_ = NULL;
  ::memset(&batch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processing_mode_) -
      reinterpret_cast<char*>(&batch_id_)) + sizeof(processing_mode_));
  _internal_metadata_.Clear();
}

bool EventBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.EventBatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.NetworkSecurityEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 batch_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp batch_created_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batch_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_processing_mode(static_cast< ::protobuf::EventBatch_ProcessingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string batch_source_node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_source_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->batch_source_node().data(), static_cast<int>(this->batch_source_node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.EventBatch.batch_source_node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.EventBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.EventBatch)
  return false;
#undef DO_
}

void EventBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.EventBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.NetworkSecurityEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  // uint64 batch_id = 2;
  if (this->batch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->batch_id(), output);
  }

  // .google.protobuf.Timestamp batch_created_at = 3;
  if (this->has_batch_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_batch_created_at(), output);
  }

  // uint32 batch_size = 4;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  if (this->processing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->processing_mode(), output);
  }

  // string batch_source_node = 6;
  if (this->batch_source_node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batch_source_node().data(), static_cast<int>(this->batch_source_node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.EventBatch.batch_source_node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->batch_source_node(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.EventBatch)
}

::google::protobuf::uint8* EventBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.EventBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.NetworkSecurityEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->events(static_cast<int>(i)), deterministic, target);
  }

  // uint64 batch_id = 2;
  if (this->batch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->batch_id(), target);
  }

  // .google.protobuf.Timestamp batch_created_at = 3;
  if (this->has_batch_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_batch_created_at(), deterministic, target);
  }

  // uint32 batch_size = 4;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  if (this->processing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->processing_mode(), target);
  }

  // string batch_source_node = 6;
  if (this->batch_source_node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batch_source_node().data(), static_cast<int>(this->batch_source_node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.EventBatch.batch_source_node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->batch_source_node(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.EventBatch)
  return target;
}

size_t EventBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.EventBatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protobuf.NetworkSecurityEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // string batch_source_node = 6;
  if (this->batch_source_node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->batch_source_node());
  }

  // .google.protobuf.Timestamp batch_created_at = 3;
  if (this->has_batch_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batch_created_at_);
  }

  // uint64 batch_id = 2;
  if (this->batch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->batch_id());
  }

  // uint32 batch_size = 4;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  if (this->processing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->processing_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.EventBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const EventBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.EventBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.EventBatch)
    MergeFrom(*source);
  }
}

void EventBatch::MergeFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.EventBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.batch_source_node().size() > 0) {

    batch_source_node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batch_source_node_);
  }
  if (from.has_batch_created_at()) {
    mutable_batch_created_at()->::google::protobuf::Timestamp::MergeFrom(from.batch_created_at());
  }
  if (from.batch_id() != 0) {
    set_batch_id(from.batch_id());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.processing_mode() != 0) {
    set_processing_mode(from.processing_mode());
  }
}

void EventBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBatch::CopyFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBatch::IsInitialized() const {
  return true;
}

void EventBatch::Swap(EventBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventBatch::InternalSwap(EventBatch* other) {
  using std::swap;
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  batch_source_node_.Swap(&other->batch_source_node_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_created_at_, other->batch_created_at_);
  swap(batch_id_, other->batch_id_);
  swap(batch_size_, other->batch_size_);
  swap(processing_mode_, other->processing_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EventBatch::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse() {}
SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::MergeFrom(const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[23];
}
void SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse() {}
SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::MergeFrom(const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[24];
}
void SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SystemConfiguration::InitAsDefaultInstance() {
  ::protobuf::_SystemConfiguration_default_instance_._instance.get_mutable()->time_window_size_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void SystemConfiguration::clear_time_window_size() {
  if (GetArenaNoVirtual() == NULL && time_window_size_ != NULL) {
    delete time_window_size_;
  }
  time_window_size_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemConfiguration::kEnabledMlModelsFieldNumber;
const int SystemConfiguration::kThreatScoreThresholdsFieldNumber;
const int SystemConfiguration::kTimeWindowSizeFieldNumber;
const int SystemConfiguration::kMaxEventsPerWindowFieldNumber;
const int SystemConfiguration::kClusterNodesFieldNumber;
const int SystemConfiguration::kNodeRoleAssignmentsFieldNumber;
const int SystemConfiguration::kEncryptionEnabledFieldNumber;
const int SystemConfiguration::kCompressionEnabledFieldNumber;
const int SystemConfiguration::kEncryptionAlgorithmFieldNumber;
const int SystemConfiguration::kRagAnalysisEnabledFieldNumber;
const int SystemConfiguration::kRagModelEndpointFieldNumber;
const int SystemConfiguration::kKnowledgeBaseSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemConfiguration::SystemConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_SystemConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.SystemConfiguration)
}
SystemConfiguration::SystemConfiguration(const SystemConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      enabled_ml_models_(from.enabled_ml_models_),
      cluster_nodes_(from.cluster_nodes_),
      knowledge_base_sources_(from.knowledge_base_sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threat_score_thresholds_.MergeFrom(from.threat_score_thresholds_);
  node_role_assignments_.MergeFrom(from.node_role_assignments_);
  encryption_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encryption_algorithm().size() > 0) {
    encryption_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_);
  }
  rag_model_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rag_model_endpoint().size() > 0) {
    rag_model_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rag_model_endpoint_);
  }
  if (from.has_time_window_size()) {
    time_window_size_ = new ::google::protobuf::Duration(*from.time_window_size_);
  } else {
    time_window_size_ = NULL;
  }
  ::memcpy(&max_events_per_window_, &from.max_events_per_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&rag_analysis_enabled_) -
    reinterpret_cast<char*>(&max_events_per_window_)) + sizeof(rag_analysis_enabled_));
  // @@protoc_insertion_point(copy_constructor:protobuf.SystemConfiguration)
}

void SystemConfiguration::SharedCtor() {
  encryption_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rag_model_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_window_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rag_analysis_enabled_) -
      reinterpret_cast<char*>(&time_window_size_)) + sizeof(rag_analysis_enabled_));
}

SystemConfiguration::~SystemConfiguration() {
  // @@protoc_insertion_point(destructor:protobuf.SystemConfiguration)
  SharedDtor();
}

void SystemConfiguration::SharedDtor() {
  encryption_algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rag_model_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_window_size_;
}

void SystemConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemConfiguration::descriptor() {
  ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemConfiguration& SystemConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protobuf_2fnetwork_5fsecurity_2eproto::scc_info_SystemConfiguration.base);
  return *internal_default_instance();
}


void SystemConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.SystemConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ml_models_.Clear();
  threat_score_thresholds_.Clear();
  cluster_nodes_.Clear();
  node_role_assignments_.Clear();
  knowledge_base_sources_.Clear();
  encryption_algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rag_model_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && time_window_size_ != NULL) {
    delete time_window_size_;
  }
  time_window_size_ = NULL;
  ::memset(&max_events_per_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rag_analysis_enabled_) -
      reinterpret_cast<char*>(&max_events_per_window_)) + sizeof(rag_analysis_enabled_));
  _internal_metadata_.Clear();
}

bool SystemConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.SystemConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string enabled_ml_models = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enabled_ml_models()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enabled_ml_models(this->enabled_ml_models_size() - 1).data(),
            static_cast<int>(this->enabled_ml_models(this->enabled_ml_models_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.enabled_ml_models"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> threat_score_thresholds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&threat_score_thresholds_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.ThreatScoreThresholdsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time_window_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_events_per_window = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_events_per_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf.DistributedNode cluster_nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cluster_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> node_role_assignments = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&node_role_assignments_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encryption_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encryption_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compression_enabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encryption_algorithm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_algorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encryption_algorithm().data(), static_cast<int>(this->encryption_algorithm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.encryption_algorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rag_analysis_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rag_analysis_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rag_model_endpoint = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rag_model_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rag_model_endpoint().data(), static_cast<int>(this->rag_model_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.rag_model_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string knowledge_base_sources = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_knowledge_base_sources()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->knowledge_base_sources(this->knowledge_base_sources_size() - 1).data(),
            static_cast<int>(this->knowledge_base_sources(this->knowledge_base_sources_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.SystemConfiguration.knowledge_base_sources"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.SystemConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.SystemConfiguration)
  return false;
#undef DO_
}

void SystemConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.SystemConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enabled_ml_models = 1;
  for (int i = 0, n = this->enabled_ml_models_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enabled_ml_models(i).data(), static_cast<int>(this->enabled_ml_models(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.enabled_ml_models");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->enabled_ml_models(i), output);
  }

  // map<string, double> threat_score_thresholds = 2;
  if (!this->threat_score_thresholds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.ThreatScoreThresholdsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->threat_score_thresholds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->threat_score_thresholds().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->threat_score_thresholds().begin();
          it != this->threat_score_thresholds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(threat_score_thresholds_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->threat_score_thresholds().begin();
          it != this->threat_score_thresholds().end(); ++it) {
        entry.reset(threat_score_thresholds_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Duration time_window_size = 3;
  if (this->has_time_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_time_window_size(), output);
  }

  // uint32 max_events_per_window = 4;
  if (this->max_events_per_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_events_per_window(), output);
  }

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->cluster_nodes(static_cast<int>(i)),
      output);
  }

  // map<string, string> node_role_assignments = 6;
  if (!this->node_role_assignments().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->node_role_assignments().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_role_assignments().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_role_assignments().begin();
          it != this->node_role_assignments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_role_assignments_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_role_assignments().begin();
          it != this->node_role_assignments().end(); ++it) {
        entry.reset(node_role_assignments_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool encryption_enabled = 7;
  if (this->encryption_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encryption_enabled(), output);
  }

  // bool compression_enabled = 8;
  if (this->compression_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->compression_enabled(), output);
  }

  // string encryption_algorithm = 9;
  if (this->encryption_algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encryption_algorithm().data(), static_cast<int>(this->encryption_algorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.encryption_algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->encryption_algorithm(), output);
  }

  // bool rag_analysis_enabled = 10;
  if (this->rag_analysis_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rag_analysis_enabled(), output);
  }

  // string rag_model_endpoint = 11;
  if (this->rag_model_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rag_model_endpoint().data(), static_cast<int>(this->rag_model_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.rag_model_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->rag_model_endpoint(), output);
  }

  // repeated string knowledge_base_sources = 12;
  for (int i = 0, n = this->knowledge_base_sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->knowledge_base_sources(i).data(), static_cast<int>(this->knowledge_base_sources(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.knowledge_base_sources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->knowledge_base_sources(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.SystemConfiguration)
}

::google::protobuf::uint8* SystemConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.SystemConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enabled_ml_models = 1;
  for (int i = 0, n = this->enabled_ml_models_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enabled_ml_models(i).data(), static_cast<int>(this->enabled_ml_models(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.enabled_ml_models");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->enabled_ml_models(i), target);
  }

  // map<string, double> threat_score_thresholds = 2;
  if (!this->threat_score_thresholds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.ThreatScoreThresholdsEntry.key");
      }
    };

    if (deterministic &&
        this->threat_score_thresholds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->threat_score_thresholds().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->threat_score_thresholds().begin();
          it != this->threat_score_thresholds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(threat_score_thresholds_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->threat_score_thresholds().begin();
          it != this->threat_score_thresholds().end(); ++it) {
        entry.reset(threat_score_thresholds_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Duration time_window_size = 3;
  if (this->has_time_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_time_window_size(), deterministic, target);
  }

  // uint32 max_events_per_window = 4;
  if (this->max_events_per_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_events_per_window(), target);
  }

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->cluster_nodes(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> node_role_assignments = 6;
  if (!this->node_role_assignments().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.value");
      }
    };

    if (deterministic &&
        this->node_role_assignments().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_role_assignments().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_role_assignments().begin();
          it != this->node_role_assignments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_role_assignments_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_role_assignments().begin();
          it != this->node_role_assignments().end(); ++it) {
        entry.reset(node_role_assignments_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool encryption_enabled = 7;
  if (this->encryption_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encryption_enabled(), target);
  }

  // bool compression_enabled = 8;
  if (this->compression_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->compression_enabled(), target);
  }

  // string encryption_algorithm = 9;
  if (this->encryption_algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encryption_algorithm().data(), static_cast<int>(this->encryption_algorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.encryption_algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->encryption_algorithm(), target);
  }

  // bool rag_analysis_enabled = 10;
  if (this->rag_analysis_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rag_analysis_enabled(), target);
  }

  // string rag_model_endpoint = 11;
  if (this->rag_model_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rag_model_endpoint().data(), static_cast<int>(this->rag_model_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.rag_model_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rag_model_endpoint(), target);
  }

  // repeated string knowledge_base_sources = 12;
  for (int i = 0, n = this->knowledge_base_sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->knowledge_base_sources(i).data(), static_cast<int>(this->knowledge_base_sources(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.knowledge_base_sources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->knowledge_base_sources(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.SystemConfiguration)
  return target;
}

size_t SystemConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.SystemConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string enabled_ml_models = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->enabled_ml_models_size());
  for (int i = 0, n = this->enabled_ml_models_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enabled_ml_models(i));
  }

  // map<string, double> threat_score_thresholds = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->threat_score_thresholds_size());
  {
    ::std::unique_ptr<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->threat_score_thresholds().begin();
        it != this->threat_score_thresholds().end(); ++it) {
      entry.reset(threat_score_thresholds_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cluster_nodes(static_cast<int>(i)));
    }
  }

  // map<string, string> node_role_assignments = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_role_assignments_size());
  {
    ::std::unique_ptr<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->node_role_assignments().begin();
        it != this->node_role_assignments().end(); ++it) {
      entry.reset(node_role_assignments_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string knowledge_base_sources = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->knowledge_base_sources_size());
  for (int i = 0, n = this->knowledge_base_sources_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->knowledge_base_sources(i));
  }

  // string encryption_algorithm = 9;
  if (this->encryption_algorithm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encryption_algorithm());
  }

  // string rag_model_endpoint = 11;
  if (this->rag_model_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rag_model_endpoint());
  }

  // .google.protobuf.Duration time_window_size = 3;
  if (this->has_time_window_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_window_size_);
  }

  // uint32 max_events_per_window = 4;
  if (this->max_events_per_window() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_events_per_window());
  }

  // bool encryption_enabled = 7;
  if (this->encryption_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool compression_enabled = 8;
  if (this->compression_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool rag_analysis_enabled = 10;
  if (this->rag_analysis_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.SystemConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.SystemConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.SystemConfiguration)
    MergeFrom(*source);
  }
}

void SystemConfiguration::MergeFrom(const SystemConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SystemConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_ml_models_.MergeFrom(from.enabled_ml_models_);
  threat_score_thresholds_.MergeFrom(from.threat_score_thresholds_);
  cluster_nodes_.MergeFrom(from.cluster_nodes_);
  node_role_assignments_.MergeFrom(from.node_role_assignments_);
  knowledge_base_sources_.MergeFrom(from.knowledge_base_sources_);
  if (from.encryption_algorithm().size() > 0) {

    encryption_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_algorithm_);
  }
  if (from.rag_model_endpoint().size() > 0) {

    rag_model_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rag_model_endpoint_);
  }
  if (from.has_time_window_size()) {
    mutable_time_window_size()->::google::protobuf::Duration::MergeFrom(from.time_window_size());
  }
  if (from.max_events_per_window() != 0) {
    set_max_events_per_window(from.max_events_per_window());
  }
  if (from.encryption_enabled() != 0) {
    set_encryption_enabled(from.encryption_enabled());
  }
  if (from.compression_enabled() != 0) {
    set_compression_enabled(from.compression_enabled());
  }
  if (from.rag_analysis_enabled() != 0) {
    set_rag_analysis_enabled(from.rag_analysis_enabled());
  }
}

void SystemConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.SystemConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemConfiguration::CopyFrom(const SystemConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SystemConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemConfiguration::IsInitialized() const {
  return true;
}

void SystemConfiguration::Swap(SystemConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemConfiguration::InternalSwap(SystemConfiguration* other) {
  using std::swap;
  enabled_ml_models_.InternalSwap(CastToBase(&other->enabled_ml_models_));
  threat_score_thresholds_.Swap(&other->threat_score_thresholds_);
  CastToBase(&cluster_nodes_)->InternalSwap(CastToBase(&other->cluster_nodes_));
  node_role_assignments_.Swap(&other->node_role_assignments_);
  knowledge_base_sources_.InternalSwap(CastToBase(&other->knowledge_base_sources_));
  encryption_algorithm_.Swap(&other->encryption_algorithm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rag_model_endpoint_.Swap(&other->rag_model_endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_window_size_, other->time_window_size_);
  swap(max_events_per_window_, other->max_events_per_window_);
  swap(encryption_enabled_, other->encryption_enabled_);
  swap(compression_enabled_, other->compression_enabled_);
  swap(rag_analysis_enabled_, other->rag_analysis_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemConfiguration::GetMetadata() const {
  protobuf_protobuf_2fnetwork_5fsecurity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::NetworkFeatures* Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::NetworkFeatures >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::GeoLocationInfo* Arena::CreateMaybeMessage< ::protobuf::GeoLocationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::GeoLocationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::GeoEnrichment* Arena::CreateMaybeMessage< ::protobuf::GeoEnrichment >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::GeoEnrichment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::TimeWindow* Arena::CreateMaybeMessage< ::protobuf::TimeWindow >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::TimeWindow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::FlowAggregation* Arena::CreateMaybeMessage< ::protobuf::FlowAggregation >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::FlowAggregation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::ModelPrediction* Arena::CreateMaybeMessage< ::protobuf::ModelPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::ModelPrediction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::TricapaMLAnalysis* Arena::CreateMaybeMessage< ::protobuf::TricapaMLAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::TricapaMLAnalysis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::DistributedNode* Arena::CreateMaybeMessage< ::protobuf::DistributedNode >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::DistributedNode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::PipelineTracking* Arena::CreateMaybeMessage< ::protobuf::PipelineTracking >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::PipelineTracking >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::RAGAnalysis* Arena::CreateMaybeMessage< ::protobuf::RAGAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::RAGAnalysis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::HumanFeedback* Arena::CreateMaybeMessage< ::protobuf::HumanFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::HumanFeedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::HumanInTheLoopReview* Arena::CreateMaybeMessage< ::protobuf::HumanInTheLoopReview >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::HumanInTheLoopReview >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::NetworkSecurityEvent* Arena::CreateMaybeMessage< ::protobuf::NetworkSecurityEvent >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::NetworkSecurityEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::EventBatch* Arena::CreateMaybeMessage< ::protobuf::EventBatch >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::EventBatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protobuf::SystemConfiguration* Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::SystemConfiguration >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
