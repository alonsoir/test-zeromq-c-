// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_security.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5fsecurity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5fsecurity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5fsecurity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fsecurity_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_5fsecurity_2eproto;
namespace protobuf {
class DistributedNode;
struct DistributedNodeDefaultTypeInternal;
extern DistributedNodeDefaultTypeInternal _DistributedNode_default_instance_;
class DistributedNode_NodeCapabilitiesEntry_DoNotUse;
struct DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal;
extern DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal _DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_;
class EventBatch;
struct EventBatchDefaultTypeInternal;
extern EventBatchDefaultTypeInternal _EventBatch_default_instance_;
class FlowAggregation;
struct FlowAggregationDefaultTypeInternal;
extern FlowAggregationDefaultTypeInternal _FlowAggregation_default_instance_;
class FlowAggregation_CountryDistributionEntry_DoNotUse;
struct FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_PortDistributionEntry_DoNotUse;
struct FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_ProtocolDistributionEntry_DoNotUse;
struct FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_;
class GeoEnrichment;
struct GeoEnrichmentDefaultTypeInternal;
extern GeoEnrichmentDefaultTypeInternal _GeoEnrichment_default_instance_;
class GeoLocationInfo;
struct GeoLocationInfoDefaultTypeInternal;
extern GeoLocationInfoDefaultTypeInternal _GeoLocationInfo_default_instance_;
class HumanFeedback;
struct HumanFeedbackDefaultTypeInternal;
extern HumanFeedbackDefaultTypeInternal _HumanFeedback_default_instance_;
class HumanInTheLoopReview;
struct HumanInTheLoopReviewDefaultTypeInternal;
extern HumanInTheLoopReviewDefaultTypeInternal _HumanInTheLoopReview_default_instance_;
class ModelPrediction;
struct ModelPredictionDefaultTypeInternal;
extern ModelPredictionDefaultTypeInternal _ModelPrediction_default_instance_;
class NetworkFeatures;
struct NetworkFeaturesDefaultTypeInternal;
extern NetworkFeaturesDefaultTypeInternal _NetworkFeatures_default_instance_;
class NetworkFeatures_CustomFeaturesEntry_DoNotUse;
struct NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal;
extern NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_;
class NetworkFeatures_FeatureMetadataEntry_DoNotUse;
struct NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_;
class NetworkSecurityEvent;
struct NetworkSecurityEventDefaultTypeInternal;
extern NetworkSecurityEventDefaultTypeInternal _NetworkSecurityEvent_default_instance_;
class NetworkSecurityEvent_CustomMetadataEntry_DoNotUse;
struct NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal _NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_;
class PipelineTracking;
struct PipelineTrackingDefaultTypeInternal;
extern PipelineTrackingDefaultTypeInternal _PipelineTracking_default_instance_;
class PipelineTracking_ComponentMetadataEntry_DoNotUse;
struct PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal;
extern PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal _PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_;
class RAGAnalysis;
struct RAGAnalysisDefaultTypeInternal;
extern RAGAnalysisDefaultTypeInternal _RAGAnalysis_default_instance_;
class RansomwareFeatures;
struct RansomwareFeaturesDefaultTypeInternal;
extern RansomwareFeaturesDefaultTypeInternal _RansomwareFeatures_default_instance_;
class SystemConfiguration;
struct SystemConfigurationDefaultTypeInternal;
extern SystemConfigurationDefaultTypeInternal _SystemConfiguration_default_instance_;
class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse;
struct SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_;
class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse;
struct SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal;
extern SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_;
class TimeWindow;
struct TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
class TricapaMLAnalysis;
struct TricapaMLAnalysisDefaultTypeInternal;
extern TricapaMLAnalysisDefaultTypeInternal _TricapaMLAnalysis_default_instance_;
class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse;
struct TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal;
extern TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal _TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::DistributedNode* Arena::CreateMaybeMessage<::protobuf::DistributedNode>(Arena*);
template<> ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse>(Arena*);
template<> ::protobuf::EventBatch* Arena::CreateMaybeMessage<::protobuf::EventBatch>(Arena*);
template<> ::protobuf::FlowAggregation* Arena::CreateMaybeMessage<::protobuf::FlowAggregation>(Arena*);
template<> ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::GeoEnrichment* Arena::CreateMaybeMessage<::protobuf::GeoEnrichment>(Arena*);
template<> ::protobuf::GeoLocationInfo* Arena::CreateMaybeMessage<::protobuf::GeoLocationInfo>(Arena*);
template<> ::protobuf::HumanFeedback* Arena::CreateMaybeMessage<::protobuf::HumanFeedback>(Arena*);
template<> ::protobuf::HumanInTheLoopReview* Arena::CreateMaybeMessage<::protobuf::HumanInTheLoopReview>(Arena*);
template<> ::protobuf::ModelPrediction* Arena::CreateMaybeMessage<::protobuf::ModelPrediction>(Arena*);
template<> ::protobuf::NetworkFeatures* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures>(Arena*);
template<> ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse>(Arena*);
template<> ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::NetworkSecurityEvent* Arena::CreateMaybeMessage<::protobuf::NetworkSecurityEvent>(Arena*);
template<> ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::PipelineTracking* Arena::CreateMaybeMessage<::protobuf::PipelineTracking>(Arena*);
template<> ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::RAGAnalysis* Arena::CreateMaybeMessage<::protobuf::RAGAnalysis>(Arena*);
template<> ::protobuf::RansomwareFeatures* Arena::CreateMaybeMessage<::protobuf::RansomwareFeatures>(Arena*);
template<> ::protobuf::SystemConfiguration* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration>(Arena*);
template<> ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse>(Arena*);
template<> ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse>(Arena*);
template<> ::protobuf::TimeWindow* Arena::CreateMaybeMessage<::protobuf::TimeWindow>(Arena*);
template<> ::protobuf::TricapaMLAnalysis* Arena::CreateMaybeMessage<::protobuf::TricapaMLAnalysis>(Arena*);
template<> ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

enum GeoLocationInfo_ThreatLevel : int {
  GeoLocationInfo_ThreatLevel_UNKNOWN = 0,
  GeoLocationInfo_ThreatLevel_LOW = 1,
  GeoLocationInfo_ThreatLevel_MEDIUM = 2,
  GeoLocationInfo_ThreatLevel_HIGH = 3,
  GeoLocationInfo_ThreatLevel_CRITICAL = 4,
  GeoLocationInfo_ThreatLevel_GeoLocationInfo_ThreatLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GeoLocationInfo_ThreatLevel_GeoLocationInfo_ThreatLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GeoLocationInfo_ThreatLevel_IsValid(int value);
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo_ThreatLevel_ThreatLevel_MIN = GeoLocationInfo_ThreatLevel_UNKNOWN;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo_ThreatLevel_ThreatLevel_MAX = GeoLocationInfo_ThreatLevel_CRITICAL;
constexpr int GeoLocationInfo_ThreatLevel_ThreatLevel_ARRAYSIZE = GeoLocationInfo_ThreatLevel_ThreatLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoLocationInfo_ThreatLevel_descriptor();
template<typename T>
inline const std::string& GeoLocationInfo_ThreatLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeoLocationInfo_ThreatLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeoLocationInfo_ThreatLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeoLocationInfo_ThreatLevel_descriptor(), enum_t_value);
}
inline bool GeoLocationInfo_ThreatLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GeoLocationInfo_ThreatLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeoLocationInfo_ThreatLevel>(
    GeoLocationInfo_ThreatLevel_descriptor(), name, value);
}
enum TimeWindow_WindowType : int {
  TimeWindow_WindowType_SLIDING = 0,
  TimeWindow_WindowType_TUMBLING = 1,
  TimeWindow_WindowType_SESSION_BASED = 2,
  TimeWindow_WindowType_ADAPTIVE = 3,
  TimeWindow_WindowType_TimeWindow_WindowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TimeWindow_WindowType_TimeWindow_WindowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TimeWindow_WindowType_IsValid(int value);
constexpr TimeWindow_WindowType TimeWindow_WindowType_WindowType_MIN = TimeWindow_WindowType_SLIDING;
constexpr TimeWindow_WindowType TimeWindow_WindowType_WindowType_MAX = TimeWindow_WindowType_ADAPTIVE;
constexpr int TimeWindow_WindowType_WindowType_ARRAYSIZE = TimeWindow_WindowType_WindowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeWindow_WindowType_descriptor();
template<typename T>
inline const std::string& TimeWindow_WindowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeWindow_WindowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeWindow_WindowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeWindow_WindowType_descriptor(), enum_t_value);
}
inline bool TimeWindow_WindowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeWindow_WindowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeWindow_WindowType>(
    TimeWindow_WindowType_descriptor(), name, value);
}
enum ModelPrediction_ModelType : int {
  ModelPrediction_ModelType_RANDOM_FOREST_GENERAL = 0,
  ModelPrediction_ModelType_LIGHTGBM_DDOS = 1,
  ModelPrediction_ModelType_NEURAL_NETWORK_RANSOMWARE = 2,
  ModelPrediction_ModelType_ENSEMBLE_TRICAPA = 3,
  ModelPrediction_ModelType_INTERNAL_TRAFFIC_CLASSIFIER = 4,
  ModelPrediction_ModelType_TRANSFORMER_ADVANCED = 5,
  ModelPrediction_ModelType_RANDOM_FOREST_DDOS = 6,
  ModelPrediction_ModelType_RANDOM_FOREST_RANSOMWARE = 7,
  ModelPrediction_ModelType_ModelPrediction_ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ModelPrediction_ModelType_ModelPrediction_ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ModelPrediction_ModelType_IsValid(int value);
constexpr ModelPrediction_ModelType ModelPrediction_ModelType_ModelType_MIN = ModelPrediction_ModelType_RANDOM_FOREST_GENERAL;
constexpr ModelPrediction_ModelType ModelPrediction_ModelType_ModelType_MAX = ModelPrediction_ModelType_RANDOM_FOREST_RANSOMWARE;
constexpr int ModelPrediction_ModelType_ModelType_ARRAYSIZE = ModelPrediction_ModelType_ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelPrediction_ModelType_descriptor();
template<typename T>
inline const std::string& ModelPrediction_ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelPrediction_ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelPrediction_ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelPrediction_ModelType_descriptor(), enum_t_value);
}
inline bool ModelPrediction_ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelPrediction_ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelPrediction_ModelType>(
    ModelPrediction_ModelType_descriptor(), name, value);
}
enum DistributedNode_NodeRole : int {
  DistributedNode_NodeRole_PACKET_SNIFFER = 0,
  DistributedNode_NodeRole_FEATURE_PROCESSOR = 1,
  DistributedNode_NodeRole_GEOIP_ENRICHER = 2,
  DistributedNode_NodeRole_ML_ANALYZER = 3,
  DistributedNode_NodeRole_THREAT_DETECTOR = 4,
  DistributedNode_NodeRole_FIREWALL_CONTROLLER = 5,
  DistributedNode_NodeRole_DATA_AGGREGATOR = 6,
  DistributedNode_NodeRole_DASHBOARD_VISUALIZER = 7,
  DistributedNode_NodeRole_CLUSTER_COORDINATOR = 8,
  DistributedNode_NodeRole_DistributedNode_NodeRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DistributedNode_NodeRole_DistributedNode_NodeRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DistributedNode_NodeRole_IsValid(int value);
constexpr DistributedNode_NodeRole DistributedNode_NodeRole_NodeRole_MIN = DistributedNode_NodeRole_PACKET_SNIFFER;
constexpr DistributedNode_NodeRole DistributedNode_NodeRole_NodeRole_MAX = DistributedNode_NodeRole_CLUSTER_COORDINATOR;
constexpr int DistributedNode_NodeRole_NodeRole_ARRAYSIZE = DistributedNode_NodeRole_NodeRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributedNode_NodeRole_descriptor();
template<typename T>
inline const std::string& DistributedNode_NodeRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistributedNode_NodeRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistributedNode_NodeRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistributedNode_NodeRole_descriptor(), enum_t_value);
}
inline bool DistributedNode_NodeRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DistributedNode_NodeRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistributedNode_NodeRole>(
    DistributedNode_NodeRole_descriptor(), name, value);
}
enum DistributedNode_NodeStatus : int {
  DistributedNode_NodeStatus_ACTIVE = 0,
  DistributedNode_NodeStatus_STARTING = 1,
  DistributedNode_NodeStatus_STOPPING = 2,
  DistributedNode_NodeStatus_ERROR = 3,
  DistributedNode_NodeStatus_MAINTENANCE = 4,
  DistributedNode_NodeStatus_OVERLOADED = 5,
  DistributedNode_NodeStatus_DistributedNode_NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DistributedNode_NodeStatus_DistributedNode_NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DistributedNode_NodeStatus_IsValid(int value);
constexpr DistributedNode_NodeStatus DistributedNode_NodeStatus_NodeStatus_MIN = DistributedNode_NodeStatus_ACTIVE;
constexpr DistributedNode_NodeStatus DistributedNode_NodeStatus_NodeStatus_MAX = DistributedNode_NodeStatus_OVERLOADED;
constexpr int DistributedNode_NodeStatus_NodeStatus_ARRAYSIZE = DistributedNode_NodeStatus_NodeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributedNode_NodeStatus_descriptor();
template<typename T>
inline const std::string& DistributedNode_NodeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistributedNode_NodeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistributedNode_NodeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistributedNode_NodeStatus_descriptor(), enum_t_value);
}
inline bool DistributedNode_NodeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DistributedNode_NodeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistributedNode_NodeStatus>(
    DistributedNode_NodeStatus_descriptor(), name, value);
}
enum HumanFeedback_FeedbackType : int {
  HumanFeedback_FeedbackType_VALIDATION = 0,
  HumanFeedback_FeedbackType_CORRECTION = 1,
  HumanFeedback_FeedbackType_ENHANCEMENT = 2,
  HumanFeedback_FeedbackType_FALSE_POSITIVE_REPORT = 3,
  HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT = 4,
  HumanFeedback_FeedbackType_HumanFeedback_FeedbackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HumanFeedback_FeedbackType_HumanFeedback_FeedbackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HumanFeedback_FeedbackType_IsValid(int value);
constexpr HumanFeedback_FeedbackType HumanFeedback_FeedbackType_FeedbackType_MIN = HumanFeedback_FeedbackType_VALIDATION;
constexpr HumanFeedback_FeedbackType HumanFeedback_FeedbackType_FeedbackType_MAX = HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT;
constexpr int HumanFeedback_FeedbackType_FeedbackType_ARRAYSIZE = HumanFeedback_FeedbackType_FeedbackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HumanFeedback_FeedbackType_descriptor();
template<typename T>
inline const std::string& HumanFeedback_FeedbackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HumanFeedback_FeedbackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HumanFeedback_FeedbackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HumanFeedback_FeedbackType_descriptor(), enum_t_value);
}
inline bool HumanFeedback_FeedbackType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HumanFeedback_FeedbackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HumanFeedback_FeedbackType>(
    HumanFeedback_FeedbackType_descriptor(), name, value);
}
enum HumanInTheLoopReview_ReviewPriority : int {
  HumanInTheLoopReview_ReviewPriority_LOW = 0,
  HumanInTheLoopReview_ReviewPriority_MEDIUM = 1,
  HumanInTheLoopReview_ReviewPriority_HIGH = 2,
  HumanInTheLoopReview_ReviewPriority_CRITICAL = 3,
  HumanInTheLoopReview_ReviewPriority_EMERGENCY = 4,
  HumanInTheLoopReview_ReviewPriority_HumanInTheLoopReview_ReviewPriority_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HumanInTheLoopReview_ReviewPriority_HumanInTheLoopReview_ReviewPriority_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HumanInTheLoopReview_ReviewPriority_IsValid(int value);
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview_ReviewPriority_ReviewPriority_MIN = HumanInTheLoopReview_ReviewPriority_LOW;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX = HumanInTheLoopReview_ReviewPriority_EMERGENCY;
constexpr int HumanInTheLoopReview_ReviewPriority_ReviewPriority_ARRAYSIZE = HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HumanInTheLoopReview_ReviewPriority_descriptor();
template<typename T>
inline const std::string& HumanInTheLoopReview_ReviewPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HumanInTheLoopReview_ReviewPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HumanInTheLoopReview_ReviewPriority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HumanInTheLoopReview_ReviewPriority_descriptor(), enum_t_value);
}
inline bool HumanInTheLoopReview_ReviewPriority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HumanInTheLoopReview_ReviewPriority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HumanInTheLoopReview_ReviewPriority>(
    HumanInTheLoopReview_ReviewPriority_descriptor(), name, value);
}
enum EventBatch_ProcessingMode : int {
  EventBatch_ProcessingMode_REAL_TIME = 0,
  EventBatch_ProcessingMode_NEAR_REAL_TIME = 1,
  EventBatch_ProcessingMode_BATCH_PROCESSING = 2,
  EventBatch_ProcessingMode_HISTORICAL_ANALYSIS = 3,
  EventBatch_ProcessingMode_EventBatch_ProcessingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventBatch_ProcessingMode_EventBatch_ProcessingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventBatch_ProcessingMode_IsValid(int value);
constexpr EventBatch_ProcessingMode EventBatch_ProcessingMode_ProcessingMode_MIN = EventBatch_ProcessingMode_REAL_TIME;
constexpr EventBatch_ProcessingMode EventBatch_ProcessingMode_ProcessingMode_MAX = EventBatch_ProcessingMode_HISTORICAL_ANALYSIS;
constexpr int EventBatch_ProcessingMode_ProcessingMode_ARRAYSIZE = EventBatch_ProcessingMode_ProcessingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventBatch_ProcessingMode_descriptor();
template<typename T>
inline const std::string& EventBatch_ProcessingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventBatch_ProcessingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventBatch_ProcessingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventBatch_ProcessingMode_descriptor(), enum_t_value);
}
inline bool EventBatch_ProcessingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventBatch_ProcessingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventBatch_ProcessingMode>(
    EventBatch_ProcessingMode_descriptor(), name, value);
}
// ===================================================================

class NetworkFeatures_CustomFeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkFeatures_CustomFeaturesEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkFeatures_CustomFeaturesEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  NetworkFeatures_CustomFeaturesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NetworkFeatures_CustomFeaturesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NetworkFeatures_CustomFeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetworkFeatures_CustomFeaturesEntry_DoNotUse& other);
  static const NetworkFeatures_CustomFeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkFeatures_CustomFeaturesEntry_DoNotUse*>(&_NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.NetworkFeatures.CustomFeaturesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class NetworkFeatures_FeatureMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkFeatures_FeatureMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkFeatures_FeatureMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NetworkFeatures_FeatureMetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NetworkFeatures_FeatureMetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NetworkFeatures_FeatureMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetworkFeatures_FeatureMetadataEntry_DoNotUse& other);
  static const NetworkFeatures_FeatureMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkFeatures_FeatureMetadataEntry_DoNotUse*>(&_NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.NetworkFeatures.FeatureMetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.NetworkFeatures.FeatureMetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class NetworkFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.NetworkFeatures) */ {
 public:
  inline NetworkFeatures() : NetworkFeatures(nullptr) {}
  ~NetworkFeatures() override;
  explicit PROTOBUF_CONSTEXPR NetworkFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkFeatures(const NetworkFeatures& from);
  NetworkFeatures(NetworkFeatures&& from) noexcept
    : NetworkFeatures() {
    *this = ::std::move(from);
  }

  inline NetworkFeatures& operator=(const NetworkFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkFeatures& operator=(NetworkFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkFeatures* internal_default_instance() {
    return reinterpret_cast<const NetworkFeatures*>(
               &_NetworkFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkFeatures& a, NetworkFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkFeatures& from) {
    NetworkFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.NetworkFeatures";
  }
  protected:
  explicit NetworkFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDdosFeaturesFieldNumber = 100,
    kRansomwareFeaturesFieldNumber = 101,
    kGeneralAttackFeaturesFieldNumber = 102,
    kInternalTrafficFeaturesFieldNumber = 103,
    kCustomFeaturesFieldNumber = 110,
    kFeatureMetadataFieldNumber = 111,
    kSourceIpFieldNumber = 1,
    kDestinationIpFieldNumber = 2,
    kProtocolNameFieldNumber = 6,
    kFlowStartTimeFieldNumber = 7,
    kFlowDurationFieldNumber = 8,
    kRansomwareFieldNumber = 106,
    kSourcePortFieldNumber = 3,
    kDestinationPortFieldNumber = 4,
    kFlowDurationMicrosecondsFieldNumber = 9,
    kTotalForwardPacketsFieldNumber = 10,
    kTotalBackwardPacketsFieldNumber = 11,
    kTotalForwardBytesFieldNumber = 12,
    kTotalBackwardBytesFieldNumber = 13,
    kForwardPacketLengthMaxFieldNumber = 20,
    kForwardPacketLengthMinFieldNumber = 21,
    kForwardPacketLengthMeanFieldNumber = 22,
    kForwardPacketLengthStdFieldNumber = 23,
    kBackwardPacketLengthMaxFieldNumber = 30,
    kBackwardPacketLengthMinFieldNumber = 31,
    kBackwardPacketLengthMeanFieldNumber = 32,
    kBackwardPacketLengthStdFieldNumber = 33,
    kProtocolNumberFieldNumber = 5,
    kFinFlagCountFieldNumber = 70,
    kFlowBytesPerSecondFieldNumber = 40,
    kFlowPacketsPerSecondFieldNumber = 41,
    kForwardPacketsPerSecondFieldNumber = 42,
    kBackwardPacketsPerSecondFieldNumber = 43,
    kDownloadUploadRatioFieldNumber = 44,
    kAveragePacketSizeFieldNumber = 45,
    kAverageForwardSegmentSizeFieldNumber = 46,
    kAverageBackwardSegmentSizeFieldNumber = 47,
    kFlowInterArrivalTimeMeanFieldNumber = 50,
    kFlowInterArrivalTimeStdFieldNumber = 51,
    kFlowInterArrivalTimeMaxFieldNumber = 52,
    kFlowInterArrivalTimeMinFieldNumber = 53,
    kForwardInterArrivalTimeTotalFieldNumber = 54,
    kForwardInterArrivalTimeMeanFieldNumber = 55,
    kForwardInterArrivalTimeStdFieldNumber = 56,
    kForwardInterArrivalTimeMaxFieldNumber = 57,
    kForwardInterArrivalTimeMinFieldNumber = 58,
    kBackwardInterArrivalTimeTotalFieldNumber = 59,
    kBackwardInterArrivalTimeMeanFieldNumber = 60,
    kBackwardInterArrivalTimeStdFieldNumber = 61,
    kBackwardInterArrivalTimeMaxFieldNumber = 62,
    kBackwardInterArrivalTimeMinFieldNumber = 63,
    kSynFlagCountFieldNumber = 71,
    kRstFlagCountFieldNumber = 72,
    kPshFlagCountFieldNumber = 73,
    kAckFlagCountFieldNumber = 74,
    kUrgFlagCountFieldNumber = 75,
    kCweFlagCountFieldNumber = 76,
    kEceFlagCountFieldNumber = 77,
    kForwardPshFlagsFieldNumber = 78,
    kBackwardPshFlagsFieldNumber = 79,
    kForwardUrgFlagsFieldNumber = 80,
    kForwardHeaderLengthFieldNumber = 85,
    kBackwardHeaderLengthFieldNumber = 86,
    kForwardAverageBytesBulkFieldNumber = 87,
    kForwardAveragePacketsBulkFieldNumber = 88,
    kForwardAverageBulkRateFieldNumber = 89,
    kBackwardAverageBytesBulkFieldNumber = 90,
    kBackwardAveragePacketsBulkFieldNumber = 91,
    kBackwardAverageBulkRateFieldNumber = 92,
    kMinimumPacketLengthFieldNumber = 95,
    kMaximumPacketLengthFieldNumber = 96,
    kPacketLengthMeanFieldNumber = 97,
    kPacketLengthStdFieldNumber = 98,
    kPacketLengthVarianceFieldNumber = 99,
    kActiveMeanFieldNumber = 104,
    kIdleMeanFieldNumber = 105,
    kBackwardUrgFlagsFieldNumber = 81,
  };
  // repeated double ddos_features = 100;
  int ddos_features_size() const;
  private:
  int _internal_ddos_features_size() const;
  public:
  void clear_ddos_features();
  private:
  double _internal_ddos_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ddos_features() const;
  void _internal_add_ddos_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ddos_features();
  public:
  double ddos_features(int index) const;
  void set_ddos_features(int index, double value);
  void add_ddos_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ddos_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ddos_features();

  // repeated double ransomware_features = 101;
  int ransomware_features_size() const;
  private:
  int _internal_ransomware_features_size() const;
  public:
  void clear_ransomware_features();
  private:
  double _internal_ransomware_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ransomware_features() const;
  void _internal_add_ransomware_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ransomware_features();
  public:
  double ransomware_features(int index) const;
  void set_ransomware_features(int index, double value);
  void add_ransomware_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ransomware_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ransomware_features();

  // repeated double general_attack_features = 102;
  int general_attack_features_size() const;
  private:
  int _internal_general_attack_features_size() const;
  public:
  void clear_general_attack_features();
  private:
  double _internal_general_attack_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_general_attack_features() const;
  void _internal_add_general_attack_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_general_attack_features();
  public:
  double general_attack_features(int index) const;
  void set_general_attack_features(int index, double value);
  void add_general_attack_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      general_attack_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_general_attack_features();

  // repeated double internal_traffic_features = 103;
  int internal_traffic_features_size() const;
  private:
  int _internal_internal_traffic_features_size() const;
  public:
  void clear_internal_traffic_features();
  private:
  double _internal_internal_traffic_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_internal_traffic_features() const;
  void _internal_add_internal_traffic_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_internal_traffic_features();
  public:
  double internal_traffic_features(int index) const;
  void set_internal_traffic_features(int index, double value);
  void add_internal_traffic_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      internal_traffic_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_internal_traffic_features();

  // map<string, double> custom_features = 110;
  int custom_features_size() const;
  private:
  int _internal_custom_features_size() const;
  public:
  void clear_custom_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_custom_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_custom_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      custom_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_custom_features();

  // map<string, string> feature_metadata = 111;
  int feature_metadata_size() const;
  private:
  int _internal_feature_metadata_size() const;
  public:
  void clear_feature_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_feature_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_feature_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      feature_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_feature_metadata();

  // string source_ip = 1;
  void clear_source_ip();
  const std::string& source_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_ip();
  PROTOBUF_NODISCARD std::string* release_source_ip();
  void set_allocated_source_ip(std::string* source_ip);
  private:
  const std::string& _internal_source_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_ip(const std::string& value);
  std::string* _internal_mutable_source_ip();
  public:

  // string destination_ip = 2;
  void clear_destination_ip();
  const std::string& destination_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_ip();
  PROTOBUF_NODISCARD std::string* release_destination_ip();
  void set_allocated_destination_ip(std::string* destination_ip);
  private:
  const std::string& _internal_destination_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_ip(const std::string& value);
  std::string* _internal_mutable_destination_ip();
  public:

  // string protocol_name = 6;
  void clear_protocol_name();
  const std::string& protocol_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_name();
  PROTOBUF_NODISCARD std::string* release_protocol_name();
  void set_allocated_protocol_name(std::string* protocol_name);
  private:
  const std::string& _internal_protocol_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_name(const std::string& value);
  std::string* _internal_mutable_protocol_name();
  public:

  // .google.protobuf.Timestamp flow_start_time = 7;
  bool has_flow_start_time() const;
  private:
  bool _internal_has_flow_start_time() const;
  public:
  void clear_flow_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& flow_start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_flow_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_flow_start_time();
  void set_allocated_flow_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* flow_start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_flow_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_flow_start_time();
  public:
  void unsafe_arena_set_allocated_flow_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* flow_start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_flow_start_time();

  // .google.protobuf.Duration flow_duration = 8;
  bool has_flow_duration() const;
  private:
  bool _internal_has_flow_duration() const;
  public:
  void clear_flow_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& flow_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_flow_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_flow_duration();
  void set_allocated_flow_duration(::PROTOBUF_NAMESPACE_ID::Duration* flow_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_flow_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_flow_duration();
  public:
  void unsafe_arena_set_allocated_flow_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* flow_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_flow_duration();

  // .protobuf.RansomwareFeatures ransomware = 106;
  bool has_ransomware() const;
  private:
  bool _internal_has_ransomware() const;
  public:
  void clear_ransomware();
  const ::protobuf::RansomwareFeatures& ransomware() const;
  PROTOBUF_NODISCARD ::protobuf::RansomwareFeatures* release_ransomware();
  ::protobuf::RansomwareFeatures* mutable_ransomware();
  void set_allocated_ransomware(::protobuf::RansomwareFeatures* ransomware);
  private:
  const ::protobuf::RansomwareFeatures& _internal_ransomware() const;
  ::protobuf::RansomwareFeatures* _internal_mutable_ransomware();
  public:
  void unsafe_arena_set_allocated_ransomware(
      ::protobuf::RansomwareFeatures* ransomware);
  ::protobuf::RansomwareFeatures* unsafe_arena_release_ransomware();

  // uint32 source_port = 3;
  void clear_source_port();
  uint32_t source_port() const;
  void set_source_port(uint32_t value);
  private:
  uint32_t _internal_source_port() const;
  void _internal_set_source_port(uint32_t value);
  public:

  // uint32 destination_port = 4;
  void clear_destination_port();
  uint32_t destination_port() const;
  void set_destination_port(uint32_t value);
  private:
  uint32_t _internal_destination_port() const;
  void _internal_set_destination_port(uint32_t value);
  public:

  // uint64 flow_duration_microseconds = 9;
  void clear_flow_duration_microseconds();
  uint64_t flow_duration_microseconds() const;
  void set_flow_duration_microseconds(uint64_t value);
  private:
  uint64_t _internal_flow_duration_microseconds() const;
  void _internal_set_flow_duration_microseconds(uint64_t value);
  public:

  // uint64 total_forward_packets = 10;
  void clear_total_forward_packets();
  uint64_t total_forward_packets() const;
  void set_total_forward_packets(uint64_t value);
  private:
  uint64_t _internal_total_forward_packets() const;
  void _internal_set_total_forward_packets(uint64_t value);
  public:

  // uint64 total_backward_packets = 11;
  void clear_total_backward_packets();
  uint64_t total_backward_packets() const;
  void set_total_backward_packets(uint64_t value);
  private:
  uint64_t _internal_total_backward_packets() const;
  void _internal_set_total_backward_packets(uint64_t value);
  public:

  // uint64 total_forward_bytes = 12;
  void clear_total_forward_bytes();
  uint64_t total_forward_bytes() const;
  void set_total_forward_bytes(uint64_t value);
  private:
  uint64_t _internal_total_forward_bytes() const;
  void _internal_set_total_forward_bytes(uint64_t value);
  public:

  // uint64 total_backward_bytes = 13;
  void clear_total_backward_bytes();
  uint64_t total_backward_bytes() const;
  void set_total_backward_bytes(uint64_t value);
  private:
  uint64_t _internal_total_backward_bytes() const;
  void _internal_set_total_backward_bytes(uint64_t value);
  public:

  // uint64 forward_packet_length_max = 20;
  void clear_forward_packet_length_max();
  uint64_t forward_packet_length_max() const;
  void set_forward_packet_length_max(uint64_t value);
  private:
  uint64_t _internal_forward_packet_length_max() const;
  void _internal_set_forward_packet_length_max(uint64_t value);
  public:

  // uint64 forward_packet_length_min = 21;
  void clear_forward_packet_length_min();
  uint64_t forward_packet_length_min() const;
  void set_forward_packet_length_min(uint64_t value);
  private:
  uint64_t _internal_forward_packet_length_min() const;
  void _internal_set_forward_packet_length_min(uint64_t value);
  public:

  // double forward_packet_length_mean = 22;
  void clear_forward_packet_length_mean();
  double forward_packet_length_mean() const;
  void set_forward_packet_length_mean(double value);
  private:
  double _internal_forward_packet_length_mean() const;
  void _internal_set_forward_packet_length_mean(double value);
  public:

  // double forward_packet_length_std = 23;
  void clear_forward_packet_length_std();
  double forward_packet_length_std() const;
  void set_forward_packet_length_std(double value);
  private:
  double _internal_forward_packet_length_std() const;
  void _internal_set_forward_packet_length_std(double value);
  public:

  // uint64 backward_packet_length_max = 30;
  void clear_backward_packet_length_max();
  uint64_t backward_packet_length_max() const;
  void set_backward_packet_length_max(uint64_t value);
  private:
  uint64_t _internal_backward_packet_length_max() const;
  void _internal_set_backward_packet_length_max(uint64_t value);
  public:

  // uint64 backward_packet_length_min = 31;
  void clear_backward_packet_length_min();
  uint64_t backward_packet_length_min() const;
  void set_backward_packet_length_min(uint64_t value);
  private:
  uint64_t _internal_backward_packet_length_min() const;
  void _internal_set_backward_packet_length_min(uint64_t value);
  public:

  // double backward_packet_length_mean = 32;
  void clear_backward_packet_length_mean();
  double backward_packet_length_mean() const;
  void set_backward_packet_length_mean(double value);
  private:
  double _internal_backward_packet_length_mean() const;
  void _internal_set_backward_packet_length_mean(double value);
  public:

  // double backward_packet_length_std = 33;
  void clear_backward_packet_length_std();
  double backward_packet_length_std() const;
  void set_backward_packet_length_std(double value);
  private:
  double _internal_backward_packet_length_std() const;
  void _internal_set_backward_packet_length_std(double value);
  public:

  // uint32 protocol_number = 5;
  void clear_protocol_number();
  uint32_t protocol_number() const;
  void set_protocol_number(uint32_t value);
  private:
  uint32_t _internal_protocol_number() const;
  void _internal_set_protocol_number(uint32_t value);
  public:

  // uint32 fin_flag_count = 70;
  void clear_fin_flag_count();
  uint32_t fin_flag_count() const;
  void set_fin_flag_count(uint32_t value);
  private:
  uint32_t _internal_fin_flag_count() const;
  void _internal_set_fin_flag_count(uint32_t value);
  public:

  // double flow_bytes_per_second = 40;
  void clear_flow_bytes_per_second();
  double flow_bytes_per_second() const;
  void set_flow_bytes_per_second(double value);
  private:
  double _internal_flow_bytes_per_second() const;
  void _internal_set_flow_bytes_per_second(double value);
  public:

  // double flow_packets_per_second = 41;
  void clear_flow_packets_per_second();
  double flow_packets_per_second() const;
  void set_flow_packets_per_second(double value);
  private:
  double _internal_flow_packets_per_second() const;
  void _internal_set_flow_packets_per_second(double value);
  public:

  // double forward_packets_per_second = 42;
  void clear_forward_packets_per_second();
  double forward_packets_per_second() const;
  void set_forward_packets_per_second(double value);
  private:
  double _internal_forward_packets_per_second() const;
  void _internal_set_forward_packets_per_second(double value);
  public:

  // double backward_packets_per_second = 43;
  void clear_backward_packets_per_second();
  double backward_packets_per_second() const;
  void set_backward_packets_per_second(double value);
  private:
  double _internal_backward_packets_per_second() const;
  void _internal_set_backward_packets_per_second(double value);
  public:

  // double download_upload_ratio = 44;
  void clear_download_upload_ratio();
  double download_upload_ratio() const;
  void set_download_upload_ratio(double value);
  private:
  double _internal_download_upload_ratio() const;
  void _internal_set_download_upload_ratio(double value);
  public:

  // double average_packet_size = 45;
  void clear_average_packet_size();
  double average_packet_size() const;
  void set_average_packet_size(double value);
  private:
  double _internal_average_packet_size() const;
  void _internal_set_average_packet_size(double value);
  public:

  // double average_forward_segment_size = 46;
  void clear_average_forward_segment_size();
  double average_forward_segment_size() const;
  void set_average_forward_segment_size(double value);
  private:
  double _internal_average_forward_segment_size() const;
  void _internal_set_average_forward_segment_size(double value);
  public:

  // double average_backward_segment_size = 47;
  void clear_average_backward_segment_size();
  double average_backward_segment_size() const;
  void set_average_backward_segment_size(double value);
  private:
  double _internal_average_backward_segment_size() const;
  void _internal_set_average_backward_segment_size(double value);
  public:

  // double flow_inter_arrival_time_mean = 50;
  void clear_flow_inter_arrival_time_mean();
  double flow_inter_arrival_time_mean() const;
  void set_flow_inter_arrival_time_mean(double value);
  private:
  double _internal_flow_inter_arrival_time_mean() const;
  void _internal_set_flow_inter_arrival_time_mean(double value);
  public:

  // double flow_inter_arrival_time_std = 51;
  void clear_flow_inter_arrival_time_std();
  double flow_inter_arrival_time_std() const;
  void set_flow_inter_arrival_time_std(double value);
  private:
  double _internal_flow_inter_arrival_time_std() const;
  void _internal_set_flow_inter_arrival_time_std(double value);
  public:

  // uint64 flow_inter_arrival_time_max = 52;
  void clear_flow_inter_arrival_time_max();
  uint64_t flow_inter_arrival_time_max() const;
  void set_flow_inter_arrival_time_max(uint64_t value);
  private:
  uint64_t _internal_flow_inter_arrival_time_max() const;
  void _internal_set_flow_inter_arrival_time_max(uint64_t value);
  public:

  // uint64 flow_inter_arrival_time_min = 53;
  void clear_flow_inter_arrival_time_min();
  uint64_t flow_inter_arrival_time_min() const;
  void set_flow_inter_arrival_time_min(uint64_t value);
  private:
  uint64_t _internal_flow_inter_arrival_time_min() const;
  void _internal_set_flow_inter_arrival_time_min(uint64_t value);
  public:

  // double forward_inter_arrival_time_total = 54;
  void clear_forward_inter_arrival_time_total();
  double forward_inter_arrival_time_total() const;
  void set_forward_inter_arrival_time_total(double value);
  private:
  double _internal_forward_inter_arrival_time_total() const;
  void _internal_set_forward_inter_arrival_time_total(double value);
  public:

  // double forward_inter_arrival_time_mean = 55;
  void clear_forward_inter_arrival_time_mean();
  double forward_inter_arrival_time_mean() const;
  void set_forward_inter_arrival_time_mean(double value);
  private:
  double _internal_forward_inter_arrival_time_mean() const;
  void _internal_set_forward_inter_arrival_time_mean(double value);
  public:

  // double forward_inter_arrival_time_std = 56;
  void clear_forward_inter_arrival_time_std();
  double forward_inter_arrival_time_std() const;
  void set_forward_inter_arrival_time_std(double value);
  private:
  double _internal_forward_inter_arrival_time_std() const;
  void _internal_set_forward_inter_arrival_time_std(double value);
  public:

  // uint64 forward_inter_arrival_time_max = 57;
  void clear_forward_inter_arrival_time_max();
  uint64_t forward_inter_arrival_time_max() const;
  void set_forward_inter_arrival_time_max(uint64_t value);
  private:
  uint64_t _internal_forward_inter_arrival_time_max() const;
  void _internal_set_forward_inter_arrival_time_max(uint64_t value);
  public:

  // uint64 forward_inter_arrival_time_min = 58;
  void clear_forward_inter_arrival_time_min();
  uint64_t forward_inter_arrival_time_min() const;
  void set_forward_inter_arrival_time_min(uint64_t value);
  private:
  uint64_t _internal_forward_inter_arrival_time_min() const;
  void _internal_set_forward_inter_arrival_time_min(uint64_t value);
  public:

  // double backward_inter_arrival_time_total = 59;
  void clear_backward_inter_arrival_time_total();
  double backward_inter_arrival_time_total() const;
  void set_backward_inter_arrival_time_total(double value);
  private:
  double _internal_backward_inter_arrival_time_total() const;
  void _internal_set_backward_inter_arrival_time_total(double value);
  public:

  // double backward_inter_arrival_time_mean = 60;
  void clear_backward_inter_arrival_time_mean();
  double backward_inter_arrival_time_mean() const;
  void set_backward_inter_arrival_time_mean(double value);
  private:
  double _internal_backward_inter_arrival_time_mean() const;
  void _internal_set_backward_inter_arrival_time_mean(double value);
  public:

  // double backward_inter_arrival_time_std = 61;
  void clear_backward_inter_arrival_time_std();
  double backward_inter_arrival_time_std() const;
  void set_backward_inter_arrival_time_std(double value);
  private:
  double _internal_backward_inter_arrival_time_std() const;
  void _internal_set_backward_inter_arrival_time_std(double value);
  public:

  // uint64 backward_inter_arrival_time_max = 62;
  void clear_backward_inter_arrival_time_max();
  uint64_t backward_inter_arrival_time_max() const;
  void set_backward_inter_arrival_time_max(uint64_t value);
  private:
  uint64_t _internal_backward_inter_arrival_time_max() const;
  void _internal_set_backward_inter_arrival_time_max(uint64_t value);
  public:

  // uint64 backward_inter_arrival_time_min = 63;
  void clear_backward_inter_arrival_time_min();
  uint64_t backward_inter_arrival_time_min() const;
  void set_backward_inter_arrival_time_min(uint64_t value);
  private:
  uint64_t _internal_backward_inter_arrival_time_min() const;
  void _internal_set_backward_inter_arrival_time_min(uint64_t value);
  public:

  // uint32 syn_flag_count = 71;
  void clear_syn_flag_count();
  uint32_t syn_flag_count() const;
  void set_syn_flag_count(uint32_t value);
  private:
  uint32_t _internal_syn_flag_count() const;
  void _internal_set_syn_flag_count(uint32_t value);
  public:

  // uint32 rst_flag_count = 72;
  void clear_rst_flag_count();
  uint32_t rst_flag_count() const;
  void set_rst_flag_count(uint32_t value);
  private:
  uint32_t _internal_rst_flag_count() const;
  void _internal_set_rst_flag_count(uint32_t value);
  public:

  // uint32 psh_flag_count = 73;
  void clear_psh_flag_count();
  uint32_t psh_flag_count() const;
  void set_psh_flag_count(uint32_t value);
  private:
  uint32_t _internal_psh_flag_count() const;
  void _internal_set_psh_flag_count(uint32_t value);
  public:

  // uint32 ack_flag_count = 74;
  void clear_ack_flag_count();
  uint32_t ack_flag_count() const;
  void set_ack_flag_count(uint32_t value);
  private:
  uint32_t _internal_ack_flag_count() const;
  void _internal_set_ack_flag_count(uint32_t value);
  public:

  // uint32 urg_flag_count = 75;
  void clear_urg_flag_count();
  uint32_t urg_flag_count() const;
  void set_urg_flag_count(uint32_t value);
  private:
  uint32_t _internal_urg_flag_count() const;
  void _internal_set_urg_flag_count(uint32_t value);
  public:

  // uint32 cwe_flag_count = 76;
  void clear_cwe_flag_count();
  uint32_t cwe_flag_count() const;
  void set_cwe_flag_count(uint32_t value);
  private:
  uint32_t _internal_cwe_flag_count() const;
  void _internal_set_cwe_flag_count(uint32_t value);
  public:

  // uint32 ece_flag_count = 77;
  void clear_ece_flag_count();
  uint32_t ece_flag_count() const;
  void set_ece_flag_count(uint32_t value);
  private:
  uint32_t _internal_ece_flag_count() const;
  void _internal_set_ece_flag_count(uint32_t value);
  public:

  // uint32 forward_psh_flags = 78;
  void clear_forward_psh_flags();
  uint32_t forward_psh_flags() const;
  void set_forward_psh_flags(uint32_t value);
  private:
  uint32_t _internal_forward_psh_flags() const;
  void _internal_set_forward_psh_flags(uint32_t value);
  public:

  // uint32 backward_psh_flags = 79;
  void clear_backward_psh_flags();
  uint32_t backward_psh_flags() const;
  void set_backward_psh_flags(uint32_t value);
  private:
  uint32_t _internal_backward_psh_flags() const;
  void _internal_set_backward_psh_flags(uint32_t value);
  public:

  // uint32 forward_urg_flags = 80;
  void clear_forward_urg_flags();
  uint32_t forward_urg_flags() const;
  void set_forward_urg_flags(uint32_t value);
  private:
  uint32_t _internal_forward_urg_flags() const;
  void _internal_set_forward_urg_flags(uint32_t value);
  public:

  // double forward_header_length = 85;
  void clear_forward_header_length();
  double forward_header_length() const;
  void set_forward_header_length(double value);
  private:
  double _internal_forward_header_length() const;
  void _internal_set_forward_header_length(double value);
  public:

  // double backward_header_length = 86;
  void clear_backward_header_length();
  double backward_header_length() const;
  void set_backward_header_length(double value);
  private:
  double _internal_backward_header_length() const;
  void _internal_set_backward_header_length(double value);
  public:

  // double forward_average_bytes_bulk = 87;
  void clear_forward_average_bytes_bulk();
  double forward_average_bytes_bulk() const;
  void set_forward_average_bytes_bulk(double value);
  private:
  double _internal_forward_average_bytes_bulk() const;
  void _internal_set_forward_average_bytes_bulk(double value);
  public:

  // double forward_average_packets_bulk = 88;
  void clear_forward_average_packets_bulk();
  double forward_average_packets_bulk() const;
  void set_forward_average_packets_bulk(double value);
  private:
  double _internal_forward_average_packets_bulk() const;
  void _internal_set_forward_average_packets_bulk(double value);
  public:

  // double forward_average_bulk_rate = 89;
  void clear_forward_average_bulk_rate();
  double forward_average_bulk_rate() const;
  void set_forward_average_bulk_rate(double value);
  private:
  double _internal_forward_average_bulk_rate() const;
  void _internal_set_forward_average_bulk_rate(double value);
  public:

  // double backward_average_bytes_bulk = 90;
  void clear_backward_average_bytes_bulk();
  double backward_average_bytes_bulk() const;
  void set_backward_average_bytes_bulk(double value);
  private:
  double _internal_backward_average_bytes_bulk() const;
  void _internal_set_backward_average_bytes_bulk(double value);
  public:

  // double backward_average_packets_bulk = 91;
  void clear_backward_average_packets_bulk();
  double backward_average_packets_bulk() const;
  void set_backward_average_packets_bulk(double value);
  private:
  double _internal_backward_average_packets_bulk() const;
  void _internal_set_backward_average_packets_bulk(double value);
  public:

  // double backward_average_bulk_rate = 92;
  void clear_backward_average_bulk_rate();
  double backward_average_bulk_rate() const;
  void set_backward_average_bulk_rate(double value);
  private:
  double _internal_backward_average_bulk_rate() const;
  void _internal_set_backward_average_bulk_rate(double value);
  public:

  // uint64 minimum_packet_length = 95;
  void clear_minimum_packet_length();
  uint64_t minimum_packet_length() const;
  void set_minimum_packet_length(uint64_t value);
  private:
  uint64_t _internal_minimum_packet_length() const;
  void _internal_set_minimum_packet_length(uint64_t value);
  public:

  // uint64 maximum_packet_length = 96;
  void clear_maximum_packet_length();
  uint64_t maximum_packet_length() const;
  void set_maximum_packet_length(uint64_t value);
  private:
  uint64_t _internal_maximum_packet_length() const;
  void _internal_set_maximum_packet_length(uint64_t value);
  public:

  // double packet_length_mean = 97;
  void clear_packet_length_mean();
  double packet_length_mean() const;
  void set_packet_length_mean(double value);
  private:
  double _internal_packet_length_mean() const;
  void _internal_set_packet_length_mean(double value);
  public:

  // double packet_length_std = 98;
  void clear_packet_length_std();
  double packet_length_std() const;
  void set_packet_length_std(double value);
  private:
  double _internal_packet_length_std() const;
  void _internal_set_packet_length_std(double value);
  public:

  // double packet_length_variance = 99;
  void clear_packet_length_variance();
  double packet_length_variance() const;
  void set_packet_length_variance(double value);
  private:
  double _internal_packet_length_variance() const;
  void _internal_set_packet_length_variance(double value);
  public:

  // double active_mean = 104;
  void clear_active_mean();
  double active_mean() const;
  void set_active_mean(double value);
  private:
  double _internal_active_mean() const;
  void _internal_set_active_mean(double value);
  public:

  // double idle_mean = 105;
  void clear_idle_mean();
  double idle_mean() const;
  void set_idle_mean(double value);
  private:
  double _internal_idle_mean() const;
  void _internal_set_idle_mean(double value);
  public:

  // uint32 backward_urg_flags = 81;
  void clear_backward_urg_flags();
  uint32_t backward_urg_flags() const;
  void set_backward_urg_flags(uint32_t value);
  private:
  uint32_t _internal_backward_urg_flags() const;
  void _internal_set_backward_urg_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.NetworkFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ddos_features_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ransomware_features_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > general_attack_features_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > internal_traffic_features_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NetworkFeatures_CustomFeaturesEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> custom_features_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NetworkFeatures_FeatureMetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> feature_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* flow_start_time_;
    ::PROTOBUF_NAMESPACE_ID::Duration* flow_duration_;
    ::protobuf::RansomwareFeatures* ransomware_;
    uint32_t source_port_;
    uint32_t destination_port_;
    uint64_t flow_duration_microseconds_;
    uint64_t total_forward_packets_;
    uint64_t total_backward_packets_;
    uint64_t total_forward_bytes_;
    uint64_t total_backward_bytes_;
    uint64_t forward_packet_length_max_;
    uint64_t forward_packet_length_min_;
    double forward_packet_length_mean_;
    double forward_packet_length_std_;
    uint64_t backward_packet_length_max_;
    uint64_t backward_packet_length_min_;
    double backward_packet_length_mean_;
    double backward_packet_length_std_;
    uint32_t protocol_number_;
    uint32_t fin_flag_count_;
    double flow_bytes_per_second_;
    double flow_packets_per_second_;
    double forward_packets_per_second_;
    double backward_packets_per_second_;
    double download_upload_ratio_;
    double average_packet_size_;
    double average_forward_segment_size_;
    double average_backward_segment_size_;
    double flow_inter_arrival_time_mean_;
    double flow_inter_arrival_time_std_;
    uint64_t flow_inter_arrival_time_max_;
    uint64_t flow_inter_arrival_time_min_;
    double forward_inter_arrival_time_total_;
    double forward_inter_arrival_time_mean_;
    double forward_inter_arrival_time_std_;
    uint64_t forward_inter_arrival_time_max_;
    uint64_t forward_inter_arrival_time_min_;
    double backward_inter_arrival_time_total_;
    double backward_inter_arrival_time_mean_;
    double backward_inter_arrival_time_std_;
    uint64_t backward_inter_arrival_time_max_;
    uint64_t backward_inter_arrival_time_min_;
    uint32_t syn_flag_count_;
    uint32_t rst_flag_count_;
    uint32_t psh_flag_count_;
    uint32_t ack_flag_count_;
    uint32_t urg_flag_count_;
    uint32_t cwe_flag_count_;
    uint32_t ece_flag_count_;
    uint32_t forward_psh_flags_;
    uint32_t backward_psh_flags_;
    uint32_t forward_urg_flags_;
    double forward_header_length_;
    double backward_header_length_;
    double forward_average_bytes_bulk_;
    double forward_average_packets_bulk_;
    double forward_average_bulk_rate_;
    double backward_average_bytes_bulk_;
    double backward_average_packets_bulk_;
    double backward_average_bulk_rate_;
    uint64_t minimum_packet_length_;
    uint64_t maximum_packet_length_;
    double packet_length_mean_;
    double packet_length_std_;
    double packet_length_variance_;
    double active_mean_;
    double idle_mean_;
    uint32_t backward_urg_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class GeoLocationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.GeoLocationInfo) */ {
 public:
  inline GeoLocationInfo() : GeoLocationInfo(nullptr) {}
  ~GeoLocationInfo() override;
  explicit PROTOBUF_CONSTEXPR GeoLocationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoLocationInfo(const GeoLocationInfo& from);
  GeoLocationInfo(GeoLocationInfo&& from) noexcept
    : GeoLocationInfo() {
    *this = ::std::move(from);
  }

  inline GeoLocationInfo& operator=(const GeoLocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoLocationInfo& operator=(GeoLocationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoLocationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoLocationInfo* internal_default_instance() {
    return reinterpret_cast<const GeoLocationInfo*>(
               &_GeoLocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GeoLocationInfo& a, GeoLocationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoLocationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoLocationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoLocationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeoLocationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeoLocationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeoLocationInfo& from) {
    GeoLocationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLocationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.GeoLocationInfo";
  }
  protected:
  explicit GeoLocationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeoLocationInfo_ThreatLevel ThreatLevel;
  static constexpr ThreatLevel UNKNOWN =
    GeoLocationInfo_ThreatLevel_UNKNOWN;
  static constexpr ThreatLevel LOW =
    GeoLocationInfo_ThreatLevel_LOW;
  static constexpr ThreatLevel MEDIUM =
    GeoLocationInfo_ThreatLevel_MEDIUM;
  static constexpr ThreatLevel HIGH =
    GeoLocationInfo_ThreatLevel_HIGH;
  static constexpr ThreatLevel CRITICAL =
    GeoLocationInfo_ThreatLevel_CRITICAL;
  static inline bool ThreatLevel_IsValid(int value) {
    return GeoLocationInfo_ThreatLevel_IsValid(value);
  }
  static constexpr ThreatLevel ThreatLevel_MIN =
    GeoLocationInfo_ThreatLevel_ThreatLevel_MIN;
  static constexpr ThreatLevel ThreatLevel_MAX =
    GeoLocationInfo_ThreatLevel_ThreatLevel_MAX;
  static constexpr int ThreatLevel_ARRAYSIZE =
    GeoLocationInfo_ThreatLevel_ThreatLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ThreatLevel_descriptor() {
    return GeoLocationInfo_ThreatLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& ThreatLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThreatLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThreatLevel_Name.");
    return GeoLocationInfo_ThreatLevel_Name(enum_t_value);
  }
  static inline bool ThreatLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ThreatLevel* value) {
    return GeoLocationInfo_ThreatLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCountryNameFieldNumber = 1,
    kCountryCodeFieldNumber = 2,
    kRegionNameFieldNumber = 3,
    kCityNameFieldNumber = 4,
    kTimezoneFieldNumber = 7,
    kIspNameFieldNumber = 8,
    kOrganizationNameFieldNumber = 9,
    kAutonomousSystemNumberFieldNumber = 10,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kIsAnonymousProxyFieldNumber = 11,
    kIsSatelliteProviderFieldNumber = 12,
    kIsTorExitNodeFieldNumber = 13,
    kIsKnownMaliciousFieldNumber = 14,
    kThreatLevelFieldNumber = 15,
  };
  // string country_name = 1;
  void clear_country_name();
  const std::string& country_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_name();
  PROTOBUF_NODISCARD std::string* release_country_name();
  void set_allocated_country_name(std::string* country_name);
  private:
  const std::string& _internal_country_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_name(const std::string& value);
  std::string* _internal_mutable_country_name();
  public:

  // string country_code = 2;
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // string region_name = 3;
  void clear_region_name();
  const std::string& region_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region_name();
  PROTOBUF_NODISCARD std::string* release_region_name();
  void set_allocated_region_name(std::string* region_name);
  private:
  const std::string& _internal_region_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_name(const std::string& value);
  std::string* _internal_mutable_region_name();
  public:

  // string city_name = 4;
  void clear_city_name();
  const std::string& city_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city_name();
  PROTOBUF_NODISCARD std::string* release_city_name();
  void set_allocated_city_name(std::string* city_name);
  private:
  const std::string& _internal_city_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city_name(const std::string& value);
  std::string* _internal_mutable_city_name();
  public:

  // string timezone = 7;
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string isp_name = 8;
  void clear_isp_name();
  const std::string& isp_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isp_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isp_name();
  PROTOBUF_NODISCARD std::string* release_isp_name();
  void set_allocated_isp_name(std::string* isp_name);
  private:
  const std::string& _internal_isp_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isp_name(const std::string& value);
  std::string* _internal_mutable_isp_name();
  public:

  // string organization_name = 9;
  void clear_organization_name();
  const std::string& organization_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_name();
  PROTOBUF_NODISCARD std::string* release_organization_name();
  void set_allocated_organization_name(std::string* organization_name);
  private:
  const std::string& _internal_organization_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_name(const std::string& value);
  std::string* _internal_mutable_organization_name();
  public:

  // string autonomous_system_number = 10;
  void clear_autonomous_system_number();
  const std::string& autonomous_system_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_autonomous_system_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_autonomous_system_number();
  PROTOBUF_NODISCARD std::string* release_autonomous_system_number();
  void set_allocated_autonomous_system_number(std::string* autonomous_system_number);
  private:
  const std::string& _internal_autonomous_system_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_autonomous_system_number(const std::string& value);
  std::string* _internal_mutable_autonomous_system_number();
  public:

  // double latitude = 5;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 6;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // bool is_anonymous_proxy = 11;
  void clear_is_anonymous_proxy();
  bool is_anonymous_proxy() const;
  void set_is_anonymous_proxy(bool value);
  private:
  bool _internal_is_anonymous_proxy() const;
  void _internal_set_is_anonymous_proxy(bool value);
  public:

  // bool is_satellite_provider = 12;
  void clear_is_satellite_provider();
  bool is_satellite_provider() const;
  void set_is_satellite_provider(bool value);
  private:
  bool _internal_is_satellite_provider() const;
  void _internal_set_is_satellite_provider(bool value);
  public:

  // bool is_tor_exit_node = 13;
  void clear_is_tor_exit_node();
  bool is_tor_exit_node() const;
  void set_is_tor_exit_node(bool value);
  private:
  bool _internal_is_tor_exit_node() const;
  void _internal_set_is_tor_exit_node(bool value);
  public:

  // bool is_known_malicious = 14;
  void clear_is_known_malicious();
  bool is_known_malicious() const;
  void set_is_known_malicious(bool value);
  private:
  bool _internal_is_known_malicious() const;
  void _internal_set_is_known_malicious(bool value);
  public:

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  void clear_threat_level();
  ::protobuf::GeoLocationInfo_ThreatLevel threat_level() const;
  void set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value);
  private:
  ::protobuf::GeoLocationInfo_ThreatLevel _internal_threat_level() const;
  void _internal_set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.GeoLocationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isp_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr autonomous_system_number_;
    double latitude_;
    double longitude_;
    bool is_anonymous_proxy_;
    bool is_satellite_provider_;
    bool is_tor_exit_node_;
    bool is_known_malicious_;
    int threat_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class GeoEnrichment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.GeoEnrichment) */ {
 public:
  inline GeoEnrichment() : GeoEnrichment(nullptr) {}
  ~GeoEnrichment() override;
  explicit PROTOBUF_CONSTEXPR GeoEnrichment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoEnrichment(const GeoEnrichment& from);
  GeoEnrichment(GeoEnrichment&& from) noexcept
    : GeoEnrichment() {
    *this = ::std::move(from);
  }

  inline GeoEnrichment& operator=(const GeoEnrichment& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoEnrichment& operator=(GeoEnrichment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoEnrichment& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoEnrichment* internal_default_instance() {
    return reinterpret_cast<const GeoEnrichment*>(
               &_GeoEnrichment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeoEnrichment& a, GeoEnrichment& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoEnrichment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoEnrichment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoEnrichment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeoEnrichment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeoEnrichment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeoEnrichment& from) {
    GeoEnrichment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoEnrichment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.GeoEnrichment";
  }
  protected:
  explicit GeoEnrichment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreatIntelligenceMatchesFieldNumber = 30,
    kDistanceCategoryFieldNumber = 13,
    kSnifferSourceRelationshipFieldNumber = 22,
    kSnifferDestinationRelationshipFieldNumber = 27,
    kThreatIntelligenceSourceFieldNumber = 31,
    kOriginalPrivateIpFieldNumber = 46,
    kDiscoveredPublicIpFieldNumber = 47,
    kIpDiscoveryServiceFieldNumber = 48,
    kEnricherVersionFieldNumber = 50,
    kGeoipMethodFieldNumber = 51,
    kGeoipDatabaseVersionFieldNumber = 52,
    kSnifferNodeGeoFieldNumber = 1,
    kSourceIpGeoFieldNumber = 2,
    kDestinationIpGeoFieldNumber = 3,
    kIpDiscoveryTimeFieldNumber = 49,
    kEnrichmentTimestampFieldNumber = 58,
    kSourceDestinationDistanceKmFieldNumber = 10,
    kSnifferSourceDistanceKmFieldNumber = 20,
    kSourceDestinationSameCountryFieldNumber = 11,
    kSourceDestinationSameContinentFieldNumber = 12,
    kSnifferSourceSameCountryFieldNumber = 21,
    kSnifferDestinationSameCountryFieldNumber = 26,
    kGeographicAnomalyScoreFieldNumber = 32,
    kSnifferDestinationDistanceKmFieldNumber = 25,
    kSuspiciousGeographicPatternFieldNumber = 33,
    kSnifferNodeEnrichedFieldNumber = 40,
    kSourceIpEnrichedFieldNumber = 41,
    kDestinationIpEnrichedFieldNumber = 42,
    kEnrichmentCompleteFieldNumber = 43,
    kPublicIpDiscoveryAttemptedFieldNumber = 45,
    kFallbackCoordinatesUsedFieldNumber = 53,
    kTotalLookupLatencyMsFieldNumber = 54,
    kCacheHitsFieldNumber = 55,
    kCacheMissesFieldNumber = 56,
    kEnrichmentSuccessRateFieldNumber = 57,
  };
  // repeated string threat_intelligence_matches = 30;
  int threat_intelligence_matches_size() const;
  private:
  int _internal_threat_intelligence_matches_size() const;
  public:
  void clear_threat_intelligence_matches();
  const std::string& threat_intelligence_matches(int index) const;
  std::string* mutable_threat_intelligence_matches(int index);
  void set_threat_intelligence_matches(int index, const std::string& value);
  void set_threat_intelligence_matches(int index, std::string&& value);
  void set_threat_intelligence_matches(int index, const char* value);
  void set_threat_intelligence_matches(int index, const char* value, size_t size);
  std::string* add_threat_intelligence_matches();
  void add_threat_intelligence_matches(const std::string& value);
  void add_threat_intelligence_matches(std::string&& value);
  void add_threat_intelligence_matches(const char* value);
  void add_threat_intelligence_matches(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& threat_intelligence_matches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_threat_intelligence_matches();
  private:
  const std::string& _internal_threat_intelligence_matches(int index) const;
  std::string* _internal_add_threat_intelligence_matches();
  public:

  // string distance_category = 13;
  void clear_distance_category();
  const std::string& distance_category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distance_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distance_category();
  PROTOBUF_NODISCARD std::string* release_distance_category();
  void set_allocated_distance_category(std::string* distance_category);
  private:
  const std::string& _internal_distance_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distance_category(const std::string& value);
  std::string* _internal_mutable_distance_category();
  public:

  // string sniffer_source_relationship = 22;
  void clear_sniffer_source_relationship();
  const std::string& sniffer_source_relationship() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sniffer_source_relationship(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sniffer_source_relationship();
  PROTOBUF_NODISCARD std::string* release_sniffer_source_relationship();
  void set_allocated_sniffer_source_relationship(std::string* sniffer_source_relationship);
  private:
  const std::string& _internal_sniffer_source_relationship() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sniffer_source_relationship(const std::string& value);
  std::string* _internal_mutable_sniffer_source_relationship();
  public:

  // string sniffer_destination_relationship = 27;
  void clear_sniffer_destination_relationship();
  const std::string& sniffer_destination_relationship() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sniffer_destination_relationship(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sniffer_destination_relationship();
  PROTOBUF_NODISCARD std::string* release_sniffer_destination_relationship();
  void set_allocated_sniffer_destination_relationship(std::string* sniffer_destination_relationship);
  private:
  const std::string& _internal_sniffer_destination_relationship() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sniffer_destination_relationship(const std::string& value);
  std::string* _internal_mutable_sniffer_destination_relationship();
  public:

  // string threat_intelligence_source = 31;
  void clear_threat_intelligence_source();
  const std::string& threat_intelligence_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threat_intelligence_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threat_intelligence_source();
  PROTOBUF_NODISCARD std::string* release_threat_intelligence_source();
  void set_allocated_threat_intelligence_source(std::string* threat_intelligence_source);
  private:
  const std::string& _internal_threat_intelligence_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threat_intelligence_source(const std::string& value);
  std::string* _internal_mutable_threat_intelligence_source();
  public:

  // string original_private_ip = 46;
  void clear_original_private_ip();
  const std::string& original_private_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_private_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_private_ip();
  PROTOBUF_NODISCARD std::string* release_original_private_ip();
  void set_allocated_original_private_ip(std::string* original_private_ip);
  private:
  const std::string& _internal_original_private_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_private_ip(const std::string& value);
  std::string* _internal_mutable_original_private_ip();
  public:

  // string discovered_public_ip = 47;
  void clear_discovered_public_ip();
  const std::string& discovered_public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_discovered_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_discovered_public_ip();
  PROTOBUF_NODISCARD std::string* release_discovered_public_ip();
  void set_allocated_discovered_public_ip(std::string* discovered_public_ip);
  private:
  const std::string& _internal_discovered_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_discovered_public_ip(const std::string& value);
  std::string* _internal_mutable_discovered_public_ip();
  public:

  // string ip_discovery_service = 48;
  void clear_ip_discovery_service();
  const std::string& ip_discovery_service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_discovery_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_discovery_service();
  PROTOBUF_NODISCARD std::string* release_ip_discovery_service();
  void set_allocated_ip_discovery_service(std::string* ip_discovery_service);
  private:
  const std::string& _internal_ip_discovery_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_discovery_service(const std::string& value);
  std::string* _internal_mutable_ip_discovery_service();
  public:

  // string enricher_version = 50;
  void clear_enricher_version();
  const std::string& enricher_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enricher_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enricher_version();
  PROTOBUF_NODISCARD std::string* release_enricher_version();
  void set_allocated_enricher_version(std::string* enricher_version);
  private:
  const std::string& _internal_enricher_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enricher_version(const std::string& value);
  std::string* _internal_mutable_enricher_version();
  public:

  // string geoip_method = 51;
  void clear_geoip_method();
  const std::string& geoip_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geoip_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geoip_method();
  PROTOBUF_NODISCARD std::string* release_geoip_method();
  void set_allocated_geoip_method(std::string* geoip_method);
  private:
  const std::string& _internal_geoip_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geoip_method(const std::string& value);
  std::string* _internal_mutable_geoip_method();
  public:

  // string geoip_database_version = 52;
  void clear_geoip_database_version();
  const std::string& geoip_database_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geoip_database_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geoip_database_version();
  PROTOBUF_NODISCARD std::string* release_geoip_database_version();
  void set_allocated_geoip_database_version(std::string* geoip_database_version);
  private:
  const std::string& _internal_geoip_database_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geoip_database_version(const std::string& value);
  std::string* _internal_mutable_geoip_database_version();
  public:

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  bool has_sniffer_node_geo() const;
  private:
  bool _internal_has_sniffer_node_geo() const;
  public:
  void clear_sniffer_node_geo();
  const ::protobuf::GeoLocationInfo& sniffer_node_geo() const;
  PROTOBUF_NODISCARD ::protobuf::GeoLocationInfo* release_sniffer_node_geo();
  ::protobuf::GeoLocationInfo* mutable_sniffer_node_geo();
  void set_allocated_sniffer_node_geo(::protobuf::GeoLocationInfo* sniffer_node_geo);
  private:
  const ::protobuf::GeoLocationInfo& _internal_sniffer_node_geo() const;
  ::protobuf::GeoLocationInfo* _internal_mutable_sniffer_node_geo();
  public:
  void unsafe_arena_set_allocated_sniffer_node_geo(
      ::protobuf::GeoLocationInfo* sniffer_node_geo);
  ::protobuf::GeoLocationInfo* unsafe_arena_release_sniffer_node_geo();

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  bool has_source_ip_geo() const;
  private:
  bool _internal_has_source_ip_geo() const;
  public:
  void clear_source_ip_geo();
  const ::protobuf::GeoLocationInfo& source_ip_geo() const;
  PROTOBUF_NODISCARD ::protobuf::GeoLocationInfo* release_source_ip_geo();
  ::protobuf::GeoLocationInfo* mutable_source_ip_geo();
  void set_allocated_source_ip_geo(::protobuf::GeoLocationInfo* source_ip_geo);
  private:
  const ::protobuf::GeoLocationInfo& _internal_source_ip_geo() const;
  ::protobuf::GeoLocationInfo* _internal_mutable_source_ip_geo();
  public:
  void unsafe_arena_set_allocated_source_ip_geo(
      ::protobuf::GeoLocationInfo* source_ip_geo);
  ::protobuf::GeoLocationInfo* unsafe_arena_release_source_ip_geo();

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  bool has_destination_ip_geo() const;
  private:
  bool _internal_has_destination_ip_geo() const;
  public:
  void clear_destination_ip_geo();
  const ::protobuf::GeoLocationInfo& destination_ip_geo() const;
  PROTOBUF_NODISCARD ::protobuf::GeoLocationInfo* release_destination_ip_geo();
  ::protobuf::GeoLocationInfo* mutable_destination_ip_geo();
  void set_allocated_destination_ip_geo(::protobuf::GeoLocationInfo* destination_ip_geo);
  private:
  const ::protobuf::GeoLocationInfo& _internal_destination_ip_geo() const;
  ::protobuf::GeoLocationInfo* _internal_mutable_destination_ip_geo();
  public:
  void unsafe_arena_set_allocated_destination_ip_geo(
      ::protobuf::GeoLocationInfo* destination_ip_geo);
  ::protobuf::GeoLocationInfo* unsafe_arena_release_destination_ip_geo();

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  bool has_ip_discovery_time() const;
  private:
  bool _internal_has_ip_discovery_time() const;
  public:
  void clear_ip_discovery_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ip_discovery_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ip_discovery_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ip_discovery_time();
  void set_allocated_ip_discovery_time(::PROTOBUF_NAMESPACE_ID::Timestamp* ip_discovery_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ip_discovery_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ip_discovery_time();
  public:
  void unsafe_arena_set_allocated_ip_discovery_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ip_discovery_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ip_discovery_time();

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  bool has_enrichment_timestamp() const;
  private:
  bool _internal_has_enrichment_timestamp() const;
  public:
  void clear_enrichment_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& enrichment_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_enrichment_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_enrichment_timestamp();
  void set_allocated_enrichment_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* enrichment_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_enrichment_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_enrichment_timestamp();
  public:
  void unsafe_arena_set_allocated_enrichment_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* enrichment_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_enrichment_timestamp();

  // double source_destination_distance_km = 10;
  void clear_source_destination_distance_km();
  double source_destination_distance_km() const;
  void set_source_destination_distance_km(double value);
  private:
  double _internal_source_destination_distance_km() const;
  void _internal_set_source_destination_distance_km(double value);
  public:

  // double sniffer_source_distance_km = 20;
  void clear_sniffer_source_distance_km();
  double sniffer_source_distance_km() const;
  void set_sniffer_source_distance_km(double value);
  private:
  double _internal_sniffer_source_distance_km() const;
  void _internal_set_sniffer_source_distance_km(double value);
  public:

  // bool source_destination_same_country = 11;
  void clear_source_destination_same_country();
  bool source_destination_same_country() const;
  void set_source_destination_same_country(bool value);
  private:
  bool _internal_source_destination_same_country() const;
  void _internal_set_source_destination_same_country(bool value);
  public:

  // bool source_destination_same_continent = 12;
  void clear_source_destination_same_continent();
  bool source_destination_same_continent() const;
  void set_source_destination_same_continent(bool value);
  private:
  bool _internal_source_destination_same_continent() const;
  void _internal_set_source_destination_same_continent(bool value);
  public:

  // bool sniffer_source_same_country = 21;
  void clear_sniffer_source_same_country();
  bool sniffer_source_same_country() const;
  void set_sniffer_source_same_country(bool value);
  private:
  bool _internal_sniffer_source_same_country() const;
  void _internal_set_sniffer_source_same_country(bool value);
  public:

  // bool sniffer_destination_same_country = 26;
  void clear_sniffer_destination_same_country();
  bool sniffer_destination_same_country() const;
  void set_sniffer_destination_same_country(bool value);
  private:
  bool _internal_sniffer_destination_same_country() const;
  void _internal_set_sniffer_destination_same_country(bool value);
  public:

  // float geographic_anomaly_score = 32;
  void clear_geographic_anomaly_score();
  float geographic_anomaly_score() const;
  void set_geographic_anomaly_score(float value);
  private:
  float _internal_geographic_anomaly_score() const;
  void _internal_set_geographic_anomaly_score(float value);
  public:

  // double sniffer_destination_distance_km = 25;
  void clear_sniffer_destination_distance_km();
  double sniffer_destination_distance_km() const;
  void set_sniffer_destination_distance_km(double value);
  private:
  double _internal_sniffer_destination_distance_km() const;
  void _internal_set_sniffer_destination_distance_km(double value);
  public:

  // bool suspicious_geographic_pattern = 33;
  void clear_suspicious_geographic_pattern();
  bool suspicious_geographic_pattern() const;
  void set_suspicious_geographic_pattern(bool value);
  private:
  bool _internal_suspicious_geographic_pattern() const;
  void _internal_set_suspicious_geographic_pattern(bool value);
  public:

  // bool sniffer_node_enriched = 40;
  void clear_sniffer_node_enriched();
  bool sniffer_node_enriched() const;
  void set_sniffer_node_enriched(bool value);
  private:
  bool _internal_sniffer_node_enriched() const;
  void _internal_set_sniffer_node_enriched(bool value);
  public:

  // bool source_ip_enriched = 41;
  void clear_source_ip_enriched();
  bool source_ip_enriched() const;
  void set_source_ip_enriched(bool value);
  private:
  bool _internal_source_ip_enriched() const;
  void _internal_set_source_ip_enriched(bool value);
  public:

  // bool destination_ip_enriched = 42;
  void clear_destination_ip_enriched();
  bool destination_ip_enriched() const;
  void set_destination_ip_enriched(bool value);
  private:
  bool _internal_destination_ip_enriched() const;
  void _internal_set_destination_ip_enriched(bool value);
  public:

  // bool enrichment_complete = 43;
  void clear_enrichment_complete();
  bool enrichment_complete() const;
  void set_enrichment_complete(bool value);
  private:
  bool _internal_enrichment_complete() const;
  void _internal_set_enrichment_complete(bool value);
  public:

  // bool public_ip_discovery_attempted = 45;
  void clear_public_ip_discovery_attempted();
  bool public_ip_discovery_attempted() const;
  void set_public_ip_discovery_attempted(bool value);
  private:
  bool _internal_public_ip_discovery_attempted() const;
  void _internal_set_public_ip_discovery_attempted(bool value);
  public:

  // bool fallback_coordinates_used = 53;
  void clear_fallback_coordinates_used();
  bool fallback_coordinates_used() const;
  void set_fallback_coordinates_used(bool value);
  private:
  bool _internal_fallback_coordinates_used() const;
  void _internal_set_fallback_coordinates_used(bool value);
  public:

  // float total_lookup_latency_ms = 54;
  void clear_total_lookup_latency_ms();
  float total_lookup_latency_ms() const;
  void set_total_lookup_latency_ms(float value);
  private:
  float _internal_total_lookup_latency_ms() const;
  void _internal_set_total_lookup_latency_ms(float value);
  public:

  // int32 cache_hits = 55;
  void clear_cache_hits();
  int32_t cache_hits() const;
  void set_cache_hits(int32_t value);
  private:
  int32_t _internal_cache_hits() const;
  void _internal_set_cache_hits(int32_t value);
  public:

  // int32 cache_misses = 56;
  void clear_cache_misses();
  int32_t cache_misses() const;
  void set_cache_misses(int32_t value);
  private:
  int32_t _internal_cache_misses() const;
  void _internal_set_cache_misses(int32_t value);
  public:

  // float enrichment_success_rate = 57;
  void clear_enrichment_success_rate();
  float enrichment_success_rate() const;
  void set_enrichment_success_rate(float value);
  private:
  float _internal_enrichment_success_rate() const;
  void _internal_set_enrichment_success_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.GeoEnrichment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> threat_intelligence_matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distance_category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sniffer_source_relationship_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sniffer_destination_relationship_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threat_intelligence_source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_private_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discovered_public_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_discovery_service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enricher_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geoip_method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geoip_database_version_;
    ::protobuf::GeoLocationInfo* sniffer_node_geo_;
    ::protobuf::GeoLocationInfo* source_ip_geo_;
    ::protobuf::GeoLocationInfo* destination_ip_geo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ip_discovery_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* enrichment_timestamp_;
    double source_destination_distance_km_;
    double sniffer_source_distance_km_;
    bool source_destination_same_country_;
    bool source_destination_same_continent_;
    bool sniffer_source_same_country_;
    bool sniffer_destination_same_country_;
    float geographic_anomaly_score_;
    double sniffer_destination_distance_km_;
    bool suspicious_geographic_pattern_;
    bool sniffer_node_enriched_;
    bool source_ip_enriched_;
    bool destination_ip_enriched_;
    bool enrichment_complete_;
    bool public_ip_discovery_attempted_;
    bool fallback_coordinates_used_;
    float total_lookup_latency_ms_;
    int32_t cache_hits_;
    int32_t cache_misses_;
    float enrichment_success_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class TimeWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.TimeWindow) */ {
 public:
  inline TimeWindow() : TimeWindow(nullptr) {}
  ~TimeWindow() override;
  explicit PROTOBUF_CONSTEXPR TimeWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeWindow(const TimeWindow& from);
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeWindow& from) {
    TimeWindow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.TimeWindow";
  }
  protected:
  explicit TimeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimeWindow_WindowType WindowType;
  static constexpr WindowType SLIDING =
    TimeWindow_WindowType_SLIDING;
  static constexpr WindowType TUMBLING =
    TimeWindow_WindowType_TUMBLING;
  static constexpr WindowType SESSION_BASED =
    TimeWindow_WindowType_SESSION_BASED;
  static constexpr WindowType ADAPTIVE =
    TimeWindow_WindowType_ADAPTIVE;
  static inline bool WindowType_IsValid(int value) {
    return TimeWindow_WindowType_IsValid(value);
  }
  static constexpr WindowType WindowType_MIN =
    TimeWindow_WindowType_WindowType_MIN;
  static constexpr WindowType WindowType_MAX =
    TimeWindow_WindowType_WindowType_MAX;
  static constexpr int WindowType_ARRAYSIZE =
    TimeWindow_WindowType_WindowType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WindowType_descriptor() {
    return TimeWindow_WindowType_descriptor();
  }
  template<typename T>
  static inline const std::string& WindowType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowType_Name.");
    return TimeWindow_WindowType_Name(enum_t_value);
  }
  static inline bool WindowType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowType* value) {
    return TimeWindow_WindowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWindowStartFieldNumber = 1,
    kWindowEndFieldNumber = 2,
    kWindowDurationFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kWindowTypeFieldNumber = 5,
  };
  // .google.protobuf.Timestamp window_start = 1;
  bool has_window_start() const;
  private:
  bool _internal_has_window_start() const;
  public:
  void clear_window_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_window_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_window_start();
  void set_allocated_window_start(::PROTOBUF_NAMESPACE_ID::Timestamp* window_start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_window_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_window_start();
  public:
  void unsafe_arena_set_allocated_window_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* window_start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_window_start();

  // .google.protobuf.Timestamp window_end = 2;
  bool has_window_end() const;
  private:
  bool _internal_has_window_end() const;
  public:
  void clear_window_end();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_end() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_window_end();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_window_end();
  void set_allocated_window_end(::PROTOBUF_NAMESPACE_ID::Timestamp* window_end);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_window_end() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_window_end();
  public:
  void unsafe_arena_set_allocated_window_end(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* window_end);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_window_end();

  // .google.protobuf.Duration window_duration = 3;
  bool has_window_duration() const;
  private:
  bool _internal_has_window_duration() const;
  public:
  void clear_window_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& window_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_window_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_window_duration();
  void set_allocated_window_duration(::PROTOBUF_NAMESPACE_ID::Duration* window_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_window_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_window_duration();
  public:
  void unsafe_arena_set_allocated_window_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* window_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_window_duration();

  // uint64 sequence_number = 4;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // .protobuf.TimeWindow.WindowType window_type = 5;
  void clear_window_type();
  ::protobuf::TimeWindow_WindowType window_type() const;
  void set_window_type(::protobuf::TimeWindow_WindowType value);
  private:
  ::protobuf::TimeWindow_WindowType _internal_window_type() const;
  void _internal_set_window_type(::protobuf::TimeWindow_WindowType value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.TimeWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* window_start_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* window_end_;
    ::PROTOBUF_NAMESPACE_ID::Duration* window_duration_;
    uint64_t sequence_number_;
    int window_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class FlowAggregation_ProtocolDistributionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_ProtocolDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_ProtocolDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  FlowAggregation_ProtocolDistributionEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlowAggregation_ProtocolDistributionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlowAggregation_ProtocolDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowAggregation_ProtocolDistributionEntry_DoNotUse& other);
  static const FlowAggregation_ProtocolDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_ProtocolDistributionEntry_DoNotUse*>(&_FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.FlowAggregation.ProtocolDistributionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class FlowAggregation_PortDistributionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_PortDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_PortDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  FlowAggregation_PortDistributionEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlowAggregation_PortDistributionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlowAggregation_PortDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowAggregation_PortDistributionEntry_DoNotUse& other);
  static const FlowAggregation_PortDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_PortDistributionEntry_DoNotUse*>(&_FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.FlowAggregation.PortDistributionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class FlowAggregation_CountryDistributionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_CountryDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlowAggregation_CountryDistributionEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  FlowAggregation_CountryDistributionEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FlowAggregation_CountryDistributionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlowAggregation_CountryDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlowAggregation_CountryDistributionEntry_DoNotUse& other);
  static const FlowAggregation_CountryDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_CountryDistributionEntry_DoNotUse*>(&_FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.FlowAggregation.CountryDistributionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class FlowAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.FlowAggregation) */ {
 public:
  inline FlowAggregation() : FlowAggregation(nullptr) {}
  ~FlowAggregation() override;
  explicit PROTOBUF_CONSTEXPR FlowAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowAggregation(const FlowAggregation& from);
  FlowAggregation(FlowAggregation&& from) noexcept
    : FlowAggregation() {
    *this = ::std::move(from);
  }

  inline FlowAggregation& operator=(const FlowAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowAggregation& operator=(FlowAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowAggregation* internal_default_instance() {
    return reinterpret_cast<const FlowAggregation*>(
               &_FlowAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FlowAggregation& a, FlowAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowAggregation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlowAggregation& from) {
    FlowAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.FlowAggregation";
  }
  protected:
  explicit FlowAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProtocolDistributionFieldNumber = 5,
    kPortDistributionFieldNumber = 6,
    kCountryDistributionFieldNumber = 7,
    kTimeWindowFieldNumber = 1,
    kTotalFlowsInWindowFieldNumber = 2,
    kTotalPacketsInWindowFieldNumber = 3,
    kTotalBytesInWindowFieldNumber = 4,
    kWindowAnomalyScoreFieldNumber = 8,
  };
  // map<string, uint64> protocol_distribution = 5;
  int protocol_distribution_size() const;
  private:
  int _internal_protocol_distribution_size() const;
  public:
  void clear_protocol_distribution();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_protocol_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_protocol_distribution();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      protocol_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_protocol_distribution();

  // map<string, uint64> port_distribution = 6;
  int port_distribution_size() const;
  private:
  int _internal_port_distribution_size() const;
  public:
  void clear_port_distribution();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_port_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_port_distribution();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      port_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_port_distribution();

  // map<string, uint64> country_distribution = 7;
  int country_distribution_size() const;
  private:
  int _internal_country_distribution_size() const;
  public:
  void clear_country_distribution();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_country_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_country_distribution();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      country_distribution() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_country_distribution();

  // .protobuf.TimeWindow time_window = 1;
  bool has_time_window() const;
  private:
  bool _internal_has_time_window() const;
  public:
  void clear_time_window();
  const ::protobuf::TimeWindow& time_window() const;
  PROTOBUF_NODISCARD ::protobuf::TimeWindow* release_time_window();
  ::protobuf::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::protobuf::TimeWindow* time_window);
  private:
  const ::protobuf::TimeWindow& _internal_time_window() const;
  ::protobuf::TimeWindow* _internal_mutable_time_window();
  public:
  void unsafe_arena_set_allocated_time_window(
      ::protobuf::TimeWindow* time_window);
  ::protobuf::TimeWindow* unsafe_arena_release_time_window();

  // uint64 total_flows_in_window = 2;
  void clear_total_flows_in_window();
  uint64_t total_flows_in_window() const;
  void set_total_flows_in_window(uint64_t value);
  private:
  uint64_t _internal_total_flows_in_window() const;
  void _internal_set_total_flows_in_window(uint64_t value);
  public:

  // uint64 total_packets_in_window = 3;
  void clear_total_packets_in_window();
  uint64_t total_packets_in_window() const;
  void set_total_packets_in_window(uint64_t value);
  private:
  uint64_t _internal_total_packets_in_window() const;
  void _internal_set_total_packets_in_window(uint64_t value);
  public:

  // uint64 total_bytes_in_window = 4;
  void clear_total_bytes_in_window();
  uint64_t total_bytes_in_window() const;
  void set_total_bytes_in_window(uint64_t value);
  private:
  uint64_t _internal_total_bytes_in_window() const;
  void _internal_set_total_bytes_in_window(uint64_t value);
  public:

  // double window_anomaly_score = 8;
  void clear_window_anomaly_score();
  double window_anomaly_score() const;
  void set_window_anomaly_score(double value);
  private:
  double _internal_window_anomaly_score() const;
  void _internal_set_window_anomaly_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.FlowAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlowAggregation_ProtocolDistributionEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> protocol_distribution_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlowAggregation_PortDistributionEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> port_distribution_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FlowAggregation_CountryDistributionEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> country_distribution_;
    ::protobuf::TimeWindow* time_window_;
    uint64_t total_flows_in_window_;
    uint64_t total_packets_in_window_;
    uint64_t total_bytes_in_window_;
    double window_anomaly_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class ModelPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ModelPrediction) */ {
 public:
  inline ModelPrediction() : ModelPrediction(nullptr) {}
  ~ModelPrediction() override;
  explicit PROTOBUF_CONSTEXPR ModelPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelPrediction(const ModelPrediction& from);
  ModelPrediction(ModelPrediction&& from) noexcept
    : ModelPrediction() {
    *this = ::std::move(from);
  }

  inline ModelPrediction& operator=(const ModelPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPrediction& operator=(ModelPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPrediction* internal_default_instance() {
    return reinterpret_cast<const ModelPrediction*>(
               &_ModelPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModelPrediction& a, ModelPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPrediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelPrediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelPrediction& from) {
    ModelPrediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.ModelPrediction";
  }
  protected:
  explicit ModelPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModelPrediction_ModelType ModelType;
  static constexpr ModelType RANDOM_FOREST_GENERAL =
    ModelPrediction_ModelType_RANDOM_FOREST_GENERAL;
  static constexpr ModelType LIGHTGBM_DDOS =
    ModelPrediction_ModelType_LIGHTGBM_DDOS;
  static constexpr ModelType NEURAL_NETWORK_RANSOMWARE =
    ModelPrediction_ModelType_NEURAL_NETWORK_RANSOMWARE;
  static constexpr ModelType ENSEMBLE_TRICAPA =
    ModelPrediction_ModelType_ENSEMBLE_TRICAPA;
  static constexpr ModelType INTERNAL_TRAFFIC_CLASSIFIER =
    ModelPrediction_ModelType_INTERNAL_TRAFFIC_CLASSIFIER;
  static constexpr ModelType TRANSFORMER_ADVANCED =
    ModelPrediction_ModelType_TRANSFORMER_ADVANCED;
  static constexpr ModelType RANDOM_FOREST_DDOS =
    ModelPrediction_ModelType_RANDOM_FOREST_DDOS;
  static constexpr ModelType RANDOM_FOREST_RANSOMWARE =
    ModelPrediction_ModelType_RANDOM_FOREST_RANSOMWARE;
  static inline bool ModelType_IsValid(int value) {
    return ModelPrediction_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN =
    ModelPrediction_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX =
    ModelPrediction_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE =
    ModelPrediction_ModelType_ModelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelType_descriptor() {
    return ModelPrediction_ModelType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelType_Name.");
    return ModelPrediction_ModelType_Name(enum_t_value);
  }
  static inline bool ModelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModelType* value) {
    return ModelPrediction_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClassProbabilitiesFieldNumber = 6,
    kModelNameFieldNumber = 1,
    kModelVersionFieldNumber = 2,
    kPredictionClassFieldNumber = 4,
    kPredictionTimestampFieldNumber = 7,
    kProcessingDurationFieldNumber = 8,
    kConfidenceScoreFieldNumber = 5,
    kModelTypeFieldNumber = 3,
  };
  // repeated double class_probabilities = 6;
  int class_probabilities_size() const;
  private:
  int _internal_class_probabilities_size() const;
  public:
  void clear_class_probabilities();
  private:
  double _internal_class_probabilities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_class_probabilities() const;
  void _internal_add_class_probabilities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_class_probabilities();
  public:
  double class_probabilities(int index) const;
  void set_class_probabilities(int index, double value);
  void add_class_probabilities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      class_probabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_class_probabilities();

  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string model_version = 2;
  void clear_model_version();
  const std::string& model_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version();
  PROTOBUF_NODISCARD std::string* release_model_version();
  void set_allocated_model_version(std::string* model_version);
  private:
  const std::string& _internal_model_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version(const std::string& value);
  std::string* _internal_mutable_model_version();
  public:

  // string prediction_class = 4;
  void clear_prediction_class();
  const std::string& prediction_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prediction_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prediction_class();
  PROTOBUF_NODISCARD std::string* release_prediction_class();
  void set_allocated_prediction_class(std::string* prediction_class);
  private:
  const std::string& _internal_prediction_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prediction_class(const std::string& value);
  std::string* _internal_mutable_prediction_class();
  public:

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  bool has_prediction_timestamp() const;
  private:
  bool _internal_has_prediction_timestamp() const;
  public:
  void clear_prediction_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& prediction_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_prediction_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_prediction_timestamp();
  void set_allocated_prediction_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* prediction_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_prediction_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_prediction_timestamp();
  public:
  void unsafe_arena_set_allocated_prediction_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* prediction_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_prediction_timestamp();

  // .google.protobuf.Duration processing_duration = 8;
  bool has_processing_duration() const;
  private:
  bool _internal_has_processing_duration() const;
  public:
  void clear_processing_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& processing_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_processing_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_processing_duration();
  void set_allocated_processing_duration(::PROTOBUF_NAMESPACE_ID::Duration* processing_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_processing_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_processing_duration();
  public:
  void unsafe_arena_set_allocated_processing_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* processing_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_processing_duration();

  // double confidence_score = 5;
  void clear_confidence_score();
  double confidence_score() const;
  void set_confidence_score(double value);
  private:
  double _internal_confidence_score() const;
  void _internal_set_confidence_score(double value);
  public:

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  void clear_model_type();
  ::protobuf::ModelPrediction_ModelType model_type() const;
  void set_model_type(::protobuf::ModelPrediction_ModelType value);
  private:
  ::protobuf::ModelPrediction_ModelType _internal_model_type() const;
  void _internal_set_model_type(::protobuf::ModelPrediction_ModelType value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.ModelPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > class_probabilities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prediction_class_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* prediction_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Duration* processing_duration_;
    double confidence_score_;
    int model_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse& other);
  static const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse*>(&_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.TricapaMLAnalysis.FeatureImportanceScoresEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class TricapaMLAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.TricapaMLAnalysis) */ {
 public:
  inline TricapaMLAnalysis() : TricapaMLAnalysis(nullptr) {}
  ~TricapaMLAnalysis() override;
  explicit PROTOBUF_CONSTEXPR TricapaMLAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TricapaMLAnalysis(const TricapaMLAnalysis& from);
  TricapaMLAnalysis(TricapaMLAnalysis&& from) noexcept
    : TricapaMLAnalysis() {
    *this = ::std::move(from);
  }

  inline TricapaMLAnalysis& operator=(const TricapaMLAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline TricapaMLAnalysis& operator=(TricapaMLAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TricapaMLAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const TricapaMLAnalysis* internal_default_instance() {
    return reinterpret_cast<const TricapaMLAnalysis*>(
               &_TricapaMLAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TricapaMLAnalysis& a, TricapaMLAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(TricapaMLAnalysis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TricapaMLAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TricapaMLAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TricapaMLAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TricapaMLAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TricapaMLAnalysis& from) {
    TricapaMLAnalysis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TricapaMLAnalysis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.TricapaMLAnalysis";
  }
  protected:
  explicit TricapaMLAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLevel3SpecializedPredictionsFieldNumber = 6,
    kLevel2SpecializedPredictionsFieldNumber = 9,
    kModelsActivatedFieldNumber = 11,
    kFeatureImportanceScoresFieldNumber = 12,
    kTrafficContextFieldNumber = 5,
    kFinalThreatClassificationFieldNumber = 7,
    kLevel1GeneralDetectionFieldNumber = 1,
    kLevel2ContextClassificationFieldNumber = 4,
    kTotalAnalysisDurationFieldNumber = 10,
    kLevel1ConfidenceFieldNumber = 3,
    kEnsembleConfidenceFieldNumber = 8,
    kAttackDetectedLevel1FieldNumber = 2,
    kRequiresHumanReviewFieldNumber = 13,
  };
  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  int level3_specialized_predictions_size() const;
  private:
  int _internal_level3_specialized_predictions_size() const;
  public:
  void clear_level3_specialized_predictions();
  ::protobuf::ModelPrediction* mutable_level3_specialized_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
      mutable_level3_specialized_predictions();
  private:
  const ::protobuf::ModelPrediction& _internal_level3_specialized_predictions(int index) const;
  ::protobuf::ModelPrediction* _internal_add_level3_specialized_predictions();
  public:
  const ::protobuf::ModelPrediction& level3_specialized_predictions(int index) const;
  ::protobuf::ModelPrediction* add_level3_specialized_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
      level3_specialized_predictions() const;

  // repeated .protobuf.ModelPrediction level2_specialized_predictions = 9;
  int level2_specialized_predictions_size() const;
  private:
  int _internal_level2_specialized_predictions_size() const;
  public:
  void clear_level2_specialized_predictions();
  ::protobuf::ModelPrediction* mutable_level2_specialized_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
      mutable_level2_specialized_predictions();
  private:
  const ::protobuf::ModelPrediction& _internal_level2_specialized_predictions(int index) const;
  ::protobuf::ModelPrediction* _internal_add_level2_specialized_predictions();
  public:
  const ::protobuf::ModelPrediction& level2_specialized_predictions(int index) const;
  ::protobuf::ModelPrediction* add_level2_specialized_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
      level2_specialized_predictions() const;

  // repeated string models_activated = 11;
  int models_activated_size() const;
  private:
  int _internal_models_activated_size() const;
  public:
  void clear_models_activated();
  const std::string& models_activated(int index) const;
  std::string* mutable_models_activated(int index);
  void set_models_activated(int index, const std::string& value);
  void set_models_activated(int index, std::string&& value);
  void set_models_activated(int index, const char* value);
  void set_models_activated(int index, const char* value, size_t size);
  std::string* add_models_activated();
  void add_models_activated(const std::string& value);
  void add_models_activated(std::string&& value);
  void add_models_activated(const char* value);
  void add_models_activated(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& models_activated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_models_activated();
  private:
  const std::string& _internal_models_activated(int index) const;
  std::string* _internal_add_models_activated();
  public:

  // map<string, double> feature_importance_scores = 12;
  int feature_importance_scores_size() const;
  private:
  int _internal_feature_importance_scores_size() const;
  public:
  void clear_feature_importance_scores();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_feature_importance_scores() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_feature_importance_scores();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      feature_importance_scores() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_feature_importance_scores();

  // string traffic_context = 5;
  void clear_traffic_context();
  const std::string& traffic_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traffic_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traffic_context();
  PROTOBUF_NODISCARD std::string* release_traffic_context();
  void set_allocated_traffic_context(std::string* traffic_context);
  private:
  const std::string& _internal_traffic_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traffic_context(const std::string& value);
  std::string* _internal_mutable_traffic_context();
  public:

  // string final_threat_classification = 7;
  void clear_final_threat_classification();
  const std::string& final_threat_classification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_threat_classification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_threat_classification();
  PROTOBUF_NODISCARD std::string* release_final_threat_classification();
  void set_allocated_final_threat_classification(std::string* final_threat_classification);
  private:
  const std::string& _internal_final_threat_classification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_threat_classification(const std::string& value);
  std::string* _internal_mutable_final_threat_classification();
  public:

  // .protobuf.ModelPrediction level1_general_detection = 1;
  bool has_level1_general_detection() const;
  private:
  bool _internal_has_level1_general_detection() const;
  public:
  void clear_level1_general_detection();
  const ::protobuf::ModelPrediction& level1_general_detection() const;
  PROTOBUF_NODISCARD ::protobuf::ModelPrediction* release_level1_general_detection();
  ::protobuf::ModelPrediction* mutable_level1_general_detection();
  void set_allocated_level1_general_detection(::protobuf::ModelPrediction* level1_general_detection);
  private:
  const ::protobuf::ModelPrediction& _internal_level1_general_detection() const;
  ::protobuf::ModelPrediction* _internal_mutable_level1_general_detection();
  public:
  void unsafe_arena_set_allocated_level1_general_detection(
      ::protobuf::ModelPrediction* level1_general_detection);
  ::protobuf::ModelPrediction* unsafe_arena_release_level1_general_detection();

  // .protobuf.ModelPrediction level2_context_classification = 4;
  bool has_level2_context_classification() const;
  private:
  bool _internal_has_level2_context_classification() const;
  public:
  void clear_level2_context_classification();
  const ::protobuf::ModelPrediction& level2_context_classification() const;
  PROTOBUF_NODISCARD ::protobuf::ModelPrediction* release_level2_context_classification();
  ::protobuf::ModelPrediction* mutable_level2_context_classification();
  void set_allocated_level2_context_classification(::protobuf::ModelPrediction* level2_context_classification);
  private:
  const ::protobuf::ModelPrediction& _internal_level2_context_classification() const;
  ::protobuf::ModelPrediction* _internal_mutable_level2_context_classification();
  public:
  void unsafe_arena_set_allocated_level2_context_classification(
      ::protobuf::ModelPrediction* level2_context_classification);
  ::protobuf::ModelPrediction* unsafe_arena_release_level2_context_classification();

  // .google.protobuf.Duration total_analysis_duration = 10;
  bool has_total_analysis_duration() const;
  private:
  bool _internal_has_total_analysis_duration() const;
  public:
  void clear_total_analysis_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_analysis_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_analysis_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_analysis_duration();
  void set_allocated_total_analysis_duration(::PROTOBUF_NAMESPACE_ID::Duration* total_analysis_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_analysis_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_analysis_duration();
  public:
  void unsafe_arena_set_allocated_total_analysis_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_analysis_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_analysis_duration();

  // double level1_confidence = 3;
  void clear_level1_confidence();
  double level1_confidence() const;
  void set_level1_confidence(double value);
  private:
  double _internal_level1_confidence() const;
  void _internal_set_level1_confidence(double value);
  public:

  // double ensemble_confidence = 8;
  void clear_ensemble_confidence();
  double ensemble_confidence() const;
  void set_ensemble_confidence(double value);
  private:
  double _internal_ensemble_confidence() const;
  void _internal_set_ensemble_confidence(double value);
  public:

  // bool attack_detected_level1 = 2;
  void clear_attack_detected_level1();
  bool attack_detected_level1() const;
  void set_attack_detected_level1(bool value);
  private:
  bool _internal_attack_detected_level1() const;
  void _internal_set_attack_detected_level1(bool value);
  public:

  // bool requires_human_review = 13;
  void clear_requires_human_review();
  bool requires_human_review() const;
  void set_requires_human_review(bool value);
  private:
  bool _internal_requires_human_review() const;
  void _internal_set_requires_human_review(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.TricapaMLAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction > level3_specialized_predictions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction > level2_specialized_predictions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> models_activated_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> feature_importance_scores_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traffic_context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_threat_classification_;
    ::protobuf::ModelPrediction* level1_general_detection_;
    ::protobuf::ModelPrediction* level2_context_classification_;
    ::PROTOBUF_NAMESPACE_ID::Duration* total_analysis_duration_;
    double level1_confidence_;
    double ensemble_confidence_;
    bool attack_detected_level1_;
    bool requires_human_review_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class DistributedNode_NodeCapabilitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DistributedNode_NodeCapabilitiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DistributedNode_NodeCapabilitiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DistributedNode_NodeCapabilitiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DistributedNode_NodeCapabilitiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DistributedNode_NodeCapabilitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DistributedNode_NodeCapabilitiesEntry_DoNotUse& other);
  static const DistributedNode_NodeCapabilitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DistributedNode_NodeCapabilitiesEntry_DoNotUse*>(&_DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.DistributedNode.NodeCapabilitiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.DistributedNode.NodeCapabilitiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class DistributedNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.DistributedNode) */ {
 public:
  inline DistributedNode() : DistributedNode(nullptr) {}
  ~DistributedNode() override;
  explicit PROTOBUF_CONSTEXPR DistributedNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistributedNode(const DistributedNode& from);
  DistributedNode(DistributedNode&& from) noexcept
    : DistributedNode() {
    *this = ::std::move(from);
  }

  inline DistributedNode& operator=(const DistributedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributedNode& operator=(DistributedNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributedNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributedNode* internal_default_instance() {
    return reinterpret_cast<const DistributedNode*>(
               &_DistributedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DistributedNode& a, DistributedNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DistributedNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributedNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistributedNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistributedNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DistributedNode& from) {
    DistributedNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributedNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.DistributedNode";
  }
  protected:
  explicit DistributedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef DistributedNode_NodeRole NodeRole;
  static constexpr NodeRole PACKET_SNIFFER =
    DistributedNode_NodeRole_PACKET_SNIFFER;
  static constexpr NodeRole FEATURE_PROCESSOR =
    DistributedNode_NodeRole_FEATURE_PROCESSOR;
  static constexpr NodeRole GEOIP_ENRICHER =
    DistributedNode_NodeRole_GEOIP_ENRICHER;
  static constexpr NodeRole ML_ANALYZER =
    DistributedNode_NodeRole_ML_ANALYZER;
  static constexpr NodeRole THREAT_DETECTOR =
    DistributedNode_NodeRole_THREAT_DETECTOR;
  static constexpr NodeRole FIREWALL_CONTROLLER =
    DistributedNode_NodeRole_FIREWALL_CONTROLLER;
  static constexpr NodeRole DATA_AGGREGATOR =
    DistributedNode_NodeRole_DATA_AGGREGATOR;
  static constexpr NodeRole DASHBOARD_VISUALIZER =
    DistributedNode_NodeRole_DASHBOARD_VISUALIZER;
  static constexpr NodeRole CLUSTER_COORDINATOR =
    DistributedNode_NodeRole_CLUSTER_COORDINATOR;
  static inline bool NodeRole_IsValid(int value) {
    return DistributedNode_NodeRole_IsValid(value);
  }
  static constexpr NodeRole NodeRole_MIN =
    DistributedNode_NodeRole_NodeRole_MIN;
  static constexpr NodeRole NodeRole_MAX =
    DistributedNode_NodeRole_NodeRole_MAX;
  static constexpr int NodeRole_ARRAYSIZE =
    DistributedNode_NodeRole_NodeRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NodeRole_descriptor() {
    return DistributedNode_NodeRole_descriptor();
  }
  template<typename T>
  static inline const std::string& NodeRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NodeRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NodeRole_Name.");
    return DistributedNode_NodeRole_Name(enum_t_value);
  }
  static inline bool NodeRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NodeRole* value) {
    return DistributedNode_NodeRole_Parse(name, value);
  }

  typedef DistributedNode_NodeStatus NodeStatus;
  static constexpr NodeStatus ACTIVE =
    DistributedNode_NodeStatus_ACTIVE;
  static constexpr NodeStatus STARTING =
    DistributedNode_NodeStatus_STARTING;
  static constexpr NodeStatus STOPPING =
    DistributedNode_NodeStatus_STOPPING;
  static constexpr NodeStatus ERROR =
    DistributedNode_NodeStatus_ERROR;
  static constexpr NodeStatus MAINTENANCE =
    DistributedNode_NodeStatus_MAINTENANCE;
  static constexpr NodeStatus OVERLOADED =
    DistributedNode_NodeStatus_OVERLOADED;
  static inline bool NodeStatus_IsValid(int value) {
    return DistributedNode_NodeStatus_IsValid(value);
  }
  static constexpr NodeStatus NodeStatus_MIN =
    DistributedNode_NodeStatus_NodeStatus_MIN;
  static constexpr NodeStatus NodeStatus_MAX =
    DistributedNode_NodeStatus_NodeStatus_MAX;
  static constexpr int NodeStatus_ARRAYSIZE =
    DistributedNode_NodeStatus_NodeStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NodeStatus_descriptor() {
    return DistributedNode_NodeStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& NodeStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NodeStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NodeStatus_Name.");
    return DistributedNode_NodeStatus_Name(enum_t_value);
  }
  static inline bool NodeStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NodeStatus* value) {
    return DistributedNode_NodeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeCapabilitiesFieldNumber = 20,
    kSupportedProtocolsFieldNumber = 21,
    kNodeIdFieldNumber = 1,
    kNodeHostnameFieldNumber = 2,
    kNodeIpAddressFieldNumber = 3,
    kPhysicalLocationFieldNumber = 4,
    kOperatingSystemFieldNumber = 8,
    kOsVersionFieldNumber = 9,
    kAgentVersionFieldNumber = 10,
    kContainerIdFieldNumber = 12,
    kClusterNameFieldNumber = 13,
    kConfigurationVersionFieldNumber = 22,
    kLastHeartbeatFieldNumber = 7,
    kUptimeFieldNumber = 19,
    kNodeRoleFieldNumber = 5,
    kNodeStatusFieldNumber = 6,
    kProcessIdFieldNumber = 11,
    kCpuUsagePercentFieldNumber = 15,
    kMemoryUsageMbFieldNumber = 16,
    kActiveConnectionsFieldNumber = 17,
    kQueueDepthFieldNumber = 18,
  };
  // map<string, string> node_capabilities = 20;
  int node_capabilities_size() const;
  private:
  int _internal_node_capabilities_size() const;
  public:
  void clear_node_capabilities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_node_capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_node_capabilities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      node_capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_node_capabilities();

  // repeated string supported_protocols = 21;
  int supported_protocols_size() const;
  private:
  int _internal_supported_protocols_size() const;
  public:
  void clear_supported_protocols();
  const std::string& supported_protocols(int index) const;
  std::string* mutable_supported_protocols(int index);
  void set_supported_protocols(int index, const std::string& value);
  void set_supported_protocols(int index, std::string&& value);
  void set_supported_protocols(int index, const char* value);
  void set_supported_protocols(int index, const char* value, size_t size);
  std::string* add_supported_protocols();
  void add_supported_protocols(const std::string& value);
  void add_supported_protocols(std::string&& value);
  void add_supported_protocols(const char* value);
  void add_supported_protocols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_protocols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_protocols();
  private:
  const std::string& _internal_supported_protocols(int index) const;
  std::string* _internal_add_supported_protocols();
  public:

  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string node_hostname = 2;
  void clear_node_hostname();
  const std::string& node_hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_hostname();
  PROTOBUF_NODISCARD std::string* release_node_hostname();
  void set_allocated_node_hostname(std::string* node_hostname);
  private:
  const std::string& _internal_node_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_hostname(const std::string& value);
  std::string* _internal_mutable_node_hostname();
  public:

  // string node_ip_address = 3;
  void clear_node_ip_address();
  const std::string& node_ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_ip_address();
  PROTOBUF_NODISCARD std::string* release_node_ip_address();
  void set_allocated_node_ip_address(std::string* node_ip_address);
  private:
  const std::string& _internal_node_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_ip_address(const std::string& value);
  std::string* _internal_mutable_node_ip_address();
  public:

  // string physical_location = 4;
  void clear_physical_location();
  const std::string& physical_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_physical_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_physical_location();
  PROTOBUF_NODISCARD std::string* release_physical_location();
  void set_allocated_physical_location(std::string* physical_location);
  private:
  const std::string& _internal_physical_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_physical_location(const std::string& value);
  std::string* _internal_mutable_physical_location();
  public:

  // string operating_system = 8;
  void clear_operating_system();
  const std::string& operating_system() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operating_system(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operating_system();
  PROTOBUF_NODISCARD std::string* release_operating_system();
  void set_allocated_operating_system(std::string* operating_system);
  private:
  const std::string& _internal_operating_system() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operating_system(const std::string& value);
  std::string* _internal_mutable_operating_system();
  public:

  // string os_version = 9;
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // string agent_version = 10;
  void clear_agent_version();
  const std::string& agent_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_version();
  PROTOBUF_NODISCARD std::string* release_agent_version();
  void set_allocated_agent_version(std::string* agent_version);
  private:
  const std::string& _internal_agent_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_version(const std::string& value);
  std::string* _internal_mutable_agent_version();
  public:

  // string container_id = 12;
  void clear_container_id();
  const std::string& container_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_id();
  PROTOBUF_NODISCARD std::string* release_container_id();
  void set_allocated_container_id(std::string* container_id);
  private:
  const std::string& _internal_container_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_id(const std::string& value);
  std::string* _internal_mutable_container_id();
  public:

  // string cluster_name = 13;
  void clear_cluster_name();
  const std::string& cluster_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_name();
  PROTOBUF_NODISCARD std::string* release_cluster_name();
  void set_allocated_cluster_name(std::string* cluster_name);
  private:
  const std::string& _internal_cluster_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_name(const std::string& value);
  std::string* _internal_mutable_cluster_name();
  public:

  // string configuration_version = 22;
  void clear_configuration_version();
  const std::string& configuration_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configuration_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configuration_version();
  PROTOBUF_NODISCARD std::string* release_configuration_version();
  void set_allocated_configuration_version(std::string* configuration_version);
  private:
  const std::string& _internal_configuration_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configuration_version(const std::string& value);
  std::string* _internal_mutable_configuration_version();
  public:

  // .google.protobuf.Timestamp last_heartbeat = 7;
  bool has_last_heartbeat() const;
  private:
  bool _internal_has_last_heartbeat() const;
  public:
  void clear_last_heartbeat();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_heartbeat() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_heartbeat();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_heartbeat();
  void set_allocated_last_heartbeat(::PROTOBUF_NAMESPACE_ID::Timestamp* last_heartbeat);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_heartbeat() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_heartbeat();
  public:
  void unsafe_arena_set_allocated_last_heartbeat(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_heartbeat);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_heartbeat();

  // .google.protobuf.Duration uptime = 19;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  const ::PROTOBUF_NAMESPACE_ID::Duration& uptime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_uptime();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_uptime();
  void set_allocated_uptime(::PROTOBUF_NAMESPACE_ID::Duration* uptime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_uptime() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_uptime();
  public:
  void unsafe_arena_set_allocated_uptime(
      ::PROTOBUF_NAMESPACE_ID::Duration* uptime);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_uptime();

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  void clear_node_role();
  ::protobuf::DistributedNode_NodeRole node_role() const;
  void set_node_role(::protobuf::DistributedNode_NodeRole value);
  private:
  ::protobuf::DistributedNode_NodeRole _internal_node_role() const;
  void _internal_set_node_role(::protobuf::DistributedNode_NodeRole value);
  public:

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  void clear_node_status();
  ::protobuf::DistributedNode_NodeStatus node_status() const;
  void set_node_status(::protobuf::DistributedNode_NodeStatus value);
  private:
  ::protobuf::DistributedNode_NodeStatus _internal_node_status() const;
  void _internal_set_node_status(::protobuf::DistributedNode_NodeStatus value);
  public:

  // int32 process_id = 11;
  void clear_process_id();
  int32_t process_id() const;
  void set_process_id(int32_t value);
  private:
  int32_t _internal_process_id() const;
  void _internal_set_process_id(int32_t value);
  public:

  // float cpu_usage_percent = 15;
  void clear_cpu_usage_percent();
  float cpu_usage_percent() const;
  void set_cpu_usage_percent(float value);
  private:
  float _internal_cpu_usage_percent() const;
  void _internal_set_cpu_usage_percent(float value);
  public:

  // float memory_usage_mb = 16;
  void clear_memory_usage_mb();
  float memory_usage_mb() const;
  void set_memory_usage_mb(float value);
  private:
  float _internal_memory_usage_mb() const;
  void _internal_set_memory_usage_mb(float value);
  public:

  // int32 active_connections = 17;
  void clear_active_connections();
  int32_t active_connections() const;
  void set_active_connections(int32_t value);
  private:
  int32_t _internal_active_connections() const;
  void _internal_set_active_connections(int32_t value);
  public:

  // int32 queue_depth = 18;
  void clear_queue_depth();
  int32_t queue_depth() const;
  void set_queue_depth(int32_t value);
  private:
  int32_t _internal_queue_depth() const;
  void _internal_set_queue_depth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.DistributedNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DistributedNode_NodeCapabilitiesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> node_capabilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_protocols_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_ip_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physical_location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operating_system_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_heartbeat_;
    ::PROTOBUF_NAMESPACE_ID::Duration* uptime_;
    int node_role_;
    int node_status_;
    int32_t process_id_;
    float cpu_usage_percent_;
    float memory_usage_mb_;
    int32_t active_connections_;
    int32_t queue_depth_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class PipelineTracking_ComponentMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PipelineTracking_ComponentMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PipelineTracking_ComponentMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PipelineTracking_ComponentMetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PipelineTracking_ComponentMetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PipelineTracking_ComponentMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PipelineTracking_ComponentMetadataEntry_DoNotUse& other);
  static const PipelineTracking_ComponentMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PipelineTracking_ComponentMetadataEntry_DoNotUse*>(&_PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.PipelineTracking.ComponentMetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.PipelineTracking.ComponentMetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class PipelineTracking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.PipelineTracking) */ {
 public:
  inline PipelineTracking() : PipelineTracking(nullptr) {}
  ~PipelineTracking() override;
  explicit PROTOBUF_CONSTEXPR PipelineTracking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipelineTracking(const PipelineTracking& from);
  PipelineTracking(PipelineTracking&& from) noexcept
    : PipelineTracking() {
    *this = ::std::move(from);
  }

  inline PipelineTracking& operator=(const PipelineTracking& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineTracking& operator=(PipelineTracking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PipelineTracking& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipelineTracking* internal_default_instance() {
    return reinterpret_cast<const PipelineTracking*>(
               &_PipelineTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PipelineTracking& a, PipelineTracking& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineTracking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineTracking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PipelineTracking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PipelineTracking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PipelineTracking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PipelineTracking& from) {
    PipelineTracking::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineTracking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.PipelineTracking";
  }
  protected:
  explicit PipelineTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProcessingErrorsFieldNumber = 26,
    kComponentMetadataFieldNumber = 30,
    kProcessingTagsFieldNumber = 31,
    kPipelineIdFieldNumber = 1,
    kProcessingPathFieldNumber = 22,
    kPipelineStartFieldNumber = 2,
    kPacketCapturedAtFieldNumber = 10,
    kFeaturesExtractedAtFieldNumber = 11,
    kGeoipEnrichedAtFieldNumber = 12,
    kMlAnalyzedAtFieldNumber = 13,
    kThreatDetectedAtFieldNumber = 14,
    kActionTakenAtFieldNumber = 15,
    kTotalProcessingLatencyFieldNumber = 20,
    kSnifferProcessIdFieldNumber = 3,
    kProcessorProcessIdFieldNumber = 4,
    kEnricherProcessIdFieldNumber = 5,
    kAnalyzerProcessIdFieldNumber = 6,
    kDetectorProcessIdFieldNumber = 7,
    kControllerProcessIdFieldNumber = 8,
    kPipelineHopsCountFieldNumber = 21,
    kRetryAttemptsFieldNumber = 25,
    kRequiresReprocessingFieldNumber = 27,
  };
  // repeated string processing_errors = 26;
  int processing_errors_size() const;
  private:
  int _internal_processing_errors_size() const;
  public:
  void clear_processing_errors();
  const std::string& processing_errors(int index) const;
  std::string* mutable_processing_errors(int index);
  void set_processing_errors(int index, const std::string& value);
  void set_processing_errors(int index, std::string&& value);
  void set_processing_errors(int index, const char* value);
  void set_processing_errors(int index, const char* value, size_t size);
  std::string* add_processing_errors();
  void add_processing_errors(const std::string& value);
  void add_processing_errors(std::string&& value);
  void add_processing_errors(const char* value);
  void add_processing_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processing_errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processing_errors();
  private:
  const std::string& _internal_processing_errors(int index) const;
  std::string* _internal_add_processing_errors();
  public:

  // map<string, string> component_metadata = 30;
  int component_metadata_size() const;
  private:
  int _internal_component_metadata_size() const;
  public:
  void clear_component_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_component_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_component_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      component_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_component_metadata();

  // repeated string processing_tags = 31;
  int processing_tags_size() const;
  private:
  int _internal_processing_tags_size() const;
  public:
  void clear_processing_tags();
  const std::string& processing_tags(int index) const;
  std::string* mutable_processing_tags(int index);
  void set_processing_tags(int index, const std::string& value);
  void set_processing_tags(int index, std::string&& value);
  void set_processing_tags(int index, const char* value);
  void set_processing_tags(int index, const char* value, size_t size);
  std::string* add_processing_tags();
  void add_processing_tags(const std::string& value);
  void add_processing_tags(std::string&& value);
  void add_processing_tags(const char* value);
  void add_processing_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processing_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processing_tags();
  private:
  const std::string& _internal_processing_tags(int index) const;
  std::string* _internal_add_processing_tags();
  public:

  // string pipeline_id = 1;
  void clear_pipeline_id();
  const std::string& pipeline_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipeline_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipeline_id();
  PROTOBUF_NODISCARD std::string* release_pipeline_id();
  void set_allocated_pipeline_id(std::string* pipeline_id);
  private:
  const std::string& _internal_pipeline_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipeline_id(const std::string& value);
  std::string* _internal_mutable_pipeline_id();
  public:

  // string processing_path = 22;
  void clear_processing_path();
  const std::string& processing_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_processing_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_processing_path();
  PROTOBUF_NODISCARD std::string* release_processing_path();
  void set_allocated_processing_path(std::string* processing_path);
  private:
  const std::string& _internal_processing_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processing_path(const std::string& value);
  std::string* _internal_mutable_processing_path();
  public:

  // .google.protobuf.Timestamp pipeline_start = 2;
  bool has_pipeline_start() const;
  private:
  bool _internal_has_pipeline_start() const;
  public:
  void clear_pipeline_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& pipeline_start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_pipeline_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_pipeline_start();
  void set_allocated_pipeline_start(::PROTOBUF_NAMESPACE_ID::Timestamp* pipeline_start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_pipeline_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_pipeline_start();
  public:
  void unsafe_arena_set_allocated_pipeline_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* pipeline_start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_pipeline_start();

  // .google.protobuf.Timestamp packet_captured_at = 10;
  bool has_packet_captured_at() const;
  private:
  bool _internal_has_packet_captured_at() const;
  public:
  void clear_packet_captured_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& packet_captured_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_packet_captured_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_packet_captured_at();
  void set_allocated_packet_captured_at(::PROTOBUF_NAMESPACE_ID::Timestamp* packet_captured_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_packet_captured_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_packet_captured_at();
  public:
  void unsafe_arena_set_allocated_packet_captured_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* packet_captured_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_packet_captured_at();

  // .google.protobuf.Timestamp features_extracted_at = 11;
  bool has_features_extracted_at() const;
  private:
  bool _internal_has_features_extracted_at() const;
  public:
  void clear_features_extracted_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& features_extracted_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_features_extracted_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_features_extracted_at();
  void set_allocated_features_extracted_at(::PROTOBUF_NAMESPACE_ID::Timestamp* features_extracted_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_features_extracted_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_features_extracted_at();
  public:
  void unsafe_arena_set_allocated_features_extracted_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* features_extracted_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_features_extracted_at();

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  bool has_geoip_enriched_at() const;
  private:
  bool _internal_has_geoip_enriched_at() const;
  public:
  void clear_geoip_enriched_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& geoip_enriched_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_geoip_enriched_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_geoip_enriched_at();
  void set_allocated_geoip_enriched_at(::PROTOBUF_NAMESPACE_ID::Timestamp* geoip_enriched_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_geoip_enriched_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_geoip_enriched_at();
  public:
  void unsafe_arena_set_allocated_geoip_enriched_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* geoip_enriched_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_geoip_enriched_at();

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  bool has_ml_analyzed_at() const;
  private:
  bool _internal_has_ml_analyzed_at() const;
  public:
  void clear_ml_analyzed_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ml_analyzed_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ml_analyzed_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ml_analyzed_at();
  void set_allocated_ml_analyzed_at(::PROTOBUF_NAMESPACE_ID::Timestamp* ml_analyzed_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ml_analyzed_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ml_analyzed_at();
  public:
  void unsafe_arena_set_allocated_ml_analyzed_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ml_analyzed_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ml_analyzed_at();

  // .google.protobuf.Timestamp threat_detected_at = 14;
  bool has_threat_detected_at() const;
  private:
  bool _internal_has_threat_detected_at() const;
  public:
  void clear_threat_detected_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& threat_detected_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_threat_detected_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_threat_detected_at();
  void set_allocated_threat_detected_at(::PROTOBUF_NAMESPACE_ID::Timestamp* threat_detected_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_threat_detected_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_threat_detected_at();
  public:
  void unsafe_arena_set_allocated_threat_detected_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* threat_detected_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_threat_detected_at();

  // .google.protobuf.Timestamp action_taken_at = 15;
  bool has_action_taken_at() const;
  private:
  bool _internal_has_action_taken_at() const;
  public:
  void clear_action_taken_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& action_taken_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_action_taken_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_action_taken_at();
  void set_allocated_action_taken_at(::PROTOBUF_NAMESPACE_ID::Timestamp* action_taken_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_action_taken_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_action_taken_at();
  public:
  void unsafe_arena_set_allocated_action_taken_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* action_taken_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_action_taken_at();

  // .google.protobuf.Duration total_processing_latency = 20;
  bool has_total_processing_latency() const;
  private:
  bool _internal_has_total_processing_latency() const;
  public:
  void clear_total_processing_latency();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_processing_latency() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_processing_latency();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_processing_latency();
  void set_allocated_total_processing_latency(::PROTOBUF_NAMESPACE_ID::Duration* total_processing_latency);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_processing_latency() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_processing_latency();
  public:
  void unsafe_arena_set_allocated_total_processing_latency(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_processing_latency);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_processing_latency();

  // int32 sniffer_process_id = 3;
  void clear_sniffer_process_id();
  int32_t sniffer_process_id() const;
  void set_sniffer_process_id(int32_t value);
  private:
  int32_t _internal_sniffer_process_id() const;
  void _internal_set_sniffer_process_id(int32_t value);
  public:

  // int32 processor_process_id = 4;
  void clear_processor_process_id();
  int32_t processor_process_id() const;
  void set_processor_process_id(int32_t value);
  private:
  int32_t _internal_processor_process_id() const;
  void _internal_set_processor_process_id(int32_t value);
  public:

  // int32 enricher_process_id = 5;
  void clear_enricher_process_id();
  int32_t enricher_process_id() const;
  void set_enricher_process_id(int32_t value);
  private:
  int32_t _internal_enricher_process_id() const;
  void _internal_set_enricher_process_id(int32_t value);
  public:

  // int32 analyzer_process_id = 6;
  void clear_analyzer_process_id();
  int32_t analyzer_process_id() const;
  void set_analyzer_process_id(int32_t value);
  private:
  int32_t _internal_analyzer_process_id() const;
  void _internal_set_analyzer_process_id(int32_t value);
  public:

  // int32 detector_process_id = 7;
  void clear_detector_process_id();
  int32_t detector_process_id() const;
  void set_detector_process_id(int32_t value);
  private:
  int32_t _internal_detector_process_id() const;
  void _internal_set_detector_process_id(int32_t value);
  public:

  // int32 controller_process_id = 8;
  void clear_controller_process_id();
  int32_t controller_process_id() const;
  void set_controller_process_id(int32_t value);
  private:
  int32_t _internal_controller_process_id() const;
  void _internal_set_controller_process_id(int32_t value);
  public:

  // int32 pipeline_hops_count = 21;
  void clear_pipeline_hops_count();
  int32_t pipeline_hops_count() const;
  void set_pipeline_hops_count(int32_t value);
  private:
  int32_t _internal_pipeline_hops_count() const;
  void _internal_set_pipeline_hops_count(int32_t value);
  public:

  // int32 retry_attempts = 25;
  void clear_retry_attempts();
  int32_t retry_attempts() const;
  void set_retry_attempts(int32_t value);
  private:
  int32_t _internal_retry_attempts() const;
  void _internal_set_retry_attempts(int32_t value);
  public:

  // bool requires_reprocessing = 27;
  void clear_requires_reprocessing();
  bool requires_reprocessing() const;
  void set_requires_reprocessing(bool value);
  private:
  bool _internal_requires_reprocessing() const;
  void _internal_set_requires_reprocessing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.PipelineTracking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processing_errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PipelineTracking_ComponentMetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> component_metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processing_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipeline_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processing_path_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* pipeline_start_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packet_captured_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* features_extracted_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* geoip_enriched_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ml_analyzed_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* threat_detected_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* action_taken_at_;
    ::PROTOBUF_NAMESPACE_ID::Duration* total_processing_latency_;
    int32_t sniffer_process_id_;
    int32_t processor_process_id_;
    int32_t enricher_process_id_;
    int32_t analyzer_process_id_;
    int32_t detector_process_id_;
    int32_t controller_process_id_;
    int32_t pipeline_hops_count_;
    int32_t retry_attempts_;
    bool requires_reprocessing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class RAGAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.RAGAnalysis) */ {
 public:
  inline RAGAnalysis() : RAGAnalysis(nullptr) {}
  ~RAGAnalysis() override;
  explicit PROTOBUF_CONSTEXPR RAGAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RAGAnalysis(const RAGAnalysis& from);
  RAGAnalysis(RAGAnalysis&& from) noexcept
    : RAGAnalysis() {
    *this = ::std::move(from);
  }

  inline RAGAnalysis& operator=(const RAGAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline RAGAnalysis& operator=(RAGAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RAGAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const RAGAnalysis* internal_default_instance() {
    return reinterpret_cast<const RAGAnalysis*>(
               &_RAGAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RAGAnalysis& a, RAGAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(RAGAnalysis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RAGAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RAGAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RAGAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RAGAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RAGAnalysis& from) {
    RAGAnalysis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RAGAnalysis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.RAGAnalysis";
  }
  protected:
  explicit RAGAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetrievedKnowledgeFieldNumber = 2,
    kRelevanceScoresFieldNumber = 3,
    kKnowledgeSourcesFieldNumber = 6,
    kQueryTextFieldNumber = 1,
    kAiGeneratedAnalysisFieldNumber = 4,
    kAnalysisTimestampFieldNumber = 7,
    kAnalysisConfidenceFieldNumber = 5,
  };
  // repeated string retrieved_knowledge = 2;
  int retrieved_knowledge_size() const;
  private:
  int _internal_retrieved_knowledge_size() const;
  public:
  void clear_retrieved_knowledge();
  const std::string& retrieved_knowledge(int index) const;
  std::string* mutable_retrieved_knowledge(int index);
  void set_retrieved_knowledge(int index, const std::string& value);
  void set_retrieved_knowledge(int index, std::string&& value);
  void set_retrieved_knowledge(int index, const char* value);
  void set_retrieved_knowledge(int index, const char* value, size_t size);
  std::string* add_retrieved_knowledge();
  void add_retrieved_knowledge(const std::string& value);
  void add_retrieved_knowledge(std::string&& value);
  void add_retrieved_knowledge(const char* value);
  void add_retrieved_knowledge(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& retrieved_knowledge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_retrieved_knowledge();
  private:
  const std::string& _internal_retrieved_knowledge(int index) const;
  std::string* _internal_add_retrieved_knowledge();
  public:

  // repeated double relevance_scores = 3;
  int relevance_scores_size() const;
  private:
  int _internal_relevance_scores_size() const;
  public:
  void clear_relevance_scores();
  private:
  double _internal_relevance_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_relevance_scores() const;
  void _internal_add_relevance_scores(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_relevance_scores();
  public:
  double relevance_scores(int index) const;
  void set_relevance_scores(int index, double value);
  void add_relevance_scores(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      relevance_scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_relevance_scores();

  // repeated string knowledge_sources = 6;
  int knowledge_sources_size() const;
  private:
  int _internal_knowledge_sources_size() const;
  public:
  void clear_knowledge_sources();
  const std::string& knowledge_sources(int index) const;
  std::string* mutable_knowledge_sources(int index);
  void set_knowledge_sources(int index, const std::string& value);
  void set_knowledge_sources(int index, std::string&& value);
  void set_knowledge_sources(int index, const char* value);
  void set_knowledge_sources(int index, const char* value, size_t size);
  std::string* add_knowledge_sources();
  void add_knowledge_sources(const std::string& value);
  void add_knowledge_sources(std::string&& value);
  void add_knowledge_sources(const char* value);
  void add_knowledge_sources(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& knowledge_sources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_knowledge_sources();
  private:
  const std::string& _internal_knowledge_sources(int index) const;
  std::string* _internal_add_knowledge_sources();
  public:

  // string query_text = 1;
  void clear_query_text();
  const std::string& query_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_text();
  PROTOBUF_NODISCARD std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // string ai_generated_analysis = 4;
  void clear_ai_generated_analysis();
  const std::string& ai_generated_analysis() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ai_generated_analysis(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ai_generated_analysis();
  PROTOBUF_NODISCARD std::string* release_ai_generated_analysis();
  void set_allocated_ai_generated_analysis(std::string* ai_generated_analysis);
  private:
  const std::string& _internal_ai_generated_analysis() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ai_generated_analysis(const std::string& value);
  std::string* _internal_mutable_ai_generated_analysis();
  public:

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  bool has_analysis_timestamp() const;
  private:
  bool _internal_has_analysis_timestamp() const;
  public:
  void clear_analysis_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& analysis_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_analysis_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_analysis_timestamp();
  void set_allocated_analysis_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_analysis_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_analysis_timestamp();
  public:
  void unsafe_arena_set_allocated_analysis_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_analysis_timestamp();

  // double analysis_confidence = 5;
  void clear_analysis_confidence();
  double analysis_confidence() const;
  void set_analysis_confidence(double value);
  private:
  double _internal_analysis_confidence() const;
  void _internal_set_analysis_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.RAGAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> retrieved_knowledge_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > relevance_scores_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> knowledge_sources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ai_generated_analysis_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_timestamp_;
    double analysis_confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class HumanFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HumanFeedback) */ {
 public:
  inline HumanFeedback() : HumanFeedback(nullptr) {}
  ~HumanFeedback() override;
  explicit PROTOBUF_CONSTEXPR HumanFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HumanFeedback(const HumanFeedback& from);
  HumanFeedback(HumanFeedback&& from) noexcept
    : HumanFeedback() {
    *this = ::std::move(from);
  }

  inline HumanFeedback& operator=(const HumanFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline HumanFeedback& operator=(HumanFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HumanFeedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const HumanFeedback* internal_default_instance() {
    return reinterpret_cast<const HumanFeedback*>(
               &_HumanFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(HumanFeedback& a, HumanFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(HumanFeedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HumanFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HumanFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HumanFeedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HumanFeedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HumanFeedback& from) {
    HumanFeedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanFeedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HumanFeedback";
  }
  protected:
  explicit HumanFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HumanFeedback_FeedbackType FeedbackType;
  static constexpr FeedbackType VALIDATION =
    HumanFeedback_FeedbackType_VALIDATION;
  static constexpr FeedbackType CORRECTION =
    HumanFeedback_FeedbackType_CORRECTION;
  static constexpr FeedbackType ENHANCEMENT =
    HumanFeedback_FeedbackType_ENHANCEMENT;
  static constexpr FeedbackType FALSE_POSITIVE_REPORT =
    HumanFeedback_FeedbackType_FALSE_POSITIVE_REPORT;
  static constexpr FeedbackType ADDITIONAL_CONTEXT =
    HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT;
  static inline bool FeedbackType_IsValid(int value) {
    return HumanFeedback_FeedbackType_IsValid(value);
  }
  static constexpr FeedbackType FeedbackType_MIN =
    HumanFeedback_FeedbackType_FeedbackType_MIN;
  static constexpr FeedbackType FeedbackType_MAX =
    HumanFeedback_FeedbackType_FeedbackType_MAX;
  static constexpr int FeedbackType_ARRAYSIZE =
    HumanFeedback_FeedbackType_FeedbackType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeedbackType_descriptor() {
    return HumanFeedback_FeedbackType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeedbackType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeedbackType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeedbackType_Name.");
    return HumanFeedback_FeedbackType_Name(enum_t_value);
  }
  static inline bool FeedbackType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeedbackType* value) {
    return HumanFeedback_FeedbackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnalystTagsFieldNumber = 8,
    kFeedbackIdFieldNumber = 1,
    kAnalystUserIdFieldNumber = 2,
    kEventReferenceIdFieldNumber = 3,
    kAnalystExplanationFieldNumber = 7,
    kFeedbackTimestampFieldNumber = 10,
    kFeedbackTypeFieldNumber = 4,
    kConfirmedTruePositiveFieldNumber = 5,
    kConfirmedFalsePositiveFieldNumber = 6,
    kAnalystConfidenceRatingFieldNumber = 9,
  };
  // repeated string analyst_tags = 8;
  int analyst_tags_size() const;
  private:
  int _internal_analyst_tags_size() const;
  public:
  void clear_analyst_tags();
  const std::string& analyst_tags(int index) const;
  std::string* mutable_analyst_tags(int index);
  void set_analyst_tags(int index, const std::string& value);
  void set_analyst_tags(int index, std::string&& value);
  void set_analyst_tags(int index, const char* value);
  void set_analyst_tags(int index, const char* value, size_t size);
  std::string* add_analyst_tags();
  void add_analyst_tags(const std::string& value);
  void add_analyst_tags(std::string&& value);
  void add_analyst_tags(const char* value);
  void add_analyst_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& analyst_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_analyst_tags();
  private:
  const std::string& _internal_analyst_tags(int index) const;
  std::string* _internal_add_analyst_tags();
  public:

  // string feedback_id = 1;
  void clear_feedback_id();
  const std::string& feedback_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feedback_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feedback_id();
  PROTOBUF_NODISCARD std::string* release_feedback_id();
  void set_allocated_feedback_id(std::string* feedback_id);
  private:
  const std::string& _internal_feedback_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feedback_id(const std::string& value);
  std::string* _internal_mutable_feedback_id();
  public:

  // string analyst_user_id = 2;
  void clear_analyst_user_id();
  const std::string& analyst_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analyst_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analyst_user_id();
  PROTOBUF_NODISCARD std::string* release_analyst_user_id();
  void set_allocated_analyst_user_id(std::string* analyst_user_id);
  private:
  const std::string& _internal_analyst_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analyst_user_id(const std::string& value);
  std::string* _internal_mutable_analyst_user_id();
  public:

  // string event_reference_id = 3;
  void clear_event_reference_id();
  const std::string& event_reference_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_reference_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_reference_id();
  PROTOBUF_NODISCARD std::string* release_event_reference_id();
  void set_allocated_event_reference_id(std::string* event_reference_id);
  private:
  const std::string& _internal_event_reference_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_reference_id(const std::string& value);
  std::string* _internal_mutable_event_reference_id();
  public:

  // string analyst_explanation = 7;
  void clear_analyst_explanation();
  const std::string& analyst_explanation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analyst_explanation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analyst_explanation();
  PROTOBUF_NODISCARD std::string* release_analyst_explanation();
  void set_allocated_analyst_explanation(std::string* analyst_explanation);
  private:
  const std::string& _internal_analyst_explanation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analyst_explanation(const std::string& value);
  std::string* _internal_mutable_analyst_explanation();
  public:

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  bool has_feedback_timestamp() const;
  private:
  bool _internal_has_feedback_timestamp() const;
  public:
  void clear_feedback_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& feedback_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_feedback_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_feedback_timestamp();
  void set_allocated_feedback_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* feedback_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_feedback_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_feedback_timestamp();
  public:
  void unsafe_arena_set_allocated_feedback_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* feedback_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_feedback_timestamp();

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  void clear_feedback_type();
  ::protobuf::HumanFeedback_FeedbackType feedback_type() const;
  void set_feedback_type(::protobuf::HumanFeedback_FeedbackType value);
  private:
  ::protobuf::HumanFeedback_FeedbackType _internal_feedback_type() const;
  void _internal_set_feedback_type(::protobuf::HumanFeedback_FeedbackType value);
  public:

  // bool confirmed_true_positive = 5;
  void clear_confirmed_true_positive();
  bool confirmed_true_positive() const;
  void set_confirmed_true_positive(bool value);
  private:
  bool _internal_confirmed_true_positive() const;
  void _internal_set_confirmed_true_positive(bool value);
  public:

  // bool confirmed_false_positive = 6;
  void clear_confirmed_false_positive();
  bool confirmed_false_positive() const;
  void set_confirmed_false_positive(bool value);
  private:
  bool _internal_confirmed_false_positive() const;
  void _internal_set_confirmed_false_positive(bool value);
  public:

  // int32 analyst_confidence_rating = 9;
  void clear_analyst_confidence_rating();
  int32_t analyst_confidence_rating() const;
  void set_analyst_confidence_rating(int32_t value);
  private:
  int32_t _internal_analyst_confidence_rating() const;
  void _internal_set_analyst_confidence_rating(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HumanFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> analyst_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feedback_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analyst_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_reference_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analyst_explanation_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* feedback_timestamp_;
    int feedback_type_;
    bool confirmed_true_positive_;
    bool confirmed_false_positive_;
    int32_t analyst_confidence_rating_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class HumanInTheLoopReview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HumanInTheLoopReview) */ {
 public:
  inline HumanInTheLoopReview() : HumanInTheLoopReview(nullptr) {}
  ~HumanInTheLoopReview() override;
  explicit PROTOBUF_CONSTEXPR HumanInTheLoopReview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HumanInTheLoopReview(const HumanInTheLoopReview& from);
  HumanInTheLoopReview(HumanInTheLoopReview&& from) noexcept
    : HumanInTheLoopReview() {
    *this = ::std::move(from);
  }

  inline HumanInTheLoopReview& operator=(const HumanInTheLoopReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline HumanInTheLoopReview& operator=(HumanInTheLoopReview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HumanInTheLoopReview& default_instance() {
    return *internal_default_instance();
  }
  static inline const HumanInTheLoopReview* internal_default_instance() {
    return reinterpret_cast<const HumanInTheLoopReview*>(
               &_HumanInTheLoopReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HumanInTheLoopReview& a, HumanInTheLoopReview& b) {
    a.Swap(&b);
  }
  inline void Swap(HumanInTheLoopReview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HumanInTheLoopReview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HumanInTheLoopReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HumanInTheLoopReview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HumanInTheLoopReview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HumanInTheLoopReview& from) {
    HumanInTheLoopReview::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanInTheLoopReview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HumanInTheLoopReview";
  }
  protected:
  explicit HumanInTheLoopReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HumanInTheLoopReview_ReviewPriority ReviewPriority;
  static constexpr ReviewPriority LOW =
    HumanInTheLoopReview_ReviewPriority_LOW;
  static constexpr ReviewPriority MEDIUM =
    HumanInTheLoopReview_ReviewPriority_MEDIUM;
  static constexpr ReviewPriority HIGH =
    HumanInTheLoopReview_ReviewPriority_HIGH;
  static constexpr ReviewPriority CRITICAL =
    HumanInTheLoopReview_ReviewPriority_CRITICAL;
  static constexpr ReviewPriority EMERGENCY =
    HumanInTheLoopReview_ReviewPriority_EMERGENCY;
  static inline bool ReviewPriority_IsValid(int value) {
    return HumanInTheLoopReview_ReviewPriority_IsValid(value);
  }
  static constexpr ReviewPriority ReviewPriority_MIN =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_MIN;
  static constexpr ReviewPriority ReviewPriority_MAX =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX;
  static constexpr int ReviewPriority_ARRAYSIZE =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReviewPriority_descriptor() {
    return HumanInTheLoopReview_ReviewPriority_descriptor();
  }
  template<typename T>
  static inline const std::string& ReviewPriority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReviewPriority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReviewPriority_Name.");
    return HumanInTheLoopReview_ReviewPriority_Name(enum_t_value);
  }
  static inline bool ReviewPriority_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReviewPriority* value) {
    return HumanInTheLoopReview_ReviewPriority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReviewReasonsFieldNumber = 3,
    kAnalystFeedbackFieldNumber = 4,
    kEscalatedTimestampFieldNumber = 5,
    kReviewedTimestampFieldNumber = 6,
    kReviewPriorityFieldNumber = 2,
    kRequiresHumanAnalysisFieldNumber = 1,
    kReviewCompletedFieldNumber = 7,
  };
  // repeated string review_reasons = 3;
  int review_reasons_size() const;
  private:
  int _internal_review_reasons_size() const;
  public:
  void clear_review_reasons();
  const std::string& review_reasons(int index) const;
  std::string* mutable_review_reasons(int index);
  void set_review_reasons(int index, const std::string& value);
  void set_review_reasons(int index, std::string&& value);
  void set_review_reasons(int index, const char* value);
  void set_review_reasons(int index, const char* value, size_t size);
  std::string* add_review_reasons();
  void add_review_reasons(const std::string& value);
  void add_review_reasons(std::string&& value);
  void add_review_reasons(const char* value);
  void add_review_reasons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& review_reasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_review_reasons();
  private:
  const std::string& _internal_review_reasons(int index) const;
  std::string* _internal_add_review_reasons();
  public:

  // .protobuf.HumanFeedback analyst_feedback = 4;
  bool has_analyst_feedback() const;
  private:
  bool _internal_has_analyst_feedback() const;
  public:
  void clear_analyst_feedback();
  const ::protobuf::HumanFeedback& analyst_feedback() const;
  PROTOBUF_NODISCARD ::protobuf::HumanFeedback* release_analyst_feedback();
  ::protobuf::HumanFeedback* mutable_analyst_feedback();
  void set_allocated_analyst_feedback(::protobuf::HumanFeedback* analyst_feedback);
  private:
  const ::protobuf::HumanFeedback& _internal_analyst_feedback() const;
  ::protobuf::HumanFeedback* _internal_mutable_analyst_feedback();
  public:
  void unsafe_arena_set_allocated_analyst_feedback(
      ::protobuf::HumanFeedback* analyst_feedback);
  ::protobuf::HumanFeedback* unsafe_arena_release_analyst_feedback();

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  bool has_escalated_timestamp() const;
  private:
  bool _internal_has_escalated_timestamp() const;
  public:
  void clear_escalated_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& escalated_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_escalated_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_escalated_timestamp();
  void set_allocated_escalated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* escalated_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_escalated_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_escalated_timestamp();
  public:
  void unsafe_arena_set_allocated_escalated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* escalated_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_escalated_timestamp();

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  bool has_reviewed_timestamp() const;
  private:
  bool _internal_has_reviewed_timestamp() const;
  public:
  void clear_reviewed_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& reviewed_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_reviewed_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reviewed_timestamp();
  void set_allocated_reviewed_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* reviewed_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reviewed_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reviewed_timestamp();
  public:
  void unsafe_arena_set_allocated_reviewed_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* reviewed_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reviewed_timestamp();

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  void clear_review_priority();
  ::protobuf::HumanInTheLoopReview_ReviewPriority review_priority() const;
  void set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value);
  private:
  ::protobuf::HumanInTheLoopReview_ReviewPriority _internal_review_priority() const;
  void _internal_set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value);
  public:

  // bool requires_human_analysis = 1;
  void clear_requires_human_analysis();
  bool requires_human_analysis() const;
  void set_requires_human_analysis(bool value);
  private:
  bool _internal_requires_human_analysis() const;
  void _internal_set_requires_human_analysis(bool value);
  public:

  // bool review_completed = 7;
  void clear_review_completed();
  bool review_completed() const;
  void set_review_completed(bool value);
  private:
  bool _internal_review_completed() const;
  void _internal_set_review_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HumanInTheLoopReview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> review_reasons_;
    ::protobuf::HumanFeedback* analyst_feedback_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* escalated_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reviewed_timestamp_;
    int review_priority_;
    bool requires_human_analysis_;
    bool review_completed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class NetworkSecurityEvent_CustomMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NetworkSecurityEvent_CustomMetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse& other);
  static const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse*>(&_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.NetworkSecurityEvent.CustomMetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.NetworkSecurityEvent.CustomMetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class NetworkSecurityEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.NetworkSecurityEvent) */ {
 public:
  inline NetworkSecurityEvent() : NetworkSecurityEvent(nullptr) {}
  ~NetworkSecurityEvent() override;
  explicit PROTOBUF_CONSTEXPR NetworkSecurityEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkSecurityEvent(const NetworkSecurityEvent& from);
  NetworkSecurityEvent(NetworkSecurityEvent&& from) noexcept
    : NetworkSecurityEvent() {
    *this = ::std::move(from);
  }

  inline NetworkSecurityEvent& operator=(const NetworkSecurityEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSecurityEvent& operator=(NetworkSecurityEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkSecurityEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkSecurityEvent* internal_default_instance() {
    return reinterpret_cast<const NetworkSecurityEvent*>(
               &_NetworkSecurityEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NetworkSecurityEvent& a, NetworkSecurityEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkSecurityEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkSecurityEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkSecurityEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkSecurityEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkSecurityEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkSecurityEvent& from) {
    NetworkSecurityEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSecurityEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.NetworkSecurityEvent";
  }
  protected:
  explicit NetworkSecurityEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalModelPredictionsFieldNumber = 8,
    kRelatedEventIdsFieldNumber = 21,
    kCustomMetadataFieldNumber = 26,
    kEventTagsFieldNumber = 27,
    kEventIdFieldNumber = 1,
    kOriginatingNodeIdFieldNumber = 3,
    kFinalClassificationFieldNumber = 16,
    kThreatCategoryFieldNumber = 17,
    kCorrelationIdFieldNumber = 20,
    kEventChainIdFieldNumber = 22,
    kProtobufVersionFieldNumber = 28,
    kEventTimestampFieldNumber = 2,
    kNetworkFeaturesFieldNumber = 4,
    kGeoEnrichmentFieldNumber = 5,
    kTimeWindowFieldNumber = 6,
    kMlAnalysisFieldNumber = 7,
    kCapturingNodeFieldNumber = 9,
    kPipelineTrackingFieldNumber = 10,
    kRagAnalysisFieldNumber = 11,
    kHumanReviewFieldNumber = 12,
    kOverallThreatScoreFieldNumber = 15,
    kSchemaVersionFieldNumber = 25,
  };
  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  int additional_model_predictions_size() const;
  private:
  int _internal_additional_model_predictions_size() const;
  public:
  void clear_additional_model_predictions();
  ::protobuf::ModelPrediction* mutable_additional_model_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
      mutable_additional_model_predictions();
  private:
  const ::protobuf::ModelPrediction& _internal_additional_model_predictions(int index) const;
  ::protobuf::ModelPrediction* _internal_add_additional_model_predictions();
  public:
  const ::protobuf::ModelPrediction& additional_model_predictions(int index) const;
  ::protobuf::ModelPrediction* add_additional_model_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
      additional_model_predictions() const;

  // repeated string related_event_ids = 21;
  int related_event_ids_size() const;
  private:
  int _internal_related_event_ids_size() const;
  public:
  void clear_related_event_ids();
  const std::string& related_event_ids(int index) const;
  std::string* mutable_related_event_ids(int index);
  void set_related_event_ids(int index, const std::string& value);
  void set_related_event_ids(int index, std::string&& value);
  void set_related_event_ids(int index, const char* value);
  void set_related_event_ids(int index, const char* value, size_t size);
  std::string* add_related_event_ids();
  void add_related_event_ids(const std::string& value);
  void add_related_event_ids(std::string&& value);
  void add_related_event_ids(const char* value);
  void add_related_event_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& related_event_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_related_event_ids();
  private:
  const std::string& _internal_related_event_ids(int index) const;
  std::string* _internal_add_related_event_ids();
  public:

  // map<string, string> custom_metadata = 26;
  int custom_metadata_size() const;
  private:
  int _internal_custom_metadata_size() const;
  public:
  void clear_custom_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_custom_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_custom_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      custom_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_custom_metadata();

  // repeated string event_tags = 27;
  int event_tags_size() const;
  private:
  int _internal_event_tags_size() const;
  public:
  void clear_event_tags();
  const std::string& event_tags(int index) const;
  std::string* mutable_event_tags(int index);
  void set_event_tags(int index, const std::string& value);
  void set_event_tags(int index, std::string&& value);
  void set_event_tags(int index, const char* value);
  void set_event_tags(int index, const char* value, size_t size);
  std::string* add_event_tags();
  void add_event_tags(const std::string& value);
  void add_event_tags(std::string&& value);
  void add_event_tags(const char* value);
  void add_event_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_tags();
  private:
  const std::string& _internal_event_tags(int index) const;
  std::string* _internal_add_event_tags();
  public:

  // string event_id = 1;
  void clear_event_id();
  const std::string& event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // string originating_node_id = 3;
  void clear_originating_node_id();
  const std::string& originating_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originating_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originating_node_id();
  PROTOBUF_NODISCARD std::string* release_originating_node_id();
  void set_allocated_originating_node_id(std::string* originating_node_id);
  private:
  const std::string& _internal_originating_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originating_node_id(const std::string& value);
  std::string* _internal_mutable_originating_node_id();
  public:

  // string final_classification = 16;
  void clear_final_classification();
  const std::string& final_classification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_classification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_classification();
  PROTOBUF_NODISCARD std::string* release_final_classification();
  void set_allocated_final_classification(std::string* final_classification);
  private:
  const std::string& _internal_final_classification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_classification(const std::string& value);
  std::string* _internal_mutable_final_classification();
  public:

  // string threat_category = 17;
  void clear_threat_category();
  const std::string& threat_category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threat_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threat_category();
  PROTOBUF_NODISCARD std::string* release_threat_category();
  void set_allocated_threat_category(std::string* threat_category);
  private:
  const std::string& _internal_threat_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threat_category(const std::string& value);
  std::string* _internal_mutable_threat_category();
  public:

  // string correlation_id = 20;
  void clear_correlation_id();
  const std::string& correlation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correlation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correlation_id();
  PROTOBUF_NODISCARD std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* correlation_id);
  private:
  const std::string& _internal_correlation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correlation_id(const std::string& value);
  std::string* _internal_mutable_correlation_id();
  public:

  // string event_chain_id = 22;
  void clear_event_chain_id();
  const std::string& event_chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_chain_id();
  PROTOBUF_NODISCARD std::string* release_event_chain_id();
  void set_allocated_event_chain_id(std::string* event_chain_id);
  private:
  const std::string& _internal_event_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_chain_id(const std::string& value);
  std::string* _internal_mutable_event_chain_id();
  public:

  // string protobuf_version = 28;
  void clear_protobuf_version();
  const std::string& protobuf_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protobuf_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protobuf_version();
  PROTOBUF_NODISCARD std::string* release_protobuf_version();
  void set_allocated_protobuf_version(std::string* protobuf_version);
  private:
  const std::string& _internal_protobuf_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protobuf_version(const std::string& value);
  std::string* _internal_mutable_protobuf_version();
  public:

  // .google.protobuf.Timestamp event_timestamp = 2;
  bool has_event_timestamp() const;
  private:
  bool _internal_has_event_timestamp() const;
  public:
  void clear_event_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_event_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_event_timestamp();
  void set_allocated_event_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* event_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_event_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_event_timestamp();
  public:
  void unsafe_arena_set_allocated_event_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* event_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_event_timestamp();

  // .protobuf.NetworkFeatures network_features = 4;
  bool has_network_features() const;
  private:
  bool _internal_has_network_features() const;
  public:
  void clear_network_features();
  const ::protobuf::NetworkFeatures& network_features() const;
  PROTOBUF_NODISCARD ::protobuf::NetworkFeatures* release_network_features();
  ::protobuf::NetworkFeatures* mutable_network_features();
  void set_allocated_network_features(::protobuf::NetworkFeatures* network_features);
  private:
  const ::protobuf::NetworkFeatures& _internal_network_features() const;
  ::protobuf::NetworkFeatures* _internal_mutable_network_features();
  public:
  void unsafe_arena_set_allocated_network_features(
      ::protobuf::NetworkFeatures* network_features);
  ::protobuf::NetworkFeatures* unsafe_arena_release_network_features();

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  bool has_geo_enrichment() const;
  private:
  bool _internal_has_geo_enrichment() const;
  public:
  void clear_geo_enrichment();
  const ::protobuf::GeoEnrichment& geo_enrichment() const;
  PROTOBUF_NODISCARD ::protobuf::GeoEnrichment* release_geo_enrichment();
  ::protobuf::GeoEnrichment* mutable_geo_enrichment();
  void set_allocated_geo_enrichment(::protobuf::GeoEnrichment* geo_enrichment);
  private:
  const ::protobuf::GeoEnrichment& _internal_geo_enrichment() const;
  ::protobuf::GeoEnrichment* _internal_mutable_geo_enrichment();
  public:
  void unsafe_arena_set_allocated_geo_enrichment(
      ::protobuf::GeoEnrichment* geo_enrichment);
  ::protobuf::GeoEnrichment* unsafe_arena_release_geo_enrichment();

  // .protobuf.TimeWindow time_window = 6;
  bool has_time_window() const;
  private:
  bool _internal_has_time_window() const;
  public:
  void clear_time_window();
  const ::protobuf::TimeWindow& time_window() const;
  PROTOBUF_NODISCARD ::protobuf::TimeWindow* release_time_window();
  ::protobuf::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::protobuf::TimeWindow* time_window);
  private:
  const ::protobuf::TimeWindow& _internal_time_window() const;
  ::protobuf::TimeWindow* _internal_mutable_time_window();
  public:
  void unsafe_arena_set_allocated_time_window(
      ::protobuf::TimeWindow* time_window);
  ::protobuf::TimeWindow* unsafe_arena_release_time_window();

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  bool has_ml_analysis() const;
  private:
  bool _internal_has_ml_analysis() const;
  public:
  void clear_ml_analysis();
  const ::protobuf::TricapaMLAnalysis& ml_analysis() const;
  PROTOBUF_NODISCARD ::protobuf::TricapaMLAnalysis* release_ml_analysis();
  ::protobuf::TricapaMLAnalysis* mutable_ml_analysis();
  void set_allocated_ml_analysis(::protobuf::TricapaMLAnalysis* ml_analysis);
  private:
  const ::protobuf::TricapaMLAnalysis& _internal_ml_analysis() const;
  ::protobuf::TricapaMLAnalysis* _internal_mutable_ml_analysis();
  public:
  void unsafe_arena_set_allocated_ml_analysis(
      ::protobuf::TricapaMLAnalysis* ml_analysis);
  ::protobuf::TricapaMLAnalysis* unsafe_arena_release_ml_analysis();

  // .protobuf.DistributedNode capturing_node = 9;
  bool has_capturing_node() const;
  private:
  bool _internal_has_capturing_node() const;
  public:
  void clear_capturing_node();
  const ::protobuf::DistributedNode& capturing_node() const;
  PROTOBUF_NODISCARD ::protobuf::DistributedNode* release_capturing_node();
  ::protobuf::DistributedNode* mutable_capturing_node();
  void set_allocated_capturing_node(::protobuf::DistributedNode* capturing_node);
  private:
  const ::protobuf::DistributedNode& _internal_capturing_node() const;
  ::protobuf::DistributedNode* _internal_mutable_capturing_node();
  public:
  void unsafe_arena_set_allocated_capturing_node(
      ::protobuf::DistributedNode* capturing_node);
  ::protobuf::DistributedNode* unsafe_arena_release_capturing_node();

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  bool has_pipeline_tracking() const;
  private:
  bool _internal_has_pipeline_tracking() const;
  public:
  void clear_pipeline_tracking();
  const ::protobuf::PipelineTracking& pipeline_tracking() const;
  PROTOBUF_NODISCARD ::protobuf::PipelineTracking* release_pipeline_tracking();
  ::protobuf::PipelineTracking* mutable_pipeline_tracking();
  void set_allocated_pipeline_tracking(::protobuf::PipelineTracking* pipeline_tracking);
  private:
  const ::protobuf::PipelineTracking& _internal_pipeline_tracking() const;
  ::protobuf::PipelineTracking* _internal_mutable_pipeline_tracking();
  public:
  void unsafe_arena_set_allocated_pipeline_tracking(
      ::protobuf::PipelineTracking* pipeline_tracking);
  ::protobuf::PipelineTracking* unsafe_arena_release_pipeline_tracking();

  // .protobuf.RAGAnalysis rag_analysis = 11;
  bool has_rag_analysis() const;
  private:
  bool _internal_has_rag_analysis() const;
  public:
  void clear_rag_analysis();
  const ::protobuf::RAGAnalysis& rag_analysis() const;
  PROTOBUF_NODISCARD ::protobuf::RAGAnalysis* release_rag_analysis();
  ::protobuf::RAGAnalysis* mutable_rag_analysis();
  void set_allocated_rag_analysis(::protobuf::RAGAnalysis* rag_analysis);
  private:
  const ::protobuf::RAGAnalysis& _internal_rag_analysis() const;
  ::protobuf::RAGAnalysis* _internal_mutable_rag_analysis();
  public:
  void unsafe_arena_set_allocated_rag_analysis(
      ::protobuf::RAGAnalysis* rag_analysis);
  ::protobuf::RAGAnalysis* unsafe_arena_release_rag_analysis();

  // .protobuf.HumanInTheLoopReview human_review = 12;
  bool has_human_review() const;
  private:
  bool _internal_has_human_review() const;
  public:
  void clear_human_review();
  const ::protobuf::HumanInTheLoopReview& human_review() const;
  PROTOBUF_NODISCARD ::protobuf::HumanInTheLoopReview* release_human_review();
  ::protobuf::HumanInTheLoopReview* mutable_human_review();
  void set_allocated_human_review(::protobuf::HumanInTheLoopReview* human_review);
  private:
  const ::protobuf::HumanInTheLoopReview& _internal_human_review() const;
  ::protobuf::HumanInTheLoopReview* _internal_mutable_human_review();
  public:
  void unsafe_arena_set_allocated_human_review(
      ::protobuf::HumanInTheLoopReview* human_review);
  ::protobuf::HumanInTheLoopReview* unsafe_arena_release_human_review();

  // double overall_threat_score = 15;
  void clear_overall_threat_score();
  double overall_threat_score() const;
  void set_overall_threat_score(double value);
  private:
  double _internal_overall_threat_score() const;
  void _internal_set_overall_threat_score(double value);
  public:

  // uint32 schema_version = 25;
  void clear_schema_version();
  uint32_t schema_version() const;
  void set_schema_version(uint32_t value);
  private:
  uint32_t _internal_schema_version() const;
  void _internal_set_schema_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.NetworkSecurityEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction > additional_model_predictions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> related_event_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NetworkSecurityEvent_CustomMetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> custom_metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originating_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_classification_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threat_category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_chain_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protobuf_version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* event_timestamp_;
    ::protobuf::NetworkFeatures* network_features_;
    ::protobuf::GeoEnrichment* geo_enrichment_;
    ::protobuf::TimeWindow* time_window_;
    ::protobuf::TricapaMLAnalysis* ml_analysis_;
    ::protobuf::DistributedNode* capturing_node_;
    ::protobuf::PipelineTracking* pipeline_tracking_;
    ::protobuf::RAGAnalysis* rag_analysis_;
    ::protobuf::HumanInTheLoopReview* human_review_;
    double overall_threat_score_;
    uint32_t schema_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class EventBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.EventBatch) */ {
 public:
  inline EventBatch() : EventBatch(nullptr) {}
  ~EventBatch() override;
  explicit PROTOBUF_CONSTEXPR EventBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBatch(const EventBatch& from);
  EventBatch(EventBatch&& from) noexcept
    : EventBatch() {
    *this = ::std::move(from);
  }

  inline EventBatch& operator=(const EventBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBatch& operator=(EventBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBatch* internal_default_instance() {
    return reinterpret_cast<const EventBatch*>(
               &_EventBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(EventBatch& a, EventBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBatch& from) {
    EventBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.EventBatch";
  }
  protected:
  explicit EventBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventBatch_ProcessingMode ProcessingMode;
  static constexpr ProcessingMode REAL_TIME =
    EventBatch_ProcessingMode_REAL_TIME;
  static constexpr ProcessingMode NEAR_REAL_TIME =
    EventBatch_ProcessingMode_NEAR_REAL_TIME;
  static constexpr ProcessingMode BATCH_PROCESSING =
    EventBatch_ProcessingMode_BATCH_PROCESSING;
  static constexpr ProcessingMode HISTORICAL_ANALYSIS =
    EventBatch_ProcessingMode_HISTORICAL_ANALYSIS;
  static inline bool ProcessingMode_IsValid(int value) {
    return EventBatch_ProcessingMode_IsValid(value);
  }
  static constexpr ProcessingMode ProcessingMode_MIN =
    EventBatch_ProcessingMode_ProcessingMode_MIN;
  static constexpr ProcessingMode ProcessingMode_MAX =
    EventBatch_ProcessingMode_ProcessingMode_MAX;
  static constexpr int ProcessingMode_ARRAYSIZE =
    EventBatch_ProcessingMode_ProcessingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessingMode_descriptor() {
    return EventBatch_ProcessingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessingMode_Name.");
    return EventBatch_ProcessingMode_Name(enum_t_value);
  }
  static inline bool ProcessingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcessingMode* value) {
    return EventBatch_ProcessingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kBatchSourceNodeFieldNumber = 6,
    kBatchCreatedAtFieldNumber = 3,
    kBatchIdFieldNumber = 2,
    kBatchSizeFieldNumber = 4,
    kProcessingModeFieldNumber = 5,
  };
  // repeated .protobuf.NetworkSecurityEvent events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::protobuf::NetworkSecurityEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >*
      mutable_events();
  private:
  const ::protobuf::NetworkSecurityEvent& _internal_events(int index) const;
  ::protobuf::NetworkSecurityEvent* _internal_add_events();
  public:
  const ::protobuf::NetworkSecurityEvent& events(int index) const;
  ::protobuf::NetworkSecurityEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >&
      events() const;

  // string batch_source_node = 6;
  void clear_batch_source_node();
  const std::string& batch_source_node() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_batch_source_node(ArgT0&& arg0, ArgT... args);
  std::string* mutable_batch_source_node();
  PROTOBUF_NODISCARD std::string* release_batch_source_node();
  void set_allocated_batch_source_node(std::string* batch_source_node);
  private:
  const std::string& _internal_batch_source_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_source_node(const std::string& value);
  std::string* _internal_mutable_batch_source_node();
  public:

  // .google.protobuf.Timestamp batch_created_at = 3;
  bool has_batch_created_at() const;
  private:
  bool _internal_has_batch_created_at() const;
  public:
  void clear_batch_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& batch_created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_batch_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_batch_created_at();
  void set_allocated_batch_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* batch_created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_batch_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_batch_created_at();
  public:
  void unsafe_arena_set_allocated_batch_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* batch_created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_batch_created_at();

  // uint64 batch_id = 2;
  void clear_batch_id();
  uint64_t batch_id() const;
  void set_batch_id(uint64_t value);
  private:
  uint64_t _internal_batch_id() const;
  void _internal_set_batch_id(uint64_t value);
  public:

  // uint32 batch_size = 4;
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  void clear_processing_mode();
  ::protobuf::EventBatch_ProcessingMode processing_mode() const;
  void set_processing_mode(::protobuf::EventBatch_ProcessingMode value);
  private:
  ::protobuf::EventBatch_ProcessingMode _internal_processing_mode() const;
  void _internal_set_processing_mode(::protobuf::EventBatch_ProcessingMode value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.EventBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::NetworkSecurityEvent > events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_source_node_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* batch_created_at_;
    uint64_t batch_id_;
    uint32_t batch_size_;
    int processing_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse& other);
  static const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse*>(&_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.SystemConfiguration.ThreatScoreThresholdsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse& other);
  static const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse*>(&_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};

// -------------------------------------------------------------------

class SystemConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.SystemConfiguration) */ {
 public:
  inline SystemConfiguration() : SystemConfiguration(nullptr) {}
  ~SystemConfiguration() override;
  explicit PROTOBUF_CONSTEXPR SystemConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemConfiguration(const SystemConfiguration& from);
  SystemConfiguration(SystemConfiguration&& from) noexcept
    : SystemConfiguration() {
    *this = ::std::move(from);
  }

  inline SystemConfiguration& operator=(const SystemConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemConfiguration& operator=(SystemConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemConfiguration* internal_default_instance() {
    return reinterpret_cast<const SystemConfiguration*>(
               &_SystemConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SystemConfiguration& a, SystemConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemConfiguration& from) {
    SystemConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.SystemConfiguration";
  }
  protected:
  explicit SystemConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnabledMlModelsFieldNumber = 1,
    kThreatScoreThresholdsFieldNumber = 2,
    kClusterNodesFieldNumber = 5,
    kNodeRoleAssignmentsFieldNumber = 6,
    kKnowledgeBaseSourcesFieldNumber = 12,
    kEncryptionAlgorithmFieldNumber = 9,
    kRagModelEndpointFieldNumber = 11,
    kTimeWindowSizeFieldNumber = 3,
    kMaxEventsPerWindowFieldNumber = 4,
    kEncryptionEnabledFieldNumber = 7,
    kCompressionEnabledFieldNumber = 8,
    kRagAnalysisEnabledFieldNumber = 10,
  };
  // repeated string enabled_ml_models = 1;
  int enabled_ml_models_size() const;
  private:
  int _internal_enabled_ml_models_size() const;
  public:
  void clear_enabled_ml_models();
  const std::string& enabled_ml_models(int index) const;
  std::string* mutable_enabled_ml_models(int index);
  void set_enabled_ml_models(int index, const std::string& value);
  void set_enabled_ml_models(int index, std::string&& value);
  void set_enabled_ml_models(int index, const char* value);
  void set_enabled_ml_models(int index, const char* value, size_t size);
  std::string* add_enabled_ml_models();
  void add_enabled_ml_models(const std::string& value);
  void add_enabled_ml_models(std::string&& value);
  void add_enabled_ml_models(const char* value);
  void add_enabled_ml_models(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_ml_models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_ml_models();
  private:
  const std::string& _internal_enabled_ml_models(int index) const;
  std::string* _internal_add_enabled_ml_models();
  public:

  // map<string, double> threat_score_thresholds = 2;
  int threat_score_thresholds_size() const;
  private:
  int _internal_threat_score_thresholds_size() const;
  public:
  void clear_threat_score_thresholds();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_threat_score_thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_threat_score_thresholds();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      threat_score_thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_threat_score_thresholds();

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  int cluster_nodes_size() const;
  private:
  int _internal_cluster_nodes_size() const;
  public:
  void clear_cluster_nodes();
  ::protobuf::DistributedNode* mutable_cluster_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::DistributedNode >*
      mutable_cluster_nodes();
  private:
  const ::protobuf::DistributedNode& _internal_cluster_nodes(int index) const;
  ::protobuf::DistributedNode* _internal_add_cluster_nodes();
  public:
  const ::protobuf::DistributedNode& cluster_nodes(int index) const;
  ::protobuf::DistributedNode* add_cluster_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::DistributedNode >&
      cluster_nodes() const;

  // map<string, string> node_role_assignments = 6;
  int node_role_assignments_size() const;
  private:
  int _internal_node_role_assignments_size() const;
  public:
  void clear_node_role_assignments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_node_role_assignments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_node_role_assignments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      node_role_assignments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_node_role_assignments();

  // repeated string knowledge_base_sources = 12;
  int knowledge_base_sources_size() const;
  private:
  int _internal_knowledge_base_sources_size() const;
  public:
  void clear_knowledge_base_sources();
  const std::string& knowledge_base_sources(int index) const;
  std::string* mutable_knowledge_base_sources(int index);
  void set_knowledge_base_sources(int index, const std::string& value);
  void set_knowledge_base_sources(int index, std::string&& value);
  void set_knowledge_base_sources(int index, const char* value);
  void set_knowledge_base_sources(int index, const char* value, size_t size);
  std::string* add_knowledge_base_sources();
  void add_knowledge_base_sources(const std::string& value);
  void add_knowledge_base_sources(std::string&& value);
  void add_knowledge_base_sources(const char* value);
  void add_knowledge_base_sources(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& knowledge_base_sources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_knowledge_base_sources();
  private:
  const std::string& _internal_knowledge_base_sources(int index) const;
  std::string* _internal_add_knowledge_base_sources();
  public:

  // string encryption_algorithm = 9;
  void clear_encryption_algorithm();
  const std::string& encryption_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_algorithm();
  PROTOBUF_NODISCARD std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(std::string* encryption_algorithm);
  private:
  const std::string& _internal_encryption_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm();
  public:

  // string rag_model_endpoint = 11;
  void clear_rag_model_endpoint();
  const std::string& rag_model_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rag_model_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rag_model_endpoint();
  PROTOBUF_NODISCARD std::string* release_rag_model_endpoint();
  void set_allocated_rag_model_endpoint(std::string* rag_model_endpoint);
  private:
  const std::string& _internal_rag_model_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rag_model_endpoint(const std::string& value);
  std::string* _internal_mutable_rag_model_endpoint();
  public:

  // .google.protobuf.Duration time_window_size = 3;
  bool has_time_window_size() const;
  private:
  bool _internal_has_time_window_size() const;
  public:
  void clear_time_window_size();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_window_size() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_window_size();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_window_size();
  void set_allocated_time_window_size(::PROTOBUF_NAMESPACE_ID::Duration* time_window_size);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_window_size() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_window_size();
  public:
  void unsafe_arena_set_allocated_time_window_size(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_window_size);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_window_size();

  // uint32 max_events_per_window = 4;
  void clear_max_events_per_window();
  uint32_t max_events_per_window() const;
  void set_max_events_per_window(uint32_t value);
  private:
  uint32_t _internal_max_events_per_window() const;
  void _internal_set_max_events_per_window(uint32_t value);
  public:

  // bool encryption_enabled = 7;
  void clear_encryption_enabled();
  bool encryption_enabled() const;
  void set_encryption_enabled(bool value);
  private:
  bool _internal_encryption_enabled() const;
  void _internal_set_encryption_enabled(bool value);
  public:

  // bool compression_enabled = 8;
  void clear_compression_enabled();
  bool compression_enabled() const;
  void set_compression_enabled(bool value);
  private:
  bool _internal_compression_enabled() const;
  void _internal_set_compression_enabled(bool value);
  public:

  // bool rag_analysis_enabled = 10;
  void clear_rag_analysis_enabled();
  bool rag_analysis_enabled() const;
  void set_rag_analysis_enabled(bool value);
  private:
  bool _internal_rag_analysis_enabled() const;
  void _internal_set_rag_analysis_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.SystemConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_ml_models_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> threat_score_thresholds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::DistributedNode > cluster_nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> node_role_assignments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> knowledge_base_sources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rag_model_endpoint_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_window_size_;
    uint32_t max_events_per_window_;
    bool encryption_enabled_;
    bool compression_enabled_;
    bool rag_analysis_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// -------------------------------------------------------------------

class RansomwareFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.RansomwareFeatures) */ {
 public:
  inline RansomwareFeatures() : RansomwareFeatures(nullptr) {}
  ~RansomwareFeatures() override;
  explicit PROTOBUF_CONSTEXPR RansomwareFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RansomwareFeatures(const RansomwareFeatures& from);
  RansomwareFeatures(RansomwareFeatures&& from) noexcept
    : RansomwareFeatures() {
    *this = ::std::move(from);
  }

  inline RansomwareFeatures& operator=(const RansomwareFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline RansomwareFeatures& operator=(RansomwareFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RansomwareFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const RansomwareFeatures* internal_default_instance() {
    return reinterpret_cast<const RansomwareFeatures*>(
               &_RansomwareFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RansomwareFeatures& a, RansomwareFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(RansomwareFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RansomwareFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RansomwareFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RansomwareFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RansomwareFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RansomwareFeatures& from) {
    RansomwareFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RansomwareFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.RansomwareFeatures";
  }
  protected:
  explicit RansomwareFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDnsQueryEntropyFieldNumber = 1,
    kNewExternalIps30SFieldNumber = 2,
    kDnsQueryRatePerMinFieldNumber = 3,
    kFailedDnsQueriesRatioFieldNumber = 4,
    kTlsSelfSignedCertCountFieldNumber = 5,
    kNonStandardPortHttpCountFieldNumber = 6,
    kSmbConnectionDiversityFieldNumber = 7,
    kRdpFailedAuthCountFieldNumber = 8,
    kNewInternalConnections30SFieldNumber = 9,
    kPortScanPatternScoreFieldNumber = 10,
    kUploadDownloadRatio30SFieldNumber = 11,
    kBurstConnectionsCountFieldNumber = 12,
    kUniqueDestinations30SFieldNumber = 13,
    kLargeUploadSessionsCountFieldNumber = 14,
    kNocturnalActivityFlagFieldNumber = 15,
    kConnectionRateStddevFieldNumber = 16,
    kProtocolDiversityScoreFieldNumber = 17,
    kAvgFlowDurationSecondsFieldNumber = 18,
    kTcpRstRatioFieldNumber = 19,
    kSynWithoutAckRatioFieldNumber = 20,
  };
  // float dns_query_entropy = 1;
  void clear_dns_query_entropy();
  float dns_query_entropy() const;
  void set_dns_query_entropy(float value);
  private:
  float _internal_dns_query_entropy() const;
  void _internal_set_dns_query_entropy(float value);
  public:

  // int32 new_external_ips_30s = 2;
  void clear_new_external_ips_30s();
  int32_t new_external_ips_30s() const;
  void set_new_external_ips_30s(int32_t value);
  private:
  int32_t _internal_new_external_ips_30s() const;
  void _internal_set_new_external_ips_30s(int32_t value);
  public:

  // float dns_query_rate_per_min = 3;
  void clear_dns_query_rate_per_min();
  float dns_query_rate_per_min() const;
  void set_dns_query_rate_per_min(float value);
  private:
  float _internal_dns_query_rate_per_min() const;
  void _internal_set_dns_query_rate_per_min(float value);
  public:

  // float failed_dns_queries_ratio = 4;
  void clear_failed_dns_queries_ratio();
  float failed_dns_queries_ratio() const;
  void set_failed_dns_queries_ratio(float value);
  private:
  float _internal_failed_dns_queries_ratio() const;
  void _internal_set_failed_dns_queries_ratio(float value);
  public:

  // int32 tls_self_signed_cert_count = 5;
  void clear_tls_self_signed_cert_count();
  int32_t tls_self_signed_cert_count() const;
  void set_tls_self_signed_cert_count(int32_t value);
  private:
  int32_t _internal_tls_self_signed_cert_count() const;
  void _internal_set_tls_self_signed_cert_count(int32_t value);
  public:

  // int32 non_standard_port_http_count = 6;
  void clear_non_standard_port_http_count();
  int32_t non_standard_port_http_count() const;
  void set_non_standard_port_http_count(int32_t value);
  private:
  int32_t _internal_non_standard_port_http_count() const;
  void _internal_set_non_standard_port_http_count(int32_t value);
  public:

  // int32 smb_connection_diversity = 7;
  void clear_smb_connection_diversity();
  int32_t smb_connection_diversity() const;
  void set_smb_connection_diversity(int32_t value);
  private:
  int32_t _internal_smb_connection_diversity() const;
  void _internal_set_smb_connection_diversity(int32_t value);
  public:

  // int32 rdp_failed_auth_count = 8;
  void clear_rdp_failed_auth_count();
  int32_t rdp_failed_auth_count() const;
  void set_rdp_failed_auth_count(int32_t value);
  private:
  int32_t _internal_rdp_failed_auth_count() const;
  void _internal_set_rdp_failed_auth_count(int32_t value);
  public:

  // int32 new_internal_connections_30s = 9;
  void clear_new_internal_connections_30s();
  int32_t new_internal_connections_30s() const;
  void set_new_internal_connections_30s(int32_t value);
  private:
  int32_t _internal_new_internal_connections_30s() const;
  void _internal_set_new_internal_connections_30s(int32_t value);
  public:

  // float port_scan_pattern_score = 10;
  void clear_port_scan_pattern_score();
  float port_scan_pattern_score() const;
  void set_port_scan_pattern_score(float value);
  private:
  float _internal_port_scan_pattern_score() const;
  void _internal_set_port_scan_pattern_score(float value);
  public:

  // float upload_download_ratio_30s = 11;
  void clear_upload_download_ratio_30s();
  float upload_download_ratio_30s() const;
  void set_upload_download_ratio_30s(float value);
  private:
  float _internal_upload_download_ratio_30s() const;
  void _internal_set_upload_download_ratio_30s(float value);
  public:

  // int32 burst_connections_count = 12;
  void clear_burst_connections_count();
  int32_t burst_connections_count() const;
  void set_burst_connections_count(int32_t value);
  private:
  int32_t _internal_burst_connections_count() const;
  void _internal_set_burst_connections_count(int32_t value);
  public:

  // int32 unique_destinations_30s = 13;
  void clear_unique_destinations_30s();
  int32_t unique_destinations_30s() const;
  void set_unique_destinations_30s(int32_t value);
  private:
  int32_t _internal_unique_destinations_30s() const;
  void _internal_set_unique_destinations_30s(int32_t value);
  public:

  // int32 large_upload_sessions_count = 14;
  void clear_large_upload_sessions_count();
  int32_t large_upload_sessions_count() const;
  void set_large_upload_sessions_count(int32_t value);
  private:
  int32_t _internal_large_upload_sessions_count() const;
  void _internal_set_large_upload_sessions_count(int32_t value);
  public:

  // bool nocturnal_activity_flag = 15;
  void clear_nocturnal_activity_flag();
  bool nocturnal_activity_flag() const;
  void set_nocturnal_activity_flag(bool value);
  private:
  bool _internal_nocturnal_activity_flag() const;
  void _internal_set_nocturnal_activity_flag(bool value);
  public:

  // float connection_rate_stddev = 16;
  void clear_connection_rate_stddev();
  float connection_rate_stddev() const;
  void set_connection_rate_stddev(float value);
  private:
  float _internal_connection_rate_stddev() const;
  void _internal_set_connection_rate_stddev(float value);
  public:

  // float protocol_diversity_score = 17;
  void clear_protocol_diversity_score();
  float protocol_diversity_score() const;
  void set_protocol_diversity_score(float value);
  private:
  float _internal_protocol_diversity_score() const;
  void _internal_set_protocol_diversity_score(float value);
  public:

  // float avg_flow_duration_seconds = 18;
  void clear_avg_flow_duration_seconds();
  float avg_flow_duration_seconds() const;
  void set_avg_flow_duration_seconds(float value);
  private:
  float _internal_avg_flow_duration_seconds() const;
  void _internal_set_avg_flow_duration_seconds(float value);
  public:

  // float tcp_rst_ratio = 19;
  void clear_tcp_rst_ratio();
  float tcp_rst_ratio() const;
  void set_tcp_rst_ratio(float value);
  private:
  float _internal_tcp_rst_ratio() const;
  void _internal_set_tcp_rst_ratio(float value);
  public:

  // float syn_without_ack_ratio = 20;
  void clear_syn_without_ack_ratio();
  float syn_without_ack_ratio() const;
  void set_syn_without_ack_ratio(float value);
  private:
  float _internal_syn_without_ack_ratio() const;
  void _internal_set_syn_without_ack_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.RansomwareFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float dns_query_entropy_;
    int32_t new_external_ips_30s_;
    float dns_query_rate_per_min_;
    float failed_dns_queries_ratio_;
    int32_t tls_self_signed_cert_count_;
    int32_t non_standard_port_http_count_;
    int32_t smb_connection_diversity_;
    int32_t rdp_failed_auth_count_;
    int32_t new_internal_connections_30s_;
    float port_scan_pattern_score_;
    float upload_download_ratio_30s_;
    int32_t burst_connections_count_;
    int32_t unique_destinations_30s_;
    int32_t large_upload_sessions_count_;
    bool nocturnal_activity_flag_;
    float connection_rate_stddev_;
    float protocol_diversity_score_;
    float avg_flow_duration_seconds_;
    float tcp_rst_ratio_;
    float syn_without_ack_ratio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fsecurity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkFeatures

// string source_ip = 1;
inline void NetworkFeatures::clear_source_ip() {
  _impl_.source_ip_.ClearToEmpty();
}
inline const std::string& NetworkFeatures::source_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.source_ip)
  return _internal_source_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkFeatures::set_source_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.source_ip)
}
inline std::string* NetworkFeatures::mutable_source_ip() {
  std::string* _s = _internal_mutable_source_ip();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.source_ip)
  return _s;
}
inline const std::string& NetworkFeatures::_internal_source_ip() const {
  return _impl_.source_ip_.Get();
}
inline void NetworkFeatures::_internal_set_source_ip(const std::string& value) {
  
  _impl_.source_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkFeatures::_internal_mutable_source_ip() {
  
  return _impl_.source_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkFeatures::release_source_ip() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.source_ip)
  return _impl_.source_ip_.Release();
}
inline void NetworkFeatures::set_allocated_source_ip(std::string* source_ip) {
  if (source_ip != nullptr) {
    
  } else {
    
  }
  _impl_.source_ip_.SetAllocated(source_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_ip_.IsDefault()) {
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.source_ip)
}

// string destination_ip = 2;
inline void NetworkFeatures::clear_destination_ip() {
  _impl_.destination_ip_.ClearToEmpty();
}
inline const std::string& NetworkFeatures::destination_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.destination_ip)
  return _internal_destination_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkFeatures::set_destination_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.destination_ip)
}
inline std::string* NetworkFeatures::mutable_destination_ip() {
  std::string* _s = _internal_mutable_destination_ip();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.destination_ip)
  return _s;
}
inline const std::string& NetworkFeatures::_internal_destination_ip() const {
  return _impl_.destination_ip_.Get();
}
inline void NetworkFeatures::_internal_set_destination_ip(const std::string& value) {
  
  _impl_.destination_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkFeatures::_internal_mutable_destination_ip() {
  
  return _impl_.destination_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkFeatures::release_destination_ip() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.destination_ip)
  return _impl_.destination_ip_.Release();
}
inline void NetworkFeatures::set_allocated_destination_ip(std::string* destination_ip) {
  if (destination_ip != nullptr) {
    
  } else {
    
  }
  _impl_.destination_ip_.SetAllocated(destination_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_ip_.IsDefault()) {
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.destination_ip)
}

// uint32 source_port = 3;
inline void NetworkFeatures::clear_source_port() {
  _impl_.source_port_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_source_port() const {
  return _impl_.source_port_;
}
inline uint32_t NetworkFeatures::source_port() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.source_port)
  return _internal_source_port();
}
inline void NetworkFeatures::_internal_set_source_port(uint32_t value) {
  
  _impl_.source_port_ = value;
}
inline void NetworkFeatures::set_source_port(uint32_t value) {
  _internal_set_source_port(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.source_port)
}

// uint32 destination_port = 4;
inline void NetworkFeatures::clear_destination_port() {
  _impl_.destination_port_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_destination_port() const {
  return _impl_.destination_port_;
}
inline uint32_t NetworkFeatures::destination_port() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.destination_port)
  return _internal_destination_port();
}
inline void NetworkFeatures::_internal_set_destination_port(uint32_t value) {
  
  _impl_.destination_port_ = value;
}
inline void NetworkFeatures::set_destination_port(uint32_t value) {
  _internal_set_destination_port(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.destination_port)
}

// uint32 protocol_number = 5;
inline void NetworkFeatures::clear_protocol_number() {
  _impl_.protocol_number_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_protocol_number() const {
  return _impl_.protocol_number_;
}
inline uint32_t NetworkFeatures::protocol_number() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.protocol_number)
  return _internal_protocol_number();
}
inline void NetworkFeatures::_internal_set_protocol_number(uint32_t value) {
  
  _impl_.protocol_number_ = value;
}
inline void NetworkFeatures::set_protocol_number(uint32_t value) {
  _internal_set_protocol_number(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.protocol_number)
}

// string protocol_name = 6;
inline void NetworkFeatures::clear_protocol_name() {
  _impl_.protocol_name_.ClearToEmpty();
}
inline const std::string& NetworkFeatures::protocol_name() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.protocol_name)
  return _internal_protocol_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkFeatures::set_protocol_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocol_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.protocol_name)
}
inline std::string* NetworkFeatures::mutable_protocol_name() {
  std::string* _s = _internal_mutable_protocol_name();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.protocol_name)
  return _s;
}
inline const std::string& NetworkFeatures::_internal_protocol_name() const {
  return _impl_.protocol_name_.Get();
}
inline void NetworkFeatures::_internal_set_protocol_name(const std::string& value) {
  
  _impl_.protocol_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkFeatures::_internal_mutable_protocol_name() {
  
  return _impl_.protocol_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkFeatures::release_protocol_name() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.protocol_name)
  return _impl_.protocol_name_.Release();
}
inline void NetworkFeatures::set_allocated_protocol_name(std::string* protocol_name) {
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  _impl_.protocol_name_.SetAllocated(protocol_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_name_.IsDefault()) {
    _impl_.protocol_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.protocol_name)
}

// .google.protobuf.Timestamp flow_start_time = 7;
inline bool NetworkFeatures::_internal_has_flow_start_time() const {
  return this != internal_default_instance() && _impl_.flow_start_time_ != nullptr;
}
inline bool NetworkFeatures::has_flow_start_time() const {
  return _internal_has_flow_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NetworkFeatures::_internal_flow_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.flow_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NetworkFeatures::flow_start_time() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_start_time)
  return _internal_flow_start_time();
}
inline void NetworkFeatures::unsafe_arena_set_allocated_flow_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* flow_start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flow_start_time_);
  }
  _impl_.flow_start_time_ = flow_start_time;
  if (flow_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkFeatures.flow_start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkFeatures::release_flow_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.flow_start_time_;
  _impl_.flow_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkFeatures::unsafe_arena_release_flow_start_time() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.flow_start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.flow_start_time_;
  _impl_.flow_start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkFeatures::_internal_mutable_flow_start_time() {
  
  if (_impl_.flow_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.flow_start_time_ = p;
  }
  return _impl_.flow_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkFeatures::mutable_flow_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_flow_start_time();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.flow_start_time)
  return _msg;
}
inline void NetworkFeatures::set_allocated_flow_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* flow_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flow_start_time_);
  }
  if (flow_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_start_time));
    if (message_arena != submessage_arena) {
      flow_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flow_start_time_ = flow_start_time;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.flow_start_time)
}

// .google.protobuf.Duration flow_duration = 8;
inline bool NetworkFeatures::_internal_has_flow_duration() const {
  return this != internal_default_instance() && _impl_.flow_duration_ != nullptr;
}
inline bool NetworkFeatures::has_flow_duration() const {
  return _internal_has_flow_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& NetworkFeatures::_internal_flow_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.flow_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& NetworkFeatures::flow_duration() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_duration)
  return _internal_flow_duration();
}
inline void NetworkFeatures::unsafe_arena_set_allocated_flow_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* flow_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flow_duration_);
  }
  _impl_.flow_duration_ = flow_duration;
  if (flow_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkFeatures.flow_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NetworkFeatures::release_flow_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.flow_duration_;
  _impl_.flow_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NetworkFeatures::unsafe_arena_release_flow_duration() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.flow_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.flow_duration_;
  _impl_.flow_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NetworkFeatures::_internal_mutable_flow_duration() {
  
  if (_impl_.flow_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.flow_duration_ = p;
  }
  return _impl_.flow_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NetworkFeatures::mutable_flow_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_flow_duration();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.flow_duration)
  return _msg;
}
inline void NetworkFeatures::set_allocated_flow_duration(::PROTOBUF_NAMESPACE_ID::Duration* flow_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flow_duration_);
  }
  if (flow_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_duration));
    if (message_arena != submessage_arena) {
      flow_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flow_duration_ = flow_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.flow_duration)
}

// uint64 flow_duration_microseconds = 9;
inline void NetworkFeatures::clear_flow_duration_microseconds() {
  _impl_.flow_duration_microseconds_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_flow_duration_microseconds() const {
  return _impl_.flow_duration_microseconds_;
}
inline uint64_t NetworkFeatures::flow_duration_microseconds() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_duration_microseconds)
  return _internal_flow_duration_microseconds();
}
inline void NetworkFeatures::_internal_set_flow_duration_microseconds(uint64_t value) {
  
  _impl_.flow_duration_microseconds_ = value;
}
inline void NetworkFeatures::set_flow_duration_microseconds(uint64_t value) {
  _internal_set_flow_duration_microseconds(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_duration_microseconds)
}

// uint64 total_forward_packets = 10;
inline void NetworkFeatures::clear_total_forward_packets() {
  _impl_.total_forward_packets_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_total_forward_packets() const {
  return _impl_.total_forward_packets_;
}
inline uint64_t NetworkFeatures::total_forward_packets() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_forward_packets)
  return _internal_total_forward_packets();
}
inline void NetworkFeatures::_internal_set_total_forward_packets(uint64_t value) {
  
  _impl_.total_forward_packets_ = value;
}
inline void NetworkFeatures::set_total_forward_packets(uint64_t value) {
  _internal_set_total_forward_packets(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_forward_packets)
}

// uint64 total_backward_packets = 11;
inline void NetworkFeatures::clear_total_backward_packets() {
  _impl_.total_backward_packets_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_total_backward_packets() const {
  return _impl_.total_backward_packets_;
}
inline uint64_t NetworkFeatures::total_backward_packets() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_backward_packets)
  return _internal_total_backward_packets();
}
inline void NetworkFeatures::_internal_set_total_backward_packets(uint64_t value) {
  
  _impl_.total_backward_packets_ = value;
}
inline void NetworkFeatures::set_total_backward_packets(uint64_t value) {
  _internal_set_total_backward_packets(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_backward_packets)
}

// uint64 total_forward_bytes = 12;
inline void NetworkFeatures::clear_total_forward_bytes() {
  _impl_.total_forward_bytes_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_total_forward_bytes() const {
  return _impl_.total_forward_bytes_;
}
inline uint64_t NetworkFeatures::total_forward_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_forward_bytes)
  return _internal_total_forward_bytes();
}
inline void NetworkFeatures::_internal_set_total_forward_bytes(uint64_t value) {
  
  _impl_.total_forward_bytes_ = value;
}
inline void NetworkFeatures::set_total_forward_bytes(uint64_t value) {
  _internal_set_total_forward_bytes(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_forward_bytes)
}

// uint64 total_backward_bytes = 13;
inline void NetworkFeatures::clear_total_backward_bytes() {
  _impl_.total_backward_bytes_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_total_backward_bytes() const {
  return _impl_.total_backward_bytes_;
}
inline uint64_t NetworkFeatures::total_backward_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_backward_bytes)
  return _internal_total_backward_bytes();
}
inline void NetworkFeatures::_internal_set_total_backward_bytes(uint64_t value) {
  
  _impl_.total_backward_bytes_ = value;
}
inline void NetworkFeatures::set_total_backward_bytes(uint64_t value) {
  _internal_set_total_backward_bytes(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_backward_bytes)
}

// uint64 forward_packet_length_max = 20;
inline void NetworkFeatures::clear_forward_packet_length_max() {
  _impl_.forward_packet_length_max_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_forward_packet_length_max() const {
  return _impl_.forward_packet_length_max_;
}
inline uint64_t NetworkFeatures::forward_packet_length_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_max)
  return _internal_forward_packet_length_max();
}
inline void NetworkFeatures::_internal_set_forward_packet_length_max(uint64_t value) {
  
  _impl_.forward_packet_length_max_ = value;
}
inline void NetworkFeatures::set_forward_packet_length_max(uint64_t value) {
  _internal_set_forward_packet_length_max(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_max)
}

// uint64 forward_packet_length_min = 21;
inline void NetworkFeatures::clear_forward_packet_length_min() {
  _impl_.forward_packet_length_min_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_forward_packet_length_min() const {
  return _impl_.forward_packet_length_min_;
}
inline uint64_t NetworkFeatures::forward_packet_length_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_min)
  return _internal_forward_packet_length_min();
}
inline void NetworkFeatures::_internal_set_forward_packet_length_min(uint64_t value) {
  
  _impl_.forward_packet_length_min_ = value;
}
inline void NetworkFeatures::set_forward_packet_length_min(uint64_t value) {
  _internal_set_forward_packet_length_min(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_min)
}

// double forward_packet_length_mean = 22;
inline void NetworkFeatures::clear_forward_packet_length_mean() {
  _impl_.forward_packet_length_mean_ = 0;
}
inline double NetworkFeatures::_internal_forward_packet_length_mean() const {
  return _impl_.forward_packet_length_mean_;
}
inline double NetworkFeatures::forward_packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_mean)
  return _internal_forward_packet_length_mean();
}
inline void NetworkFeatures::_internal_set_forward_packet_length_mean(double value) {
  
  _impl_.forward_packet_length_mean_ = value;
}
inline void NetworkFeatures::set_forward_packet_length_mean(double value) {
  _internal_set_forward_packet_length_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_mean)
}

// double forward_packet_length_std = 23;
inline void NetworkFeatures::clear_forward_packet_length_std() {
  _impl_.forward_packet_length_std_ = 0;
}
inline double NetworkFeatures::_internal_forward_packet_length_std() const {
  return _impl_.forward_packet_length_std_;
}
inline double NetworkFeatures::forward_packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_std)
  return _internal_forward_packet_length_std();
}
inline void NetworkFeatures::_internal_set_forward_packet_length_std(double value) {
  
  _impl_.forward_packet_length_std_ = value;
}
inline void NetworkFeatures::set_forward_packet_length_std(double value) {
  _internal_set_forward_packet_length_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_std)
}

// uint64 backward_packet_length_max = 30;
inline void NetworkFeatures::clear_backward_packet_length_max() {
  _impl_.backward_packet_length_max_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_backward_packet_length_max() const {
  return _impl_.backward_packet_length_max_;
}
inline uint64_t NetworkFeatures::backward_packet_length_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_max)
  return _internal_backward_packet_length_max();
}
inline void NetworkFeatures::_internal_set_backward_packet_length_max(uint64_t value) {
  
  _impl_.backward_packet_length_max_ = value;
}
inline void NetworkFeatures::set_backward_packet_length_max(uint64_t value) {
  _internal_set_backward_packet_length_max(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_max)
}

// uint64 backward_packet_length_min = 31;
inline void NetworkFeatures::clear_backward_packet_length_min() {
  _impl_.backward_packet_length_min_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_backward_packet_length_min() const {
  return _impl_.backward_packet_length_min_;
}
inline uint64_t NetworkFeatures::backward_packet_length_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_min)
  return _internal_backward_packet_length_min();
}
inline void NetworkFeatures::_internal_set_backward_packet_length_min(uint64_t value) {
  
  _impl_.backward_packet_length_min_ = value;
}
inline void NetworkFeatures::set_backward_packet_length_min(uint64_t value) {
  _internal_set_backward_packet_length_min(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_min)
}

// double backward_packet_length_mean = 32;
inline void NetworkFeatures::clear_backward_packet_length_mean() {
  _impl_.backward_packet_length_mean_ = 0;
}
inline double NetworkFeatures::_internal_backward_packet_length_mean() const {
  return _impl_.backward_packet_length_mean_;
}
inline double NetworkFeatures::backward_packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_mean)
  return _internal_backward_packet_length_mean();
}
inline void NetworkFeatures::_internal_set_backward_packet_length_mean(double value) {
  
  _impl_.backward_packet_length_mean_ = value;
}
inline void NetworkFeatures::set_backward_packet_length_mean(double value) {
  _internal_set_backward_packet_length_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_mean)
}

// double backward_packet_length_std = 33;
inline void NetworkFeatures::clear_backward_packet_length_std() {
  _impl_.backward_packet_length_std_ = 0;
}
inline double NetworkFeatures::_internal_backward_packet_length_std() const {
  return _impl_.backward_packet_length_std_;
}
inline double NetworkFeatures::backward_packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_std)
  return _internal_backward_packet_length_std();
}
inline void NetworkFeatures::_internal_set_backward_packet_length_std(double value) {
  
  _impl_.backward_packet_length_std_ = value;
}
inline void NetworkFeatures::set_backward_packet_length_std(double value) {
  _internal_set_backward_packet_length_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_std)
}

// double flow_bytes_per_second = 40;
inline void NetworkFeatures::clear_flow_bytes_per_second() {
  _impl_.flow_bytes_per_second_ = 0;
}
inline double NetworkFeatures::_internal_flow_bytes_per_second() const {
  return _impl_.flow_bytes_per_second_;
}
inline double NetworkFeatures::flow_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_bytes_per_second)
  return _internal_flow_bytes_per_second();
}
inline void NetworkFeatures::_internal_set_flow_bytes_per_second(double value) {
  
  _impl_.flow_bytes_per_second_ = value;
}
inline void NetworkFeatures::set_flow_bytes_per_second(double value) {
  _internal_set_flow_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_bytes_per_second)
}

// double flow_packets_per_second = 41;
inline void NetworkFeatures::clear_flow_packets_per_second() {
  _impl_.flow_packets_per_second_ = 0;
}
inline double NetworkFeatures::_internal_flow_packets_per_second() const {
  return _impl_.flow_packets_per_second_;
}
inline double NetworkFeatures::flow_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_packets_per_second)
  return _internal_flow_packets_per_second();
}
inline void NetworkFeatures::_internal_set_flow_packets_per_second(double value) {
  
  _impl_.flow_packets_per_second_ = value;
}
inline void NetworkFeatures::set_flow_packets_per_second(double value) {
  _internal_set_flow_packets_per_second(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_packets_per_second)
}

// double forward_packets_per_second = 42;
inline void NetworkFeatures::clear_forward_packets_per_second() {
  _impl_.forward_packets_per_second_ = 0;
}
inline double NetworkFeatures::_internal_forward_packets_per_second() const {
  return _impl_.forward_packets_per_second_;
}
inline double NetworkFeatures::forward_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packets_per_second)
  return _internal_forward_packets_per_second();
}
inline void NetworkFeatures::_internal_set_forward_packets_per_second(double value) {
  
  _impl_.forward_packets_per_second_ = value;
}
inline void NetworkFeatures::set_forward_packets_per_second(double value) {
  _internal_set_forward_packets_per_second(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packets_per_second)
}

// double backward_packets_per_second = 43;
inline void NetworkFeatures::clear_backward_packets_per_second() {
  _impl_.backward_packets_per_second_ = 0;
}
inline double NetworkFeatures::_internal_backward_packets_per_second() const {
  return _impl_.backward_packets_per_second_;
}
inline double NetworkFeatures::backward_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packets_per_second)
  return _internal_backward_packets_per_second();
}
inline void NetworkFeatures::_internal_set_backward_packets_per_second(double value) {
  
  _impl_.backward_packets_per_second_ = value;
}
inline void NetworkFeatures::set_backward_packets_per_second(double value) {
  _internal_set_backward_packets_per_second(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packets_per_second)
}

// double download_upload_ratio = 44;
inline void NetworkFeatures::clear_download_upload_ratio() {
  _impl_.download_upload_ratio_ = 0;
}
inline double NetworkFeatures::_internal_download_upload_ratio() const {
  return _impl_.download_upload_ratio_;
}
inline double NetworkFeatures::download_upload_ratio() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.download_upload_ratio)
  return _internal_download_upload_ratio();
}
inline void NetworkFeatures::_internal_set_download_upload_ratio(double value) {
  
  _impl_.download_upload_ratio_ = value;
}
inline void NetworkFeatures::set_download_upload_ratio(double value) {
  _internal_set_download_upload_ratio(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.download_upload_ratio)
}

// double average_packet_size = 45;
inline void NetworkFeatures::clear_average_packet_size() {
  _impl_.average_packet_size_ = 0;
}
inline double NetworkFeatures::_internal_average_packet_size() const {
  return _impl_.average_packet_size_;
}
inline double NetworkFeatures::average_packet_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_packet_size)
  return _internal_average_packet_size();
}
inline void NetworkFeatures::_internal_set_average_packet_size(double value) {
  
  _impl_.average_packet_size_ = value;
}
inline void NetworkFeatures::set_average_packet_size(double value) {
  _internal_set_average_packet_size(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_packet_size)
}

// double average_forward_segment_size = 46;
inline void NetworkFeatures::clear_average_forward_segment_size() {
  _impl_.average_forward_segment_size_ = 0;
}
inline double NetworkFeatures::_internal_average_forward_segment_size() const {
  return _impl_.average_forward_segment_size_;
}
inline double NetworkFeatures::average_forward_segment_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_forward_segment_size)
  return _internal_average_forward_segment_size();
}
inline void NetworkFeatures::_internal_set_average_forward_segment_size(double value) {
  
  _impl_.average_forward_segment_size_ = value;
}
inline void NetworkFeatures::set_average_forward_segment_size(double value) {
  _internal_set_average_forward_segment_size(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_forward_segment_size)
}

// double average_backward_segment_size = 47;
inline void NetworkFeatures::clear_average_backward_segment_size() {
  _impl_.average_backward_segment_size_ = 0;
}
inline double NetworkFeatures::_internal_average_backward_segment_size() const {
  return _impl_.average_backward_segment_size_;
}
inline double NetworkFeatures::average_backward_segment_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_backward_segment_size)
  return _internal_average_backward_segment_size();
}
inline void NetworkFeatures::_internal_set_average_backward_segment_size(double value) {
  
  _impl_.average_backward_segment_size_ = value;
}
inline void NetworkFeatures::set_average_backward_segment_size(double value) {
  _internal_set_average_backward_segment_size(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_backward_segment_size)
}

// double flow_inter_arrival_time_mean = 50;
inline void NetworkFeatures::clear_flow_inter_arrival_time_mean() {
  _impl_.flow_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::_internal_flow_inter_arrival_time_mean() const {
  return _impl_.flow_inter_arrival_time_mean_;
}
inline double NetworkFeatures::flow_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_mean)
  return _internal_flow_inter_arrival_time_mean();
}
inline void NetworkFeatures::_internal_set_flow_inter_arrival_time_mean(double value) {
  
  _impl_.flow_inter_arrival_time_mean_ = value;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_mean(double value) {
  _internal_set_flow_inter_arrival_time_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_mean)
}

// double flow_inter_arrival_time_std = 51;
inline void NetworkFeatures::clear_flow_inter_arrival_time_std() {
  _impl_.flow_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::_internal_flow_inter_arrival_time_std() const {
  return _impl_.flow_inter_arrival_time_std_;
}
inline double NetworkFeatures::flow_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_std)
  return _internal_flow_inter_arrival_time_std();
}
inline void NetworkFeatures::_internal_set_flow_inter_arrival_time_std(double value) {
  
  _impl_.flow_inter_arrival_time_std_ = value;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_std(double value) {
  _internal_set_flow_inter_arrival_time_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_std)
}

// uint64 flow_inter_arrival_time_max = 52;
inline void NetworkFeatures::clear_flow_inter_arrival_time_max() {
  _impl_.flow_inter_arrival_time_max_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_flow_inter_arrival_time_max() const {
  return _impl_.flow_inter_arrival_time_max_;
}
inline uint64_t NetworkFeatures::flow_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_max)
  return _internal_flow_inter_arrival_time_max();
}
inline void NetworkFeatures::_internal_set_flow_inter_arrival_time_max(uint64_t value) {
  
  _impl_.flow_inter_arrival_time_max_ = value;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_max(uint64_t value) {
  _internal_set_flow_inter_arrival_time_max(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_max)
}

// uint64 flow_inter_arrival_time_min = 53;
inline void NetworkFeatures::clear_flow_inter_arrival_time_min() {
  _impl_.flow_inter_arrival_time_min_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_flow_inter_arrival_time_min() const {
  return _impl_.flow_inter_arrival_time_min_;
}
inline uint64_t NetworkFeatures::flow_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_min)
  return _internal_flow_inter_arrival_time_min();
}
inline void NetworkFeatures::_internal_set_flow_inter_arrival_time_min(uint64_t value) {
  
  _impl_.flow_inter_arrival_time_min_ = value;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_min(uint64_t value) {
  _internal_set_flow_inter_arrival_time_min(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_min)
}

// double forward_inter_arrival_time_total = 54;
inline void NetworkFeatures::clear_forward_inter_arrival_time_total() {
  _impl_.forward_inter_arrival_time_total_ = 0;
}
inline double NetworkFeatures::_internal_forward_inter_arrival_time_total() const {
  return _impl_.forward_inter_arrival_time_total_;
}
inline double NetworkFeatures::forward_inter_arrival_time_total() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_total)
  return _internal_forward_inter_arrival_time_total();
}
inline void NetworkFeatures::_internal_set_forward_inter_arrival_time_total(double value) {
  
  _impl_.forward_inter_arrival_time_total_ = value;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_total(double value) {
  _internal_set_forward_inter_arrival_time_total(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_total)
}

// double forward_inter_arrival_time_mean = 55;
inline void NetworkFeatures::clear_forward_inter_arrival_time_mean() {
  _impl_.forward_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::_internal_forward_inter_arrival_time_mean() const {
  return _impl_.forward_inter_arrival_time_mean_;
}
inline double NetworkFeatures::forward_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_mean)
  return _internal_forward_inter_arrival_time_mean();
}
inline void NetworkFeatures::_internal_set_forward_inter_arrival_time_mean(double value) {
  
  _impl_.forward_inter_arrival_time_mean_ = value;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_mean(double value) {
  _internal_set_forward_inter_arrival_time_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_mean)
}

// double forward_inter_arrival_time_std = 56;
inline void NetworkFeatures::clear_forward_inter_arrival_time_std() {
  _impl_.forward_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::_internal_forward_inter_arrival_time_std() const {
  return _impl_.forward_inter_arrival_time_std_;
}
inline double NetworkFeatures::forward_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_std)
  return _internal_forward_inter_arrival_time_std();
}
inline void NetworkFeatures::_internal_set_forward_inter_arrival_time_std(double value) {
  
  _impl_.forward_inter_arrival_time_std_ = value;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_std(double value) {
  _internal_set_forward_inter_arrival_time_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_std)
}

// uint64 forward_inter_arrival_time_max = 57;
inline void NetworkFeatures::clear_forward_inter_arrival_time_max() {
  _impl_.forward_inter_arrival_time_max_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_forward_inter_arrival_time_max() const {
  return _impl_.forward_inter_arrival_time_max_;
}
inline uint64_t NetworkFeatures::forward_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_max)
  return _internal_forward_inter_arrival_time_max();
}
inline void NetworkFeatures::_internal_set_forward_inter_arrival_time_max(uint64_t value) {
  
  _impl_.forward_inter_arrival_time_max_ = value;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_max(uint64_t value) {
  _internal_set_forward_inter_arrival_time_max(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_max)
}

// uint64 forward_inter_arrival_time_min = 58;
inline void NetworkFeatures::clear_forward_inter_arrival_time_min() {
  _impl_.forward_inter_arrival_time_min_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_forward_inter_arrival_time_min() const {
  return _impl_.forward_inter_arrival_time_min_;
}
inline uint64_t NetworkFeatures::forward_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_min)
  return _internal_forward_inter_arrival_time_min();
}
inline void NetworkFeatures::_internal_set_forward_inter_arrival_time_min(uint64_t value) {
  
  _impl_.forward_inter_arrival_time_min_ = value;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_min(uint64_t value) {
  _internal_set_forward_inter_arrival_time_min(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_min)
}

// double backward_inter_arrival_time_total = 59;
inline void NetworkFeatures::clear_backward_inter_arrival_time_total() {
  _impl_.backward_inter_arrival_time_total_ = 0;
}
inline double NetworkFeatures::_internal_backward_inter_arrival_time_total() const {
  return _impl_.backward_inter_arrival_time_total_;
}
inline double NetworkFeatures::backward_inter_arrival_time_total() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_total)
  return _internal_backward_inter_arrival_time_total();
}
inline void NetworkFeatures::_internal_set_backward_inter_arrival_time_total(double value) {
  
  _impl_.backward_inter_arrival_time_total_ = value;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_total(double value) {
  _internal_set_backward_inter_arrival_time_total(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_total)
}

// double backward_inter_arrival_time_mean = 60;
inline void NetworkFeatures::clear_backward_inter_arrival_time_mean() {
  _impl_.backward_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::_internal_backward_inter_arrival_time_mean() const {
  return _impl_.backward_inter_arrival_time_mean_;
}
inline double NetworkFeatures::backward_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_mean)
  return _internal_backward_inter_arrival_time_mean();
}
inline void NetworkFeatures::_internal_set_backward_inter_arrival_time_mean(double value) {
  
  _impl_.backward_inter_arrival_time_mean_ = value;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_mean(double value) {
  _internal_set_backward_inter_arrival_time_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_mean)
}

// double backward_inter_arrival_time_std = 61;
inline void NetworkFeatures::clear_backward_inter_arrival_time_std() {
  _impl_.backward_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::_internal_backward_inter_arrival_time_std() const {
  return _impl_.backward_inter_arrival_time_std_;
}
inline double NetworkFeatures::backward_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_std)
  return _internal_backward_inter_arrival_time_std();
}
inline void NetworkFeatures::_internal_set_backward_inter_arrival_time_std(double value) {
  
  _impl_.backward_inter_arrival_time_std_ = value;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_std(double value) {
  _internal_set_backward_inter_arrival_time_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_std)
}

// uint64 backward_inter_arrival_time_max = 62;
inline void NetworkFeatures::clear_backward_inter_arrival_time_max() {
  _impl_.backward_inter_arrival_time_max_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_backward_inter_arrival_time_max() const {
  return _impl_.backward_inter_arrival_time_max_;
}
inline uint64_t NetworkFeatures::backward_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_max)
  return _internal_backward_inter_arrival_time_max();
}
inline void NetworkFeatures::_internal_set_backward_inter_arrival_time_max(uint64_t value) {
  
  _impl_.backward_inter_arrival_time_max_ = value;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_max(uint64_t value) {
  _internal_set_backward_inter_arrival_time_max(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_max)
}

// uint64 backward_inter_arrival_time_min = 63;
inline void NetworkFeatures::clear_backward_inter_arrival_time_min() {
  _impl_.backward_inter_arrival_time_min_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_backward_inter_arrival_time_min() const {
  return _impl_.backward_inter_arrival_time_min_;
}
inline uint64_t NetworkFeatures::backward_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_min)
  return _internal_backward_inter_arrival_time_min();
}
inline void NetworkFeatures::_internal_set_backward_inter_arrival_time_min(uint64_t value) {
  
  _impl_.backward_inter_arrival_time_min_ = value;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_min(uint64_t value) {
  _internal_set_backward_inter_arrival_time_min(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_min)
}

// uint32 fin_flag_count = 70;
inline void NetworkFeatures::clear_fin_flag_count() {
  _impl_.fin_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_fin_flag_count() const {
  return _impl_.fin_flag_count_;
}
inline uint32_t NetworkFeatures::fin_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.fin_flag_count)
  return _internal_fin_flag_count();
}
inline void NetworkFeatures::_internal_set_fin_flag_count(uint32_t value) {
  
  _impl_.fin_flag_count_ = value;
}
inline void NetworkFeatures::set_fin_flag_count(uint32_t value) {
  _internal_set_fin_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.fin_flag_count)
}

// uint32 syn_flag_count = 71;
inline void NetworkFeatures::clear_syn_flag_count() {
  _impl_.syn_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_syn_flag_count() const {
  return _impl_.syn_flag_count_;
}
inline uint32_t NetworkFeatures::syn_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.syn_flag_count)
  return _internal_syn_flag_count();
}
inline void NetworkFeatures::_internal_set_syn_flag_count(uint32_t value) {
  
  _impl_.syn_flag_count_ = value;
}
inline void NetworkFeatures::set_syn_flag_count(uint32_t value) {
  _internal_set_syn_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.syn_flag_count)
}

// uint32 rst_flag_count = 72;
inline void NetworkFeatures::clear_rst_flag_count() {
  _impl_.rst_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_rst_flag_count() const {
  return _impl_.rst_flag_count_;
}
inline uint32_t NetworkFeatures::rst_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.rst_flag_count)
  return _internal_rst_flag_count();
}
inline void NetworkFeatures::_internal_set_rst_flag_count(uint32_t value) {
  
  _impl_.rst_flag_count_ = value;
}
inline void NetworkFeatures::set_rst_flag_count(uint32_t value) {
  _internal_set_rst_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.rst_flag_count)
}

// uint32 psh_flag_count = 73;
inline void NetworkFeatures::clear_psh_flag_count() {
  _impl_.psh_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_psh_flag_count() const {
  return _impl_.psh_flag_count_;
}
inline uint32_t NetworkFeatures::psh_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.psh_flag_count)
  return _internal_psh_flag_count();
}
inline void NetworkFeatures::_internal_set_psh_flag_count(uint32_t value) {
  
  _impl_.psh_flag_count_ = value;
}
inline void NetworkFeatures::set_psh_flag_count(uint32_t value) {
  _internal_set_psh_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.psh_flag_count)
}

// uint32 ack_flag_count = 74;
inline void NetworkFeatures::clear_ack_flag_count() {
  _impl_.ack_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_ack_flag_count() const {
  return _impl_.ack_flag_count_;
}
inline uint32_t NetworkFeatures::ack_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ack_flag_count)
  return _internal_ack_flag_count();
}
inline void NetworkFeatures::_internal_set_ack_flag_count(uint32_t value) {
  
  _impl_.ack_flag_count_ = value;
}
inline void NetworkFeatures::set_ack_flag_count(uint32_t value) {
  _internal_set_ack_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ack_flag_count)
}

// uint32 urg_flag_count = 75;
inline void NetworkFeatures::clear_urg_flag_count() {
  _impl_.urg_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_urg_flag_count() const {
  return _impl_.urg_flag_count_;
}
inline uint32_t NetworkFeatures::urg_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.urg_flag_count)
  return _internal_urg_flag_count();
}
inline void NetworkFeatures::_internal_set_urg_flag_count(uint32_t value) {
  
  _impl_.urg_flag_count_ = value;
}
inline void NetworkFeatures::set_urg_flag_count(uint32_t value) {
  _internal_set_urg_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.urg_flag_count)
}

// uint32 cwe_flag_count = 76;
inline void NetworkFeatures::clear_cwe_flag_count() {
  _impl_.cwe_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_cwe_flag_count() const {
  return _impl_.cwe_flag_count_;
}
inline uint32_t NetworkFeatures::cwe_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.cwe_flag_count)
  return _internal_cwe_flag_count();
}
inline void NetworkFeatures::_internal_set_cwe_flag_count(uint32_t value) {
  
  _impl_.cwe_flag_count_ = value;
}
inline void NetworkFeatures::set_cwe_flag_count(uint32_t value) {
  _internal_set_cwe_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.cwe_flag_count)
}

// uint32 ece_flag_count = 77;
inline void NetworkFeatures::clear_ece_flag_count() {
  _impl_.ece_flag_count_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_ece_flag_count() const {
  return _impl_.ece_flag_count_;
}
inline uint32_t NetworkFeatures::ece_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ece_flag_count)
  return _internal_ece_flag_count();
}
inline void NetworkFeatures::_internal_set_ece_flag_count(uint32_t value) {
  
  _impl_.ece_flag_count_ = value;
}
inline void NetworkFeatures::set_ece_flag_count(uint32_t value) {
  _internal_set_ece_flag_count(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ece_flag_count)
}

// uint32 forward_psh_flags = 78;
inline void NetworkFeatures::clear_forward_psh_flags() {
  _impl_.forward_psh_flags_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_forward_psh_flags() const {
  return _impl_.forward_psh_flags_;
}
inline uint32_t NetworkFeatures::forward_psh_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_psh_flags)
  return _internal_forward_psh_flags();
}
inline void NetworkFeatures::_internal_set_forward_psh_flags(uint32_t value) {
  
  _impl_.forward_psh_flags_ = value;
}
inline void NetworkFeatures::set_forward_psh_flags(uint32_t value) {
  _internal_set_forward_psh_flags(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_psh_flags)
}

// uint32 backward_psh_flags = 79;
inline void NetworkFeatures::clear_backward_psh_flags() {
  _impl_.backward_psh_flags_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_backward_psh_flags() const {
  return _impl_.backward_psh_flags_;
}
inline uint32_t NetworkFeatures::backward_psh_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_psh_flags)
  return _internal_backward_psh_flags();
}
inline void NetworkFeatures::_internal_set_backward_psh_flags(uint32_t value) {
  
  _impl_.backward_psh_flags_ = value;
}
inline void NetworkFeatures::set_backward_psh_flags(uint32_t value) {
  _internal_set_backward_psh_flags(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_psh_flags)
}

// uint32 forward_urg_flags = 80;
inline void NetworkFeatures::clear_forward_urg_flags() {
  _impl_.forward_urg_flags_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_forward_urg_flags() const {
  return _impl_.forward_urg_flags_;
}
inline uint32_t NetworkFeatures::forward_urg_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_urg_flags)
  return _internal_forward_urg_flags();
}
inline void NetworkFeatures::_internal_set_forward_urg_flags(uint32_t value) {
  
  _impl_.forward_urg_flags_ = value;
}
inline void NetworkFeatures::set_forward_urg_flags(uint32_t value) {
  _internal_set_forward_urg_flags(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_urg_flags)
}

// uint32 backward_urg_flags = 81;
inline void NetworkFeatures::clear_backward_urg_flags() {
  _impl_.backward_urg_flags_ = 0u;
}
inline uint32_t NetworkFeatures::_internal_backward_urg_flags() const {
  return _impl_.backward_urg_flags_;
}
inline uint32_t NetworkFeatures::backward_urg_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_urg_flags)
  return _internal_backward_urg_flags();
}
inline void NetworkFeatures::_internal_set_backward_urg_flags(uint32_t value) {
  
  _impl_.backward_urg_flags_ = value;
}
inline void NetworkFeatures::set_backward_urg_flags(uint32_t value) {
  _internal_set_backward_urg_flags(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_urg_flags)
}

// double forward_header_length = 85;
inline void NetworkFeatures::clear_forward_header_length() {
  _impl_.forward_header_length_ = 0;
}
inline double NetworkFeatures::_internal_forward_header_length() const {
  return _impl_.forward_header_length_;
}
inline double NetworkFeatures::forward_header_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_header_length)
  return _internal_forward_header_length();
}
inline void NetworkFeatures::_internal_set_forward_header_length(double value) {
  
  _impl_.forward_header_length_ = value;
}
inline void NetworkFeatures::set_forward_header_length(double value) {
  _internal_set_forward_header_length(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_header_length)
}

// double backward_header_length = 86;
inline void NetworkFeatures::clear_backward_header_length() {
  _impl_.backward_header_length_ = 0;
}
inline double NetworkFeatures::_internal_backward_header_length() const {
  return _impl_.backward_header_length_;
}
inline double NetworkFeatures::backward_header_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_header_length)
  return _internal_backward_header_length();
}
inline void NetworkFeatures::_internal_set_backward_header_length(double value) {
  
  _impl_.backward_header_length_ = value;
}
inline void NetworkFeatures::set_backward_header_length(double value) {
  _internal_set_backward_header_length(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_header_length)
}

// double forward_average_bytes_bulk = 87;
inline void NetworkFeatures::clear_forward_average_bytes_bulk() {
  _impl_.forward_average_bytes_bulk_ = 0;
}
inline double NetworkFeatures::_internal_forward_average_bytes_bulk() const {
  return _impl_.forward_average_bytes_bulk_;
}
inline double NetworkFeatures::forward_average_bytes_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_bytes_bulk)
  return _internal_forward_average_bytes_bulk();
}
inline void NetworkFeatures::_internal_set_forward_average_bytes_bulk(double value) {
  
  _impl_.forward_average_bytes_bulk_ = value;
}
inline void NetworkFeatures::set_forward_average_bytes_bulk(double value) {
  _internal_set_forward_average_bytes_bulk(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_bytes_bulk)
}

// double forward_average_packets_bulk = 88;
inline void NetworkFeatures::clear_forward_average_packets_bulk() {
  _impl_.forward_average_packets_bulk_ = 0;
}
inline double NetworkFeatures::_internal_forward_average_packets_bulk() const {
  return _impl_.forward_average_packets_bulk_;
}
inline double NetworkFeatures::forward_average_packets_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_packets_bulk)
  return _internal_forward_average_packets_bulk();
}
inline void NetworkFeatures::_internal_set_forward_average_packets_bulk(double value) {
  
  _impl_.forward_average_packets_bulk_ = value;
}
inline void NetworkFeatures::set_forward_average_packets_bulk(double value) {
  _internal_set_forward_average_packets_bulk(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_packets_bulk)
}

// double forward_average_bulk_rate = 89;
inline void NetworkFeatures::clear_forward_average_bulk_rate() {
  _impl_.forward_average_bulk_rate_ = 0;
}
inline double NetworkFeatures::_internal_forward_average_bulk_rate() const {
  return _impl_.forward_average_bulk_rate_;
}
inline double NetworkFeatures::forward_average_bulk_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_bulk_rate)
  return _internal_forward_average_bulk_rate();
}
inline void NetworkFeatures::_internal_set_forward_average_bulk_rate(double value) {
  
  _impl_.forward_average_bulk_rate_ = value;
}
inline void NetworkFeatures::set_forward_average_bulk_rate(double value) {
  _internal_set_forward_average_bulk_rate(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_bulk_rate)
}

// double backward_average_bytes_bulk = 90;
inline void NetworkFeatures::clear_backward_average_bytes_bulk() {
  _impl_.backward_average_bytes_bulk_ = 0;
}
inline double NetworkFeatures::_internal_backward_average_bytes_bulk() const {
  return _impl_.backward_average_bytes_bulk_;
}
inline double NetworkFeatures::backward_average_bytes_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_bytes_bulk)
  return _internal_backward_average_bytes_bulk();
}
inline void NetworkFeatures::_internal_set_backward_average_bytes_bulk(double value) {
  
  _impl_.backward_average_bytes_bulk_ = value;
}
inline void NetworkFeatures::set_backward_average_bytes_bulk(double value) {
  _internal_set_backward_average_bytes_bulk(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_bytes_bulk)
}

// double backward_average_packets_bulk = 91;
inline void NetworkFeatures::clear_backward_average_packets_bulk() {
  _impl_.backward_average_packets_bulk_ = 0;
}
inline double NetworkFeatures::_internal_backward_average_packets_bulk() const {
  return _impl_.backward_average_packets_bulk_;
}
inline double NetworkFeatures::backward_average_packets_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_packets_bulk)
  return _internal_backward_average_packets_bulk();
}
inline void NetworkFeatures::_internal_set_backward_average_packets_bulk(double value) {
  
  _impl_.backward_average_packets_bulk_ = value;
}
inline void NetworkFeatures::set_backward_average_packets_bulk(double value) {
  _internal_set_backward_average_packets_bulk(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_packets_bulk)
}

// double backward_average_bulk_rate = 92;
inline void NetworkFeatures::clear_backward_average_bulk_rate() {
  _impl_.backward_average_bulk_rate_ = 0;
}
inline double NetworkFeatures::_internal_backward_average_bulk_rate() const {
  return _impl_.backward_average_bulk_rate_;
}
inline double NetworkFeatures::backward_average_bulk_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_bulk_rate)
  return _internal_backward_average_bulk_rate();
}
inline void NetworkFeatures::_internal_set_backward_average_bulk_rate(double value) {
  
  _impl_.backward_average_bulk_rate_ = value;
}
inline void NetworkFeatures::set_backward_average_bulk_rate(double value) {
  _internal_set_backward_average_bulk_rate(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_bulk_rate)
}

// uint64 minimum_packet_length = 95;
inline void NetworkFeatures::clear_minimum_packet_length() {
  _impl_.minimum_packet_length_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_minimum_packet_length() const {
  return _impl_.minimum_packet_length_;
}
inline uint64_t NetworkFeatures::minimum_packet_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.minimum_packet_length)
  return _internal_minimum_packet_length();
}
inline void NetworkFeatures::_internal_set_minimum_packet_length(uint64_t value) {
  
  _impl_.minimum_packet_length_ = value;
}
inline void NetworkFeatures::set_minimum_packet_length(uint64_t value) {
  _internal_set_minimum_packet_length(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.minimum_packet_length)
}

// uint64 maximum_packet_length = 96;
inline void NetworkFeatures::clear_maximum_packet_length() {
  _impl_.maximum_packet_length_ = uint64_t{0u};
}
inline uint64_t NetworkFeatures::_internal_maximum_packet_length() const {
  return _impl_.maximum_packet_length_;
}
inline uint64_t NetworkFeatures::maximum_packet_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.maximum_packet_length)
  return _internal_maximum_packet_length();
}
inline void NetworkFeatures::_internal_set_maximum_packet_length(uint64_t value) {
  
  _impl_.maximum_packet_length_ = value;
}
inline void NetworkFeatures::set_maximum_packet_length(uint64_t value) {
  _internal_set_maximum_packet_length(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.maximum_packet_length)
}

// double packet_length_mean = 97;
inline void NetworkFeatures::clear_packet_length_mean() {
  _impl_.packet_length_mean_ = 0;
}
inline double NetworkFeatures::_internal_packet_length_mean() const {
  return _impl_.packet_length_mean_;
}
inline double NetworkFeatures::packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_mean)
  return _internal_packet_length_mean();
}
inline void NetworkFeatures::_internal_set_packet_length_mean(double value) {
  
  _impl_.packet_length_mean_ = value;
}
inline void NetworkFeatures::set_packet_length_mean(double value) {
  _internal_set_packet_length_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_mean)
}

// double packet_length_std = 98;
inline void NetworkFeatures::clear_packet_length_std() {
  _impl_.packet_length_std_ = 0;
}
inline double NetworkFeatures::_internal_packet_length_std() const {
  return _impl_.packet_length_std_;
}
inline double NetworkFeatures::packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_std)
  return _internal_packet_length_std();
}
inline void NetworkFeatures::_internal_set_packet_length_std(double value) {
  
  _impl_.packet_length_std_ = value;
}
inline void NetworkFeatures::set_packet_length_std(double value) {
  _internal_set_packet_length_std(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_std)
}

// double packet_length_variance = 99;
inline void NetworkFeatures::clear_packet_length_variance() {
  _impl_.packet_length_variance_ = 0;
}
inline double NetworkFeatures::_internal_packet_length_variance() const {
  return _impl_.packet_length_variance_;
}
inline double NetworkFeatures::packet_length_variance() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_variance)
  return _internal_packet_length_variance();
}
inline void NetworkFeatures::_internal_set_packet_length_variance(double value) {
  
  _impl_.packet_length_variance_ = value;
}
inline void NetworkFeatures::set_packet_length_variance(double value) {
  _internal_set_packet_length_variance(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_variance)
}

// double active_mean = 104;
inline void NetworkFeatures::clear_active_mean() {
  _impl_.active_mean_ = 0;
}
inline double NetworkFeatures::_internal_active_mean() const {
  return _impl_.active_mean_;
}
inline double NetworkFeatures::active_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.active_mean)
  return _internal_active_mean();
}
inline void NetworkFeatures::_internal_set_active_mean(double value) {
  
  _impl_.active_mean_ = value;
}
inline void NetworkFeatures::set_active_mean(double value) {
  _internal_set_active_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.active_mean)
}

// double idle_mean = 105;
inline void NetworkFeatures::clear_idle_mean() {
  _impl_.idle_mean_ = 0;
}
inline double NetworkFeatures::_internal_idle_mean() const {
  return _impl_.idle_mean_;
}
inline double NetworkFeatures::idle_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.idle_mean)
  return _internal_idle_mean();
}
inline void NetworkFeatures::_internal_set_idle_mean(double value) {
  
  _impl_.idle_mean_ = value;
}
inline void NetworkFeatures::set_idle_mean(double value) {
  _internal_set_idle_mean(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.idle_mean)
}

// repeated double ddos_features = 100;
inline int NetworkFeatures::_internal_ddos_features_size() const {
  return _impl_.ddos_features_.size();
}
inline int NetworkFeatures::ddos_features_size() const {
  return _internal_ddos_features_size();
}
inline void NetworkFeatures::clear_ddos_features() {
  _impl_.ddos_features_.Clear();
}
inline double NetworkFeatures::_internal_ddos_features(int index) const {
  return _impl_.ddos_features_.Get(index);
}
inline double NetworkFeatures::ddos_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ddos_features)
  return _internal_ddos_features(index);
}
inline void NetworkFeatures::set_ddos_features(int index, double value) {
  _impl_.ddos_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ddos_features)
}
inline void NetworkFeatures::_internal_add_ddos_features(double value) {
  _impl_.ddos_features_.Add(value);
}
inline void NetworkFeatures::add_ddos_features(double value) {
  _internal_add_ddos_features(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.ddos_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::_internal_ddos_features() const {
  return _impl_.ddos_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::ddos_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.ddos_features)
  return _internal_ddos_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::_internal_mutable_ddos_features() {
  return &_impl_.ddos_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::mutable_ddos_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.ddos_features)
  return _internal_mutable_ddos_features();
}

// repeated double ransomware_features = 101;
inline int NetworkFeatures::_internal_ransomware_features_size() const {
  return _impl_.ransomware_features_.size();
}
inline int NetworkFeatures::ransomware_features_size() const {
  return _internal_ransomware_features_size();
}
inline void NetworkFeatures::clear_ransomware_features() {
  _impl_.ransomware_features_.Clear();
}
inline double NetworkFeatures::_internal_ransomware_features(int index) const {
  return _impl_.ransomware_features_.Get(index);
}
inline double NetworkFeatures::ransomware_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ransomware_features)
  return _internal_ransomware_features(index);
}
inline void NetworkFeatures::set_ransomware_features(int index, double value) {
  _impl_.ransomware_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ransomware_features)
}
inline void NetworkFeatures::_internal_add_ransomware_features(double value) {
  _impl_.ransomware_features_.Add(value);
}
inline void NetworkFeatures::add_ransomware_features(double value) {
  _internal_add_ransomware_features(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.ransomware_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::_internal_ransomware_features() const {
  return _impl_.ransomware_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::ransomware_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.ransomware_features)
  return _internal_ransomware_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::_internal_mutable_ransomware_features() {
  return &_impl_.ransomware_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::mutable_ransomware_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.ransomware_features)
  return _internal_mutable_ransomware_features();
}

// repeated double general_attack_features = 102;
inline int NetworkFeatures::_internal_general_attack_features_size() const {
  return _impl_.general_attack_features_.size();
}
inline int NetworkFeatures::general_attack_features_size() const {
  return _internal_general_attack_features_size();
}
inline void NetworkFeatures::clear_general_attack_features() {
  _impl_.general_attack_features_.Clear();
}
inline double NetworkFeatures::_internal_general_attack_features(int index) const {
  return _impl_.general_attack_features_.Get(index);
}
inline double NetworkFeatures::general_attack_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.general_attack_features)
  return _internal_general_attack_features(index);
}
inline void NetworkFeatures::set_general_attack_features(int index, double value) {
  _impl_.general_attack_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.general_attack_features)
}
inline void NetworkFeatures::_internal_add_general_attack_features(double value) {
  _impl_.general_attack_features_.Add(value);
}
inline void NetworkFeatures::add_general_attack_features(double value) {
  _internal_add_general_attack_features(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.general_attack_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::_internal_general_attack_features() const {
  return _impl_.general_attack_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::general_attack_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.general_attack_features)
  return _internal_general_attack_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::_internal_mutable_general_attack_features() {
  return &_impl_.general_attack_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::mutable_general_attack_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.general_attack_features)
  return _internal_mutable_general_attack_features();
}

// repeated double internal_traffic_features = 103;
inline int NetworkFeatures::_internal_internal_traffic_features_size() const {
  return _impl_.internal_traffic_features_.size();
}
inline int NetworkFeatures::internal_traffic_features_size() const {
  return _internal_internal_traffic_features_size();
}
inline void NetworkFeatures::clear_internal_traffic_features() {
  _impl_.internal_traffic_features_.Clear();
}
inline double NetworkFeatures::_internal_internal_traffic_features(int index) const {
  return _impl_.internal_traffic_features_.Get(index);
}
inline double NetworkFeatures::internal_traffic_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.internal_traffic_features)
  return _internal_internal_traffic_features(index);
}
inline void NetworkFeatures::set_internal_traffic_features(int index, double value) {
  _impl_.internal_traffic_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.internal_traffic_features)
}
inline void NetworkFeatures::_internal_add_internal_traffic_features(double value) {
  _impl_.internal_traffic_features_.Add(value);
}
inline void NetworkFeatures::add_internal_traffic_features(double value) {
  _internal_add_internal_traffic_features(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.internal_traffic_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::_internal_internal_traffic_features() const {
  return _impl_.internal_traffic_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NetworkFeatures::internal_traffic_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.internal_traffic_features)
  return _internal_internal_traffic_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::_internal_mutable_internal_traffic_features() {
  return &_impl_.internal_traffic_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NetworkFeatures::mutable_internal_traffic_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.internal_traffic_features)
  return _internal_mutable_internal_traffic_features();
}

// .protobuf.RansomwareFeatures ransomware = 106;
inline bool NetworkFeatures::_internal_has_ransomware() const {
  return this != internal_default_instance() && _impl_.ransomware_ != nullptr;
}
inline bool NetworkFeatures::has_ransomware() const {
  return _internal_has_ransomware();
}
inline void NetworkFeatures::clear_ransomware() {
  if (GetArenaForAllocation() == nullptr && _impl_.ransomware_ != nullptr) {
    delete _impl_.ransomware_;
  }
  _impl_.ransomware_ = nullptr;
}
inline const ::protobuf::RansomwareFeatures& NetworkFeatures::_internal_ransomware() const {
  const ::protobuf::RansomwareFeatures* p = _impl_.ransomware_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::RansomwareFeatures&>(
      ::protobuf::_RansomwareFeatures_default_instance_);
}
inline const ::protobuf::RansomwareFeatures& NetworkFeatures::ransomware() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ransomware)
  return _internal_ransomware();
}
inline void NetworkFeatures::unsafe_arena_set_allocated_ransomware(
    ::protobuf::RansomwareFeatures* ransomware) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ransomware_);
  }
  _impl_.ransomware_ = ransomware;
  if (ransomware) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkFeatures.ransomware)
}
inline ::protobuf::RansomwareFeatures* NetworkFeatures::release_ransomware() {
  
  ::protobuf::RansomwareFeatures* temp = _impl_.ransomware_;
  _impl_.ransomware_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::RansomwareFeatures* NetworkFeatures::unsafe_arena_release_ransomware() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.ransomware)
  
  ::protobuf::RansomwareFeatures* temp = _impl_.ransomware_;
  _impl_.ransomware_ = nullptr;
  return temp;
}
inline ::protobuf::RansomwareFeatures* NetworkFeatures::_internal_mutable_ransomware() {
  
  if (_impl_.ransomware_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::RansomwareFeatures>(GetArenaForAllocation());
    _impl_.ransomware_ = p;
  }
  return _impl_.ransomware_;
}
inline ::protobuf::RansomwareFeatures* NetworkFeatures::mutable_ransomware() {
  ::protobuf::RansomwareFeatures* _msg = _internal_mutable_ransomware();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.ransomware)
  return _msg;
}
inline void NetworkFeatures::set_allocated_ransomware(::protobuf::RansomwareFeatures* ransomware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ransomware_;
  }
  if (ransomware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ransomware);
    if (message_arena != submessage_arena) {
      ransomware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ransomware, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ransomware_ = ransomware;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.ransomware)
}

// map<string, double> custom_features = 110;
inline int NetworkFeatures::_internal_custom_features_size() const {
  return _impl_.custom_features_.size();
}
inline int NetworkFeatures::custom_features_size() const {
  return _internal_custom_features_size();
}
inline void NetworkFeatures::clear_custom_features() {
  _impl_.custom_features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
NetworkFeatures::_internal_custom_features() const {
  return _impl_.custom_features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
NetworkFeatures::custom_features() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkFeatures.custom_features)
  return _internal_custom_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
NetworkFeatures::_internal_mutable_custom_features() {
  return _impl_.custom_features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
NetworkFeatures::mutable_custom_features() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkFeatures.custom_features)
  return _internal_mutable_custom_features();
}

// map<string, string> feature_metadata = 111;
inline int NetworkFeatures::_internal_feature_metadata_size() const {
  return _impl_.feature_metadata_.size();
}
inline int NetworkFeatures::feature_metadata_size() const {
  return _internal_feature_metadata_size();
}
inline void NetworkFeatures::clear_feature_metadata() {
  _impl_.feature_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkFeatures::_internal_feature_metadata() const {
  return _impl_.feature_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkFeatures::feature_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkFeatures.feature_metadata)
  return _internal_feature_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkFeatures::_internal_mutable_feature_metadata() {
  return _impl_.feature_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkFeatures::mutable_feature_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkFeatures.feature_metadata)
  return _internal_mutable_feature_metadata();
}

// -------------------------------------------------------------------

// GeoLocationInfo

// string country_name = 1;
inline void GeoLocationInfo::clear_country_name() {
  _impl_.country_name_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::country_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.country_name)
  return _internal_country_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_country_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.country_name)
}
inline std::string* GeoLocationInfo::mutable_country_name() {
  std::string* _s = _internal_mutable_country_name();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.country_name)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_country_name() const {
  return _impl_.country_name_.Get();
}
inline void GeoLocationInfo::_internal_set_country_name(const std::string& value) {
  
  _impl_.country_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_country_name() {
  
  return _impl_.country_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_country_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.country_name)
  return _impl_.country_name_.Release();
}
inline void GeoLocationInfo::set_allocated_country_name(std::string* country_name) {
  if (country_name != nullptr) {
    
  } else {
    
  }
  _impl_.country_name_.SetAllocated(country_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_name_.IsDefault()) {
    _impl_.country_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.country_name)
}

// string country_code = 2;
inline void GeoLocationInfo::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::country_code() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_country_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.country_code)
}
inline std::string* GeoLocationInfo::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.country_code)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void GeoLocationInfo::_internal_set_country_code(const std::string& value) {
  
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_country_code() {
  
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.country_code)
  return _impl_.country_code_.Release();
}
inline void GeoLocationInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    
  } else {
    
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.country_code)
}

// string region_name = 3;
inline void GeoLocationInfo::clear_region_name() {
  _impl_.region_name_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::region_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.region_name)
  return _internal_region_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_region_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.region_name)
}
inline std::string* GeoLocationInfo::mutable_region_name() {
  std::string* _s = _internal_mutable_region_name();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.region_name)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_region_name() const {
  return _impl_.region_name_.Get();
}
inline void GeoLocationInfo::_internal_set_region_name(const std::string& value) {
  
  _impl_.region_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_region_name() {
  
  return _impl_.region_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_region_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.region_name)
  return _impl_.region_name_.Release();
}
inline void GeoLocationInfo::set_allocated_region_name(std::string* region_name) {
  if (region_name != nullptr) {
    
  } else {
    
  }
  _impl_.region_name_.SetAllocated(region_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_name_.IsDefault()) {
    _impl_.region_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.region_name)
}

// string city_name = 4;
inline void GeoLocationInfo::clear_city_name() {
  _impl_.city_name_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::city_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.city_name)
  return _internal_city_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_city_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.city_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.city_name)
}
inline std::string* GeoLocationInfo::mutable_city_name() {
  std::string* _s = _internal_mutable_city_name();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.city_name)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_city_name() const {
  return _impl_.city_name_.Get();
}
inline void GeoLocationInfo::_internal_set_city_name(const std::string& value) {
  
  _impl_.city_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_city_name() {
  
  return _impl_.city_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_city_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.city_name)
  return _impl_.city_name_.Release();
}
inline void GeoLocationInfo::set_allocated_city_name(std::string* city_name) {
  if (city_name != nullptr) {
    
  } else {
    
  }
  _impl_.city_name_.SetAllocated(city_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_name_.IsDefault()) {
    _impl_.city_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.city_name)
}

// double latitude = 5;
inline void GeoLocationInfo::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double GeoLocationInfo::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double GeoLocationInfo::latitude() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.latitude)
  return _internal_latitude();
}
inline void GeoLocationInfo::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void GeoLocationInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.latitude)
}

// double longitude = 6;
inline void GeoLocationInfo::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double GeoLocationInfo::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double GeoLocationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.longitude)
  return _internal_longitude();
}
inline void GeoLocationInfo::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void GeoLocationInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.longitude)
}

// string timezone = 7;
inline void GeoLocationInfo::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::timezone() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.timezone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_timezone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timezone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.timezone)
}
inline std::string* GeoLocationInfo::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.timezone)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void GeoLocationInfo::_internal_set_timezone(const std::string& value) {
  
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_timezone() {
  
  return _impl_.timezone_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.timezone)
  return _impl_.timezone_.Release();
}
inline void GeoLocationInfo::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  _impl_.timezone_.SetAllocated(timezone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.timezone)
}

// string isp_name = 8;
inline void GeoLocationInfo::clear_isp_name() {
  _impl_.isp_name_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::isp_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.isp_name)
  return _internal_isp_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_isp_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isp_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.isp_name)
}
inline std::string* GeoLocationInfo::mutable_isp_name() {
  std::string* _s = _internal_mutable_isp_name();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.isp_name)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_isp_name() const {
  return _impl_.isp_name_.Get();
}
inline void GeoLocationInfo::_internal_set_isp_name(const std::string& value) {
  
  _impl_.isp_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_isp_name() {
  
  return _impl_.isp_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_isp_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.isp_name)
  return _impl_.isp_name_.Release();
}
inline void GeoLocationInfo::set_allocated_isp_name(std::string* isp_name) {
  if (isp_name != nullptr) {
    
  } else {
    
  }
  _impl_.isp_name_.SetAllocated(isp_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isp_name_.IsDefault()) {
    _impl_.isp_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.isp_name)
}

// string organization_name = 9;
inline void GeoLocationInfo::clear_organization_name() {
  _impl_.organization_name_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::organization_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.organization_name)
  return _internal_organization_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_organization_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.organization_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.organization_name)
}
inline std::string* GeoLocationInfo::mutable_organization_name() {
  std::string* _s = _internal_mutable_organization_name();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.organization_name)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_organization_name() const {
  return _impl_.organization_name_.Get();
}
inline void GeoLocationInfo::_internal_set_organization_name(const std::string& value) {
  
  _impl_.organization_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_organization_name() {
  
  return _impl_.organization_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_organization_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.organization_name)
  return _impl_.organization_name_.Release();
}
inline void GeoLocationInfo::set_allocated_organization_name(std::string* organization_name) {
  if (organization_name != nullptr) {
    
  } else {
    
  }
  _impl_.organization_name_.SetAllocated(organization_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.organization_name_.IsDefault()) {
    _impl_.organization_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.organization_name)
}

// string autonomous_system_number = 10;
inline void GeoLocationInfo::clear_autonomous_system_number() {
  _impl_.autonomous_system_number_.ClearToEmpty();
}
inline const std::string& GeoLocationInfo::autonomous_system_number() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.autonomous_system_number)
  return _internal_autonomous_system_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocationInfo::set_autonomous_system_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.autonomous_system_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.autonomous_system_number)
}
inline std::string* GeoLocationInfo::mutable_autonomous_system_number() {
  std::string* _s = _internal_mutable_autonomous_system_number();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.autonomous_system_number)
  return _s;
}
inline const std::string& GeoLocationInfo::_internal_autonomous_system_number() const {
  return _impl_.autonomous_system_number_.Get();
}
inline void GeoLocationInfo::_internal_set_autonomous_system_number(const std::string& value) {
  
  _impl_.autonomous_system_number_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::_internal_mutable_autonomous_system_number() {
  
  return _impl_.autonomous_system_number_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocationInfo::release_autonomous_system_number() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.autonomous_system_number)
  return _impl_.autonomous_system_number_.Release();
}
inline void GeoLocationInfo::set_allocated_autonomous_system_number(std::string* autonomous_system_number) {
  if (autonomous_system_number != nullptr) {
    
  } else {
    
  }
  _impl_.autonomous_system_number_.SetAllocated(autonomous_system_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.autonomous_system_number_.IsDefault()) {
    _impl_.autonomous_system_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.autonomous_system_number)
}

// bool is_anonymous_proxy = 11;
inline void GeoLocationInfo::clear_is_anonymous_proxy() {
  _impl_.is_anonymous_proxy_ = false;
}
inline bool GeoLocationInfo::_internal_is_anonymous_proxy() const {
  return _impl_.is_anonymous_proxy_;
}
inline bool GeoLocationInfo::is_anonymous_proxy() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_anonymous_proxy)
  return _internal_is_anonymous_proxy();
}
inline void GeoLocationInfo::_internal_set_is_anonymous_proxy(bool value) {
  
  _impl_.is_anonymous_proxy_ = value;
}
inline void GeoLocationInfo::set_is_anonymous_proxy(bool value) {
  _internal_set_is_anonymous_proxy(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_anonymous_proxy)
}

// bool is_satellite_provider = 12;
inline void GeoLocationInfo::clear_is_satellite_provider() {
  _impl_.is_satellite_provider_ = false;
}
inline bool GeoLocationInfo::_internal_is_satellite_provider() const {
  return _impl_.is_satellite_provider_;
}
inline bool GeoLocationInfo::is_satellite_provider() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_satellite_provider)
  return _internal_is_satellite_provider();
}
inline void GeoLocationInfo::_internal_set_is_satellite_provider(bool value) {
  
  _impl_.is_satellite_provider_ = value;
}
inline void GeoLocationInfo::set_is_satellite_provider(bool value) {
  _internal_set_is_satellite_provider(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_satellite_provider)
}

// bool is_tor_exit_node = 13;
inline void GeoLocationInfo::clear_is_tor_exit_node() {
  _impl_.is_tor_exit_node_ = false;
}
inline bool GeoLocationInfo::_internal_is_tor_exit_node() const {
  return _impl_.is_tor_exit_node_;
}
inline bool GeoLocationInfo::is_tor_exit_node() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_tor_exit_node)
  return _internal_is_tor_exit_node();
}
inline void GeoLocationInfo::_internal_set_is_tor_exit_node(bool value) {
  
  _impl_.is_tor_exit_node_ = value;
}
inline void GeoLocationInfo::set_is_tor_exit_node(bool value) {
  _internal_set_is_tor_exit_node(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_tor_exit_node)
}

// bool is_known_malicious = 14;
inline void GeoLocationInfo::clear_is_known_malicious() {
  _impl_.is_known_malicious_ = false;
}
inline bool GeoLocationInfo::_internal_is_known_malicious() const {
  return _impl_.is_known_malicious_;
}
inline bool GeoLocationInfo::is_known_malicious() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_known_malicious)
  return _internal_is_known_malicious();
}
inline void GeoLocationInfo::_internal_set_is_known_malicious(bool value) {
  
  _impl_.is_known_malicious_ = value;
}
inline void GeoLocationInfo::set_is_known_malicious(bool value) {
  _internal_set_is_known_malicious(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_known_malicious)
}

// .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
inline void GeoLocationInfo::clear_threat_level() {
  _impl_.threat_level_ = 0;
}
inline ::protobuf::GeoLocationInfo_ThreatLevel GeoLocationInfo::_internal_threat_level() const {
  return static_cast< ::protobuf::GeoLocationInfo_ThreatLevel >(_impl_.threat_level_);
}
inline ::protobuf::GeoLocationInfo_ThreatLevel GeoLocationInfo::threat_level() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.threat_level)
  return _internal_threat_level();
}
inline void GeoLocationInfo::_internal_set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value) {
  
  _impl_.threat_level_ = value;
}
inline void GeoLocationInfo::set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value) {
  _internal_set_threat_level(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.threat_level)
}

// -------------------------------------------------------------------

// GeoEnrichment

// .protobuf.GeoLocationInfo sniffer_node_geo = 1;
inline bool GeoEnrichment::_internal_has_sniffer_node_geo() const {
  return this != internal_default_instance() && _impl_.sniffer_node_geo_ != nullptr;
}
inline bool GeoEnrichment::has_sniffer_node_geo() const {
  return _internal_has_sniffer_node_geo();
}
inline void GeoEnrichment::clear_sniffer_node_geo() {
  if (GetArenaForAllocation() == nullptr && _impl_.sniffer_node_geo_ != nullptr) {
    delete _impl_.sniffer_node_geo_;
  }
  _impl_.sniffer_node_geo_ = nullptr;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_sniffer_node_geo() const {
  const ::protobuf::GeoLocationInfo* p = _impl_.sniffer_node_geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::GeoLocationInfo&>(
      ::protobuf::_GeoLocationInfo_default_instance_);
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::sniffer_node_geo() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_node_geo)
  return _internal_sniffer_node_geo();
}
inline void GeoEnrichment::unsafe_arena_set_allocated_sniffer_node_geo(
    ::protobuf::GeoLocationInfo* sniffer_node_geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sniffer_node_geo_);
  }
  _impl_.sniffer_node_geo_ = sniffer_node_geo;
  if (sniffer_node_geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.GeoEnrichment.sniffer_node_geo)
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_sniffer_node_geo() {
  
  ::protobuf::GeoLocationInfo* temp = _impl_.sniffer_node_geo_;
  _impl_.sniffer_node_geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::unsafe_arena_release_sniffer_node_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_node_geo)
  
  ::protobuf::GeoLocationInfo* temp = _impl_.sniffer_node_geo_;
  _impl_.sniffer_node_geo_ = nullptr;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::_internal_mutable_sniffer_node_geo() {
  
  if (_impl_.sniffer_node_geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaForAllocation());
    _impl_.sniffer_node_geo_ = p;
  }
  return _impl_.sniffer_node_geo_;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_sniffer_node_geo() {
  ::protobuf::GeoLocationInfo* _msg = _internal_mutable_sniffer_node_geo();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_node_geo)
  return _msg;
}
inline void GeoEnrichment::set_allocated_sniffer_node_geo(::protobuf::GeoLocationInfo* sniffer_node_geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sniffer_node_geo_;
  }
  if (sniffer_node_geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sniffer_node_geo);
    if (message_arena != submessage_arena) {
      sniffer_node_geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sniffer_node_geo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sniffer_node_geo_ = sniffer_node_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_node_geo)
}

// .protobuf.GeoLocationInfo source_ip_geo = 2;
inline bool GeoEnrichment::_internal_has_source_ip_geo() const {
  return this != internal_default_instance() && _impl_.source_ip_geo_ != nullptr;
}
inline bool GeoEnrichment::has_source_ip_geo() const {
  return _internal_has_source_ip_geo();
}
inline void GeoEnrichment::clear_source_ip_geo() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_ip_geo_ != nullptr) {
    delete _impl_.source_ip_geo_;
  }
  _impl_.source_ip_geo_ = nullptr;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_source_ip_geo() const {
  const ::protobuf::GeoLocationInfo* p = _impl_.source_ip_geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::GeoLocationInfo&>(
      ::protobuf::_GeoLocationInfo_default_instance_);
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::source_ip_geo() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_ip_geo)
  return _internal_source_ip_geo();
}
inline void GeoEnrichment::unsafe_arena_set_allocated_source_ip_geo(
    ::protobuf::GeoLocationInfo* source_ip_geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_ip_geo_);
  }
  _impl_.source_ip_geo_ = source_ip_geo;
  if (source_ip_geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.GeoEnrichment.source_ip_geo)
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_source_ip_geo() {
  
  ::protobuf::GeoLocationInfo* temp = _impl_.source_ip_geo_;
  _impl_.source_ip_geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::unsafe_arena_release_source_ip_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.source_ip_geo)
  
  ::protobuf::GeoLocationInfo* temp = _impl_.source_ip_geo_;
  _impl_.source_ip_geo_ = nullptr;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::_internal_mutable_source_ip_geo() {
  
  if (_impl_.source_ip_geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaForAllocation());
    _impl_.source_ip_geo_ = p;
  }
  return _impl_.source_ip_geo_;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_source_ip_geo() {
  ::protobuf::GeoLocationInfo* _msg = _internal_mutable_source_ip_geo();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.source_ip_geo)
  return _msg;
}
inline void GeoEnrichment::set_allocated_source_ip_geo(::protobuf::GeoLocationInfo* source_ip_geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_ip_geo_;
  }
  if (source_ip_geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_ip_geo);
    if (message_arena != submessage_arena) {
      source_ip_geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_ip_geo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_ip_geo_ = source_ip_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.source_ip_geo)
}

// .protobuf.GeoLocationInfo destination_ip_geo = 3;
inline bool GeoEnrichment::_internal_has_destination_ip_geo() const {
  return this != internal_default_instance() && _impl_.destination_ip_geo_ != nullptr;
}
inline bool GeoEnrichment::has_destination_ip_geo() const {
  return _internal_has_destination_ip_geo();
}
inline void GeoEnrichment::clear_destination_ip_geo() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ip_geo_ != nullptr) {
    delete _impl_.destination_ip_geo_;
  }
  _impl_.destination_ip_geo_ = nullptr;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_destination_ip_geo() const {
  const ::protobuf::GeoLocationInfo* p = _impl_.destination_ip_geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::GeoLocationInfo&>(
      ::protobuf::_GeoLocationInfo_default_instance_);
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::destination_ip_geo() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.destination_ip_geo)
  return _internal_destination_ip_geo();
}
inline void GeoEnrichment::unsafe_arena_set_allocated_destination_ip_geo(
    ::protobuf::GeoLocationInfo* destination_ip_geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_ip_geo_);
  }
  _impl_.destination_ip_geo_ = destination_ip_geo;
  if (destination_ip_geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.GeoEnrichment.destination_ip_geo)
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_destination_ip_geo() {
  
  ::protobuf::GeoLocationInfo* temp = _impl_.destination_ip_geo_;
  _impl_.destination_ip_geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::unsafe_arena_release_destination_ip_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.destination_ip_geo)
  
  ::protobuf::GeoLocationInfo* temp = _impl_.destination_ip_geo_;
  _impl_.destination_ip_geo_ = nullptr;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::_internal_mutable_destination_ip_geo() {
  
  if (_impl_.destination_ip_geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaForAllocation());
    _impl_.destination_ip_geo_ = p;
  }
  return _impl_.destination_ip_geo_;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_destination_ip_geo() {
  ::protobuf::GeoLocationInfo* _msg = _internal_mutable_destination_ip_geo();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.destination_ip_geo)
  return _msg;
}
inline void GeoEnrichment::set_allocated_destination_ip_geo(::protobuf::GeoLocationInfo* destination_ip_geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_ip_geo_;
  }
  if (destination_ip_geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_ip_geo);
    if (message_arena != submessage_arena) {
      destination_ip_geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_ip_geo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ip_geo_ = destination_ip_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.destination_ip_geo)
}

// double source_destination_distance_km = 10;
inline void GeoEnrichment::clear_source_destination_distance_km() {
  _impl_.source_destination_distance_km_ = 0;
}
inline double GeoEnrichment::_internal_source_destination_distance_km() const {
  return _impl_.source_destination_distance_km_;
}
inline double GeoEnrichment::source_destination_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_distance_km)
  return _internal_source_destination_distance_km();
}
inline void GeoEnrichment::_internal_set_source_destination_distance_km(double value) {
  
  _impl_.source_destination_distance_km_ = value;
}
inline void GeoEnrichment::set_source_destination_distance_km(double value) {
  _internal_set_source_destination_distance_km(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_distance_km)
}

// bool source_destination_same_country = 11;
inline void GeoEnrichment::clear_source_destination_same_country() {
  _impl_.source_destination_same_country_ = false;
}
inline bool GeoEnrichment::_internal_source_destination_same_country() const {
  return _impl_.source_destination_same_country_;
}
inline bool GeoEnrichment::source_destination_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_same_country)
  return _internal_source_destination_same_country();
}
inline void GeoEnrichment::_internal_set_source_destination_same_country(bool value) {
  
  _impl_.source_destination_same_country_ = value;
}
inline void GeoEnrichment::set_source_destination_same_country(bool value) {
  _internal_set_source_destination_same_country(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_same_country)
}

// bool source_destination_same_continent = 12;
inline void GeoEnrichment::clear_source_destination_same_continent() {
  _impl_.source_destination_same_continent_ = false;
}
inline bool GeoEnrichment::_internal_source_destination_same_continent() const {
  return _impl_.source_destination_same_continent_;
}
inline bool GeoEnrichment::source_destination_same_continent() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_same_continent)
  return _internal_source_destination_same_continent();
}
inline void GeoEnrichment::_internal_set_source_destination_same_continent(bool value) {
  
  _impl_.source_destination_same_continent_ = value;
}
inline void GeoEnrichment::set_source_destination_same_continent(bool value) {
  _internal_set_source_destination_same_continent(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_same_continent)
}

// string distance_category = 13;
inline void GeoEnrichment::clear_distance_category() {
  _impl_.distance_category_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::distance_category() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.distance_category)
  return _internal_distance_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_distance_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.distance_category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.distance_category)
}
inline std::string* GeoEnrichment::mutable_distance_category() {
  std::string* _s = _internal_mutable_distance_category();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.distance_category)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_distance_category() const {
  return _impl_.distance_category_.Get();
}
inline void GeoEnrichment::_internal_set_distance_category(const std::string& value) {
  
  _impl_.distance_category_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_distance_category() {
  
  return _impl_.distance_category_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_distance_category() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.distance_category)
  return _impl_.distance_category_.Release();
}
inline void GeoEnrichment::set_allocated_distance_category(std::string* distance_category) {
  if (distance_category != nullptr) {
    
  } else {
    
  }
  _impl_.distance_category_.SetAllocated(distance_category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.distance_category_.IsDefault()) {
    _impl_.distance_category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.distance_category)
}

// double sniffer_source_distance_km = 20;
inline void GeoEnrichment::clear_sniffer_source_distance_km() {
  _impl_.sniffer_source_distance_km_ = 0;
}
inline double GeoEnrichment::_internal_sniffer_source_distance_km() const {
  return _impl_.sniffer_source_distance_km_;
}
inline double GeoEnrichment::sniffer_source_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_distance_km)
  return _internal_sniffer_source_distance_km();
}
inline void GeoEnrichment::_internal_set_sniffer_source_distance_km(double value) {
  
  _impl_.sniffer_source_distance_km_ = value;
}
inline void GeoEnrichment::set_sniffer_source_distance_km(double value) {
  _internal_set_sniffer_source_distance_km(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_distance_km)
}

// bool sniffer_source_same_country = 21;
inline void GeoEnrichment::clear_sniffer_source_same_country() {
  _impl_.sniffer_source_same_country_ = false;
}
inline bool GeoEnrichment::_internal_sniffer_source_same_country() const {
  return _impl_.sniffer_source_same_country_;
}
inline bool GeoEnrichment::sniffer_source_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_same_country)
  return _internal_sniffer_source_same_country();
}
inline void GeoEnrichment::_internal_set_sniffer_source_same_country(bool value) {
  
  _impl_.sniffer_source_same_country_ = value;
}
inline void GeoEnrichment::set_sniffer_source_same_country(bool value) {
  _internal_set_sniffer_source_same_country(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_same_country)
}

// string sniffer_source_relationship = 22;
inline void GeoEnrichment::clear_sniffer_source_relationship() {
  _impl_.sniffer_source_relationship_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::sniffer_source_relationship() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_relationship)
  return _internal_sniffer_source_relationship();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_sniffer_source_relationship(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sniffer_source_relationship_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_relationship)
}
inline std::string* GeoEnrichment::mutable_sniffer_source_relationship() {
  std::string* _s = _internal_mutable_sniffer_source_relationship();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_source_relationship)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_sniffer_source_relationship() const {
  return _impl_.sniffer_source_relationship_.Get();
}
inline void GeoEnrichment::_internal_set_sniffer_source_relationship(const std::string& value) {
  
  _impl_.sniffer_source_relationship_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_sniffer_source_relationship() {
  
  return _impl_.sniffer_source_relationship_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_sniffer_source_relationship() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_source_relationship)
  return _impl_.sniffer_source_relationship_.Release();
}
inline void GeoEnrichment::set_allocated_sniffer_source_relationship(std::string* sniffer_source_relationship) {
  if (sniffer_source_relationship != nullptr) {
    
  } else {
    
  }
  _impl_.sniffer_source_relationship_.SetAllocated(sniffer_source_relationship, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sniffer_source_relationship_.IsDefault()) {
    _impl_.sniffer_source_relationship_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_source_relationship)
}

// double sniffer_destination_distance_km = 25;
inline void GeoEnrichment::clear_sniffer_destination_distance_km() {
  _impl_.sniffer_destination_distance_km_ = 0;
}
inline double GeoEnrichment::_internal_sniffer_destination_distance_km() const {
  return _impl_.sniffer_destination_distance_km_;
}
inline double GeoEnrichment::sniffer_destination_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_distance_km)
  return _internal_sniffer_destination_distance_km();
}
inline void GeoEnrichment::_internal_set_sniffer_destination_distance_km(double value) {
  
  _impl_.sniffer_destination_distance_km_ = value;
}
inline void GeoEnrichment::set_sniffer_destination_distance_km(double value) {
  _internal_set_sniffer_destination_distance_km(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_distance_km)
}

// bool sniffer_destination_same_country = 26;
inline void GeoEnrichment::clear_sniffer_destination_same_country() {
  _impl_.sniffer_destination_same_country_ = false;
}
inline bool GeoEnrichment::_internal_sniffer_destination_same_country() const {
  return _impl_.sniffer_destination_same_country_;
}
inline bool GeoEnrichment::sniffer_destination_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_same_country)
  return _internal_sniffer_destination_same_country();
}
inline void GeoEnrichment::_internal_set_sniffer_destination_same_country(bool value) {
  
  _impl_.sniffer_destination_same_country_ = value;
}
inline void GeoEnrichment::set_sniffer_destination_same_country(bool value) {
  _internal_set_sniffer_destination_same_country(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_same_country)
}

// string sniffer_destination_relationship = 27;
inline void GeoEnrichment::clear_sniffer_destination_relationship() {
  _impl_.sniffer_destination_relationship_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::sniffer_destination_relationship() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_relationship)
  return _internal_sniffer_destination_relationship();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_sniffer_destination_relationship(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sniffer_destination_relationship_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_relationship)
}
inline std::string* GeoEnrichment::mutable_sniffer_destination_relationship() {
  std::string* _s = _internal_mutable_sniffer_destination_relationship();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_destination_relationship)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_sniffer_destination_relationship() const {
  return _impl_.sniffer_destination_relationship_.Get();
}
inline void GeoEnrichment::_internal_set_sniffer_destination_relationship(const std::string& value) {
  
  _impl_.sniffer_destination_relationship_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_sniffer_destination_relationship() {
  
  return _impl_.sniffer_destination_relationship_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_sniffer_destination_relationship() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_destination_relationship)
  return _impl_.sniffer_destination_relationship_.Release();
}
inline void GeoEnrichment::set_allocated_sniffer_destination_relationship(std::string* sniffer_destination_relationship) {
  if (sniffer_destination_relationship != nullptr) {
    
  } else {
    
  }
  _impl_.sniffer_destination_relationship_.SetAllocated(sniffer_destination_relationship, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sniffer_destination_relationship_.IsDefault()) {
    _impl_.sniffer_destination_relationship_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_destination_relationship)
}

// repeated string threat_intelligence_matches = 30;
inline int GeoEnrichment::_internal_threat_intelligence_matches_size() const {
  return _impl_.threat_intelligence_matches_.size();
}
inline int GeoEnrichment::threat_intelligence_matches_size() const {
  return _internal_threat_intelligence_matches_size();
}
inline void GeoEnrichment::clear_threat_intelligence_matches() {
  _impl_.threat_intelligence_matches_.Clear();
}
inline std::string* GeoEnrichment::add_threat_intelligence_matches() {
  std::string* _s = _internal_add_threat_intelligence_matches();
  // @@protoc_insertion_point(field_add_mutable:protobuf.GeoEnrichment.threat_intelligence_matches)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_threat_intelligence_matches(int index) const {
  return _impl_.threat_intelligence_matches_.Get(index);
}
inline const std::string& GeoEnrichment::threat_intelligence_matches(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.threat_intelligence_matches)
  return _internal_threat_intelligence_matches(index);
}
inline std::string* GeoEnrichment::mutable_threat_intelligence_matches(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.threat_intelligence_matches)
  return _impl_.threat_intelligence_matches_.Mutable(index);
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const std::string& value) {
  _impl_.threat_intelligence_matches_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, std::string&& value) {
  _impl_.threat_intelligence_matches_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.threat_intelligence_matches_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const char* value, size_t size) {
  _impl_.threat_intelligence_matches_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline std::string* GeoEnrichment::_internal_add_threat_intelligence_matches() {
  return _impl_.threat_intelligence_matches_.Add();
}
inline void GeoEnrichment::add_threat_intelligence_matches(const std::string& value) {
  _impl_.threat_intelligence_matches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::add_threat_intelligence_matches(std::string&& value) {
  _impl_.threat_intelligence_matches_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::add_threat_intelligence_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.threat_intelligence_matches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::add_threat_intelligence_matches(const char* value, size_t size) {
  _impl_.threat_intelligence_matches_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GeoEnrichment::threat_intelligence_matches() const {
  // @@protoc_insertion_point(field_list:protobuf.GeoEnrichment.threat_intelligence_matches)
  return _impl_.threat_intelligence_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GeoEnrichment::mutable_threat_intelligence_matches() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.GeoEnrichment.threat_intelligence_matches)
  return &_impl_.threat_intelligence_matches_;
}

// string threat_intelligence_source = 31;
inline void GeoEnrichment::clear_threat_intelligence_source() {
  _impl_.threat_intelligence_source_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::threat_intelligence_source() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.threat_intelligence_source)
  return _internal_threat_intelligence_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_threat_intelligence_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threat_intelligence_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_source)
}
inline std::string* GeoEnrichment::mutable_threat_intelligence_source() {
  std::string* _s = _internal_mutable_threat_intelligence_source();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.threat_intelligence_source)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_threat_intelligence_source() const {
  return _impl_.threat_intelligence_source_.Get();
}
inline void GeoEnrichment::_internal_set_threat_intelligence_source(const std::string& value) {
  
  _impl_.threat_intelligence_source_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_threat_intelligence_source() {
  
  return _impl_.threat_intelligence_source_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_threat_intelligence_source() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.threat_intelligence_source)
  return _impl_.threat_intelligence_source_.Release();
}
inline void GeoEnrichment::set_allocated_threat_intelligence_source(std::string* threat_intelligence_source) {
  if (threat_intelligence_source != nullptr) {
    
  } else {
    
  }
  _impl_.threat_intelligence_source_.SetAllocated(threat_intelligence_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threat_intelligence_source_.IsDefault()) {
    _impl_.threat_intelligence_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.threat_intelligence_source)
}

// float geographic_anomaly_score = 32;
inline void GeoEnrichment::clear_geographic_anomaly_score() {
  _impl_.geographic_anomaly_score_ = 0;
}
inline float GeoEnrichment::_internal_geographic_anomaly_score() const {
  return _impl_.geographic_anomaly_score_;
}
inline float GeoEnrichment::geographic_anomaly_score() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geographic_anomaly_score)
  return _internal_geographic_anomaly_score();
}
inline void GeoEnrichment::_internal_set_geographic_anomaly_score(float value) {
  
  _impl_.geographic_anomaly_score_ = value;
}
inline void GeoEnrichment::set_geographic_anomaly_score(float value) {
  _internal_set_geographic_anomaly_score(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geographic_anomaly_score)
}

// bool suspicious_geographic_pattern = 33;
inline void GeoEnrichment::clear_suspicious_geographic_pattern() {
  _impl_.suspicious_geographic_pattern_ = false;
}
inline bool GeoEnrichment::_internal_suspicious_geographic_pattern() const {
  return _impl_.suspicious_geographic_pattern_;
}
inline bool GeoEnrichment::suspicious_geographic_pattern() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.suspicious_geographic_pattern)
  return _internal_suspicious_geographic_pattern();
}
inline void GeoEnrichment::_internal_set_suspicious_geographic_pattern(bool value) {
  
  _impl_.suspicious_geographic_pattern_ = value;
}
inline void GeoEnrichment::set_suspicious_geographic_pattern(bool value) {
  _internal_set_suspicious_geographic_pattern(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.suspicious_geographic_pattern)
}

// bool sniffer_node_enriched = 40;
inline void GeoEnrichment::clear_sniffer_node_enriched() {
  _impl_.sniffer_node_enriched_ = false;
}
inline bool GeoEnrichment::_internal_sniffer_node_enriched() const {
  return _impl_.sniffer_node_enriched_;
}
inline bool GeoEnrichment::sniffer_node_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_node_enriched)
  return _internal_sniffer_node_enriched();
}
inline void GeoEnrichment::_internal_set_sniffer_node_enriched(bool value) {
  
  _impl_.sniffer_node_enriched_ = value;
}
inline void GeoEnrichment::set_sniffer_node_enriched(bool value) {
  _internal_set_sniffer_node_enriched(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_node_enriched)
}

// bool source_ip_enriched = 41;
inline void GeoEnrichment::clear_source_ip_enriched() {
  _impl_.source_ip_enriched_ = false;
}
inline bool GeoEnrichment::_internal_source_ip_enriched() const {
  return _impl_.source_ip_enriched_;
}
inline bool GeoEnrichment::source_ip_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_ip_enriched)
  return _internal_source_ip_enriched();
}
inline void GeoEnrichment::_internal_set_source_ip_enriched(bool value) {
  
  _impl_.source_ip_enriched_ = value;
}
inline void GeoEnrichment::set_source_ip_enriched(bool value) {
  _internal_set_source_ip_enriched(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_ip_enriched)
}

// bool destination_ip_enriched = 42;
inline void GeoEnrichment::clear_destination_ip_enriched() {
  _impl_.destination_ip_enriched_ = false;
}
inline bool GeoEnrichment::_internal_destination_ip_enriched() const {
  return _impl_.destination_ip_enriched_;
}
inline bool GeoEnrichment::destination_ip_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.destination_ip_enriched)
  return _internal_destination_ip_enriched();
}
inline void GeoEnrichment::_internal_set_destination_ip_enriched(bool value) {
  
  _impl_.destination_ip_enriched_ = value;
}
inline void GeoEnrichment::set_destination_ip_enriched(bool value) {
  _internal_set_destination_ip_enriched(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.destination_ip_enriched)
}

// bool enrichment_complete = 43;
inline void GeoEnrichment::clear_enrichment_complete() {
  _impl_.enrichment_complete_ = false;
}
inline bool GeoEnrichment::_internal_enrichment_complete() const {
  return _impl_.enrichment_complete_;
}
inline bool GeoEnrichment::enrichment_complete() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_complete)
  return _internal_enrichment_complete();
}
inline void GeoEnrichment::_internal_set_enrichment_complete(bool value) {
  
  _impl_.enrichment_complete_ = value;
}
inline void GeoEnrichment::set_enrichment_complete(bool value) {
  _internal_set_enrichment_complete(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enrichment_complete)
}

// bool public_ip_discovery_attempted = 45;
inline void GeoEnrichment::clear_public_ip_discovery_attempted() {
  _impl_.public_ip_discovery_attempted_ = false;
}
inline bool GeoEnrichment::_internal_public_ip_discovery_attempted() const {
  return _impl_.public_ip_discovery_attempted_;
}
inline bool GeoEnrichment::public_ip_discovery_attempted() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.public_ip_discovery_attempted)
  return _internal_public_ip_discovery_attempted();
}
inline void GeoEnrichment::_internal_set_public_ip_discovery_attempted(bool value) {
  
  _impl_.public_ip_discovery_attempted_ = value;
}
inline void GeoEnrichment::set_public_ip_discovery_attempted(bool value) {
  _internal_set_public_ip_discovery_attempted(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.public_ip_discovery_attempted)
}

// string original_private_ip = 46;
inline void GeoEnrichment::clear_original_private_ip() {
  _impl_.original_private_ip_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::original_private_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.original_private_ip)
  return _internal_original_private_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_original_private_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.original_private_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.original_private_ip)
}
inline std::string* GeoEnrichment::mutable_original_private_ip() {
  std::string* _s = _internal_mutable_original_private_ip();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.original_private_ip)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_original_private_ip() const {
  return _impl_.original_private_ip_.Get();
}
inline void GeoEnrichment::_internal_set_original_private_ip(const std::string& value) {
  
  _impl_.original_private_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_original_private_ip() {
  
  return _impl_.original_private_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_original_private_ip() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.original_private_ip)
  return _impl_.original_private_ip_.Release();
}
inline void GeoEnrichment::set_allocated_original_private_ip(std::string* original_private_ip) {
  if (original_private_ip != nullptr) {
    
  } else {
    
  }
  _impl_.original_private_ip_.SetAllocated(original_private_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.original_private_ip_.IsDefault()) {
    _impl_.original_private_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.original_private_ip)
}

// string discovered_public_ip = 47;
inline void GeoEnrichment::clear_discovered_public_ip() {
  _impl_.discovered_public_ip_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::discovered_public_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.discovered_public_ip)
  return _internal_discovered_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_discovered_public_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.discovered_public_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.discovered_public_ip)
}
inline std::string* GeoEnrichment::mutable_discovered_public_ip() {
  std::string* _s = _internal_mutable_discovered_public_ip();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.discovered_public_ip)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_discovered_public_ip() const {
  return _impl_.discovered_public_ip_.Get();
}
inline void GeoEnrichment::_internal_set_discovered_public_ip(const std::string& value) {
  
  _impl_.discovered_public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_discovered_public_ip() {
  
  return _impl_.discovered_public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_discovered_public_ip() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.discovered_public_ip)
  return _impl_.discovered_public_ip_.Release();
}
inline void GeoEnrichment::set_allocated_discovered_public_ip(std::string* discovered_public_ip) {
  if (discovered_public_ip != nullptr) {
    
  } else {
    
  }
  _impl_.discovered_public_ip_.SetAllocated(discovered_public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.discovered_public_ip_.IsDefault()) {
    _impl_.discovered_public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.discovered_public_ip)
}

// string ip_discovery_service = 48;
inline void GeoEnrichment::clear_ip_discovery_service() {
  _impl_.ip_discovery_service_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::ip_discovery_service() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.ip_discovery_service)
  return _internal_ip_discovery_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_ip_discovery_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_discovery_service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.ip_discovery_service)
}
inline std::string* GeoEnrichment::mutable_ip_discovery_service() {
  std::string* _s = _internal_mutable_ip_discovery_service();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.ip_discovery_service)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_ip_discovery_service() const {
  return _impl_.ip_discovery_service_.Get();
}
inline void GeoEnrichment::_internal_set_ip_discovery_service(const std::string& value) {
  
  _impl_.ip_discovery_service_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_ip_discovery_service() {
  
  return _impl_.ip_discovery_service_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_ip_discovery_service() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.ip_discovery_service)
  return _impl_.ip_discovery_service_.Release();
}
inline void GeoEnrichment::set_allocated_ip_discovery_service(std::string* ip_discovery_service) {
  if (ip_discovery_service != nullptr) {
    
  } else {
    
  }
  _impl_.ip_discovery_service_.SetAllocated(ip_discovery_service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_discovery_service_.IsDefault()) {
    _impl_.ip_discovery_service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.ip_discovery_service)
}

// .google.protobuf.Timestamp ip_discovery_time = 49;
inline bool GeoEnrichment::_internal_has_ip_discovery_time() const {
  return this != internal_default_instance() && _impl_.ip_discovery_time_ != nullptr;
}
inline bool GeoEnrichment::has_ip_discovery_time() const {
  return _internal_has_ip_discovery_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GeoEnrichment::_internal_ip_discovery_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ip_discovery_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GeoEnrichment::ip_discovery_time() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.ip_discovery_time)
  return _internal_ip_discovery_time();
}
inline void GeoEnrichment::unsafe_arena_set_allocated_ip_discovery_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ip_discovery_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_discovery_time_);
  }
  _impl_.ip_discovery_time_ = ip_discovery_time;
  if (ip_discovery_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.GeoEnrichment.ip_discovery_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::release_ip_discovery_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ip_discovery_time_;
  _impl_.ip_discovery_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::unsafe_arena_release_ip_discovery_time() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.ip_discovery_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ip_discovery_time_;
  _impl_.ip_discovery_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::_internal_mutable_ip_discovery_time() {
  
  if (_impl_.ip_discovery_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ip_discovery_time_ = p;
  }
  return _impl_.ip_discovery_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::mutable_ip_discovery_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ip_discovery_time();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.ip_discovery_time)
  return _msg;
}
inline void GeoEnrichment::set_allocated_ip_discovery_time(::PROTOBUF_NAMESPACE_ID::Timestamp* ip_discovery_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_discovery_time_);
  }
  if (ip_discovery_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_discovery_time));
    if (message_arena != submessage_arena) {
      ip_discovery_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_discovery_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ip_discovery_time_ = ip_discovery_time;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.ip_discovery_time)
}

// string enricher_version = 50;
inline void GeoEnrichment::clear_enricher_version() {
  _impl_.enricher_version_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::enricher_version() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enricher_version)
  return _internal_enricher_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_enricher_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enricher_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enricher_version)
}
inline std::string* GeoEnrichment::mutable_enricher_version() {
  std::string* _s = _internal_mutable_enricher_version();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.enricher_version)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_enricher_version() const {
  return _impl_.enricher_version_.Get();
}
inline void GeoEnrichment::_internal_set_enricher_version(const std::string& value) {
  
  _impl_.enricher_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_enricher_version() {
  
  return _impl_.enricher_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_enricher_version() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.enricher_version)
  return _impl_.enricher_version_.Release();
}
inline void GeoEnrichment::set_allocated_enricher_version(std::string* enricher_version) {
  if (enricher_version != nullptr) {
    
  } else {
    
  }
  _impl_.enricher_version_.SetAllocated(enricher_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enricher_version_.IsDefault()) {
    _impl_.enricher_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.enricher_version)
}

// string geoip_method = 51;
inline void GeoEnrichment::clear_geoip_method() {
  _impl_.geoip_method_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::geoip_method() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geoip_method)
  return _internal_geoip_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_geoip_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.geoip_method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geoip_method)
}
inline std::string* GeoEnrichment::mutable_geoip_method() {
  std::string* _s = _internal_mutable_geoip_method();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.geoip_method)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_geoip_method() const {
  return _impl_.geoip_method_.Get();
}
inline void GeoEnrichment::_internal_set_geoip_method(const std::string& value) {
  
  _impl_.geoip_method_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_geoip_method() {
  
  return _impl_.geoip_method_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_geoip_method() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.geoip_method)
  return _impl_.geoip_method_.Release();
}
inline void GeoEnrichment::set_allocated_geoip_method(std::string* geoip_method) {
  if (geoip_method != nullptr) {
    
  } else {
    
  }
  _impl_.geoip_method_.SetAllocated(geoip_method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.geoip_method_.IsDefault()) {
    _impl_.geoip_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.geoip_method)
}

// string geoip_database_version = 52;
inline void GeoEnrichment::clear_geoip_database_version() {
  _impl_.geoip_database_version_.ClearToEmpty();
}
inline const std::string& GeoEnrichment::geoip_database_version() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geoip_database_version)
  return _internal_geoip_database_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoEnrichment::set_geoip_database_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.geoip_database_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geoip_database_version)
}
inline std::string* GeoEnrichment::mutable_geoip_database_version() {
  std::string* _s = _internal_mutable_geoip_database_version();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.geoip_database_version)
  return _s;
}
inline const std::string& GeoEnrichment::_internal_geoip_database_version() const {
  return _impl_.geoip_database_version_.Get();
}
inline void GeoEnrichment::_internal_set_geoip_database_version(const std::string& value) {
  
  _impl_.geoip_database_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoEnrichment::_internal_mutable_geoip_database_version() {
  
  return _impl_.geoip_database_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoEnrichment::release_geoip_database_version() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.geoip_database_version)
  return _impl_.geoip_database_version_.Release();
}
inline void GeoEnrichment::set_allocated_geoip_database_version(std::string* geoip_database_version) {
  if (geoip_database_version != nullptr) {
    
  } else {
    
  }
  _impl_.geoip_database_version_.SetAllocated(geoip_database_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.geoip_database_version_.IsDefault()) {
    _impl_.geoip_database_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.geoip_database_version)
}

// bool fallback_coordinates_used = 53;
inline void GeoEnrichment::clear_fallback_coordinates_used() {
  _impl_.fallback_coordinates_used_ = false;
}
inline bool GeoEnrichment::_internal_fallback_coordinates_used() const {
  return _impl_.fallback_coordinates_used_;
}
inline bool GeoEnrichment::fallback_coordinates_used() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.fallback_coordinates_used)
  return _internal_fallback_coordinates_used();
}
inline void GeoEnrichment::_internal_set_fallback_coordinates_used(bool value) {
  
  _impl_.fallback_coordinates_used_ = value;
}
inline void GeoEnrichment::set_fallback_coordinates_used(bool value) {
  _internal_set_fallback_coordinates_used(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.fallback_coordinates_used)
}

// float total_lookup_latency_ms = 54;
inline void GeoEnrichment::clear_total_lookup_latency_ms() {
  _impl_.total_lookup_latency_ms_ = 0;
}
inline float GeoEnrichment::_internal_total_lookup_latency_ms() const {
  return _impl_.total_lookup_latency_ms_;
}
inline float GeoEnrichment::total_lookup_latency_ms() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.total_lookup_latency_ms)
  return _internal_total_lookup_latency_ms();
}
inline void GeoEnrichment::_internal_set_total_lookup_latency_ms(float value) {
  
  _impl_.total_lookup_latency_ms_ = value;
}
inline void GeoEnrichment::set_total_lookup_latency_ms(float value) {
  _internal_set_total_lookup_latency_ms(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.total_lookup_latency_ms)
}

// int32 cache_hits = 55;
inline void GeoEnrichment::clear_cache_hits() {
  _impl_.cache_hits_ = 0;
}
inline int32_t GeoEnrichment::_internal_cache_hits() const {
  return _impl_.cache_hits_;
}
inline int32_t GeoEnrichment::cache_hits() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.cache_hits)
  return _internal_cache_hits();
}
inline void GeoEnrichment::_internal_set_cache_hits(int32_t value) {
  
  _impl_.cache_hits_ = value;
}
inline void GeoEnrichment::set_cache_hits(int32_t value) {
  _internal_set_cache_hits(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.cache_hits)
}

// int32 cache_misses = 56;
inline void GeoEnrichment::clear_cache_misses() {
  _impl_.cache_misses_ = 0;
}
inline int32_t GeoEnrichment::_internal_cache_misses() const {
  return _impl_.cache_misses_;
}
inline int32_t GeoEnrichment::cache_misses() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.cache_misses)
  return _internal_cache_misses();
}
inline void GeoEnrichment::_internal_set_cache_misses(int32_t value) {
  
  _impl_.cache_misses_ = value;
}
inline void GeoEnrichment::set_cache_misses(int32_t value) {
  _internal_set_cache_misses(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.cache_misses)
}

// float enrichment_success_rate = 57;
inline void GeoEnrichment::clear_enrichment_success_rate() {
  _impl_.enrichment_success_rate_ = 0;
}
inline float GeoEnrichment::_internal_enrichment_success_rate() const {
  return _impl_.enrichment_success_rate_;
}
inline float GeoEnrichment::enrichment_success_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_success_rate)
  return _internal_enrichment_success_rate();
}
inline void GeoEnrichment::_internal_set_enrichment_success_rate(float value) {
  
  _impl_.enrichment_success_rate_ = value;
}
inline void GeoEnrichment::set_enrichment_success_rate(float value) {
  _internal_set_enrichment_success_rate(value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enrichment_success_rate)
}

// .google.protobuf.Timestamp enrichment_timestamp = 58;
inline bool GeoEnrichment::_internal_has_enrichment_timestamp() const {
  return this != internal_default_instance() && _impl_.enrichment_timestamp_ != nullptr;
}
inline bool GeoEnrichment::has_enrichment_timestamp() const {
  return _internal_has_enrichment_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GeoEnrichment::_internal_enrichment_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.enrichment_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GeoEnrichment::enrichment_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_timestamp)
  return _internal_enrichment_timestamp();
}
inline void GeoEnrichment::unsafe_arena_set_allocated_enrichment_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* enrichment_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrichment_timestamp_);
  }
  _impl_.enrichment_timestamp_ = enrichment_timestamp;
  if (enrichment_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.GeoEnrichment.enrichment_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::release_enrichment_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.enrichment_timestamp_;
  _impl_.enrichment_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::unsafe_arena_release_enrichment_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.enrichment_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.enrichment_timestamp_;
  _impl_.enrichment_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::_internal_mutable_enrichment_timestamp() {
  
  if (_impl_.enrichment_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.enrichment_timestamp_ = p;
  }
  return _impl_.enrichment_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GeoEnrichment::mutable_enrichment_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_enrichment_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.enrichment_timestamp)
  return _msg;
}
inline void GeoEnrichment::set_allocated_enrichment_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* enrichment_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrichment_timestamp_);
  }
  if (enrichment_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enrichment_timestamp));
    if (message_arena != submessage_arena) {
      enrichment_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enrichment_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enrichment_timestamp_ = enrichment_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.enrichment_timestamp)
}

// -------------------------------------------------------------------

// TimeWindow

// .google.protobuf.Timestamp window_start = 1;
inline bool TimeWindow::_internal_has_window_start() const {
  return this != internal_default_instance() && _impl_.window_start_ != nullptr;
}
inline bool TimeWindow::has_window_start() const {
  return _internal_has_window_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeWindow::_internal_window_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.window_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeWindow::window_start() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_start)
  return _internal_window_start();
}
inline void TimeWindow::unsafe_arena_set_allocated_window_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* window_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_start_);
  }
  _impl_.window_start_ = window_start;
  if (window_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TimeWindow.window_start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::release_window_start() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.window_start_;
  _impl_.window_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::unsafe_arena_release_window_start() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_start)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.window_start_;
  _impl_.window_start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::_internal_mutable_window_start() {
  
  if (_impl_.window_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.window_start_ = p;
  }
  return _impl_.window_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::mutable_window_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_window_start();
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_start)
  return _msg;
}
inline void TimeWindow::set_allocated_window_start(::PROTOBUF_NAMESPACE_ID::Timestamp* window_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_start_);
  }
  if (window_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_start));
    if (message_arena != submessage_arena) {
      window_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_start_ = window_start;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_start)
}

// .google.protobuf.Timestamp window_end = 2;
inline bool TimeWindow::_internal_has_window_end() const {
  return this != internal_default_instance() && _impl_.window_end_ != nullptr;
}
inline bool TimeWindow::has_window_end() const {
  return _internal_has_window_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeWindow::_internal_window_end() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.window_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeWindow::window_end() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_end)
  return _internal_window_end();
}
inline void TimeWindow::unsafe_arena_set_allocated_window_end(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* window_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_end_);
  }
  _impl_.window_end_ = window_end;
  if (window_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TimeWindow.window_end)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::release_window_end() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.window_end_;
  _impl_.window_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::unsafe_arena_release_window_end() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_end)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.window_end_;
  _impl_.window_end_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::_internal_mutable_window_end() {
  
  if (_impl_.window_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.window_end_ = p;
  }
  return _impl_.window_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeWindow::mutable_window_end() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_window_end();
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_end)
  return _msg;
}
inline void TimeWindow::set_allocated_window_end(::PROTOBUF_NAMESPACE_ID::Timestamp* window_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_end_);
  }
  if (window_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_end));
    if (message_arena != submessage_arena) {
      window_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_end, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_end_ = window_end;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_end)
}

// .google.protobuf.Duration window_duration = 3;
inline bool TimeWindow::_internal_has_window_duration() const {
  return this != internal_default_instance() && _impl_.window_duration_ != nullptr;
}
inline bool TimeWindow::has_window_duration() const {
  return _internal_has_window_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimeWindow::_internal_window_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.window_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimeWindow::window_duration() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_duration)
  return _internal_window_duration();
}
inline void TimeWindow::unsafe_arena_set_allocated_window_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* window_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_duration_);
  }
  _impl_.window_duration_ = window_duration;
  if (window_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TimeWindow.window_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeWindow::release_window_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.window_duration_;
  _impl_.window_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeWindow::unsafe_arena_release_window_duration() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.window_duration_;
  _impl_.window_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeWindow::_internal_mutable_window_duration() {
  
  if (_impl_.window_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.window_duration_ = p;
  }
  return _impl_.window_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeWindow::mutable_window_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_window_duration();
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_duration)
  return _msg;
}
inline void TimeWindow::set_allocated_window_duration(::PROTOBUF_NAMESPACE_ID::Duration* window_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_duration_);
  }
  if (window_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_duration));
    if (message_arena != submessage_arena) {
      window_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_duration_ = window_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_duration)
}

// uint64 sequence_number = 4;
inline void TimeWindow::clear_sequence_number() {
  _impl_.sequence_number_ = uint64_t{0u};
}
inline uint64_t TimeWindow::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline uint64_t TimeWindow::sequence_number() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.sequence_number)
  return _internal_sequence_number();
}
inline void TimeWindow::_internal_set_sequence_number(uint64_t value) {
  
  _impl_.sequence_number_ = value;
}
inline void TimeWindow::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:protobuf.TimeWindow.sequence_number)
}

// .protobuf.TimeWindow.WindowType window_type = 5;
inline void TimeWindow::clear_window_type() {
  _impl_.window_type_ = 0;
}
inline ::protobuf::TimeWindow_WindowType TimeWindow::_internal_window_type() const {
  return static_cast< ::protobuf::TimeWindow_WindowType >(_impl_.window_type_);
}
inline ::protobuf::TimeWindow_WindowType TimeWindow::window_type() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_type)
  return _internal_window_type();
}
inline void TimeWindow::_internal_set_window_type(::protobuf::TimeWindow_WindowType value) {
  
  _impl_.window_type_ = value;
}
inline void TimeWindow::set_window_type(::protobuf::TimeWindow_WindowType value) {
  _internal_set_window_type(value);
  // @@protoc_insertion_point(field_set:protobuf.TimeWindow.window_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlowAggregation

// .protobuf.TimeWindow time_window = 1;
inline bool FlowAggregation::_internal_has_time_window() const {
  return this != internal_default_instance() && _impl_.time_window_ != nullptr;
}
inline bool FlowAggregation::has_time_window() const {
  return _internal_has_time_window();
}
inline void FlowAggregation::clear_time_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_ != nullptr) {
    delete _impl_.time_window_;
  }
  _impl_.time_window_ = nullptr;
}
inline const ::protobuf::TimeWindow& FlowAggregation::_internal_time_window() const {
  const ::protobuf::TimeWindow* p = _impl_.time_window_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::TimeWindow&>(
      ::protobuf::_TimeWindow_default_instance_);
}
inline const ::protobuf::TimeWindow& FlowAggregation::time_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.time_window)
  return _internal_time_window();
}
inline void FlowAggregation::unsafe_arena_set_allocated_time_window(
    ::protobuf::TimeWindow* time_window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_window_);
  }
  _impl_.time_window_ = time_window;
  if (time_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.FlowAggregation.time_window)
}
inline ::protobuf::TimeWindow* FlowAggregation::release_time_window() {
  
  ::protobuf::TimeWindow* temp = _impl_.time_window_;
  _impl_.time_window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::TimeWindow* FlowAggregation::unsafe_arena_release_time_window() {
  // @@protoc_insertion_point(field_release:protobuf.FlowAggregation.time_window)
  
  ::protobuf::TimeWindow* temp = _impl_.time_window_;
  _impl_.time_window_ = nullptr;
  return temp;
}
inline ::protobuf::TimeWindow* FlowAggregation::_internal_mutable_time_window() {
  
  if (_impl_.time_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TimeWindow>(GetArenaForAllocation());
    _impl_.time_window_ = p;
  }
  return _impl_.time_window_;
}
inline ::protobuf::TimeWindow* FlowAggregation::mutable_time_window() {
  ::protobuf::TimeWindow* _msg = _internal_mutable_time_window();
  // @@protoc_insertion_point(field_mutable:protobuf.FlowAggregation.time_window)
  return _msg;
}
inline void FlowAggregation::set_allocated_time_window(::protobuf::TimeWindow* time_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_window_;
  }
  if (time_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_window);
    if (message_arena != submessage_arena) {
      time_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:protobuf.FlowAggregation.time_window)
}

// uint64 total_flows_in_window = 2;
inline void FlowAggregation::clear_total_flows_in_window() {
  _impl_.total_flows_in_window_ = uint64_t{0u};
}
inline uint64_t FlowAggregation::_internal_total_flows_in_window() const {
  return _impl_.total_flows_in_window_;
}
inline uint64_t FlowAggregation::total_flows_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_flows_in_window)
  return _internal_total_flows_in_window();
}
inline void FlowAggregation::_internal_set_total_flows_in_window(uint64_t value) {
  
  _impl_.total_flows_in_window_ = value;
}
inline void FlowAggregation::set_total_flows_in_window(uint64_t value) {
  _internal_set_total_flows_in_window(value);
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_flows_in_window)
}

// uint64 total_packets_in_window = 3;
inline void FlowAggregation::clear_total_packets_in_window() {
  _impl_.total_packets_in_window_ = uint64_t{0u};
}
inline uint64_t FlowAggregation::_internal_total_packets_in_window() const {
  return _impl_.total_packets_in_window_;
}
inline uint64_t FlowAggregation::total_packets_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_packets_in_window)
  return _internal_total_packets_in_window();
}
inline void FlowAggregation::_internal_set_total_packets_in_window(uint64_t value) {
  
  _impl_.total_packets_in_window_ = value;
}
inline void FlowAggregation::set_total_packets_in_window(uint64_t value) {
  _internal_set_total_packets_in_window(value);
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_packets_in_window)
}

// uint64 total_bytes_in_window = 4;
inline void FlowAggregation::clear_total_bytes_in_window() {
  _impl_.total_bytes_in_window_ = uint64_t{0u};
}
inline uint64_t FlowAggregation::_internal_total_bytes_in_window() const {
  return _impl_.total_bytes_in_window_;
}
inline uint64_t FlowAggregation::total_bytes_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_bytes_in_window)
  return _internal_total_bytes_in_window();
}
inline void FlowAggregation::_internal_set_total_bytes_in_window(uint64_t value) {
  
  _impl_.total_bytes_in_window_ = value;
}
inline void FlowAggregation::set_total_bytes_in_window(uint64_t value) {
  _internal_set_total_bytes_in_window(value);
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_bytes_in_window)
}

// map<string, uint64> protocol_distribution = 5;
inline int FlowAggregation::_internal_protocol_distribution_size() const {
  return _impl_.protocol_distribution_.size();
}
inline int FlowAggregation::protocol_distribution_size() const {
  return _internal_protocol_distribution_size();
}
inline void FlowAggregation::clear_protocol_distribution() {
  _impl_.protocol_distribution_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::_internal_protocol_distribution() const {
  return _impl_.protocol_distribution_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::protocol_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.protocol_distribution)
  return _internal_protocol_distribution();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::_internal_mutable_protocol_distribution() {
  return _impl_.protocol_distribution_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::mutable_protocol_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.protocol_distribution)
  return _internal_mutable_protocol_distribution();
}

// map<string, uint64> port_distribution = 6;
inline int FlowAggregation::_internal_port_distribution_size() const {
  return _impl_.port_distribution_.size();
}
inline int FlowAggregation::port_distribution_size() const {
  return _internal_port_distribution_size();
}
inline void FlowAggregation::clear_port_distribution() {
  _impl_.port_distribution_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::_internal_port_distribution() const {
  return _impl_.port_distribution_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::port_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.port_distribution)
  return _internal_port_distribution();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::_internal_mutable_port_distribution() {
  return _impl_.port_distribution_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::mutable_port_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.port_distribution)
  return _internal_mutable_port_distribution();
}

// map<string, uint64> country_distribution = 7;
inline int FlowAggregation::_internal_country_distribution_size() const {
  return _impl_.country_distribution_.size();
}
inline int FlowAggregation::country_distribution_size() const {
  return _internal_country_distribution_size();
}
inline void FlowAggregation::clear_country_distribution() {
  _impl_.country_distribution_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::_internal_country_distribution() const {
  return _impl_.country_distribution_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
FlowAggregation::country_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.country_distribution)
  return _internal_country_distribution();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::_internal_mutable_country_distribution() {
  return _impl_.country_distribution_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
FlowAggregation::mutable_country_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.country_distribution)
  return _internal_mutable_country_distribution();
}

// double window_anomaly_score = 8;
inline void FlowAggregation::clear_window_anomaly_score() {
  _impl_.window_anomaly_score_ = 0;
}
inline double FlowAggregation::_internal_window_anomaly_score() const {
  return _impl_.window_anomaly_score_;
}
inline double FlowAggregation::window_anomaly_score() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.window_anomaly_score)
  return _internal_window_anomaly_score();
}
inline void FlowAggregation::_internal_set_window_anomaly_score(double value) {
  
  _impl_.window_anomaly_score_ = value;
}
inline void FlowAggregation::set_window_anomaly_score(double value) {
  _internal_set_window_anomaly_score(value);
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.window_anomaly_score)
}

// -------------------------------------------------------------------

// ModelPrediction

// string model_name = 1;
inline void ModelPrediction::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& ModelPrediction::model_name() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrediction::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_name)
}
inline std::string* ModelPrediction::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.model_name)
  return _s;
}
inline const std::string& ModelPrediction::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void ModelPrediction::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrediction::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrediction::release_model_name() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.model_name)
  return _impl_.model_name_.Release();
}
inline void ModelPrediction::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.model_name)
}

// string model_version = 2;
inline void ModelPrediction::clear_model_version() {
  _impl_.model_version_.ClearToEmpty();
}
inline const std::string& ModelPrediction::model_version() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_version)
  return _internal_model_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrediction::set_model_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_version)
}
inline std::string* ModelPrediction::mutable_model_version() {
  std::string* _s = _internal_mutable_model_version();
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.model_version)
  return _s;
}
inline const std::string& ModelPrediction::_internal_model_version() const {
  return _impl_.model_version_.Get();
}
inline void ModelPrediction::_internal_set_model_version(const std::string& value) {
  
  _impl_.model_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrediction::_internal_mutable_model_version() {
  
  return _impl_.model_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrediction::release_model_version() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.model_version)
  return _impl_.model_version_.Release();
}
inline void ModelPrediction::set_allocated_model_version(std::string* model_version) {
  if (model_version != nullptr) {
    
  } else {
    
  }
  _impl_.model_version_.SetAllocated(model_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_version_.IsDefault()) {
    _impl_.model_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.model_version)
}

// .protobuf.ModelPrediction.ModelType model_type = 3;
inline void ModelPrediction::clear_model_type() {
  _impl_.model_type_ = 0;
}
inline ::protobuf::ModelPrediction_ModelType ModelPrediction::_internal_model_type() const {
  return static_cast< ::protobuf::ModelPrediction_ModelType >(_impl_.model_type_);
}
inline ::protobuf::ModelPrediction_ModelType ModelPrediction::model_type() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_type)
  return _internal_model_type();
}
inline void ModelPrediction::_internal_set_model_type(::protobuf::ModelPrediction_ModelType value) {
  
  _impl_.model_type_ = value;
}
inline void ModelPrediction::set_model_type(::protobuf::ModelPrediction_ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_type)
}

// string prediction_class = 4;
inline void ModelPrediction::clear_prediction_class() {
  _impl_.prediction_class_.ClearToEmpty();
}
inline const std::string& ModelPrediction::prediction_class() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.prediction_class)
  return _internal_prediction_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPrediction::set_prediction_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prediction_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.prediction_class)
}
inline std::string* ModelPrediction::mutable_prediction_class() {
  std::string* _s = _internal_mutable_prediction_class();
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.prediction_class)
  return _s;
}
inline const std::string& ModelPrediction::_internal_prediction_class() const {
  return _impl_.prediction_class_.Get();
}
inline void ModelPrediction::_internal_set_prediction_class(const std::string& value) {
  
  _impl_.prediction_class_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelPrediction::_internal_mutable_prediction_class() {
  
  return _impl_.prediction_class_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelPrediction::release_prediction_class() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.prediction_class)
  return _impl_.prediction_class_.Release();
}
inline void ModelPrediction::set_allocated_prediction_class(std::string* prediction_class) {
  if (prediction_class != nullptr) {
    
  } else {
    
  }
  _impl_.prediction_class_.SetAllocated(prediction_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prediction_class_.IsDefault()) {
    _impl_.prediction_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.prediction_class)
}

// double confidence_score = 5;
inline void ModelPrediction::clear_confidence_score() {
  _impl_.confidence_score_ = 0;
}
inline double ModelPrediction::_internal_confidence_score() const {
  return _impl_.confidence_score_;
}
inline double ModelPrediction::confidence_score() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.confidence_score)
  return _internal_confidence_score();
}
inline void ModelPrediction::_internal_set_confidence_score(double value) {
  
  _impl_.confidence_score_ = value;
}
inline void ModelPrediction::set_confidence_score(double value) {
  _internal_set_confidence_score(value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.confidence_score)
}

// repeated double class_probabilities = 6;
inline int ModelPrediction::_internal_class_probabilities_size() const {
  return _impl_.class_probabilities_.size();
}
inline int ModelPrediction::class_probabilities_size() const {
  return _internal_class_probabilities_size();
}
inline void ModelPrediction::clear_class_probabilities() {
  _impl_.class_probabilities_.Clear();
}
inline double ModelPrediction::_internal_class_probabilities(int index) const {
  return _impl_.class_probabilities_.Get(index);
}
inline double ModelPrediction::class_probabilities(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.class_probabilities)
  return _internal_class_probabilities(index);
}
inline void ModelPrediction::set_class_probabilities(int index, double value) {
  _impl_.class_probabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.class_probabilities)
}
inline void ModelPrediction::_internal_add_class_probabilities(double value) {
  _impl_.class_probabilities_.Add(value);
}
inline void ModelPrediction::add_class_probabilities(double value) {
  _internal_add_class_probabilities(value);
  // @@protoc_insertion_point(field_add:protobuf.ModelPrediction.class_probabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ModelPrediction::_internal_class_probabilities() const {
  return _impl_.class_probabilities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ModelPrediction::class_probabilities() const {
  // @@protoc_insertion_point(field_list:protobuf.ModelPrediction.class_probabilities)
  return _internal_class_probabilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ModelPrediction::_internal_mutable_class_probabilities() {
  return &_impl_.class_probabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ModelPrediction::mutable_class_probabilities() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.ModelPrediction.class_probabilities)
  return _internal_mutable_class_probabilities();
}

// .google.protobuf.Timestamp prediction_timestamp = 7;
inline bool ModelPrediction::_internal_has_prediction_timestamp() const {
  return this != internal_default_instance() && _impl_.prediction_timestamp_ != nullptr;
}
inline bool ModelPrediction::has_prediction_timestamp() const {
  return _internal_has_prediction_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ModelPrediction::_internal_prediction_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.prediction_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ModelPrediction::prediction_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.prediction_timestamp)
  return _internal_prediction_timestamp();
}
inline void ModelPrediction::unsafe_arena_set_allocated_prediction_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* prediction_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prediction_timestamp_);
  }
  _impl_.prediction_timestamp_ = prediction_timestamp;
  if (prediction_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ModelPrediction.prediction_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ModelPrediction::release_prediction_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.prediction_timestamp_;
  _impl_.prediction_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ModelPrediction::unsafe_arena_release_prediction_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.prediction_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.prediction_timestamp_;
  _impl_.prediction_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ModelPrediction::_internal_mutable_prediction_timestamp() {
  
  if (_impl_.prediction_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.prediction_timestamp_ = p;
  }
  return _impl_.prediction_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ModelPrediction::mutable_prediction_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_prediction_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.prediction_timestamp)
  return _msg;
}
inline void ModelPrediction::set_allocated_prediction_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* prediction_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prediction_timestamp_);
  }
  if (prediction_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_timestamp));
    if (message_arena != submessage_arena) {
      prediction_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prediction_timestamp_ = prediction_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.prediction_timestamp)
}

// .google.protobuf.Duration processing_duration = 8;
inline bool ModelPrediction::_internal_has_processing_duration() const {
  return this != internal_default_instance() && _impl_.processing_duration_ != nullptr;
}
inline bool ModelPrediction::has_processing_duration() const {
  return _internal_has_processing_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ModelPrediction::_internal_processing_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.processing_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ModelPrediction::processing_duration() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.processing_duration)
  return _internal_processing_duration();
}
inline void ModelPrediction::unsafe_arena_set_allocated_processing_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* processing_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_duration_);
  }
  _impl_.processing_duration_ = processing_duration;
  if (processing_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ModelPrediction.processing_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ModelPrediction::release_processing_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.processing_duration_;
  _impl_.processing_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ModelPrediction::unsafe_arena_release_processing_duration() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.processing_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.processing_duration_;
  _impl_.processing_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ModelPrediction::_internal_mutable_processing_duration() {
  
  if (_impl_.processing_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.processing_duration_ = p;
  }
  return _impl_.processing_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ModelPrediction::mutable_processing_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_processing_duration();
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.processing_duration)
  return _msg;
}
inline void ModelPrediction::set_allocated_processing_duration(::PROTOBUF_NAMESPACE_ID::Duration* processing_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_duration_);
  }
  if (processing_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_duration));
    if (message_arena != submessage_arena) {
      processing_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.processing_duration_ = processing_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.processing_duration)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TricapaMLAnalysis

// .protobuf.ModelPrediction level1_general_detection = 1;
inline bool TricapaMLAnalysis::_internal_has_level1_general_detection() const {
  return this != internal_default_instance() && _impl_.level1_general_detection_ != nullptr;
}
inline bool TricapaMLAnalysis::has_level1_general_detection() const {
  return _internal_has_level1_general_detection();
}
inline void TricapaMLAnalysis::clear_level1_general_detection() {
  if (GetArenaForAllocation() == nullptr && _impl_.level1_general_detection_ != nullptr) {
    delete _impl_.level1_general_detection_;
  }
  _impl_.level1_general_detection_ = nullptr;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level1_general_detection() const {
  const ::protobuf::ModelPrediction* p = _impl_.level1_general_detection_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::ModelPrediction&>(
      ::protobuf::_ModelPrediction_default_instance_);
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level1_general_detection() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level1_general_detection)
  return _internal_level1_general_detection();
}
inline void TricapaMLAnalysis::unsafe_arena_set_allocated_level1_general_detection(
    ::protobuf::ModelPrediction* level1_general_detection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.level1_general_detection_);
  }
  _impl_.level1_general_detection_ = level1_general_detection;
  if (level1_general_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TricapaMLAnalysis.level1_general_detection)
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::release_level1_general_detection() {
  
  ::protobuf::ModelPrediction* temp = _impl_.level1_general_detection_;
  _impl_.level1_general_detection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::unsafe_arena_release_level1_general_detection() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.level1_general_detection)
  
  ::protobuf::ModelPrediction* temp = _impl_.level1_general_detection_;
  _impl_.level1_general_detection_ = nullptr;
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::_internal_mutable_level1_general_detection() {
  
  if (_impl_.level1_general_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::ModelPrediction>(GetArenaForAllocation());
    _impl_.level1_general_detection_ = p;
  }
  return _impl_.level1_general_detection_;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level1_general_detection() {
  ::protobuf::ModelPrediction* _msg = _internal_mutable_level1_general_detection();
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level1_general_detection)
  return _msg;
}
inline void TricapaMLAnalysis::set_allocated_level1_general_detection(::protobuf::ModelPrediction* level1_general_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.level1_general_detection_;
  }
  if (level1_general_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(level1_general_detection);
    if (message_arena != submessage_arena) {
      level1_general_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, level1_general_detection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.level1_general_detection_ = level1_general_detection;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.level1_general_detection)
}

// bool attack_detected_level1 = 2;
inline void TricapaMLAnalysis::clear_attack_detected_level1() {
  _impl_.attack_detected_level1_ = false;
}
inline bool TricapaMLAnalysis::_internal_attack_detected_level1() const {
  return _impl_.attack_detected_level1_;
}
inline bool TricapaMLAnalysis::attack_detected_level1() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.attack_detected_level1)
  return _internal_attack_detected_level1();
}
inline void TricapaMLAnalysis::_internal_set_attack_detected_level1(bool value) {
  
  _impl_.attack_detected_level1_ = value;
}
inline void TricapaMLAnalysis::set_attack_detected_level1(bool value) {
  _internal_set_attack_detected_level1(value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.attack_detected_level1)
}

// double level1_confidence = 3;
inline void TricapaMLAnalysis::clear_level1_confidence() {
  _impl_.level1_confidence_ = 0;
}
inline double TricapaMLAnalysis::_internal_level1_confidence() const {
  return _impl_.level1_confidence_;
}
inline double TricapaMLAnalysis::level1_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level1_confidence)
  return _internal_level1_confidence();
}
inline void TricapaMLAnalysis::_internal_set_level1_confidence(double value) {
  
  _impl_.level1_confidence_ = value;
}
inline void TricapaMLAnalysis::set_level1_confidence(double value) {
  _internal_set_level1_confidence(value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.level1_confidence)
}

// .protobuf.ModelPrediction level2_context_classification = 4;
inline bool TricapaMLAnalysis::_internal_has_level2_context_classification() const {
  return this != internal_default_instance() && _impl_.level2_context_classification_ != nullptr;
}
inline bool TricapaMLAnalysis::has_level2_context_classification() const {
  return _internal_has_level2_context_classification();
}
inline void TricapaMLAnalysis::clear_level2_context_classification() {
  if (GetArenaForAllocation() == nullptr && _impl_.level2_context_classification_ != nullptr) {
    delete _impl_.level2_context_classification_;
  }
  _impl_.level2_context_classification_ = nullptr;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level2_context_classification() const {
  const ::protobuf::ModelPrediction* p = _impl_.level2_context_classification_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::ModelPrediction&>(
      ::protobuf::_ModelPrediction_default_instance_);
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level2_context_classification() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level2_context_classification)
  return _internal_level2_context_classification();
}
inline void TricapaMLAnalysis::unsafe_arena_set_allocated_level2_context_classification(
    ::protobuf::ModelPrediction* level2_context_classification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.level2_context_classification_);
  }
  _impl_.level2_context_classification_ = level2_context_classification;
  if (level2_context_classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TricapaMLAnalysis.level2_context_classification)
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::release_level2_context_classification() {
  
  ::protobuf::ModelPrediction* temp = _impl_.level2_context_classification_;
  _impl_.level2_context_classification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::unsafe_arena_release_level2_context_classification() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.level2_context_classification)
  
  ::protobuf::ModelPrediction* temp = _impl_.level2_context_classification_;
  _impl_.level2_context_classification_ = nullptr;
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::_internal_mutable_level2_context_classification() {
  
  if (_impl_.level2_context_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::ModelPrediction>(GetArenaForAllocation());
    _impl_.level2_context_classification_ = p;
  }
  return _impl_.level2_context_classification_;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level2_context_classification() {
  ::protobuf::ModelPrediction* _msg = _internal_mutable_level2_context_classification();
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level2_context_classification)
  return _msg;
}
inline void TricapaMLAnalysis::set_allocated_level2_context_classification(::protobuf::ModelPrediction* level2_context_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.level2_context_classification_;
  }
  if (level2_context_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(level2_context_classification);
    if (message_arena != submessage_arena) {
      level2_context_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, level2_context_classification, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.level2_context_classification_ = level2_context_classification;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.level2_context_classification)
}

// string traffic_context = 5;
inline void TricapaMLAnalysis::clear_traffic_context() {
  _impl_.traffic_context_.ClearToEmpty();
}
inline const std::string& TricapaMLAnalysis::traffic_context() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.traffic_context)
  return _internal_traffic_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TricapaMLAnalysis::set_traffic_context(ArgT0&& arg0, ArgT... args) {
 
 _impl_.traffic_context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.traffic_context)
}
inline std::string* TricapaMLAnalysis::mutable_traffic_context() {
  std::string* _s = _internal_mutable_traffic_context();
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.traffic_context)
  return _s;
}
inline const std::string& TricapaMLAnalysis::_internal_traffic_context() const {
  return _impl_.traffic_context_.Get();
}
inline void TricapaMLAnalysis::_internal_set_traffic_context(const std::string& value) {
  
  _impl_.traffic_context_.Set(value, GetArenaForAllocation());
}
inline std::string* TricapaMLAnalysis::_internal_mutable_traffic_context() {
  
  return _impl_.traffic_context_.Mutable(GetArenaForAllocation());
}
inline std::string* TricapaMLAnalysis::release_traffic_context() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.traffic_context)
  return _impl_.traffic_context_.Release();
}
inline void TricapaMLAnalysis::set_allocated_traffic_context(std::string* traffic_context) {
  if (traffic_context != nullptr) {
    
  } else {
    
  }
  _impl_.traffic_context_.SetAllocated(traffic_context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traffic_context_.IsDefault()) {
    _impl_.traffic_context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.traffic_context)
}

// repeated .protobuf.ModelPrediction level2_specialized_predictions = 9;
inline int TricapaMLAnalysis::_internal_level2_specialized_predictions_size() const {
  return _impl_.level2_specialized_predictions_.size();
}
inline int TricapaMLAnalysis::level2_specialized_predictions_size() const {
  return _internal_level2_specialized_predictions_size();
}
inline void TricapaMLAnalysis::clear_level2_specialized_predictions() {
  _impl_.level2_specialized_predictions_.Clear();
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level2_specialized_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level2_specialized_predictions)
  return _impl_.level2_specialized_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
TricapaMLAnalysis::mutable_level2_specialized_predictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TricapaMLAnalysis.level2_specialized_predictions)
  return &_impl_.level2_specialized_predictions_;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level2_specialized_predictions(int index) const {
  return _impl_.level2_specialized_predictions_.Get(index);
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level2_specialized_predictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level2_specialized_predictions)
  return _internal_level2_specialized_predictions(index);
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::_internal_add_level2_specialized_predictions() {
  return _impl_.level2_specialized_predictions_.Add();
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::add_level2_specialized_predictions() {
  ::protobuf::ModelPrediction* _add = _internal_add_level2_specialized_predictions();
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.level2_specialized_predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
TricapaMLAnalysis::level2_specialized_predictions() const {
  // @@protoc_insertion_point(field_list:protobuf.TricapaMLAnalysis.level2_specialized_predictions)
  return _impl_.level2_specialized_predictions_;
}

// repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
inline int TricapaMLAnalysis::_internal_level3_specialized_predictions_size() const {
  return _impl_.level3_specialized_predictions_.size();
}
inline int TricapaMLAnalysis::level3_specialized_predictions_size() const {
  return _internal_level3_specialized_predictions_size();
}
inline void TricapaMLAnalysis::clear_level3_specialized_predictions() {
  _impl_.level3_specialized_predictions_.Clear();
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level3_specialized_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return _impl_.level3_specialized_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
TricapaMLAnalysis::mutable_level3_specialized_predictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return &_impl_.level3_specialized_predictions_;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level3_specialized_predictions(int index) const {
  return _impl_.level3_specialized_predictions_.Get(index);
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level3_specialized_predictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return _internal_level3_specialized_predictions(index);
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::_internal_add_level3_specialized_predictions() {
  return _impl_.level3_specialized_predictions_.Add();
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::add_level3_specialized_predictions() {
  ::protobuf::ModelPrediction* _add = _internal_add_level3_specialized_predictions();
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
TricapaMLAnalysis::level3_specialized_predictions() const {
  // @@protoc_insertion_point(field_list:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return _impl_.level3_specialized_predictions_;
}

// string final_threat_classification = 7;
inline void TricapaMLAnalysis::clear_final_threat_classification() {
  _impl_.final_threat_classification_.ClearToEmpty();
}
inline const std::string& TricapaMLAnalysis::final_threat_classification() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.final_threat_classification)
  return _internal_final_threat_classification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TricapaMLAnalysis::set_final_threat_classification(ArgT0&& arg0, ArgT... args) {
 
 _impl_.final_threat_classification_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.final_threat_classification)
}
inline std::string* TricapaMLAnalysis::mutable_final_threat_classification() {
  std::string* _s = _internal_mutable_final_threat_classification();
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.final_threat_classification)
  return _s;
}
inline const std::string& TricapaMLAnalysis::_internal_final_threat_classification() const {
  return _impl_.final_threat_classification_.Get();
}
inline void TricapaMLAnalysis::_internal_set_final_threat_classification(const std::string& value) {
  
  _impl_.final_threat_classification_.Set(value, GetArenaForAllocation());
}
inline std::string* TricapaMLAnalysis::_internal_mutable_final_threat_classification() {
  
  return _impl_.final_threat_classification_.Mutable(GetArenaForAllocation());
}
inline std::string* TricapaMLAnalysis::release_final_threat_classification() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.final_threat_classification)
  return _impl_.final_threat_classification_.Release();
}
inline void TricapaMLAnalysis::set_allocated_final_threat_classification(std::string* final_threat_classification) {
  if (final_threat_classification != nullptr) {
    
  } else {
    
  }
  _impl_.final_threat_classification_.SetAllocated(final_threat_classification, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.final_threat_classification_.IsDefault()) {
    _impl_.final_threat_classification_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.final_threat_classification)
}

// double ensemble_confidence = 8;
inline void TricapaMLAnalysis::clear_ensemble_confidence() {
  _impl_.ensemble_confidence_ = 0;
}
inline double TricapaMLAnalysis::_internal_ensemble_confidence() const {
  return _impl_.ensemble_confidence_;
}
inline double TricapaMLAnalysis::ensemble_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.ensemble_confidence)
  return _internal_ensemble_confidence();
}
inline void TricapaMLAnalysis::_internal_set_ensemble_confidence(double value) {
  
  _impl_.ensemble_confidence_ = value;
}
inline void TricapaMLAnalysis::set_ensemble_confidence(double value) {
  _internal_set_ensemble_confidence(value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.ensemble_confidence)
}

// .google.protobuf.Duration total_analysis_duration = 10;
inline bool TricapaMLAnalysis::_internal_has_total_analysis_duration() const {
  return this != internal_default_instance() && _impl_.total_analysis_duration_ != nullptr;
}
inline bool TricapaMLAnalysis::has_total_analysis_duration() const {
  return _internal_has_total_analysis_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TricapaMLAnalysis::_internal_total_analysis_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_analysis_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TricapaMLAnalysis::total_analysis_duration() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.total_analysis_duration)
  return _internal_total_analysis_duration();
}
inline void TricapaMLAnalysis::unsafe_arena_set_allocated_total_analysis_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_analysis_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_analysis_duration_);
  }
  _impl_.total_analysis_duration_ = total_analysis_duration;
  if (total_analysis_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TricapaMLAnalysis.total_analysis_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TricapaMLAnalysis::release_total_analysis_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_analysis_duration_;
  _impl_.total_analysis_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TricapaMLAnalysis::unsafe_arena_release_total_analysis_duration() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.total_analysis_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_analysis_duration_;
  _impl_.total_analysis_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TricapaMLAnalysis::_internal_mutable_total_analysis_duration() {
  
  if (_impl_.total_analysis_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_analysis_duration_ = p;
  }
  return _impl_.total_analysis_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TricapaMLAnalysis::mutable_total_analysis_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_analysis_duration();
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.total_analysis_duration)
  return _msg;
}
inline void TricapaMLAnalysis::set_allocated_total_analysis_duration(::PROTOBUF_NAMESPACE_ID::Duration* total_analysis_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_analysis_duration_);
  }
  if (total_analysis_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_analysis_duration));
    if (message_arena != submessage_arena) {
      total_analysis_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_analysis_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_analysis_duration_ = total_analysis_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.total_analysis_duration)
}

// repeated string models_activated = 11;
inline int TricapaMLAnalysis::_internal_models_activated_size() const {
  return _impl_.models_activated_.size();
}
inline int TricapaMLAnalysis::models_activated_size() const {
  return _internal_models_activated_size();
}
inline void TricapaMLAnalysis::clear_models_activated() {
  _impl_.models_activated_.Clear();
}
inline std::string* TricapaMLAnalysis::add_models_activated() {
  std::string* _s = _internal_add_models_activated();
  // @@protoc_insertion_point(field_add_mutable:protobuf.TricapaMLAnalysis.models_activated)
  return _s;
}
inline const std::string& TricapaMLAnalysis::_internal_models_activated(int index) const {
  return _impl_.models_activated_.Get(index);
}
inline const std::string& TricapaMLAnalysis::models_activated(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.models_activated)
  return _internal_models_activated(index);
}
inline std::string* TricapaMLAnalysis::mutable_models_activated(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.models_activated)
  return _impl_.models_activated_.Mutable(index);
}
inline void TricapaMLAnalysis::set_models_activated(int index, const std::string& value) {
  _impl_.models_activated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::set_models_activated(int index, std::string&& value) {
  _impl_.models_activated_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::set_models_activated(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.models_activated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::set_models_activated(int index, const char* value, size_t size) {
  _impl_.models_activated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.TricapaMLAnalysis.models_activated)
}
inline std::string* TricapaMLAnalysis::_internal_add_models_activated() {
  return _impl_.models_activated_.Add();
}
inline void TricapaMLAnalysis::add_models_activated(const std::string& value) {
  _impl_.models_activated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::add_models_activated(std::string&& value) {
  _impl_.models_activated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::add_models_activated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.models_activated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::add_models_activated(const char* value, size_t size) {
  _impl_.models_activated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.TricapaMLAnalysis.models_activated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TricapaMLAnalysis::models_activated() const {
  // @@protoc_insertion_point(field_list:protobuf.TricapaMLAnalysis.models_activated)
  return _impl_.models_activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TricapaMLAnalysis::mutable_models_activated() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TricapaMLAnalysis.models_activated)
  return &_impl_.models_activated_;
}

// map<string, double> feature_importance_scores = 12;
inline int TricapaMLAnalysis::_internal_feature_importance_scores_size() const {
  return _impl_.feature_importance_scores_.size();
}
inline int TricapaMLAnalysis::feature_importance_scores_size() const {
  return _internal_feature_importance_scores_size();
}
inline void TricapaMLAnalysis::clear_feature_importance_scores() {
  _impl_.feature_importance_scores_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
TricapaMLAnalysis::_internal_feature_importance_scores() const {
  return _impl_.feature_importance_scores_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
TricapaMLAnalysis::feature_importance_scores() const {
  // @@protoc_insertion_point(field_map:protobuf.TricapaMLAnalysis.feature_importance_scores)
  return _internal_feature_importance_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
TricapaMLAnalysis::_internal_mutable_feature_importance_scores() {
  return _impl_.feature_importance_scores_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
TricapaMLAnalysis::mutable_feature_importance_scores() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.TricapaMLAnalysis.feature_importance_scores)
  return _internal_mutable_feature_importance_scores();
}

// bool requires_human_review = 13;
inline void TricapaMLAnalysis::clear_requires_human_review() {
  _impl_.requires_human_review_ = false;
}
inline bool TricapaMLAnalysis::_internal_requires_human_review() const {
  return _impl_.requires_human_review_;
}
inline bool TricapaMLAnalysis::requires_human_review() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.requires_human_review)
  return _internal_requires_human_review();
}
inline void TricapaMLAnalysis::_internal_set_requires_human_review(bool value) {
  
  _impl_.requires_human_review_ = value;
}
inline void TricapaMLAnalysis::set_requires_human_review(bool value) {
  _internal_set_requires_human_review(value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.requires_human_review)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DistributedNode

// string node_id = 1;
inline void DistributedNode::clear_node_id() {
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& DistributedNode::node_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_id)
}
inline std::string* DistributedNode::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_id)
  return _s;
}
inline const std::string& DistributedNode::_internal_node_id() const {
  return _impl_.node_id_.Get();
}
inline void DistributedNode::_internal_set_node_id(const std::string& value) {
  
  _impl_.node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_node_id() {
  
  return _impl_.node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_node_id() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_id)
  return _impl_.node_id_.Release();
}
inline void DistributedNode::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  _impl_.node_id_.SetAllocated(node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_id)
}

// string node_hostname = 2;
inline void DistributedNode::clear_node_hostname() {
  _impl_.node_hostname_.ClearToEmpty();
}
inline const std::string& DistributedNode::node_hostname() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_hostname)
  return _internal_node_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_node_hostname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_hostname)
}
inline std::string* DistributedNode::mutable_node_hostname() {
  std::string* _s = _internal_mutable_node_hostname();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_hostname)
  return _s;
}
inline const std::string& DistributedNode::_internal_node_hostname() const {
  return _impl_.node_hostname_.Get();
}
inline void DistributedNode::_internal_set_node_hostname(const std::string& value) {
  
  _impl_.node_hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_node_hostname() {
  
  return _impl_.node_hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_node_hostname() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_hostname)
  return _impl_.node_hostname_.Release();
}
inline void DistributedNode::set_allocated_node_hostname(std::string* node_hostname) {
  if (node_hostname != nullptr) {
    
  } else {
    
  }
  _impl_.node_hostname_.SetAllocated(node_hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_hostname_.IsDefault()) {
    _impl_.node_hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_hostname)
}

// string node_ip_address = 3;
inline void DistributedNode::clear_node_ip_address() {
  _impl_.node_ip_address_.ClearToEmpty();
}
inline const std::string& DistributedNode::node_ip_address() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_ip_address)
  return _internal_node_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_node_ip_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_ip_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_ip_address)
}
inline std::string* DistributedNode::mutable_node_ip_address() {
  std::string* _s = _internal_mutable_node_ip_address();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_ip_address)
  return _s;
}
inline const std::string& DistributedNode::_internal_node_ip_address() const {
  return _impl_.node_ip_address_.Get();
}
inline void DistributedNode::_internal_set_node_ip_address(const std::string& value) {
  
  _impl_.node_ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_node_ip_address() {
  
  return _impl_.node_ip_address_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_node_ip_address() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_ip_address)
  return _impl_.node_ip_address_.Release();
}
inline void DistributedNode::set_allocated_node_ip_address(std::string* node_ip_address) {
  if (node_ip_address != nullptr) {
    
  } else {
    
  }
  _impl_.node_ip_address_.SetAllocated(node_ip_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_ip_address_.IsDefault()) {
    _impl_.node_ip_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_ip_address)
}

// string physical_location = 4;
inline void DistributedNode::clear_physical_location() {
  _impl_.physical_location_.ClearToEmpty();
}
inline const std::string& DistributedNode::physical_location() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.physical_location)
  return _internal_physical_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_physical_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.physical_location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.physical_location)
}
inline std::string* DistributedNode::mutable_physical_location() {
  std::string* _s = _internal_mutable_physical_location();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.physical_location)
  return _s;
}
inline const std::string& DistributedNode::_internal_physical_location() const {
  return _impl_.physical_location_.Get();
}
inline void DistributedNode::_internal_set_physical_location(const std::string& value) {
  
  _impl_.physical_location_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_physical_location() {
  
  return _impl_.physical_location_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_physical_location() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.physical_location)
  return _impl_.physical_location_.Release();
}
inline void DistributedNode::set_allocated_physical_location(std::string* physical_location) {
  if (physical_location != nullptr) {
    
  } else {
    
  }
  _impl_.physical_location_.SetAllocated(physical_location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.physical_location_.IsDefault()) {
    _impl_.physical_location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.physical_location)
}

// .protobuf.DistributedNode.NodeRole node_role = 5;
inline void DistributedNode::clear_node_role() {
  _impl_.node_role_ = 0;
}
inline ::protobuf::DistributedNode_NodeRole DistributedNode::_internal_node_role() const {
  return static_cast< ::protobuf::DistributedNode_NodeRole >(_impl_.node_role_);
}
inline ::protobuf::DistributedNode_NodeRole DistributedNode::node_role() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_role)
  return _internal_node_role();
}
inline void DistributedNode::_internal_set_node_role(::protobuf::DistributedNode_NodeRole value) {
  
  _impl_.node_role_ = value;
}
inline void DistributedNode::set_node_role(::protobuf::DistributedNode_NodeRole value) {
  _internal_set_node_role(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_role)
}

// .protobuf.DistributedNode.NodeStatus node_status = 6;
inline void DistributedNode::clear_node_status() {
  _impl_.node_status_ = 0;
}
inline ::protobuf::DistributedNode_NodeStatus DistributedNode::_internal_node_status() const {
  return static_cast< ::protobuf::DistributedNode_NodeStatus >(_impl_.node_status_);
}
inline ::protobuf::DistributedNode_NodeStatus DistributedNode::node_status() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_status)
  return _internal_node_status();
}
inline void DistributedNode::_internal_set_node_status(::protobuf::DistributedNode_NodeStatus value) {
  
  _impl_.node_status_ = value;
}
inline void DistributedNode::set_node_status(::protobuf::DistributedNode_NodeStatus value) {
  _internal_set_node_status(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_status)
}

// .google.protobuf.Timestamp last_heartbeat = 7;
inline bool DistributedNode::_internal_has_last_heartbeat() const {
  return this != internal_default_instance() && _impl_.last_heartbeat_ != nullptr;
}
inline bool DistributedNode::has_last_heartbeat() const {
  return _internal_has_last_heartbeat();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DistributedNode::_internal_last_heartbeat() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DistributedNode::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.last_heartbeat)
  return _internal_last_heartbeat();
}
inline void DistributedNode::unsafe_arena_set_allocated_last_heartbeat(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_heartbeat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_heartbeat_);
  }
  _impl_.last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.DistributedNode.last_heartbeat)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DistributedNode::release_last_heartbeat() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_heartbeat_;
  _impl_.last_heartbeat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DistributedNode::unsafe_arena_release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.last_heartbeat)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_heartbeat_;
  _impl_.last_heartbeat_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DistributedNode::_internal_mutable_last_heartbeat() {
  
  if (_impl_.last_heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_heartbeat_ = p;
  }
  return _impl_.last_heartbeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DistributedNode::mutable_last_heartbeat() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_heartbeat();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.last_heartbeat)
  return _msg;
}
inline void DistributedNode::set_allocated_last_heartbeat(::PROTOBUF_NAMESPACE_ID::Timestamp* last_heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_heartbeat_);
  }
  if (last_heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_heartbeat));
    if (message_arena != submessage_arena) {
      last_heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_heartbeat_ = last_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.last_heartbeat)
}

// string operating_system = 8;
inline void DistributedNode::clear_operating_system() {
  _impl_.operating_system_.ClearToEmpty();
}
inline const std::string& DistributedNode::operating_system() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.operating_system)
  return _internal_operating_system();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_operating_system(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operating_system_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.operating_system)
}
inline std::string* DistributedNode::mutable_operating_system() {
  std::string* _s = _internal_mutable_operating_system();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.operating_system)
  return _s;
}
inline const std::string& DistributedNode::_internal_operating_system() const {
  return _impl_.operating_system_.Get();
}
inline void DistributedNode::_internal_set_operating_system(const std::string& value) {
  
  _impl_.operating_system_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_operating_system() {
  
  return _impl_.operating_system_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_operating_system() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.operating_system)
  return _impl_.operating_system_.Release();
}
inline void DistributedNode::set_allocated_operating_system(std::string* operating_system) {
  if (operating_system != nullptr) {
    
  } else {
    
  }
  _impl_.operating_system_.SetAllocated(operating_system, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operating_system_.IsDefault()) {
    _impl_.operating_system_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.operating_system)
}

// string os_version = 9;
inline void DistributedNode::clear_os_version() {
  _impl_.os_version_.ClearToEmpty();
}
inline const std::string& DistributedNode::os_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_os_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.os_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.os_version)
}
inline std::string* DistributedNode::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.os_version)
  return _s;
}
inline const std::string& DistributedNode::_internal_os_version() const {
  return _impl_.os_version_.Get();
}
inline void DistributedNode::_internal_set_os_version(const std::string& value) {
  
  _impl_.os_version_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_os_version() {
  
  return _impl_.os_version_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_os_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.os_version)
  return _impl_.os_version_.Release();
}
inline void DistributedNode::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    
  } else {
    
  }
  _impl_.os_version_.SetAllocated(os_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_version_.IsDefault()) {
    _impl_.os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.os_version)
}

// string agent_version = 10;
inline void DistributedNode::clear_agent_version() {
  _impl_.agent_version_.ClearToEmpty();
}
inline const std::string& DistributedNode::agent_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.agent_version)
  return _internal_agent_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_agent_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.agent_version)
}
inline std::string* DistributedNode::mutable_agent_version() {
  std::string* _s = _internal_mutable_agent_version();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.agent_version)
  return _s;
}
inline const std::string& DistributedNode::_internal_agent_version() const {
  return _impl_.agent_version_.Get();
}
inline void DistributedNode::_internal_set_agent_version(const std::string& value) {
  
  _impl_.agent_version_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_agent_version() {
  
  return _impl_.agent_version_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_agent_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.agent_version)
  return _impl_.agent_version_.Release();
}
inline void DistributedNode::set_allocated_agent_version(std::string* agent_version) {
  if (agent_version != nullptr) {
    
  } else {
    
  }
  _impl_.agent_version_.SetAllocated(agent_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_version_.IsDefault()) {
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.agent_version)
}

// int32 process_id = 11;
inline void DistributedNode::clear_process_id() {
  _impl_.process_id_ = 0;
}
inline int32_t DistributedNode::_internal_process_id() const {
  return _impl_.process_id_;
}
inline int32_t DistributedNode::process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.process_id)
  return _internal_process_id();
}
inline void DistributedNode::_internal_set_process_id(int32_t value) {
  
  _impl_.process_id_ = value;
}
inline void DistributedNode::set_process_id(int32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.process_id)
}

// string container_id = 12;
inline void DistributedNode::clear_container_id() {
  _impl_.container_id_.ClearToEmpty();
}
inline const std::string& DistributedNode::container_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.container_id)
  return _internal_container_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_container_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.container_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.container_id)
}
inline std::string* DistributedNode::mutable_container_id() {
  std::string* _s = _internal_mutable_container_id();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.container_id)
  return _s;
}
inline const std::string& DistributedNode::_internal_container_id() const {
  return _impl_.container_id_.Get();
}
inline void DistributedNode::_internal_set_container_id(const std::string& value) {
  
  _impl_.container_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_container_id() {
  
  return _impl_.container_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_container_id() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.container_id)
  return _impl_.container_id_.Release();
}
inline void DistributedNode::set_allocated_container_id(std::string* container_id) {
  if (container_id != nullptr) {
    
  } else {
    
  }
  _impl_.container_id_.SetAllocated(container_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.container_id_.IsDefault()) {
    _impl_.container_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.container_id)
}

// string cluster_name = 13;
inline void DistributedNode::clear_cluster_name() {
  _impl_.cluster_name_.ClearToEmpty();
}
inline const std::string& DistributedNode::cluster_name() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.cluster_name)
  return _internal_cluster_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_cluster_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cluster_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.cluster_name)
}
inline std::string* DistributedNode::mutable_cluster_name() {
  std::string* _s = _internal_mutable_cluster_name();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.cluster_name)
  return _s;
}
inline const std::string& DistributedNode::_internal_cluster_name() const {
  return _impl_.cluster_name_.Get();
}
inline void DistributedNode::_internal_set_cluster_name(const std::string& value) {
  
  _impl_.cluster_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_cluster_name() {
  
  return _impl_.cluster_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_cluster_name() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.cluster_name)
  return _impl_.cluster_name_.Release();
}
inline void DistributedNode::set_allocated_cluster_name(std::string* cluster_name) {
  if (cluster_name != nullptr) {
    
  } else {
    
  }
  _impl_.cluster_name_.SetAllocated(cluster_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cluster_name_.IsDefault()) {
    _impl_.cluster_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.cluster_name)
}

// float cpu_usage_percent = 15;
inline void DistributedNode::clear_cpu_usage_percent() {
  _impl_.cpu_usage_percent_ = 0;
}
inline float DistributedNode::_internal_cpu_usage_percent() const {
  return _impl_.cpu_usage_percent_;
}
inline float DistributedNode::cpu_usage_percent() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.cpu_usage_percent)
  return _internal_cpu_usage_percent();
}
inline void DistributedNode::_internal_set_cpu_usage_percent(float value) {
  
  _impl_.cpu_usage_percent_ = value;
}
inline void DistributedNode::set_cpu_usage_percent(float value) {
  _internal_set_cpu_usage_percent(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.cpu_usage_percent)
}

// float memory_usage_mb = 16;
inline void DistributedNode::clear_memory_usage_mb() {
  _impl_.memory_usage_mb_ = 0;
}
inline float DistributedNode::_internal_memory_usage_mb() const {
  return _impl_.memory_usage_mb_;
}
inline float DistributedNode::memory_usage_mb() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.memory_usage_mb)
  return _internal_memory_usage_mb();
}
inline void DistributedNode::_internal_set_memory_usage_mb(float value) {
  
  _impl_.memory_usage_mb_ = value;
}
inline void DistributedNode::set_memory_usage_mb(float value) {
  _internal_set_memory_usage_mb(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.memory_usage_mb)
}

// int32 active_connections = 17;
inline void DistributedNode::clear_active_connections() {
  _impl_.active_connections_ = 0;
}
inline int32_t DistributedNode::_internal_active_connections() const {
  return _impl_.active_connections_;
}
inline int32_t DistributedNode::active_connections() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.active_connections)
  return _internal_active_connections();
}
inline void DistributedNode::_internal_set_active_connections(int32_t value) {
  
  _impl_.active_connections_ = value;
}
inline void DistributedNode::set_active_connections(int32_t value) {
  _internal_set_active_connections(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.active_connections)
}

// int32 queue_depth = 18;
inline void DistributedNode::clear_queue_depth() {
  _impl_.queue_depth_ = 0;
}
inline int32_t DistributedNode::_internal_queue_depth() const {
  return _impl_.queue_depth_;
}
inline int32_t DistributedNode::queue_depth() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.queue_depth)
  return _internal_queue_depth();
}
inline void DistributedNode::_internal_set_queue_depth(int32_t value) {
  
  _impl_.queue_depth_ = value;
}
inline void DistributedNode::set_queue_depth(int32_t value) {
  _internal_set_queue_depth(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.queue_depth)
}

// .google.protobuf.Duration uptime = 19;
inline bool DistributedNode::_internal_has_uptime() const {
  return this != internal_default_instance() && _impl_.uptime_ != nullptr;
}
inline bool DistributedNode::has_uptime() const {
  return _internal_has_uptime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DistributedNode::_internal_uptime() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.uptime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DistributedNode::uptime() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.uptime)
  return _internal_uptime();
}
inline void DistributedNode::unsafe_arena_set_allocated_uptime(
    ::PROTOBUF_NAMESPACE_ID::Duration* uptime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uptime_);
  }
  _impl_.uptime_ = uptime;
  if (uptime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.DistributedNode.uptime)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DistributedNode::release_uptime() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.uptime_;
  _impl_.uptime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DistributedNode::unsafe_arena_release_uptime() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.uptime)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.uptime_;
  _impl_.uptime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DistributedNode::_internal_mutable_uptime() {
  
  if (_impl_.uptime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.uptime_ = p;
  }
  return _impl_.uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DistributedNode::mutable_uptime() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_uptime();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.uptime)
  return _msg;
}
inline void DistributedNode::set_allocated_uptime(::PROTOBUF_NAMESPACE_ID::Duration* uptime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uptime_);
  }
  if (uptime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime));
    if (message_arena != submessage_arena) {
      uptime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uptime_ = uptime;
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.uptime)
}

// map<string, string> node_capabilities = 20;
inline int DistributedNode::_internal_node_capabilities_size() const {
  return _impl_.node_capabilities_.size();
}
inline int DistributedNode::node_capabilities_size() const {
  return _internal_node_capabilities_size();
}
inline void DistributedNode::clear_node_capabilities() {
  _impl_.node_capabilities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DistributedNode::_internal_node_capabilities() const {
  return _impl_.node_capabilities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DistributedNode::node_capabilities() const {
  // @@protoc_insertion_point(field_map:protobuf.DistributedNode.node_capabilities)
  return _internal_node_capabilities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DistributedNode::_internal_mutable_node_capabilities() {
  return _impl_.node_capabilities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DistributedNode::mutable_node_capabilities() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.DistributedNode.node_capabilities)
  return _internal_mutable_node_capabilities();
}

// repeated string supported_protocols = 21;
inline int DistributedNode::_internal_supported_protocols_size() const {
  return _impl_.supported_protocols_.size();
}
inline int DistributedNode::supported_protocols_size() const {
  return _internal_supported_protocols_size();
}
inline void DistributedNode::clear_supported_protocols() {
  _impl_.supported_protocols_.Clear();
}
inline std::string* DistributedNode::add_supported_protocols() {
  std::string* _s = _internal_add_supported_protocols();
  // @@protoc_insertion_point(field_add_mutable:protobuf.DistributedNode.supported_protocols)
  return _s;
}
inline const std::string& DistributedNode::_internal_supported_protocols(int index) const {
  return _impl_.supported_protocols_.Get(index);
}
inline const std::string& DistributedNode::supported_protocols(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.supported_protocols)
  return _internal_supported_protocols(index);
}
inline std::string* DistributedNode::mutable_supported_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.supported_protocols)
  return _impl_.supported_protocols_.Mutable(index);
}
inline void DistributedNode::set_supported_protocols(int index, const std::string& value) {
  _impl_.supported_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::set_supported_protocols(int index, std::string&& value) {
  _impl_.supported_protocols_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::set_supported_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::set_supported_protocols(int index, const char* value, size_t size) {
  _impl_.supported_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.supported_protocols)
}
inline std::string* DistributedNode::_internal_add_supported_protocols() {
  return _impl_.supported_protocols_.Add();
}
inline void DistributedNode::add_supported_protocols(const std::string& value) {
  _impl_.supported_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::add_supported_protocols(std::string&& value) {
  _impl_.supported_protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::add_supported_protocols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::add_supported_protocols(const char* value, size_t size) {
  _impl_.supported_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.DistributedNode.supported_protocols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DistributedNode::supported_protocols() const {
  // @@protoc_insertion_point(field_list:protobuf.DistributedNode.supported_protocols)
  return _impl_.supported_protocols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DistributedNode::mutable_supported_protocols() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.DistributedNode.supported_protocols)
  return &_impl_.supported_protocols_;
}

// string configuration_version = 22;
inline void DistributedNode::clear_configuration_version() {
  _impl_.configuration_version_.ClearToEmpty();
}
inline const std::string& DistributedNode::configuration_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.configuration_version)
  return _internal_configuration_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistributedNode::set_configuration_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.configuration_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.configuration_version)
}
inline std::string* DistributedNode::mutable_configuration_version() {
  std::string* _s = _internal_mutable_configuration_version();
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.configuration_version)
  return _s;
}
inline const std::string& DistributedNode::_internal_configuration_version() const {
  return _impl_.configuration_version_.Get();
}
inline void DistributedNode::_internal_set_configuration_version(const std::string& value) {
  
  _impl_.configuration_version_.Set(value, GetArenaForAllocation());
}
inline std::string* DistributedNode::_internal_mutable_configuration_version() {
  
  return _impl_.configuration_version_.Mutable(GetArenaForAllocation());
}
inline std::string* DistributedNode::release_configuration_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.configuration_version)
  return _impl_.configuration_version_.Release();
}
inline void DistributedNode::set_allocated_configuration_version(std::string* configuration_version) {
  if (configuration_version != nullptr) {
    
  } else {
    
  }
  _impl_.configuration_version_.SetAllocated(configuration_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.configuration_version_.IsDefault()) {
    _impl_.configuration_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.configuration_version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PipelineTracking

// string pipeline_id = 1;
inline void PipelineTracking::clear_pipeline_id() {
  _impl_.pipeline_id_.ClearToEmpty();
}
inline const std::string& PipelineTracking::pipeline_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_id)
  return _internal_pipeline_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineTracking::set_pipeline_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pipeline_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.pipeline_id)
}
inline std::string* PipelineTracking::mutable_pipeline_id() {
  std::string* _s = _internal_mutable_pipeline_id();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.pipeline_id)
  return _s;
}
inline const std::string& PipelineTracking::_internal_pipeline_id() const {
  return _impl_.pipeline_id_.Get();
}
inline void PipelineTracking::_internal_set_pipeline_id(const std::string& value) {
  
  _impl_.pipeline_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PipelineTracking::_internal_mutable_pipeline_id() {
  
  return _impl_.pipeline_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PipelineTracking::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.pipeline_id)
  return _impl_.pipeline_id_.Release();
}
inline void PipelineTracking::set_allocated_pipeline_id(std::string* pipeline_id) {
  if (pipeline_id != nullptr) {
    
  } else {
    
  }
  _impl_.pipeline_id_.SetAllocated(pipeline_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pipeline_id_.IsDefault()) {
    _impl_.pipeline_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.pipeline_id)
}

// .google.protobuf.Timestamp pipeline_start = 2;
inline bool PipelineTracking::_internal_has_pipeline_start() const {
  return this != internal_default_instance() && _impl_.pipeline_start_ != nullptr;
}
inline bool PipelineTracking::has_pipeline_start() const {
  return _internal_has_pipeline_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_pipeline_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.pipeline_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::pipeline_start() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_start)
  return _internal_pipeline_start();
}
inline void PipelineTracking::unsafe_arena_set_allocated_pipeline_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* pipeline_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pipeline_start_);
  }
  _impl_.pipeline_start_ = pipeline_start;
  if (pipeline_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.pipeline_start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_pipeline_start() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.pipeline_start_;
  _impl_.pipeline_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_pipeline_start() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.pipeline_start)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.pipeline_start_;
  _impl_.pipeline_start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_pipeline_start() {
  
  if (_impl_.pipeline_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.pipeline_start_ = p;
  }
  return _impl_.pipeline_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_pipeline_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_pipeline_start();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.pipeline_start)
  return _msg;
}
inline void PipelineTracking::set_allocated_pipeline_start(::PROTOBUF_NAMESPACE_ID::Timestamp* pipeline_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pipeline_start_);
  }
  if (pipeline_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pipeline_start));
    if (message_arena != submessage_arena) {
      pipeline_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pipeline_start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pipeline_start_ = pipeline_start;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.pipeline_start)
}

// int32 sniffer_process_id = 3;
inline void PipelineTracking::clear_sniffer_process_id() {
  _impl_.sniffer_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_sniffer_process_id() const {
  return _impl_.sniffer_process_id_;
}
inline int32_t PipelineTracking::sniffer_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.sniffer_process_id)
  return _internal_sniffer_process_id();
}
inline void PipelineTracking::_internal_set_sniffer_process_id(int32_t value) {
  
  _impl_.sniffer_process_id_ = value;
}
inline void PipelineTracking::set_sniffer_process_id(int32_t value) {
  _internal_set_sniffer_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.sniffer_process_id)
}

// int32 processor_process_id = 4;
inline void PipelineTracking::clear_processor_process_id() {
  _impl_.processor_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_processor_process_id() const {
  return _impl_.processor_process_id_;
}
inline int32_t PipelineTracking::processor_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processor_process_id)
  return _internal_processor_process_id();
}
inline void PipelineTracking::_internal_set_processor_process_id(int32_t value) {
  
  _impl_.processor_process_id_ = value;
}
inline void PipelineTracking::set_processor_process_id(int32_t value) {
  _internal_set_processor_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processor_process_id)
}

// int32 enricher_process_id = 5;
inline void PipelineTracking::clear_enricher_process_id() {
  _impl_.enricher_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_enricher_process_id() const {
  return _impl_.enricher_process_id_;
}
inline int32_t PipelineTracking::enricher_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.enricher_process_id)
  return _internal_enricher_process_id();
}
inline void PipelineTracking::_internal_set_enricher_process_id(int32_t value) {
  
  _impl_.enricher_process_id_ = value;
}
inline void PipelineTracking::set_enricher_process_id(int32_t value) {
  _internal_set_enricher_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.enricher_process_id)
}

// int32 analyzer_process_id = 6;
inline void PipelineTracking::clear_analyzer_process_id() {
  _impl_.analyzer_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_analyzer_process_id() const {
  return _impl_.analyzer_process_id_;
}
inline int32_t PipelineTracking::analyzer_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.analyzer_process_id)
  return _internal_analyzer_process_id();
}
inline void PipelineTracking::_internal_set_analyzer_process_id(int32_t value) {
  
  _impl_.analyzer_process_id_ = value;
}
inline void PipelineTracking::set_analyzer_process_id(int32_t value) {
  _internal_set_analyzer_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.analyzer_process_id)
}

// int32 detector_process_id = 7;
inline void PipelineTracking::clear_detector_process_id() {
  _impl_.detector_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_detector_process_id() const {
  return _impl_.detector_process_id_;
}
inline int32_t PipelineTracking::detector_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.detector_process_id)
  return _internal_detector_process_id();
}
inline void PipelineTracking::_internal_set_detector_process_id(int32_t value) {
  
  _impl_.detector_process_id_ = value;
}
inline void PipelineTracking::set_detector_process_id(int32_t value) {
  _internal_set_detector_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.detector_process_id)
}

// int32 controller_process_id = 8;
inline void PipelineTracking::clear_controller_process_id() {
  _impl_.controller_process_id_ = 0;
}
inline int32_t PipelineTracking::_internal_controller_process_id() const {
  return _impl_.controller_process_id_;
}
inline int32_t PipelineTracking::controller_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.controller_process_id)
  return _internal_controller_process_id();
}
inline void PipelineTracking::_internal_set_controller_process_id(int32_t value) {
  
  _impl_.controller_process_id_ = value;
}
inline void PipelineTracking::set_controller_process_id(int32_t value) {
  _internal_set_controller_process_id(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.controller_process_id)
}

// .google.protobuf.Timestamp packet_captured_at = 10;
inline bool PipelineTracking::_internal_has_packet_captured_at() const {
  return this != internal_default_instance() && _impl_.packet_captured_at_ != nullptr;
}
inline bool PipelineTracking::has_packet_captured_at() const {
  return _internal_has_packet_captured_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_packet_captured_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.packet_captured_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::packet_captured_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.packet_captured_at)
  return _internal_packet_captured_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_packet_captured_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* packet_captured_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_captured_at_);
  }
  _impl_.packet_captured_at_ = packet_captured_at;
  if (packet_captured_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.packet_captured_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_packet_captured_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packet_captured_at_;
  _impl_.packet_captured_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_packet_captured_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.packet_captured_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.packet_captured_at_;
  _impl_.packet_captured_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_packet_captured_at() {
  
  if (_impl_.packet_captured_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.packet_captured_at_ = p;
  }
  return _impl_.packet_captured_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_packet_captured_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_packet_captured_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.packet_captured_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_packet_captured_at(::PROTOBUF_NAMESPACE_ID::Timestamp* packet_captured_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_captured_at_);
  }
  if (packet_captured_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_captured_at));
    if (message_arena != submessage_arena) {
      packet_captured_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_captured_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.packet_captured_at_ = packet_captured_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.packet_captured_at)
}

// .google.protobuf.Timestamp features_extracted_at = 11;
inline bool PipelineTracking::_internal_has_features_extracted_at() const {
  return this != internal_default_instance() && _impl_.features_extracted_at_ != nullptr;
}
inline bool PipelineTracking::has_features_extracted_at() const {
  return _internal_has_features_extracted_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_features_extracted_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.features_extracted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::features_extracted_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.features_extracted_at)
  return _internal_features_extracted_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_features_extracted_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* features_extracted_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_extracted_at_);
  }
  _impl_.features_extracted_at_ = features_extracted_at;
  if (features_extracted_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.features_extracted_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_features_extracted_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.features_extracted_at_;
  _impl_.features_extracted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_features_extracted_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.features_extracted_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.features_extracted_at_;
  _impl_.features_extracted_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_features_extracted_at() {
  
  if (_impl_.features_extracted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.features_extracted_at_ = p;
  }
  return _impl_.features_extracted_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_features_extracted_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_features_extracted_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.features_extracted_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_features_extracted_at(::PROTOBUF_NAMESPACE_ID::Timestamp* features_extracted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_extracted_at_);
  }
  if (features_extracted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_extracted_at));
    if (message_arena != submessage_arena) {
      features_extracted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features_extracted_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_extracted_at_ = features_extracted_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.features_extracted_at)
}

// .google.protobuf.Timestamp geoip_enriched_at = 12;
inline bool PipelineTracking::_internal_has_geoip_enriched_at() const {
  return this != internal_default_instance() && _impl_.geoip_enriched_at_ != nullptr;
}
inline bool PipelineTracking::has_geoip_enriched_at() const {
  return _internal_has_geoip_enriched_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_geoip_enriched_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.geoip_enriched_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::geoip_enriched_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.geoip_enriched_at)
  return _internal_geoip_enriched_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_geoip_enriched_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* geoip_enriched_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geoip_enriched_at_);
  }
  _impl_.geoip_enriched_at_ = geoip_enriched_at;
  if (geoip_enriched_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.geoip_enriched_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_geoip_enriched_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.geoip_enriched_at_;
  _impl_.geoip_enriched_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_geoip_enriched_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.geoip_enriched_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.geoip_enriched_at_;
  _impl_.geoip_enriched_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_geoip_enriched_at() {
  
  if (_impl_.geoip_enriched_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.geoip_enriched_at_ = p;
  }
  return _impl_.geoip_enriched_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_geoip_enriched_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_geoip_enriched_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.geoip_enriched_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_geoip_enriched_at(::PROTOBUF_NAMESPACE_ID::Timestamp* geoip_enriched_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geoip_enriched_at_);
  }
  if (geoip_enriched_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geoip_enriched_at));
    if (message_arena != submessage_arena) {
      geoip_enriched_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geoip_enriched_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geoip_enriched_at_ = geoip_enriched_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.geoip_enriched_at)
}

// .google.protobuf.Timestamp ml_analyzed_at = 13;
inline bool PipelineTracking::_internal_has_ml_analyzed_at() const {
  return this != internal_default_instance() && _impl_.ml_analyzed_at_ != nullptr;
}
inline bool PipelineTracking::has_ml_analyzed_at() const {
  return _internal_has_ml_analyzed_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_ml_analyzed_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ml_analyzed_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::ml_analyzed_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.ml_analyzed_at)
  return _internal_ml_analyzed_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_ml_analyzed_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ml_analyzed_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ml_analyzed_at_);
  }
  _impl_.ml_analyzed_at_ = ml_analyzed_at;
  if (ml_analyzed_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.ml_analyzed_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_ml_analyzed_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ml_analyzed_at_;
  _impl_.ml_analyzed_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_ml_analyzed_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.ml_analyzed_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ml_analyzed_at_;
  _impl_.ml_analyzed_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_ml_analyzed_at() {
  
  if (_impl_.ml_analyzed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ml_analyzed_at_ = p;
  }
  return _impl_.ml_analyzed_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_ml_analyzed_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ml_analyzed_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.ml_analyzed_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_ml_analyzed_at(::PROTOBUF_NAMESPACE_ID::Timestamp* ml_analyzed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ml_analyzed_at_);
  }
  if (ml_analyzed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ml_analyzed_at));
    if (message_arena != submessage_arena) {
      ml_analyzed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ml_analyzed_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ml_analyzed_at_ = ml_analyzed_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.ml_analyzed_at)
}

// .google.protobuf.Timestamp threat_detected_at = 14;
inline bool PipelineTracking::_internal_has_threat_detected_at() const {
  return this != internal_default_instance() && _impl_.threat_detected_at_ != nullptr;
}
inline bool PipelineTracking::has_threat_detected_at() const {
  return _internal_has_threat_detected_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_threat_detected_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.threat_detected_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::threat_detected_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.threat_detected_at)
  return _internal_threat_detected_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_threat_detected_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* threat_detected_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.threat_detected_at_);
  }
  _impl_.threat_detected_at_ = threat_detected_at;
  if (threat_detected_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.threat_detected_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_threat_detected_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.threat_detected_at_;
  _impl_.threat_detected_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_threat_detected_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.threat_detected_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.threat_detected_at_;
  _impl_.threat_detected_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_threat_detected_at() {
  
  if (_impl_.threat_detected_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.threat_detected_at_ = p;
  }
  return _impl_.threat_detected_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_threat_detected_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_threat_detected_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.threat_detected_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_threat_detected_at(::PROTOBUF_NAMESPACE_ID::Timestamp* threat_detected_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.threat_detected_at_);
  }
  if (threat_detected_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threat_detected_at));
    if (message_arena != submessage_arena) {
      threat_detected_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threat_detected_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.threat_detected_at_ = threat_detected_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.threat_detected_at)
}

// .google.protobuf.Timestamp action_taken_at = 15;
inline bool PipelineTracking::_internal_has_action_taken_at() const {
  return this != internal_default_instance() && _impl_.action_taken_at_ != nullptr;
}
inline bool PipelineTracking::has_action_taken_at() const {
  return _internal_has_action_taken_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::_internal_action_taken_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.action_taken_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PipelineTracking::action_taken_at() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.action_taken_at)
  return _internal_action_taken_at();
}
inline void PipelineTracking::unsafe_arena_set_allocated_action_taken_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* action_taken_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_taken_at_);
  }
  _impl_.action_taken_at_ = action_taken_at;
  if (action_taken_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.action_taken_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::release_action_taken_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.action_taken_at_;
  _impl_.action_taken_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::unsafe_arena_release_action_taken_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.action_taken_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.action_taken_at_;
  _impl_.action_taken_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::_internal_mutable_action_taken_at() {
  
  if (_impl_.action_taken_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.action_taken_at_ = p;
  }
  return _impl_.action_taken_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PipelineTracking::mutable_action_taken_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_action_taken_at();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.action_taken_at)
  return _msg;
}
inline void PipelineTracking::set_allocated_action_taken_at(::PROTOBUF_NAMESPACE_ID::Timestamp* action_taken_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_taken_at_);
  }
  if (action_taken_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_taken_at));
    if (message_arena != submessage_arena) {
      action_taken_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_taken_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.action_taken_at_ = action_taken_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.action_taken_at)
}

// .google.protobuf.Duration total_processing_latency = 20;
inline bool PipelineTracking::_internal_has_total_processing_latency() const {
  return this != internal_default_instance() && _impl_.total_processing_latency_ != nullptr;
}
inline bool PipelineTracking::has_total_processing_latency() const {
  return _internal_has_total_processing_latency();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PipelineTracking::_internal_total_processing_latency() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_processing_latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PipelineTracking::total_processing_latency() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.total_processing_latency)
  return _internal_total_processing_latency();
}
inline void PipelineTracking::unsafe_arena_set_allocated_total_processing_latency(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_processing_latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_processing_latency_);
  }
  _impl_.total_processing_latency_ = total_processing_latency;
  if (total_processing_latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PipelineTracking.total_processing_latency)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PipelineTracking::release_total_processing_latency() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_processing_latency_;
  _impl_.total_processing_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PipelineTracking::unsafe_arena_release_total_processing_latency() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.total_processing_latency)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_processing_latency_;
  _impl_.total_processing_latency_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PipelineTracking::_internal_mutable_total_processing_latency() {
  
  if (_impl_.total_processing_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_processing_latency_ = p;
  }
  return _impl_.total_processing_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PipelineTracking::mutable_total_processing_latency() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_processing_latency();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.total_processing_latency)
  return _msg;
}
inline void PipelineTracking::set_allocated_total_processing_latency(::PROTOBUF_NAMESPACE_ID::Duration* total_processing_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_processing_latency_);
  }
  if (total_processing_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_processing_latency));
    if (message_arena != submessage_arena) {
      total_processing_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_processing_latency, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_processing_latency_ = total_processing_latency;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.total_processing_latency)
}

// int32 pipeline_hops_count = 21;
inline void PipelineTracking::clear_pipeline_hops_count() {
  _impl_.pipeline_hops_count_ = 0;
}
inline int32_t PipelineTracking::_internal_pipeline_hops_count() const {
  return _impl_.pipeline_hops_count_;
}
inline int32_t PipelineTracking::pipeline_hops_count() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_hops_count)
  return _internal_pipeline_hops_count();
}
inline void PipelineTracking::_internal_set_pipeline_hops_count(int32_t value) {
  
  _impl_.pipeline_hops_count_ = value;
}
inline void PipelineTracking::set_pipeline_hops_count(int32_t value) {
  _internal_set_pipeline_hops_count(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.pipeline_hops_count)
}

// string processing_path = 22;
inline void PipelineTracking::clear_processing_path() {
  _impl_.processing_path_.ClearToEmpty();
}
inline const std::string& PipelineTracking::processing_path() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_path)
  return _internal_processing_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineTracking::set_processing_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.processing_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_path)
}
inline std::string* PipelineTracking::mutable_processing_path() {
  std::string* _s = _internal_mutable_processing_path();
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_path)
  return _s;
}
inline const std::string& PipelineTracking::_internal_processing_path() const {
  return _impl_.processing_path_.Get();
}
inline void PipelineTracking::_internal_set_processing_path(const std::string& value) {
  
  _impl_.processing_path_.Set(value, GetArenaForAllocation());
}
inline std::string* PipelineTracking::_internal_mutable_processing_path() {
  
  return _impl_.processing_path_.Mutable(GetArenaForAllocation());
}
inline std::string* PipelineTracking::release_processing_path() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.processing_path)
  return _impl_.processing_path_.Release();
}
inline void PipelineTracking::set_allocated_processing_path(std::string* processing_path) {
  if (processing_path != nullptr) {
    
  } else {
    
  }
  _impl_.processing_path_.SetAllocated(processing_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.processing_path_.IsDefault()) {
    _impl_.processing_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.processing_path)
}

// int32 retry_attempts = 25;
inline void PipelineTracking::clear_retry_attempts() {
  _impl_.retry_attempts_ = 0;
}
inline int32_t PipelineTracking::_internal_retry_attempts() const {
  return _impl_.retry_attempts_;
}
inline int32_t PipelineTracking::retry_attempts() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.retry_attempts)
  return _internal_retry_attempts();
}
inline void PipelineTracking::_internal_set_retry_attempts(int32_t value) {
  
  _impl_.retry_attempts_ = value;
}
inline void PipelineTracking::set_retry_attempts(int32_t value) {
  _internal_set_retry_attempts(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.retry_attempts)
}

// repeated string processing_errors = 26;
inline int PipelineTracking::_internal_processing_errors_size() const {
  return _impl_.processing_errors_.size();
}
inline int PipelineTracking::processing_errors_size() const {
  return _internal_processing_errors_size();
}
inline void PipelineTracking::clear_processing_errors() {
  _impl_.processing_errors_.Clear();
}
inline std::string* PipelineTracking::add_processing_errors() {
  std::string* _s = _internal_add_processing_errors();
  // @@protoc_insertion_point(field_add_mutable:protobuf.PipelineTracking.processing_errors)
  return _s;
}
inline const std::string& PipelineTracking::_internal_processing_errors(int index) const {
  return _impl_.processing_errors_.Get(index);
}
inline const std::string& PipelineTracking::processing_errors(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_errors)
  return _internal_processing_errors(index);
}
inline std::string* PipelineTracking::mutable_processing_errors(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_errors)
  return _impl_.processing_errors_.Mutable(index);
}
inline void PipelineTracking::set_processing_errors(int index, const std::string& value) {
  _impl_.processing_errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::set_processing_errors(int index, std::string&& value) {
  _impl_.processing_errors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::set_processing_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processing_errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::set_processing_errors(int index, const char* value, size_t size) {
  _impl_.processing_errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.processing_errors)
}
inline std::string* PipelineTracking::_internal_add_processing_errors() {
  return _impl_.processing_errors_.Add();
}
inline void PipelineTracking::add_processing_errors(const std::string& value) {
  _impl_.processing_errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::add_processing_errors(std::string&& value) {
  _impl_.processing_errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::add_processing_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processing_errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::add_processing_errors(const char* value, size_t size) {
  _impl_.processing_errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.PipelineTracking.processing_errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineTracking::processing_errors() const {
  // @@protoc_insertion_point(field_list:protobuf.PipelineTracking.processing_errors)
  return _impl_.processing_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineTracking::mutable_processing_errors() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.PipelineTracking.processing_errors)
  return &_impl_.processing_errors_;
}

// bool requires_reprocessing = 27;
inline void PipelineTracking::clear_requires_reprocessing() {
  _impl_.requires_reprocessing_ = false;
}
inline bool PipelineTracking::_internal_requires_reprocessing() const {
  return _impl_.requires_reprocessing_;
}
inline bool PipelineTracking::requires_reprocessing() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.requires_reprocessing)
  return _internal_requires_reprocessing();
}
inline void PipelineTracking::_internal_set_requires_reprocessing(bool value) {
  
  _impl_.requires_reprocessing_ = value;
}
inline void PipelineTracking::set_requires_reprocessing(bool value) {
  _internal_set_requires_reprocessing(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.requires_reprocessing)
}

// map<string, string> component_metadata = 30;
inline int PipelineTracking::_internal_component_metadata_size() const {
  return _impl_.component_metadata_.size();
}
inline int PipelineTracking::component_metadata_size() const {
  return _internal_component_metadata_size();
}
inline void PipelineTracking::clear_component_metadata() {
  _impl_.component_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PipelineTracking::_internal_component_metadata() const {
  return _impl_.component_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PipelineTracking::component_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.PipelineTracking.component_metadata)
  return _internal_component_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PipelineTracking::_internal_mutable_component_metadata() {
  return _impl_.component_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PipelineTracking::mutable_component_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.PipelineTracking.component_metadata)
  return _internal_mutable_component_metadata();
}

// repeated string processing_tags = 31;
inline int PipelineTracking::_internal_processing_tags_size() const {
  return _impl_.processing_tags_.size();
}
inline int PipelineTracking::processing_tags_size() const {
  return _internal_processing_tags_size();
}
inline void PipelineTracking::clear_processing_tags() {
  _impl_.processing_tags_.Clear();
}
inline std::string* PipelineTracking::add_processing_tags() {
  std::string* _s = _internal_add_processing_tags();
  // @@protoc_insertion_point(field_add_mutable:protobuf.PipelineTracking.processing_tags)
  return _s;
}
inline const std::string& PipelineTracking::_internal_processing_tags(int index) const {
  return _impl_.processing_tags_.Get(index);
}
inline const std::string& PipelineTracking::processing_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_tags)
  return _internal_processing_tags(index);
}
inline std::string* PipelineTracking::mutable_processing_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_tags)
  return _impl_.processing_tags_.Mutable(index);
}
inline void PipelineTracking::set_processing_tags(int index, const std::string& value) {
  _impl_.processing_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::set_processing_tags(int index, std::string&& value) {
  _impl_.processing_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::set_processing_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processing_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::set_processing_tags(int index, const char* value, size_t size) {
  _impl_.processing_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.processing_tags)
}
inline std::string* PipelineTracking::_internal_add_processing_tags() {
  return _impl_.processing_tags_.Add();
}
inline void PipelineTracking::add_processing_tags(const std::string& value) {
  _impl_.processing_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::add_processing_tags(std::string&& value) {
  _impl_.processing_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::add_processing_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.processing_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::add_processing_tags(const char* value, size_t size) {
  _impl_.processing_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.PipelineTracking.processing_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineTracking::processing_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.PipelineTracking.processing_tags)
  return _impl_.processing_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineTracking::mutable_processing_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.PipelineTracking.processing_tags)
  return &_impl_.processing_tags_;
}

// -------------------------------------------------------------------

// RAGAnalysis

// string query_text = 1;
inline void RAGAnalysis::clear_query_text() {
  _impl_.query_text_.ClearToEmpty();
}
inline const std::string& RAGAnalysis::query_text() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.query_text)
  return _internal_query_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RAGAnalysis::set_query_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.query_text)
}
inline std::string* RAGAnalysis::mutable_query_text() {
  std::string* _s = _internal_mutable_query_text();
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.query_text)
  return _s;
}
inline const std::string& RAGAnalysis::_internal_query_text() const {
  return _impl_.query_text_.Get();
}
inline void RAGAnalysis::_internal_set_query_text(const std::string& value) {
  
  _impl_.query_text_.Set(value, GetArenaForAllocation());
}
inline std::string* RAGAnalysis::_internal_mutable_query_text() {
  
  return _impl_.query_text_.Mutable(GetArenaForAllocation());
}
inline std::string* RAGAnalysis::release_query_text() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.query_text)
  return _impl_.query_text_.Release();
}
inline void RAGAnalysis::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    
  } else {
    
  }
  _impl_.query_text_.SetAllocated(query_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_text_.IsDefault()) {
    _impl_.query_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.query_text)
}

// repeated string retrieved_knowledge = 2;
inline int RAGAnalysis::_internal_retrieved_knowledge_size() const {
  return _impl_.retrieved_knowledge_.size();
}
inline int RAGAnalysis::retrieved_knowledge_size() const {
  return _internal_retrieved_knowledge_size();
}
inline void RAGAnalysis::clear_retrieved_knowledge() {
  _impl_.retrieved_knowledge_.Clear();
}
inline std::string* RAGAnalysis::add_retrieved_knowledge() {
  std::string* _s = _internal_add_retrieved_knowledge();
  // @@protoc_insertion_point(field_add_mutable:protobuf.RAGAnalysis.retrieved_knowledge)
  return _s;
}
inline const std::string& RAGAnalysis::_internal_retrieved_knowledge(int index) const {
  return _impl_.retrieved_knowledge_.Get(index);
}
inline const std::string& RAGAnalysis::retrieved_knowledge(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.retrieved_knowledge)
  return _internal_retrieved_knowledge(index);
}
inline std::string* RAGAnalysis::mutable_retrieved_knowledge(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.retrieved_knowledge)
  return _impl_.retrieved_knowledge_.Mutable(index);
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, const std::string& value) {
  _impl_.retrieved_knowledge_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, std::string&& value) {
  _impl_.retrieved_knowledge_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.retrieved_knowledge_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, const char* value, size_t size) {
  _impl_.retrieved_knowledge_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline std::string* RAGAnalysis::_internal_add_retrieved_knowledge() {
  return _impl_.retrieved_knowledge_.Add();
}
inline void RAGAnalysis::add_retrieved_knowledge(const std::string& value) {
  _impl_.retrieved_knowledge_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::add_retrieved_knowledge(std::string&& value) {
  _impl_.retrieved_knowledge_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::add_retrieved_knowledge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.retrieved_knowledge_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::add_retrieved_knowledge(const char* value, size_t size) {
  _impl_.retrieved_knowledge_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RAGAnalysis::retrieved_knowledge() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.retrieved_knowledge)
  return _impl_.retrieved_knowledge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RAGAnalysis::mutable_retrieved_knowledge() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.retrieved_knowledge)
  return &_impl_.retrieved_knowledge_;
}

// repeated double relevance_scores = 3;
inline int RAGAnalysis::_internal_relevance_scores_size() const {
  return _impl_.relevance_scores_.size();
}
inline int RAGAnalysis::relevance_scores_size() const {
  return _internal_relevance_scores_size();
}
inline void RAGAnalysis::clear_relevance_scores() {
  _impl_.relevance_scores_.Clear();
}
inline double RAGAnalysis::_internal_relevance_scores(int index) const {
  return _impl_.relevance_scores_.Get(index);
}
inline double RAGAnalysis::relevance_scores(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.relevance_scores)
  return _internal_relevance_scores(index);
}
inline void RAGAnalysis::set_relevance_scores(int index, double value) {
  _impl_.relevance_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.relevance_scores)
}
inline void RAGAnalysis::_internal_add_relevance_scores(double value) {
  _impl_.relevance_scores_.Add(value);
}
inline void RAGAnalysis::add_relevance_scores(double value) {
  _internal_add_relevance_scores(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.relevance_scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RAGAnalysis::_internal_relevance_scores() const {
  return _impl_.relevance_scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RAGAnalysis::relevance_scores() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.relevance_scores)
  return _internal_relevance_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RAGAnalysis::_internal_mutable_relevance_scores() {
  return &_impl_.relevance_scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RAGAnalysis::mutable_relevance_scores() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.relevance_scores)
  return _internal_mutable_relevance_scores();
}

// string ai_generated_analysis = 4;
inline void RAGAnalysis::clear_ai_generated_analysis() {
  _impl_.ai_generated_analysis_.ClearToEmpty();
}
inline const std::string& RAGAnalysis::ai_generated_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.ai_generated_analysis)
  return _internal_ai_generated_analysis();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RAGAnalysis::set_ai_generated_analysis(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ai_generated_analysis_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.ai_generated_analysis)
}
inline std::string* RAGAnalysis::mutable_ai_generated_analysis() {
  std::string* _s = _internal_mutable_ai_generated_analysis();
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.ai_generated_analysis)
  return _s;
}
inline const std::string& RAGAnalysis::_internal_ai_generated_analysis() const {
  return _impl_.ai_generated_analysis_.Get();
}
inline void RAGAnalysis::_internal_set_ai_generated_analysis(const std::string& value) {
  
  _impl_.ai_generated_analysis_.Set(value, GetArenaForAllocation());
}
inline std::string* RAGAnalysis::_internal_mutable_ai_generated_analysis() {
  
  return _impl_.ai_generated_analysis_.Mutable(GetArenaForAllocation());
}
inline std::string* RAGAnalysis::release_ai_generated_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.ai_generated_analysis)
  return _impl_.ai_generated_analysis_.Release();
}
inline void RAGAnalysis::set_allocated_ai_generated_analysis(std::string* ai_generated_analysis) {
  if (ai_generated_analysis != nullptr) {
    
  } else {
    
  }
  _impl_.ai_generated_analysis_.SetAllocated(ai_generated_analysis, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ai_generated_analysis_.IsDefault()) {
    _impl_.ai_generated_analysis_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.ai_generated_analysis)
}

// double analysis_confidence = 5;
inline void RAGAnalysis::clear_analysis_confidence() {
  _impl_.analysis_confidence_ = 0;
}
inline double RAGAnalysis::_internal_analysis_confidence() const {
  return _impl_.analysis_confidence_;
}
inline double RAGAnalysis::analysis_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.analysis_confidence)
  return _internal_analysis_confidence();
}
inline void RAGAnalysis::_internal_set_analysis_confidence(double value) {
  
  _impl_.analysis_confidence_ = value;
}
inline void RAGAnalysis::set_analysis_confidence(double value) {
  _internal_set_analysis_confidence(value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.analysis_confidence)
}

// repeated string knowledge_sources = 6;
inline int RAGAnalysis::_internal_knowledge_sources_size() const {
  return _impl_.knowledge_sources_.size();
}
inline int RAGAnalysis::knowledge_sources_size() const {
  return _internal_knowledge_sources_size();
}
inline void RAGAnalysis::clear_knowledge_sources() {
  _impl_.knowledge_sources_.Clear();
}
inline std::string* RAGAnalysis::add_knowledge_sources() {
  std::string* _s = _internal_add_knowledge_sources();
  // @@protoc_insertion_point(field_add_mutable:protobuf.RAGAnalysis.knowledge_sources)
  return _s;
}
inline const std::string& RAGAnalysis::_internal_knowledge_sources(int index) const {
  return _impl_.knowledge_sources_.Get(index);
}
inline const std::string& RAGAnalysis::knowledge_sources(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.knowledge_sources)
  return _internal_knowledge_sources(index);
}
inline std::string* RAGAnalysis::mutable_knowledge_sources(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.knowledge_sources)
  return _impl_.knowledge_sources_.Mutable(index);
}
inline void RAGAnalysis::set_knowledge_sources(int index, const std::string& value) {
  _impl_.knowledge_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::set_knowledge_sources(int index, std::string&& value) {
  _impl_.knowledge_sources_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::set_knowledge_sources(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.knowledge_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::set_knowledge_sources(int index, const char* value, size_t size) {
  _impl_.knowledge_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.knowledge_sources)
}
inline std::string* RAGAnalysis::_internal_add_knowledge_sources() {
  return _impl_.knowledge_sources_.Add();
}
inline void RAGAnalysis::add_knowledge_sources(const std::string& value) {
  _impl_.knowledge_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::add_knowledge_sources(std::string&& value) {
  _impl_.knowledge_sources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::add_knowledge_sources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.knowledge_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::add_knowledge_sources(const char* value, size_t size) {
  _impl_.knowledge_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.RAGAnalysis.knowledge_sources)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RAGAnalysis::knowledge_sources() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.knowledge_sources)
  return _impl_.knowledge_sources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RAGAnalysis::mutable_knowledge_sources() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.knowledge_sources)
  return &_impl_.knowledge_sources_;
}

// .google.protobuf.Timestamp analysis_timestamp = 7;
inline bool RAGAnalysis::_internal_has_analysis_timestamp() const {
  return this != internal_default_instance() && _impl_.analysis_timestamp_ != nullptr;
}
inline bool RAGAnalysis::has_analysis_timestamp() const {
  return _internal_has_analysis_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RAGAnalysis::_internal_analysis_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.analysis_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RAGAnalysis::analysis_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.analysis_timestamp)
  return _internal_analysis_timestamp();
}
inline void RAGAnalysis::unsafe_arena_set_allocated_analysis_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.analysis_timestamp_);
  }
  _impl_.analysis_timestamp_ = analysis_timestamp;
  if (analysis_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.RAGAnalysis.analysis_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RAGAnalysis::release_analysis_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.analysis_timestamp_;
  _impl_.analysis_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RAGAnalysis::unsafe_arena_release_analysis_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.analysis_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.analysis_timestamp_;
  _impl_.analysis_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RAGAnalysis::_internal_mutable_analysis_timestamp() {
  
  if (_impl_.analysis_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.analysis_timestamp_ = p;
  }
  return _impl_.analysis_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RAGAnalysis::mutable_analysis_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_analysis_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.analysis_timestamp)
  return _msg;
}
inline void RAGAnalysis::set_allocated_analysis_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.analysis_timestamp_);
  }
  if (analysis_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_timestamp));
    if (message_arena != submessage_arena) {
      analysis_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.analysis_timestamp_ = analysis_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.analysis_timestamp)
}

// -------------------------------------------------------------------

// HumanFeedback

// string feedback_id = 1;
inline void HumanFeedback::clear_feedback_id() {
  _impl_.feedback_id_.ClearToEmpty();
}
inline const std::string& HumanFeedback::feedback_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_id)
  return _internal_feedback_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HumanFeedback::set_feedback_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.feedback_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.feedback_id)
}
inline std::string* HumanFeedback::mutable_feedback_id() {
  std::string* _s = _internal_mutable_feedback_id();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.feedback_id)
  return _s;
}
inline const std::string& HumanFeedback::_internal_feedback_id() const {
  return _impl_.feedback_id_.Get();
}
inline void HumanFeedback::_internal_set_feedback_id(const std::string& value) {
  
  _impl_.feedback_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HumanFeedback::_internal_mutable_feedback_id() {
  
  return _impl_.feedback_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HumanFeedback::release_feedback_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.feedback_id)
  return _impl_.feedback_id_.Release();
}
inline void HumanFeedback::set_allocated_feedback_id(std::string* feedback_id) {
  if (feedback_id != nullptr) {
    
  } else {
    
  }
  _impl_.feedback_id_.SetAllocated(feedback_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.feedback_id_.IsDefault()) {
    _impl_.feedback_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.feedback_id)
}

// string analyst_user_id = 2;
inline void HumanFeedback::clear_analyst_user_id() {
  _impl_.analyst_user_id_.ClearToEmpty();
}
inline const std::string& HumanFeedback::analyst_user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_user_id)
  return _internal_analyst_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HumanFeedback::set_analyst_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.analyst_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_user_id)
}
inline std::string* HumanFeedback::mutable_analyst_user_id() {
  std::string* _s = _internal_mutable_analyst_user_id();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_user_id)
  return _s;
}
inline const std::string& HumanFeedback::_internal_analyst_user_id() const {
  return _impl_.analyst_user_id_.Get();
}
inline void HumanFeedback::_internal_set_analyst_user_id(const std::string& value) {
  
  _impl_.analyst_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HumanFeedback::_internal_mutable_analyst_user_id() {
  
  return _impl_.analyst_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HumanFeedback::release_analyst_user_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.analyst_user_id)
  return _impl_.analyst_user_id_.Release();
}
inline void HumanFeedback::set_allocated_analyst_user_id(std::string* analyst_user_id) {
  if (analyst_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.analyst_user_id_.SetAllocated(analyst_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analyst_user_id_.IsDefault()) {
    _impl_.analyst_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.analyst_user_id)
}

// string event_reference_id = 3;
inline void HumanFeedback::clear_event_reference_id() {
  _impl_.event_reference_id_.ClearToEmpty();
}
inline const std::string& HumanFeedback::event_reference_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.event_reference_id)
  return _internal_event_reference_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HumanFeedback::set_event_reference_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_reference_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.event_reference_id)
}
inline std::string* HumanFeedback::mutable_event_reference_id() {
  std::string* _s = _internal_mutable_event_reference_id();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.event_reference_id)
  return _s;
}
inline const std::string& HumanFeedback::_internal_event_reference_id() const {
  return _impl_.event_reference_id_.Get();
}
inline void HumanFeedback::_internal_set_event_reference_id(const std::string& value) {
  
  _impl_.event_reference_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HumanFeedback::_internal_mutable_event_reference_id() {
  
  return _impl_.event_reference_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HumanFeedback::release_event_reference_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.event_reference_id)
  return _impl_.event_reference_id_.Release();
}
inline void HumanFeedback::set_allocated_event_reference_id(std::string* event_reference_id) {
  if (event_reference_id != nullptr) {
    
  } else {
    
  }
  _impl_.event_reference_id_.SetAllocated(event_reference_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_reference_id_.IsDefault()) {
    _impl_.event_reference_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.event_reference_id)
}

// .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
inline void HumanFeedback::clear_feedback_type() {
  _impl_.feedback_type_ = 0;
}
inline ::protobuf::HumanFeedback_FeedbackType HumanFeedback::_internal_feedback_type() const {
  return static_cast< ::protobuf::HumanFeedback_FeedbackType >(_impl_.feedback_type_);
}
inline ::protobuf::HumanFeedback_FeedbackType HumanFeedback::feedback_type() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_type)
  return _internal_feedback_type();
}
inline void HumanFeedback::_internal_set_feedback_type(::protobuf::HumanFeedback_FeedbackType value) {
  
  _impl_.feedback_type_ = value;
}
inline void HumanFeedback::set_feedback_type(::protobuf::HumanFeedback_FeedbackType value) {
  _internal_set_feedback_type(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.feedback_type)
}

// bool confirmed_true_positive = 5;
inline void HumanFeedback::clear_confirmed_true_positive() {
  _impl_.confirmed_true_positive_ = false;
}
inline bool HumanFeedback::_internal_confirmed_true_positive() const {
  return _impl_.confirmed_true_positive_;
}
inline bool HumanFeedback::confirmed_true_positive() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.confirmed_true_positive)
  return _internal_confirmed_true_positive();
}
inline void HumanFeedback::_internal_set_confirmed_true_positive(bool value) {
  
  _impl_.confirmed_true_positive_ = value;
}
inline void HumanFeedback::set_confirmed_true_positive(bool value) {
  _internal_set_confirmed_true_positive(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.confirmed_true_positive)
}

// bool confirmed_false_positive = 6;
inline void HumanFeedback::clear_confirmed_false_positive() {
  _impl_.confirmed_false_positive_ = false;
}
inline bool HumanFeedback::_internal_confirmed_false_positive() const {
  return _impl_.confirmed_false_positive_;
}
inline bool HumanFeedback::confirmed_false_positive() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.confirmed_false_positive)
  return _internal_confirmed_false_positive();
}
inline void HumanFeedback::_internal_set_confirmed_false_positive(bool value) {
  
  _impl_.confirmed_false_positive_ = value;
}
inline void HumanFeedback::set_confirmed_false_positive(bool value) {
  _internal_set_confirmed_false_positive(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.confirmed_false_positive)
}

// string analyst_explanation = 7;
inline void HumanFeedback::clear_analyst_explanation() {
  _impl_.analyst_explanation_.ClearToEmpty();
}
inline const std::string& HumanFeedback::analyst_explanation() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_explanation)
  return _internal_analyst_explanation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HumanFeedback::set_analyst_explanation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.analyst_explanation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_explanation)
}
inline std::string* HumanFeedback::mutable_analyst_explanation() {
  std::string* _s = _internal_mutable_analyst_explanation();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_explanation)
  return _s;
}
inline const std::string& HumanFeedback::_internal_analyst_explanation() const {
  return _impl_.analyst_explanation_.Get();
}
inline void HumanFeedback::_internal_set_analyst_explanation(const std::string& value) {
  
  _impl_.analyst_explanation_.Set(value, GetArenaForAllocation());
}
inline std::string* HumanFeedback::_internal_mutable_analyst_explanation() {
  
  return _impl_.analyst_explanation_.Mutable(GetArenaForAllocation());
}
inline std::string* HumanFeedback::release_analyst_explanation() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.analyst_explanation)
  return _impl_.analyst_explanation_.Release();
}
inline void HumanFeedback::set_allocated_analyst_explanation(std::string* analyst_explanation) {
  if (analyst_explanation != nullptr) {
    
  } else {
    
  }
  _impl_.analyst_explanation_.SetAllocated(analyst_explanation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analyst_explanation_.IsDefault()) {
    _impl_.analyst_explanation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.analyst_explanation)
}

// repeated string analyst_tags = 8;
inline int HumanFeedback::_internal_analyst_tags_size() const {
  return _impl_.analyst_tags_.size();
}
inline int HumanFeedback::analyst_tags_size() const {
  return _internal_analyst_tags_size();
}
inline void HumanFeedback::clear_analyst_tags() {
  _impl_.analyst_tags_.Clear();
}
inline std::string* HumanFeedback::add_analyst_tags() {
  std::string* _s = _internal_add_analyst_tags();
  // @@protoc_insertion_point(field_add_mutable:protobuf.HumanFeedback.analyst_tags)
  return _s;
}
inline const std::string& HumanFeedback::_internal_analyst_tags(int index) const {
  return _impl_.analyst_tags_.Get(index);
}
inline const std::string& HumanFeedback::analyst_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_tags)
  return _internal_analyst_tags(index);
}
inline std::string* HumanFeedback::mutable_analyst_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_tags)
  return _impl_.analyst_tags_.Mutable(index);
}
inline void HumanFeedback::set_analyst_tags(int index, const std::string& value) {
  _impl_.analyst_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::set_analyst_tags(int index, std::string&& value) {
  _impl_.analyst_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::set_analyst_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.analyst_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::set_analyst_tags(int index, const char* value, size_t size) {
  _impl_.analyst_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.analyst_tags)
}
inline std::string* HumanFeedback::_internal_add_analyst_tags() {
  return _impl_.analyst_tags_.Add();
}
inline void HumanFeedback::add_analyst_tags(const std::string& value) {
  _impl_.analyst_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::add_analyst_tags(std::string&& value) {
  _impl_.analyst_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::add_analyst_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.analyst_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::add_analyst_tags(const char* value, size_t size) {
  _impl_.analyst_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.HumanFeedback.analyst_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HumanFeedback::analyst_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.HumanFeedback.analyst_tags)
  return _impl_.analyst_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HumanFeedback::mutable_analyst_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.HumanFeedback.analyst_tags)
  return &_impl_.analyst_tags_;
}

// int32 analyst_confidence_rating = 9;
inline void HumanFeedback::clear_analyst_confidence_rating() {
  _impl_.analyst_confidence_rating_ = 0;
}
inline int32_t HumanFeedback::_internal_analyst_confidence_rating() const {
  return _impl_.analyst_confidence_rating_;
}
inline int32_t HumanFeedback::analyst_confidence_rating() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_confidence_rating)
  return _internal_analyst_confidence_rating();
}
inline void HumanFeedback::_internal_set_analyst_confidence_rating(int32_t value) {
  
  _impl_.analyst_confidence_rating_ = value;
}
inline void HumanFeedback::set_analyst_confidence_rating(int32_t value) {
  _internal_set_analyst_confidence_rating(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_confidence_rating)
}

// .google.protobuf.Timestamp feedback_timestamp = 10;
inline bool HumanFeedback::_internal_has_feedback_timestamp() const {
  return this != internal_default_instance() && _impl_.feedback_timestamp_ != nullptr;
}
inline bool HumanFeedback::has_feedback_timestamp() const {
  return _internal_has_feedback_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanFeedback::_internal_feedback_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.feedback_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanFeedback::feedback_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_timestamp)
  return _internal_feedback_timestamp();
}
inline void HumanFeedback::unsafe_arena_set_allocated_feedback_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* feedback_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feedback_timestamp_);
  }
  _impl_.feedback_timestamp_ = feedback_timestamp;
  if (feedback_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HumanFeedback.feedback_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanFeedback::release_feedback_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.feedback_timestamp_;
  _impl_.feedback_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanFeedback::unsafe_arena_release_feedback_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.feedback_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.feedback_timestamp_;
  _impl_.feedback_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanFeedback::_internal_mutable_feedback_timestamp() {
  
  if (_impl_.feedback_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.feedback_timestamp_ = p;
  }
  return _impl_.feedback_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanFeedback::mutable_feedback_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_feedback_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.feedback_timestamp)
  return _msg;
}
inline void HumanFeedback::set_allocated_feedback_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* feedback_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feedback_timestamp_);
  }
  if (feedback_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedback_timestamp));
    if (message_arena != submessage_arena) {
      feedback_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedback_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feedback_timestamp_ = feedback_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.feedback_timestamp)
}

// -------------------------------------------------------------------

// HumanInTheLoopReview

// bool requires_human_analysis = 1;
inline void HumanInTheLoopReview::clear_requires_human_analysis() {
  _impl_.requires_human_analysis_ = false;
}
inline bool HumanInTheLoopReview::_internal_requires_human_analysis() const {
  return _impl_.requires_human_analysis_;
}
inline bool HumanInTheLoopReview::requires_human_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.requires_human_analysis)
  return _internal_requires_human_analysis();
}
inline void HumanInTheLoopReview::_internal_set_requires_human_analysis(bool value) {
  
  _impl_.requires_human_analysis_ = value;
}
inline void HumanInTheLoopReview::set_requires_human_analysis(bool value) {
  _internal_set_requires_human_analysis(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.requires_human_analysis)
}

// .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
inline void HumanInTheLoopReview::clear_review_priority() {
  _impl_.review_priority_ = 0;
}
inline ::protobuf::HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::_internal_review_priority() const {
  return static_cast< ::protobuf::HumanInTheLoopReview_ReviewPriority >(_impl_.review_priority_);
}
inline ::protobuf::HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::review_priority() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_priority)
  return _internal_review_priority();
}
inline void HumanInTheLoopReview::_internal_set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value) {
  
  _impl_.review_priority_ = value;
}
inline void HumanInTheLoopReview::set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value) {
  _internal_set_review_priority(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_priority)
}

// repeated string review_reasons = 3;
inline int HumanInTheLoopReview::_internal_review_reasons_size() const {
  return _impl_.review_reasons_.size();
}
inline int HumanInTheLoopReview::review_reasons_size() const {
  return _internal_review_reasons_size();
}
inline void HumanInTheLoopReview::clear_review_reasons() {
  _impl_.review_reasons_.Clear();
}
inline std::string* HumanInTheLoopReview::add_review_reasons() {
  std::string* _s = _internal_add_review_reasons();
  // @@protoc_insertion_point(field_add_mutable:protobuf.HumanInTheLoopReview.review_reasons)
  return _s;
}
inline const std::string& HumanInTheLoopReview::_internal_review_reasons(int index) const {
  return _impl_.review_reasons_.Get(index);
}
inline const std::string& HumanInTheLoopReview::review_reasons(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_reasons)
  return _internal_review_reasons(index);
}
inline std::string* HumanInTheLoopReview::mutable_review_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.review_reasons)
  return _impl_.review_reasons_.Mutable(index);
}
inline void HumanInTheLoopReview::set_review_reasons(int index, const std::string& value) {
  _impl_.review_reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::set_review_reasons(int index, std::string&& value) {
  _impl_.review_reasons_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::set_review_reasons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.review_reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::set_review_reasons(int index, const char* value, size_t size) {
  _impl_.review_reasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanInTheLoopReview.review_reasons)
}
inline std::string* HumanInTheLoopReview::_internal_add_review_reasons() {
  return _impl_.review_reasons_.Add();
}
inline void HumanInTheLoopReview::add_review_reasons(const std::string& value) {
  _impl_.review_reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::add_review_reasons(std::string&& value) {
  _impl_.review_reasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::add_review_reasons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.review_reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::add_review_reasons(const char* value, size_t size) {
  _impl_.review_reasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.HumanInTheLoopReview.review_reasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HumanInTheLoopReview::review_reasons() const {
  // @@protoc_insertion_point(field_list:protobuf.HumanInTheLoopReview.review_reasons)
  return _impl_.review_reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HumanInTheLoopReview::mutable_review_reasons() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.HumanInTheLoopReview.review_reasons)
  return &_impl_.review_reasons_;
}

// .protobuf.HumanFeedback analyst_feedback = 4;
inline bool HumanInTheLoopReview::_internal_has_analyst_feedback() const {
  return this != internal_default_instance() && _impl_.analyst_feedback_ != nullptr;
}
inline bool HumanInTheLoopReview::has_analyst_feedback() const {
  return _internal_has_analyst_feedback();
}
inline void HumanInTheLoopReview::clear_analyst_feedback() {
  if (GetArenaForAllocation() == nullptr && _impl_.analyst_feedback_ != nullptr) {
    delete _impl_.analyst_feedback_;
  }
  _impl_.analyst_feedback_ = nullptr;
}
inline const ::protobuf::HumanFeedback& HumanInTheLoopReview::_internal_analyst_feedback() const {
  const ::protobuf::HumanFeedback* p = _impl_.analyst_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::HumanFeedback&>(
      ::protobuf::_HumanFeedback_default_instance_);
}
inline const ::protobuf::HumanFeedback& HumanInTheLoopReview::analyst_feedback() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.analyst_feedback)
  return _internal_analyst_feedback();
}
inline void HumanInTheLoopReview::unsafe_arena_set_allocated_analyst_feedback(
    ::protobuf::HumanFeedback* analyst_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.analyst_feedback_);
  }
  _impl_.analyst_feedback_ = analyst_feedback;
  if (analyst_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HumanInTheLoopReview.analyst_feedback)
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::release_analyst_feedback() {
  
  ::protobuf::HumanFeedback* temp = _impl_.analyst_feedback_;
  _impl_.analyst_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::unsafe_arena_release_analyst_feedback() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.analyst_feedback)
  
  ::protobuf::HumanFeedback* temp = _impl_.analyst_feedback_;
  _impl_.analyst_feedback_ = nullptr;
  return temp;
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::_internal_mutable_analyst_feedback() {
  
  if (_impl_.analyst_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::HumanFeedback>(GetArenaForAllocation());
    _impl_.analyst_feedback_ = p;
  }
  return _impl_.analyst_feedback_;
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::mutable_analyst_feedback() {
  ::protobuf::HumanFeedback* _msg = _internal_mutable_analyst_feedback();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.analyst_feedback)
  return _msg;
}
inline void HumanInTheLoopReview::set_allocated_analyst_feedback(::protobuf::HumanFeedback* analyst_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.analyst_feedback_;
  }
  if (analyst_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(analyst_feedback);
    if (message_arena != submessage_arena) {
      analyst_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analyst_feedback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.analyst_feedback_ = analyst_feedback;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.analyst_feedback)
}

// .google.protobuf.Timestamp escalated_timestamp = 5;
inline bool HumanInTheLoopReview::_internal_has_escalated_timestamp() const {
  return this != internal_default_instance() && _impl_.escalated_timestamp_ != nullptr;
}
inline bool HumanInTheLoopReview::has_escalated_timestamp() const {
  return _internal_has_escalated_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanInTheLoopReview::_internal_escalated_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.escalated_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanInTheLoopReview::escalated_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.escalated_timestamp)
  return _internal_escalated_timestamp();
}
inline void HumanInTheLoopReview::unsafe_arena_set_allocated_escalated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* escalated_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.escalated_timestamp_);
  }
  _impl_.escalated_timestamp_ = escalated_timestamp;
  if (escalated_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HumanInTheLoopReview.escalated_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::release_escalated_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.escalated_timestamp_;
  _impl_.escalated_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::unsafe_arena_release_escalated_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.escalated_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.escalated_timestamp_;
  _impl_.escalated_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::_internal_mutable_escalated_timestamp() {
  
  if (_impl_.escalated_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.escalated_timestamp_ = p;
  }
  return _impl_.escalated_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::mutable_escalated_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_escalated_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.escalated_timestamp)
  return _msg;
}
inline void HumanInTheLoopReview::set_allocated_escalated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* escalated_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.escalated_timestamp_);
  }
  if (escalated_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(escalated_timestamp));
    if (message_arena != submessage_arena) {
      escalated_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escalated_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.escalated_timestamp_ = escalated_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.escalated_timestamp)
}

// .google.protobuf.Timestamp reviewed_timestamp = 6;
inline bool HumanInTheLoopReview::_internal_has_reviewed_timestamp() const {
  return this != internal_default_instance() && _impl_.reviewed_timestamp_ != nullptr;
}
inline bool HumanInTheLoopReview::has_reviewed_timestamp() const {
  return _internal_has_reviewed_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanInTheLoopReview::_internal_reviewed_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.reviewed_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HumanInTheLoopReview::reviewed_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  return _internal_reviewed_timestamp();
}
inline void HumanInTheLoopReview::unsafe_arena_set_allocated_reviewed_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reviewed_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reviewed_timestamp_);
  }
  _impl_.reviewed_timestamp_ = reviewed_timestamp;
  if (reviewed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HumanInTheLoopReview.reviewed_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::release_reviewed_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reviewed_timestamp_;
  _impl_.reviewed_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::unsafe_arena_release_reviewed_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reviewed_timestamp_;
  _impl_.reviewed_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::_internal_mutable_reviewed_timestamp() {
  
  if (_impl_.reviewed_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.reviewed_timestamp_ = p;
  }
  return _impl_.reviewed_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HumanInTheLoopReview::mutable_reviewed_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_reviewed_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  return _msg;
}
inline void HumanInTheLoopReview::set_allocated_reviewed_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* reviewed_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reviewed_timestamp_);
  }
  if (reviewed_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reviewed_timestamp));
    if (message_arena != submessage_arena) {
      reviewed_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reviewed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reviewed_timestamp_ = reviewed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.reviewed_timestamp)
}

// bool review_completed = 7;
inline void HumanInTheLoopReview::clear_review_completed() {
  _impl_.review_completed_ = false;
}
inline bool HumanInTheLoopReview::_internal_review_completed() const {
  return _impl_.review_completed_;
}
inline bool HumanInTheLoopReview::review_completed() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_completed)
  return _internal_review_completed();
}
inline void HumanInTheLoopReview::_internal_set_review_completed(bool value) {
  
  _impl_.review_completed_ = value;
}
inline void HumanInTheLoopReview::set_review_completed(bool value) {
  _internal_set_review_completed(value);
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_completed)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkSecurityEvent

// string event_id = 1;
inline void NetworkSecurityEvent::clear_event_id() {
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::event_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_id)
  return _internal_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_event_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_id)
}
inline std::string* NetworkSecurityEvent::mutable_event_id() {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_id)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_event_id() const {
  return _impl_.event_id_.Get();
}
inline void NetworkSecurityEvent::_internal_set_event_id(const std::string& value) {
  
  _impl_.event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_event_id() {
  
  return _impl_.event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_id)
  return _impl_.event_id_.Release();
}
inline void NetworkSecurityEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    
  } else {
    
  }
  _impl_.event_id_.SetAllocated(event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_id)
}

// .google.protobuf.Timestamp event_timestamp = 2;
inline bool NetworkSecurityEvent::_internal_has_event_timestamp() const {
  return this != internal_default_instance() && _impl_.event_timestamp_ != nullptr;
}
inline bool NetworkSecurityEvent::has_event_timestamp() const {
  return _internal_has_event_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NetworkSecurityEvent::_internal_event_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.event_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NetworkSecurityEvent::event_timestamp() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_timestamp)
  return _internal_event_timestamp();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_event_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* event_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_timestamp_);
  }
  _impl_.event_timestamp_ = event_timestamp;
  if (event_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.event_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkSecurityEvent::release_event_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.event_timestamp_;
  _impl_.event_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkSecurityEvent::unsafe_arena_release_event_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.event_timestamp_;
  _impl_.event_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkSecurityEvent::_internal_mutable_event_timestamp() {
  
  if (_impl_.event_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.event_timestamp_ = p;
  }
  return _impl_.event_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NetworkSecurityEvent::mutable_event_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_event_timestamp();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_timestamp)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_event_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* event_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_timestamp_);
  }
  if (event_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_timestamp));
    if (message_arena != submessage_arena) {
      event_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.event_timestamp_ = event_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_timestamp)
}

// string originating_node_id = 3;
inline void NetworkSecurityEvent::clear_originating_node_id() {
  _impl_.originating_node_id_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::originating_node_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.originating_node_id)
  return _internal_originating_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_originating_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.originating_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.originating_node_id)
}
inline std::string* NetworkSecurityEvent::mutable_originating_node_id() {
  std::string* _s = _internal_mutable_originating_node_id();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.originating_node_id)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_originating_node_id() const {
  return _impl_.originating_node_id_.Get();
}
inline void NetworkSecurityEvent::_internal_set_originating_node_id(const std::string& value) {
  
  _impl_.originating_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_originating_node_id() {
  
  return _impl_.originating_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_originating_node_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.originating_node_id)
  return _impl_.originating_node_id_.Release();
}
inline void NetworkSecurityEvent::set_allocated_originating_node_id(std::string* originating_node_id) {
  if (originating_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.originating_node_id_.SetAllocated(originating_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originating_node_id_.IsDefault()) {
    _impl_.originating_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.originating_node_id)
}

// .protobuf.NetworkFeatures network_features = 4;
inline bool NetworkSecurityEvent::_internal_has_network_features() const {
  return this != internal_default_instance() && _impl_.network_features_ != nullptr;
}
inline bool NetworkSecurityEvent::has_network_features() const {
  return _internal_has_network_features();
}
inline void NetworkSecurityEvent::clear_network_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.network_features_ != nullptr) {
    delete _impl_.network_features_;
  }
  _impl_.network_features_ = nullptr;
}
inline const ::protobuf::NetworkFeatures& NetworkSecurityEvent::_internal_network_features() const {
  const ::protobuf::NetworkFeatures* p = _impl_.network_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::NetworkFeatures&>(
      ::protobuf::_NetworkFeatures_default_instance_);
}
inline const ::protobuf::NetworkFeatures& NetworkSecurityEvent::network_features() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.network_features)
  return _internal_network_features();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_network_features(
    ::protobuf::NetworkFeatures* network_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.network_features_);
  }
  _impl_.network_features_ = network_features;
  if (network_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.network_features)
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::release_network_features() {
  
  ::protobuf::NetworkFeatures* temp = _impl_.network_features_;
  _impl_.network_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::unsafe_arena_release_network_features() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.network_features)
  
  ::protobuf::NetworkFeatures* temp = _impl_.network_features_;
  _impl_.network_features_ = nullptr;
  return temp;
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::_internal_mutable_network_features() {
  
  if (_impl_.network_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::NetworkFeatures>(GetArenaForAllocation());
    _impl_.network_features_ = p;
  }
  return _impl_.network_features_;
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::mutable_network_features() {
  ::protobuf::NetworkFeatures* _msg = _internal_mutable_network_features();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.network_features)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_network_features(::protobuf::NetworkFeatures* network_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.network_features_;
  }
  if (network_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(network_features);
    if (message_arena != submessage_arena) {
      network_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.network_features_ = network_features;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.network_features)
}

// .protobuf.GeoEnrichment geo_enrichment = 5;
inline bool NetworkSecurityEvent::_internal_has_geo_enrichment() const {
  return this != internal_default_instance() && _impl_.geo_enrichment_ != nullptr;
}
inline bool NetworkSecurityEvent::has_geo_enrichment() const {
  return _internal_has_geo_enrichment();
}
inline void NetworkSecurityEvent::clear_geo_enrichment() {
  if (GetArenaForAllocation() == nullptr && _impl_.geo_enrichment_ != nullptr) {
    delete _impl_.geo_enrichment_;
  }
  _impl_.geo_enrichment_ = nullptr;
}
inline const ::protobuf::GeoEnrichment& NetworkSecurityEvent::_internal_geo_enrichment() const {
  const ::protobuf::GeoEnrichment* p = _impl_.geo_enrichment_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::GeoEnrichment&>(
      ::protobuf::_GeoEnrichment_default_instance_);
}
inline const ::protobuf::GeoEnrichment& NetworkSecurityEvent::geo_enrichment() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.geo_enrichment)
  return _internal_geo_enrichment();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_geo_enrichment(
    ::protobuf::GeoEnrichment* geo_enrichment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geo_enrichment_);
  }
  _impl_.geo_enrichment_ = geo_enrichment;
  if (geo_enrichment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.geo_enrichment)
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::release_geo_enrichment() {
  
  ::protobuf::GeoEnrichment* temp = _impl_.geo_enrichment_;
  _impl_.geo_enrichment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::unsafe_arena_release_geo_enrichment() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.geo_enrichment)
  
  ::protobuf::GeoEnrichment* temp = _impl_.geo_enrichment_;
  _impl_.geo_enrichment_ = nullptr;
  return temp;
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::_internal_mutable_geo_enrichment() {
  
  if (_impl_.geo_enrichment_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::GeoEnrichment>(GetArenaForAllocation());
    _impl_.geo_enrichment_ = p;
  }
  return _impl_.geo_enrichment_;
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::mutable_geo_enrichment() {
  ::protobuf::GeoEnrichment* _msg = _internal_mutable_geo_enrichment();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.geo_enrichment)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_geo_enrichment(::protobuf::GeoEnrichment* geo_enrichment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.geo_enrichment_;
  }
  if (geo_enrichment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geo_enrichment);
    if (message_arena != submessage_arena) {
      geo_enrichment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_enrichment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geo_enrichment_ = geo_enrichment;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.geo_enrichment)
}

// .protobuf.TimeWindow time_window = 6;
inline bool NetworkSecurityEvent::_internal_has_time_window() const {
  return this != internal_default_instance() && _impl_.time_window_ != nullptr;
}
inline bool NetworkSecurityEvent::has_time_window() const {
  return _internal_has_time_window();
}
inline void NetworkSecurityEvent::clear_time_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_ != nullptr) {
    delete _impl_.time_window_;
  }
  _impl_.time_window_ = nullptr;
}
inline const ::protobuf::TimeWindow& NetworkSecurityEvent::_internal_time_window() const {
  const ::protobuf::TimeWindow* p = _impl_.time_window_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::TimeWindow&>(
      ::protobuf::_TimeWindow_default_instance_);
}
inline const ::protobuf::TimeWindow& NetworkSecurityEvent::time_window() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.time_window)
  return _internal_time_window();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_time_window(
    ::protobuf::TimeWindow* time_window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_window_);
  }
  _impl_.time_window_ = time_window;
  if (time_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.time_window)
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::release_time_window() {
  
  ::protobuf::TimeWindow* temp = _impl_.time_window_;
  _impl_.time_window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::unsafe_arena_release_time_window() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.time_window)
  
  ::protobuf::TimeWindow* temp = _impl_.time_window_;
  _impl_.time_window_ = nullptr;
  return temp;
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::_internal_mutable_time_window() {
  
  if (_impl_.time_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TimeWindow>(GetArenaForAllocation());
    _impl_.time_window_ = p;
  }
  return _impl_.time_window_;
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::mutable_time_window() {
  ::protobuf::TimeWindow* _msg = _internal_mutable_time_window();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.time_window)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_time_window(::protobuf::TimeWindow* time_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_window_;
  }
  if (time_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_window);
    if (message_arena != submessage_arena) {
      time_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.time_window)
}

// .protobuf.TricapaMLAnalysis ml_analysis = 7;
inline bool NetworkSecurityEvent::_internal_has_ml_analysis() const {
  return this != internal_default_instance() && _impl_.ml_analysis_ != nullptr;
}
inline bool NetworkSecurityEvent::has_ml_analysis() const {
  return _internal_has_ml_analysis();
}
inline void NetworkSecurityEvent::clear_ml_analysis() {
  if (GetArenaForAllocation() == nullptr && _impl_.ml_analysis_ != nullptr) {
    delete _impl_.ml_analysis_;
  }
  _impl_.ml_analysis_ = nullptr;
}
inline const ::protobuf::TricapaMLAnalysis& NetworkSecurityEvent::_internal_ml_analysis() const {
  const ::protobuf::TricapaMLAnalysis* p = _impl_.ml_analysis_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::TricapaMLAnalysis&>(
      ::protobuf::_TricapaMLAnalysis_default_instance_);
}
inline const ::protobuf::TricapaMLAnalysis& NetworkSecurityEvent::ml_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.ml_analysis)
  return _internal_ml_analysis();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_ml_analysis(
    ::protobuf::TricapaMLAnalysis* ml_analysis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ml_analysis_);
  }
  _impl_.ml_analysis_ = ml_analysis;
  if (ml_analysis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.ml_analysis)
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::release_ml_analysis() {
  
  ::protobuf::TricapaMLAnalysis* temp = _impl_.ml_analysis_;
  _impl_.ml_analysis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::unsafe_arena_release_ml_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.ml_analysis)
  
  ::protobuf::TricapaMLAnalysis* temp = _impl_.ml_analysis_;
  _impl_.ml_analysis_ = nullptr;
  return temp;
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::_internal_mutable_ml_analysis() {
  
  if (_impl_.ml_analysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TricapaMLAnalysis>(GetArenaForAllocation());
    _impl_.ml_analysis_ = p;
  }
  return _impl_.ml_analysis_;
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::mutable_ml_analysis() {
  ::protobuf::TricapaMLAnalysis* _msg = _internal_mutable_ml_analysis();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.ml_analysis)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_ml_analysis(::protobuf::TricapaMLAnalysis* ml_analysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ml_analysis_;
  }
  if (ml_analysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ml_analysis);
    if (message_arena != submessage_arena) {
      ml_analysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ml_analysis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ml_analysis_ = ml_analysis;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.ml_analysis)
}

// repeated .protobuf.ModelPrediction additional_model_predictions = 8;
inline int NetworkSecurityEvent::_internal_additional_model_predictions_size() const {
  return _impl_.additional_model_predictions_.size();
}
inline int NetworkSecurityEvent::additional_model_predictions_size() const {
  return _internal_additional_model_predictions_size();
}
inline void NetworkSecurityEvent::clear_additional_model_predictions() {
  _impl_.additional_model_predictions_.Clear();
}
inline ::protobuf::ModelPrediction* NetworkSecurityEvent::mutable_additional_model_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return _impl_.additional_model_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >*
NetworkSecurityEvent::mutable_additional_model_predictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return &_impl_.additional_model_predictions_;
}
inline const ::protobuf::ModelPrediction& NetworkSecurityEvent::_internal_additional_model_predictions(int index) const {
  return _impl_.additional_model_predictions_.Get(index);
}
inline const ::protobuf::ModelPrediction& NetworkSecurityEvent::additional_model_predictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return _internal_additional_model_predictions(index);
}
inline ::protobuf::ModelPrediction* NetworkSecurityEvent::_internal_add_additional_model_predictions() {
  return _impl_.additional_model_predictions_.Add();
}
inline ::protobuf::ModelPrediction* NetworkSecurityEvent::add_additional_model_predictions() {
  ::protobuf::ModelPrediction* _add = _internal_add_additional_model_predictions();
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::ModelPrediction >&
NetworkSecurityEvent::additional_model_predictions() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return _impl_.additional_model_predictions_;
}

// .protobuf.DistributedNode capturing_node = 9;
inline bool NetworkSecurityEvent::_internal_has_capturing_node() const {
  return this != internal_default_instance() && _impl_.capturing_node_ != nullptr;
}
inline bool NetworkSecurityEvent::has_capturing_node() const {
  return _internal_has_capturing_node();
}
inline void NetworkSecurityEvent::clear_capturing_node() {
  if (GetArenaForAllocation() == nullptr && _impl_.capturing_node_ != nullptr) {
    delete _impl_.capturing_node_;
  }
  _impl_.capturing_node_ = nullptr;
}
inline const ::protobuf::DistributedNode& NetworkSecurityEvent::_internal_capturing_node() const {
  const ::protobuf::DistributedNode* p = _impl_.capturing_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::DistributedNode&>(
      ::protobuf::_DistributedNode_default_instance_);
}
inline const ::protobuf::DistributedNode& NetworkSecurityEvent::capturing_node() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.capturing_node)
  return _internal_capturing_node();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_capturing_node(
    ::protobuf::DistributedNode* capturing_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capturing_node_);
  }
  _impl_.capturing_node_ = capturing_node;
  if (capturing_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.capturing_node)
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::release_capturing_node() {
  
  ::protobuf::DistributedNode* temp = _impl_.capturing_node_;
  _impl_.capturing_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::unsafe_arena_release_capturing_node() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.capturing_node)
  
  ::protobuf::DistributedNode* temp = _impl_.capturing_node_;
  _impl_.capturing_node_ = nullptr;
  return temp;
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::_internal_mutable_capturing_node() {
  
  if (_impl_.capturing_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::DistributedNode>(GetArenaForAllocation());
    _impl_.capturing_node_ = p;
  }
  return _impl_.capturing_node_;
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::mutable_capturing_node() {
  ::protobuf::DistributedNode* _msg = _internal_mutable_capturing_node();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.capturing_node)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_capturing_node(::protobuf::DistributedNode* capturing_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capturing_node_;
  }
  if (capturing_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capturing_node);
    if (message_arena != submessage_arena) {
      capturing_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capturing_node, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capturing_node_ = capturing_node;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.capturing_node)
}

// .protobuf.PipelineTracking pipeline_tracking = 10;
inline bool NetworkSecurityEvent::_internal_has_pipeline_tracking() const {
  return this != internal_default_instance() && _impl_.pipeline_tracking_ != nullptr;
}
inline bool NetworkSecurityEvent::has_pipeline_tracking() const {
  return _internal_has_pipeline_tracking();
}
inline void NetworkSecurityEvent::clear_pipeline_tracking() {
  if (GetArenaForAllocation() == nullptr && _impl_.pipeline_tracking_ != nullptr) {
    delete _impl_.pipeline_tracking_;
  }
  _impl_.pipeline_tracking_ = nullptr;
}
inline const ::protobuf::PipelineTracking& NetworkSecurityEvent::_internal_pipeline_tracking() const {
  const ::protobuf::PipelineTracking* p = _impl_.pipeline_tracking_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::PipelineTracking&>(
      ::protobuf::_PipelineTracking_default_instance_);
}
inline const ::protobuf::PipelineTracking& NetworkSecurityEvent::pipeline_tracking() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.pipeline_tracking)
  return _internal_pipeline_tracking();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_pipeline_tracking(
    ::protobuf::PipelineTracking* pipeline_tracking) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pipeline_tracking_);
  }
  _impl_.pipeline_tracking_ = pipeline_tracking;
  if (pipeline_tracking) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.pipeline_tracking)
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::release_pipeline_tracking() {
  
  ::protobuf::PipelineTracking* temp = _impl_.pipeline_tracking_;
  _impl_.pipeline_tracking_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::unsafe_arena_release_pipeline_tracking() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.pipeline_tracking)
  
  ::protobuf::PipelineTracking* temp = _impl_.pipeline_tracking_;
  _impl_.pipeline_tracking_ = nullptr;
  return temp;
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::_internal_mutable_pipeline_tracking() {
  
  if (_impl_.pipeline_tracking_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::PipelineTracking>(GetArenaForAllocation());
    _impl_.pipeline_tracking_ = p;
  }
  return _impl_.pipeline_tracking_;
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::mutable_pipeline_tracking() {
  ::protobuf::PipelineTracking* _msg = _internal_mutable_pipeline_tracking();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.pipeline_tracking)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_pipeline_tracking(::protobuf::PipelineTracking* pipeline_tracking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pipeline_tracking_;
  }
  if (pipeline_tracking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pipeline_tracking);
    if (message_arena != submessage_arena) {
      pipeline_tracking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pipeline_tracking, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pipeline_tracking_ = pipeline_tracking;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.pipeline_tracking)
}

// .protobuf.RAGAnalysis rag_analysis = 11;
inline bool NetworkSecurityEvent::_internal_has_rag_analysis() const {
  return this != internal_default_instance() && _impl_.rag_analysis_ != nullptr;
}
inline bool NetworkSecurityEvent::has_rag_analysis() const {
  return _internal_has_rag_analysis();
}
inline void NetworkSecurityEvent::clear_rag_analysis() {
  if (GetArenaForAllocation() == nullptr && _impl_.rag_analysis_ != nullptr) {
    delete _impl_.rag_analysis_;
  }
  _impl_.rag_analysis_ = nullptr;
}
inline const ::protobuf::RAGAnalysis& NetworkSecurityEvent::_internal_rag_analysis() const {
  const ::protobuf::RAGAnalysis* p = _impl_.rag_analysis_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::RAGAnalysis&>(
      ::protobuf::_RAGAnalysis_default_instance_);
}
inline const ::protobuf::RAGAnalysis& NetworkSecurityEvent::rag_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.rag_analysis)
  return _internal_rag_analysis();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_rag_analysis(
    ::protobuf::RAGAnalysis* rag_analysis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rag_analysis_);
  }
  _impl_.rag_analysis_ = rag_analysis;
  if (rag_analysis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.rag_analysis)
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::release_rag_analysis() {
  
  ::protobuf::RAGAnalysis* temp = _impl_.rag_analysis_;
  _impl_.rag_analysis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::unsafe_arena_release_rag_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.rag_analysis)
  
  ::protobuf::RAGAnalysis* temp = _impl_.rag_analysis_;
  _impl_.rag_analysis_ = nullptr;
  return temp;
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::_internal_mutable_rag_analysis() {
  
  if (_impl_.rag_analysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::RAGAnalysis>(GetArenaForAllocation());
    _impl_.rag_analysis_ = p;
  }
  return _impl_.rag_analysis_;
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::mutable_rag_analysis() {
  ::protobuf::RAGAnalysis* _msg = _internal_mutable_rag_analysis();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.rag_analysis)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_rag_analysis(::protobuf::RAGAnalysis* rag_analysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rag_analysis_;
  }
  if (rag_analysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rag_analysis);
    if (message_arena != submessage_arena) {
      rag_analysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rag_analysis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rag_analysis_ = rag_analysis;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.rag_analysis)
}

// .protobuf.HumanInTheLoopReview human_review = 12;
inline bool NetworkSecurityEvent::_internal_has_human_review() const {
  return this != internal_default_instance() && _impl_.human_review_ != nullptr;
}
inline bool NetworkSecurityEvent::has_human_review() const {
  return _internal_has_human_review();
}
inline void NetworkSecurityEvent::clear_human_review() {
  if (GetArenaForAllocation() == nullptr && _impl_.human_review_ != nullptr) {
    delete _impl_.human_review_;
  }
  _impl_.human_review_ = nullptr;
}
inline const ::protobuf::HumanInTheLoopReview& NetworkSecurityEvent::_internal_human_review() const {
  const ::protobuf::HumanInTheLoopReview* p = _impl_.human_review_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::HumanInTheLoopReview&>(
      ::protobuf::_HumanInTheLoopReview_default_instance_);
}
inline const ::protobuf::HumanInTheLoopReview& NetworkSecurityEvent::human_review() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.human_review)
  return _internal_human_review();
}
inline void NetworkSecurityEvent::unsafe_arena_set_allocated_human_review(
    ::protobuf::HumanInTheLoopReview* human_review) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.human_review_);
  }
  _impl_.human_review_ = human_review;
  if (human_review) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.NetworkSecurityEvent.human_review)
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::release_human_review() {
  
  ::protobuf::HumanInTheLoopReview* temp = _impl_.human_review_;
  _impl_.human_review_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::unsafe_arena_release_human_review() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.human_review)
  
  ::protobuf::HumanInTheLoopReview* temp = _impl_.human_review_;
  _impl_.human_review_ = nullptr;
  return temp;
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::_internal_mutable_human_review() {
  
  if (_impl_.human_review_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::HumanInTheLoopReview>(GetArenaForAllocation());
    _impl_.human_review_ = p;
  }
  return _impl_.human_review_;
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::mutable_human_review() {
  ::protobuf::HumanInTheLoopReview* _msg = _internal_mutable_human_review();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.human_review)
  return _msg;
}
inline void NetworkSecurityEvent::set_allocated_human_review(::protobuf::HumanInTheLoopReview* human_review) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.human_review_;
  }
  if (human_review) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(human_review);
    if (message_arena != submessage_arena) {
      human_review = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, human_review, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.human_review_ = human_review;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.human_review)
}

// double overall_threat_score = 15;
inline void NetworkSecurityEvent::clear_overall_threat_score() {
  _impl_.overall_threat_score_ = 0;
}
inline double NetworkSecurityEvent::_internal_overall_threat_score() const {
  return _impl_.overall_threat_score_;
}
inline double NetworkSecurityEvent::overall_threat_score() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.overall_threat_score)
  return _internal_overall_threat_score();
}
inline void NetworkSecurityEvent::_internal_set_overall_threat_score(double value) {
  
  _impl_.overall_threat_score_ = value;
}
inline void NetworkSecurityEvent::set_overall_threat_score(double value) {
  _internal_set_overall_threat_score(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.overall_threat_score)
}

// string final_classification = 16;
inline void NetworkSecurityEvent::clear_final_classification() {
  _impl_.final_classification_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::final_classification() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.final_classification)
  return _internal_final_classification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_final_classification(ArgT0&& arg0, ArgT... args) {
 
 _impl_.final_classification_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.final_classification)
}
inline std::string* NetworkSecurityEvent::mutable_final_classification() {
  std::string* _s = _internal_mutable_final_classification();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.final_classification)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_final_classification() const {
  return _impl_.final_classification_.Get();
}
inline void NetworkSecurityEvent::_internal_set_final_classification(const std::string& value) {
  
  _impl_.final_classification_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_final_classification() {
  
  return _impl_.final_classification_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_final_classification() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.final_classification)
  return _impl_.final_classification_.Release();
}
inline void NetworkSecurityEvent::set_allocated_final_classification(std::string* final_classification) {
  if (final_classification != nullptr) {
    
  } else {
    
  }
  _impl_.final_classification_.SetAllocated(final_classification, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.final_classification_.IsDefault()) {
    _impl_.final_classification_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.final_classification)
}

// string threat_category = 17;
inline void NetworkSecurityEvent::clear_threat_category() {
  _impl_.threat_category_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::threat_category() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.threat_category)
  return _internal_threat_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_threat_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threat_category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.threat_category)
}
inline std::string* NetworkSecurityEvent::mutable_threat_category() {
  std::string* _s = _internal_mutable_threat_category();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.threat_category)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_threat_category() const {
  return _impl_.threat_category_.Get();
}
inline void NetworkSecurityEvent::_internal_set_threat_category(const std::string& value) {
  
  _impl_.threat_category_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_threat_category() {
  
  return _impl_.threat_category_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_threat_category() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.threat_category)
  return _impl_.threat_category_.Release();
}
inline void NetworkSecurityEvent::set_allocated_threat_category(std::string* threat_category) {
  if (threat_category != nullptr) {
    
  } else {
    
  }
  _impl_.threat_category_.SetAllocated(threat_category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threat_category_.IsDefault()) {
    _impl_.threat_category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.threat_category)
}

// string correlation_id = 20;
inline void NetworkSecurityEvent::clear_correlation_id() {
  _impl_.correlation_id_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::correlation_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.correlation_id)
  return _internal_correlation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_correlation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.correlation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.correlation_id)
}
inline std::string* NetworkSecurityEvent::mutable_correlation_id() {
  std::string* _s = _internal_mutable_correlation_id();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.correlation_id)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_correlation_id() const {
  return _impl_.correlation_id_.Get();
}
inline void NetworkSecurityEvent::_internal_set_correlation_id(const std::string& value) {
  
  _impl_.correlation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_correlation_id() {
  
  return _impl_.correlation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_correlation_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.correlation_id)
  return _impl_.correlation_id_.Release();
}
inline void NetworkSecurityEvent::set_allocated_correlation_id(std::string* correlation_id) {
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  _impl_.correlation_id_.SetAllocated(correlation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.correlation_id_.IsDefault()) {
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.correlation_id)
}

// repeated string related_event_ids = 21;
inline int NetworkSecurityEvent::_internal_related_event_ids_size() const {
  return _impl_.related_event_ids_.size();
}
inline int NetworkSecurityEvent::related_event_ids_size() const {
  return _internal_related_event_ids_size();
}
inline void NetworkSecurityEvent::clear_related_event_ids() {
  _impl_.related_event_ids_.Clear();
}
inline std::string* NetworkSecurityEvent::add_related_event_ids() {
  std::string* _s = _internal_add_related_event_ids();
  // @@protoc_insertion_point(field_add_mutable:protobuf.NetworkSecurityEvent.related_event_ids)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_related_event_ids(int index) const {
  return _impl_.related_event_ids_.Get(index);
}
inline const std::string& NetworkSecurityEvent::related_event_ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.related_event_ids)
  return _internal_related_event_ids(index);
}
inline std::string* NetworkSecurityEvent::mutable_related_event_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.related_event_ids)
  return _impl_.related_event_ids_.Mutable(index);
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, const std::string& value) {
  _impl_.related_event_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, std::string&& value) {
  _impl_.related_event_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.related_event_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, const char* value, size_t size) {
  _impl_.related_event_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline std::string* NetworkSecurityEvent::_internal_add_related_event_ids() {
  return _impl_.related_event_ids_.Add();
}
inline void NetworkSecurityEvent::add_related_event_ids(const std::string& value) {
  _impl_.related_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::add_related_event_ids(std::string&& value) {
  _impl_.related_event_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::add_related_event_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.related_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::add_related_event_ids(const char* value, size_t size) {
  _impl_.related_event_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkSecurityEvent::related_event_ids() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.related_event_ids)
  return _impl_.related_event_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkSecurityEvent::mutable_related_event_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.related_event_ids)
  return &_impl_.related_event_ids_;
}

// string event_chain_id = 22;
inline void NetworkSecurityEvent::clear_event_chain_id() {
  _impl_.event_chain_id_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::event_chain_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_chain_id)
  return _internal_event_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_event_chain_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_chain_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_chain_id)
}
inline std::string* NetworkSecurityEvent::mutable_event_chain_id() {
  std::string* _s = _internal_mutable_event_chain_id();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_chain_id)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_event_chain_id() const {
  return _impl_.event_chain_id_.Get();
}
inline void NetworkSecurityEvent::_internal_set_event_chain_id(const std::string& value) {
  
  _impl_.event_chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_event_chain_id() {
  
  return _impl_.event_chain_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_event_chain_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_chain_id)
  return _impl_.event_chain_id_.Release();
}
inline void NetworkSecurityEvent::set_allocated_event_chain_id(std::string* event_chain_id) {
  if (event_chain_id != nullptr) {
    
  } else {
    
  }
  _impl_.event_chain_id_.SetAllocated(event_chain_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_chain_id_.IsDefault()) {
    _impl_.event_chain_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_chain_id)
}

// uint32 schema_version = 25;
inline void NetworkSecurityEvent::clear_schema_version() {
  _impl_.schema_version_ = 0u;
}
inline uint32_t NetworkSecurityEvent::_internal_schema_version() const {
  return _impl_.schema_version_;
}
inline uint32_t NetworkSecurityEvent::schema_version() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.schema_version)
  return _internal_schema_version();
}
inline void NetworkSecurityEvent::_internal_set_schema_version(uint32_t value) {
  
  _impl_.schema_version_ = value;
}
inline void NetworkSecurityEvent::set_schema_version(uint32_t value) {
  _internal_set_schema_version(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.schema_version)
}

// map<string, string> custom_metadata = 26;
inline int NetworkSecurityEvent::_internal_custom_metadata_size() const {
  return _impl_.custom_metadata_.size();
}
inline int NetworkSecurityEvent::custom_metadata_size() const {
  return _internal_custom_metadata_size();
}
inline void NetworkSecurityEvent::clear_custom_metadata() {
  _impl_.custom_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkSecurityEvent::_internal_custom_metadata() const {
  return _impl_.custom_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkSecurityEvent::custom_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkSecurityEvent.custom_metadata)
  return _internal_custom_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkSecurityEvent::_internal_mutable_custom_metadata() {
  return _impl_.custom_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkSecurityEvent::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkSecurityEvent.custom_metadata)
  return _internal_mutable_custom_metadata();
}

// repeated string event_tags = 27;
inline int NetworkSecurityEvent::_internal_event_tags_size() const {
  return _impl_.event_tags_.size();
}
inline int NetworkSecurityEvent::event_tags_size() const {
  return _internal_event_tags_size();
}
inline void NetworkSecurityEvent::clear_event_tags() {
  _impl_.event_tags_.Clear();
}
inline std::string* NetworkSecurityEvent::add_event_tags() {
  std::string* _s = _internal_add_event_tags();
  // @@protoc_insertion_point(field_add_mutable:protobuf.NetworkSecurityEvent.event_tags)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_event_tags(int index) const {
  return _impl_.event_tags_.Get(index);
}
inline const std::string& NetworkSecurityEvent::event_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_tags)
  return _internal_event_tags(index);
}
inline std::string* NetworkSecurityEvent::mutable_event_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_tags)
  return _impl_.event_tags_.Mutable(index);
}
inline void NetworkSecurityEvent::set_event_tags(int index, const std::string& value) {
  _impl_.event_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::set_event_tags(int index, std::string&& value) {
  _impl_.event_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::set_event_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::set_event_tags(int index, const char* value, size_t size) {
  _impl_.event_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.event_tags)
}
inline std::string* NetworkSecurityEvent::_internal_add_event_tags() {
  return _impl_.event_tags_.Add();
}
inline void NetworkSecurityEvent::add_event_tags(const std::string& value) {
  _impl_.event_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::add_event_tags(std::string&& value) {
  _impl_.event_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::add_event_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::add_event_tags(const char* value, size_t size) {
  _impl_.event_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.NetworkSecurityEvent.event_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkSecurityEvent::event_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.event_tags)
  return _impl_.event_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkSecurityEvent::mutable_event_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.event_tags)
  return &_impl_.event_tags_;
}

// string protobuf_version = 28;
inline void NetworkSecurityEvent::clear_protobuf_version() {
  _impl_.protobuf_version_.ClearToEmpty();
}
inline const std::string& NetworkSecurityEvent::protobuf_version() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.protobuf_version)
  return _internal_protobuf_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkSecurityEvent::set_protobuf_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protobuf_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.protobuf_version)
}
inline std::string* NetworkSecurityEvent::mutable_protobuf_version() {
  std::string* _s = _internal_mutable_protobuf_version();
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.protobuf_version)
  return _s;
}
inline const std::string& NetworkSecurityEvent::_internal_protobuf_version() const {
  return _impl_.protobuf_version_.Get();
}
inline void NetworkSecurityEvent::_internal_set_protobuf_version(const std::string& value) {
  
  _impl_.protobuf_version_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::_internal_mutable_protobuf_version() {
  
  return _impl_.protobuf_version_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkSecurityEvent::release_protobuf_version() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.protobuf_version)
  return _impl_.protobuf_version_.Release();
}
inline void NetworkSecurityEvent::set_allocated_protobuf_version(std::string* protobuf_version) {
  if (protobuf_version != nullptr) {
    
  } else {
    
  }
  _impl_.protobuf_version_.SetAllocated(protobuf_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protobuf_version_.IsDefault()) {
    _impl_.protobuf_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.protobuf_version)
}

// -------------------------------------------------------------------

// EventBatch

// repeated .protobuf.NetworkSecurityEvent events = 1;
inline int EventBatch::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int EventBatch::events_size() const {
  return _internal_events_size();
}
inline void EventBatch::clear_events() {
  _impl_.events_.Clear();
}
inline ::protobuf::NetworkSecurityEvent* EventBatch::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >*
EventBatch::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.EventBatch.events)
  return &_impl_.events_;
}
inline const ::protobuf::NetworkSecurityEvent& EventBatch::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::protobuf::NetworkSecurityEvent& EventBatch::events(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.events)
  return _internal_events(index);
}
inline ::protobuf::NetworkSecurityEvent* EventBatch::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::protobuf::NetworkSecurityEvent* EventBatch::add_events() {
  ::protobuf::NetworkSecurityEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:protobuf.EventBatch.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >&
EventBatch::events() const {
  // @@protoc_insertion_point(field_list:protobuf.EventBatch.events)
  return _impl_.events_;
}

// uint64 batch_id = 2;
inline void EventBatch::clear_batch_id() {
  _impl_.batch_id_ = uint64_t{0u};
}
inline uint64_t EventBatch::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline uint64_t EventBatch::batch_id() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_id)
  return _internal_batch_id();
}
inline void EventBatch::_internal_set_batch_id(uint64_t value) {
  
  _impl_.batch_id_ = value;
}
inline void EventBatch::set_batch_id(uint64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_id)
}

// .google.protobuf.Timestamp batch_created_at = 3;
inline bool EventBatch::_internal_has_batch_created_at() const {
  return this != internal_default_instance() && _impl_.batch_created_at_ != nullptr;
}
inline bool EventBatch::has_batch_created_at() const {
  return _internal_has_batch_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventBatch::_internal_batch_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.batch_created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventBatch::batch_created_at() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_created_at)
  return _internal_batch_created_at();
}
inline void EventBatch::unsafe_arena_set_allocated_batch_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* batch_created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batch_created_at_);
  }
  _impl_.batch_created_at_ = batch_created_at;
  if (batch_created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.EventBatch.batch_created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventBatch::release_batch_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.batch_created_at_;
  _impl_.batch_created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventBatch::unsafe_arena_release_batch_created_at() {
  // @@protoc_insertion_point(field_release:protobuf.EventBatch.batch_created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.batch_created_at_;
  _impl_.batch_created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventBatch::_internal_mutable_batch_created_at() {
  
  if (_impl_.batch_created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.batch_created_at_ = p;
  }
  return _impl_.batch_created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventBatch::mutable_batch_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_batch_created_at();
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.batch_created_at)
  return _msg;
}
inline void EventBatch::set_allocated_batch_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* batch_created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batch_created_at_);
  }
  if (batch_created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch_created_at));
    if (message_arena != submessage_arena) {
      batch_created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.batch_created_at_ = batch_created_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.EventBatch.batch_created_at)
}

// uint32 batch_size = 4;
inline void EventBatch::clear_batch_size() {
  _impl_.batch_size_ = 0u;
}
inline uint32_t EventBatch::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t EventBatch::batch_size() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_size)
  return _internal_batch_size();
}
inline void EventBatch::_internal_set_batch_size(uint32_t value) {
  
  _impl_.batch_size_ = value;
}
inline void EventBatch::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_size)
}

// .protobuf.EventBatch.ProcessingMode processing_mode = 5;
inline void EventBatch::clear_processing_mode() {
  _impl_.processing_mode_ = 0;
}
inline ::protobuf::EventBatch_ProcessingMode EventBatch::_internal_processing_mode() const {
  return static_cast< ::protobuf::EventBatch_ProcessingMode >(_impl_.processing_mode_);
}
inline ::protobuf::EventBatch_ProcessingMode EventBatch::processing_mode() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.processing_mode)
  return _internal_processing_mode();
}
inline void EventBatch::_internal_set_processing_mode(::protobuf::EventBatch_ProcessingMode value) {
  
  _impl_.processing_mode_ = value;
}
inline void EventBatch::set_processing_mode(::protobuf::EventBatch_ProcessingMode value) {
  _internal_set_processing_mode(value);
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.processing_mode)
}

// string batch_source_node = 6;
inline void EventBatch::clear_batch_source_node() {
  _impl_.batch_source_node_.ClearToEmpty();
}
inline const std::string& EventBatch::batch_source_node() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_source_node)
  return _internal_batch_source_node();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventBatch::set_batch_source_node(ArgT0&& arg0, ArgT... args) {
 
 _impl_.batch_source_node_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_source_node)
}
inline std::string* EventBatch::mutable_batch_source_node() {
  std::string* _s = _internal_mutable_batch_source_node();
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.batch_source_node)
  return _s;
}
inline const std::string& EventBatch::_internal_batch_source_node() const {
  return _impl_.batch_source_node_.Get();
}
inline void EventBatch::_internal_set_batch_source_node(const std::string& value) {
  
  _impl_.batch_source_node_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBatch::_internal_mutable_batch_source_node() {
  
  return _impl_.batch_source_node_.Mutable(GetArenaForAllocation());
}
inline std::string* EventBatch::release_batch_source_node() {
  // @@protoc_insertion_point(field_release:protobuf.EventBatch.batch_source_node)
  return _impl_.batch_source_node_.Release();
}
inline void EventBatch::set_allocated_batch_source_node(std::string* batch_source_node) {
  if (batch_source_node != nullptr) {
    
  } else {
    
  }
  _impl_.batch_source_node_.SetAllocated(batch_source_node, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.batch_source_node_.IsDefault()) {
    _impl_.batch_source_node_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.EventBatch.batch_source_node)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemConfiguration

// repeated string enabled_ml_models = 1;
inline int SystemConfiguration::_internal_enabled_ml_models_size() const {
  return _impl_.enabled_ml_models_.size();
}
inline int SystemConfiguration::enabled_ml_models_size() const {
  return _internal_enabled_ml_models_size();
}
inline void SystemConfiguration::clear_enabled_ml_models() {
  _impl_.enabled_ml_models_.Clear();
}
inline std::string* SystemConfiguration::add_enabled_ml_models() {
  std::string* _s = _internal_add_enabled_ml_models();
  // @@protoc_insertion_point(field_add_mutable:protobuf.SystemConfiguration.enabled_ml_models)
  return _s;
}
inline const std::string& SystemConfiguration::_internal_enabled_ml_models(int index) const {
  return _impl_.enabled_ml_models_.Get(index);
}
inline const std::string& SystemConfiguration::enabled_ml_models(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.enabled_ml_models)
  return _internal_enabled_ml_models(index);
}
inline std::string* SystemConfiguration::mutable_enabled_ml_models(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.enabled_ml_models)
  return _impl_.enabled_ml_models_.Mutable(index);
}
inline void SystemConfiguration::set_enabled_ml_models(int index, const std::string& value) {
  _impl_.enabled_ml_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::set_enabled_ml_models(int index, std::string&& value) {
  _impl_.enabled_ml_models_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::set_enabled_ml_models(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.enabled_ml_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::set_enabled_ml_models(int index, const char* value, size_t size) {
  _impl_.enabled_ml_models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.enabled_ml_models)
}
inline std::string* SystemConfiguration::_internal_add_enabled_ml_models() {
  return _impl_.enabled_ml_models_.Add();
}
inline void SystemConfiguration::add_enabled_ml_models(const std::string& value) {
  _impl_.enabled_ml_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::add_enabled_ml_models(std::string&& value) {
  _impl_.enabled_ml_models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::add_enabled_ml_models(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.enabled_ml_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::add_enabled_ml_models(const char* value, size_t size) {
  _impl_.enabled_ml_models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.SystemConfiguration.enabled_ml_models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SystemConfiguration::enabled_ml_models() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.enabled_ml_models)
  return _impl_.enabled_ml_models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SystemConfiguration::mutable_enabled_ml_models() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.enabled_ml_models)
  return &_impl_.enabled_ml_models_;
}

// map<string, double> threat_score_thresholds = 2;
inline int SystemConfiguration::_internal_threat_score_thresholds_size() const {
  return _impl_.threat_score_thresholds_.size();
}
inline int SystemConfiguration::threat_score_thresholds_size() const {
  return _internal_threat_score_thresholds_size();
}
inline void SystemConfiguration::clear_threat_score_thresholds() {
  _impl_.threat_score_thresholds_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SystemConfiguration::_internal_threat_score_thresholds() const {
  return _impl_.threat_score_thresholds_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
SystemConfiguration::threat_score_thresholds() const {
  // @@protoc_insertion_point(field_map:protobuf.SystemConfiguration.threat_score_thresholds)
  return _internal_threat_score_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SystemConfiguration::_internal_mutable_threat_score_thresholds() {
  return _impl_.threat_score_thresholds_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
SystemConfiguration::mutable_threat_score_thresholds() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.SystemConfiguration.threat_score_thresholds)
  return _internal_mutable_threat_score_thresholds();
}

// .google.protobuf.Duration time_window_size = 3;
inline bool SystemConfiguration::_internal_has_time_window_size() const {
  return this != internal_default_instance() && _impl_.time_window_size_ != nullptr;
}
inline bool SystemConfiguration::has_time_window_size() const {
  return _internal_has_time_window_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SystemConfiguration::_internal_time_window_size() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_window_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SystemConfiguration::time_window_size() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.time_window_size)
  return _internal_time_window_size();
}
inline void SystemConfiguration::unsafe_arena_set_allocated_time_window_size(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_window_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_window_size_);
  }
  _impl_.time_window_size_ = time_window_size;
  if (time_window_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.SystemConfiguration.time_window_size)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SystemConfiguration::release_time_window_size() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_window_size_;
  _impl_.time_window_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SystemConfiguration::unsafe_arena_release_time_window_size() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.time_window_size)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_window_size_;
  _impl_.time_window_size_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SystemConfiguration::_internal_mutable_time_window_size() {
  
  if (_impl_.time_window_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_window_size_ = p;
  }
  return _impl_.time_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SystemConfiguration::mutable_time_window_size() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_window_size();
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.time_window_size)
  return _msg;
}
inline void SystemConfiguration::set_allocated_time_window_size(::PROTOBUF_NAMESPACE_ID::Duration* time_window_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_window_size_);
  }
  if (time_window_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_window_size));
    if (message_arena != submessage_arena) {
      time_window_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window_size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_window_size_ = time_window_size;
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.time_window_size)
}

// uint32 max_events_per_window = 4;
inline void SystemConfiguration::clear_max_events_per_window() {
  _impl_.max_events_per_window_ = 0u;
}
inline uint32_t SystemConfiguration::_internal_max_events_per_window() const {
  return _impl_.max_events_per_window_;
}
inline uint32_t SystemConfiguration::max_events_per_window() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.max_events_per_window)
  return _internal_max_events_per_window();
}
inline void SystemConfiguration::_internal_set_max_events_per_window(uint32_t value) {
  
  _impl_.max_events_per_window_ = value;
}
inline void SystemConfiguration::set_max_events_per_window(uint32_t value) {
  _internal_set_max_events_per_window(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.max_events_per_window)
}

// repeated .protobuf.DistributedNode cluster_nodes = 5;
inline int SystemConfiguration::_internal_cluster_nodes_size() const {
  return _impl_.cluster_nodes_.size();
}
inline int SystemConfiguration::cluster_nodes_size() const {
  return _internal_cluster_nodes_size();
}
inline void SystemConfiguration::clear_cluster_nodes() {
  _impl_.cluster_nodes_.Clear();
}
inline ::protobuf::DistributedNode* SystemConfiguration::mutable_cluster_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.cluster_nodes)
  return _impl_.cluster_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::DistributedNode >*
SystemConfiguration::mutable_cluster_nodes() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.cluster_nodes)
  return &_impl_.cluster_nodes_;
}
inline const ::protobuf::DistributedNode& SystemConfiguration::_internal_cluster_nodes(int index) const {
  return _impl_.cluster_nodes_.Get(index);
}
inline const ::protobuf::DistributedNode& SystemConfiguration::cluster_nodes(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.cluster_nodes)
  return _internal_cluster_nodes(index);
}
inline ::protobuf::DistributedNode* SystemConfiguration::_internal_add_cluster_nodes() {
  return _impl_.cluster_nodes_.Add();
}
inline ::protobuf::DistributedNode* SystemConfiguration::add_cluster_nodes() {
  ::protobuf::DistributedNode* _add = _internal_add_cluster_nodes();
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.cluster_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::DistributedNode >&
SystemConfiguration::cluster_nodes() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.cluster_nodes)
  return _impl_.cluster_nodes_;
}

// map<string, string> node_role_assignments = 6;
inline int SystemConfiguration::_internal_node_role_assignments_size() const {
  return _impl_.node_role_assignments_.size();
}
inline int SystemConfiguration::node_role_assignments_size() const {
  return _internal_node_role_assignments_size();
}
inline void SystemConfiguration::clear_node_role_assignments() {
  _impl_.node_role_assignments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SystemConfiguration::_internal_node_role_assignments() const {
  return _impl_.node_role_assignments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SystemConfiguration::node_role_assignments() const {
  // @@protoc_insertion_point(field_map:protobuf.SystemConfiguration.node_role_assignments)
  return _internal_node_role_assignments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SystemConfiguration::_internal_mutable_node_role_assignments() {
  return _impl_.node_role_assignments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SystemConfiguration::mutable_node_role_assignments() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.SystemConfiguration.node_role_assignments)
  return _internal_mutable_node_role_assignments();
}

// bool encryption_enabled = 7;
inline void SystemConfiguration::clear_encryption_enabled() {
  _impl_.encryption_enabled_ = false;
}
inline bool SystemConfiguration::_internal_encryption_enabled() const {
  return _impl_.encryption_enabled_;
}
inline bool SystemConfiguration::encryption_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.encryption_enabled)
  return _internal_encryption_enabled();
}
inline void SystemConfiguration::_internal_set_encryption_enabled(bool value) {
  
  _impl_.encryption_enabled_ = value;
}
inline void SystemConfiguration::set_encryption_enabled(bool value) {
  _internal_set_encryption_enabled(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.encryption_enabled)
}

// bool compression_enabled = 8;
inline void SystemConfiguration::clear_compression_enabled() {
  _impl_.compression_enabled_ = false;
}
inline bool SystemConfiguration::_internal_compression_enabled() const {
  return _impl_.compression_enabled_;
}
inline bool SystemConfiguration::compression_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.compression_enabled)
  return _internal_compression_enabled();
}
inline void SystemConfiguration::_internal_set_compression_enabled(bool value) {
  
  _impl_.compression_enabled_ = value;
}
inline void SystemConfiguration::set_compression_enabled(bool value) {
  _internal_set_compression_enabled(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.compression_enabled)
}

// string encryption_algorithm = 9;
inline void SystemConfiguration::clear_encryption_algorithm() {
  _impl_.encryption_algorithm_.ClearToEmpty();
}
inline const std::string& SystemConfiguration::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.encryption_algorithm)
  return _internal_encryption_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemConfiguration::set_encryption_algorithm(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encryption_algorithm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.encryption_algorithm)
}
inline std::string* SystemConfiguration::mutable_encryption_algorithm() {
  std::string* _s = _internal_mutable_encryption_algorithm();
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.encryption_algorithm)
  return _s;
}
inline const std::string& SystemConfiguration::_internal_encryption_algorithm() const {
  return _impl_.encryption_algorithm_.Get();
}
inline void SystemConfiguration::_internal_set_encryption_algorithm(const std::string& value) {
  
  _impl_.encryption_algorithm_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemConfiguration::_internal_mutable_encryption_algorithm() {
  
  return _impl_.encryption_algorithm_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemConfiguration::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.encryption_algorithm)
  return _impl_.encryption_algorithm_.Release();
}
inline void SystemConfiguration::set_allocated_encryption_algorithm(std::string* encryption_algorithm) {
  if (encryption_algorithm != nullptr) {
    
  } else {
    
  }
  _impl_.encryption_algorithm_.SetAllocated(encryption_algorithm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encryption_algorithm_.IsDefault()) {
    _impl_.encryption_algorithm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.encryption_algorithm)
}

// bool rag_analysis_enabled = 10;
inline void SystemConfiguration::clear_rag_analysis_enabled() {
  _impl_.rag_analysis_enabled_ = false;
}
inline bool SystemConfiguration::_internal_rag_analysis_enabled() const {
  return _impl_.rag_analysis_enabled_;
}
inline bool SystemConfiguration::rag_analysis_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.rag_analysis_enabled)
  return _internal_rag_analysis_enabled();
}
inline void SystemConfiguration::_internal_set_rag_analysis_enabled(bool value) {
  
  _impl_.rag_analysis_enabled_ = value;
}
inline void SystemConfiguration::set_rag_analysis_enabled(bool value) {
  _internal_set_rag_analysis_enabled(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.rag_analysis_enabled)
}

// string rag_model_endpoint = 11;
inline void SystemConfiguration::clear_rag_model_endpoint() {
  _impl_.rag_model_endpoint_.ClearToEmpty();
}
inline const std::string& SystemConfiguration::rag_model_endpoint() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.rag_model_endpoint)
  return _internal_rag_model_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemConfiguration::set_rag_model_endpoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rag_model_endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.rag_model_endpoint)
}
inline std::string* SystemConfiguration::mutable_rag_model_endpoint() {
  std::string* _s = _internal_mutable_rag_model_endpoint();
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.rag_model_endpoint)
  return _s;
}
inline const std::string& SystemConfiguration::_internal_rag_model_endpoint() const {
  return _impl_.rag_model_endpoint_.Get();
}
inline void SystemConfiguration::_internal_set_rag_model_endpoint(const std::string& value) {
  
  _impl_.rag_model_endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemConfiguration::_internal_mutable_rag_model_endpoint() {
  
  return _impl_.rag_model_endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemConfiguration::release_rag_model_endpoint() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.rag_model_endpoint)
  return _impl_.rag_model_endpoint_.Release();
}
inline void SystemConfiguration::set_allocated_rag_model_endpoint(std::string* rag_model_endpoint) {
  if (rag_model_endpoint != nullptr) {
    
  } else {
    
  }
  _impl_.rag_model_endpoint_.SetAllocated(rag_model_endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rag_model_endpoint_.IsDefault()) {
    _impl_.rag_model_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.rag_model_endpoint)
}

// repeated string knowledge_base_sources = 12;
inline int SystemConfiguration::_internal_knowledge_base_sources_size() const {
  return _impl_.knowledge_base_sources_.size();
}
inline int SystemConfiguration::knowledge_base_sources_size() const {
  return _internal_knowledge_base_sources_size();
}
inline void SystemConfiguration::clear_knowledge_base_sources() {
  _impl_.knowledge_base_sources_.Clear();
}
inline std::string* SystemConfiguration::add_knowledge_base_sources() {
  std::string* _s = _internal_add_knowledge_base_sources();
  // @@protoc_insertion_point(field_add_mutable:protobuf.SystemConfiguration.knowledge_base_sources)
  return _s;
}
inline const std::string& SystemConfiguration::_internal_knowledge_base_sources(int index) const {
  return _impl_.knowledge_base_sources_.Get(index);
}
inline const std::string& SystemConfiguration::knowledge_base_sources(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.knowledge_base_sources)
  return _internal_knowledge_base_sources(index);
}
inline std::string* SystemConfiguration::mutable_knowledge_base_sources(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.knowledge_base_sources)
  return _impl_.knowledge_base_sources_.Mutable(index);
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, const std::string& value) {
  _impl_.knowledge_base_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, std::string&& value) {
  _impl_.knowledge_base_sources_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.knowledge_base_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, const char* value, size_t size) {
  _impl_.knowledge_base_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline std::string* SystemConfiguration::_internal_add_knowledge_base_sources() {
  return _impl_.knowledge_base_sources_.Add();
}
inline void SystemConfiguration::add_knowledge_base_sources(const std::string& value) {
  _impl_.knowledge_base_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::add_knowledge_base_sources(std::string&& value) {
  _impl_.knowledge_base_sources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::add_knowledge_base_sources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.knowledge_base_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::add_knowledge_base_sources(const char* value, size_t size) {
  _impl_.knowledge_base_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SystemConfiguration::knowledge_base_sources() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.knowledge_base_sources)
  return _impl_.knowledge_base_sources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SystemConfiguration::mutable_knowledge_base_sources() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.knowledge_base_sources)
  return &_impl_.knowledge_base_sources_;
}

// -------------------------------------------------------------------

// RansomwareFeatures

// float dns_query_entropy = 1;
inline void RansomwareFeatures::clear_dns_query_entropy() {
  _impl_.dns_query_entropy_ = 0;
}
inline float RansomwareFeatures::_internal_dns_query_entropy() const {
  return _impl_.dns_query_entropy_;
}
inline float RansomwareFeatures::dns_query_entropy() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.dns_query_entropy)
  return _internal_dns_query_entropy();
}
inline void RansomwareFeatures::_internal_set_dns_query_entropy(float value) {
  
  _impl_.dns_query_entropy_ = value;
}
inline void RansomwareFeatures::set_dns_query_entropy(float value) {
  _internal_set_dns_query_entropy(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.dns_query_entropy)
}

// int32 new_external_ips_30s = 2;
inline void RansomwareFeatures::clear_new_external_ips_30s() {
  _impl_.new_external_ips_30s_ = 0;
}
inline int32_t RansomwareFeatures::_internal_new_external_ips_30s() const {
  return _impl_.new_external_ips_30s_;
}
inline int32_t RansomwareFeatures::new_external_ips_30s() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.new_external_ips_30s)
  return _internal_new_external_ips_30s();
}
inline void RansomwareFeatures::_internal_set_new_external_ips_30s(int32_t value) {
  
  _impl_.new_external_ips_30s_ = value;
}
inline void RansomwareFeatures::set_new_external_ips_30s(int32_t value) {
  _internal_set_new_external_ips_30s(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.new_external_ips_30s)
}

// float dns_query_rate_per_min = 3;
inline void RansomwareFeatures::clear_dns_query_rate_per_min() {
  _impl_.dns_query_rate_per_min_ = 0;
}
inline float RansomwareFeatures::_internal_dns_query_rate_per_min() const {
  return _impl_.dns_query_rate_per_min_;
}
inline float RansomwareFeatures::dns_query_rate_per_min() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.dns_query_rate_per_min)
  return _internal_dns_query_rate_per_min();
}
inline void RansomwareFeatures::_internal_set_dns_query_rate_per_min(float value) {
  
  _impl_.dns_query_rate_per_min_ = value;
}
inline void RansomwareFeatures::set_dns_query_rate_per_min(float value) {
  _internal_set_dns_query_rate_per_min(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.dns_query_rate_per_min)
}

// float failed_dns_queries_ratio = 4;
inline void RansomwareFeatures::clear_failed_dns_queries_ratio() {
  _impl_.failed_dns_queries_ratio_ = 0;
}
inline float RansomwareFeatures::_internal_failed_dns_queries_ratio() const {
  return _impl_.failed_dns_queries_ratio_;
}
inline float RansomwareFeatures::failed_dns_queries_ratio() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.failed_dns_queries_ratio)
  return _internal_failed_dns_queries_ratio();
}
inline void RansomwareFeatures::_internal_set_failed_dns_queries_ratio(float value) {
  
  _impl_.failed_dns_queries_ratio_ = value;
}
inline void RansomwareFeatures::set_failed_dns_queries_ratio(float value) {
  _internal_set_failed_dns_queries_ratio(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.failed_dns_queries_ratio)
}

// int32 tls_self_signed_cert_count = 5;
inline void RansomwareFeatures::clear_tls_self_signed_cert_count() {
  _impl_.tls_self_signed_cert_count_ = 0;
}
inline int32_t RansomwareFeatures::_internal_tls_self_signed_cert_count() const {
  return _impl_.tls_self_signed_cert_count_;
}
inline int32_t RansomwareFeatures::tls_self_signed_cert_count() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.tls_self_signed_cert_count)
  return _internal_tls_self_signed_cert_count();
}
inline void RansomwareFeatures::_internal_set_tls_self_signed_cert_count(int32_t value) {
  
  _impl_.tls_self_signed_cert_count_ = value;
}
inline void RansomwareFeatures::set_tls_self_signed_cert_count(int32_t value) {
  _internal_set_tls_self_signed_cert_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.tls_self_signed_cert_count)
}

// int32 non_standard_port_http_count = 6;
inline void RansomwareFeatures::clear_non_standard_port_http_count() {
  _impl_.non_standard_port_http_count_ = 0;
}
inline int32_t RansomwareFeatures::_internal_non_standard_port_http_count() const {
  return _impl_.non_standard_port_http_count_;
}
inline int32_t RansomwareFeatures::non_standard_port_http_count() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.non_standard_port_http_count)
  return _internal_non_standard_port_http_count();
}
inline void RansomwareFeatures::_internal_set_non_standard_port_http_count(int32_t value) {
  
  _impl_.non_standard_port_http_count_ = value;
}
inline void RansomwareFeatures::set_non_standard_port_http_count(int32_t value) {
  _internal_set_non_standard_port_http_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.non_standard_port_http_count)
}

// int32 smb_connection_diversity = 7;
inline void RansomwareFeatures::clear_smb_connection_diversity() {
  _impl_.smb_connection_diversity_ = 0;
}
inline int32_t RansomwareFeatures::_internal_smb_connection_diversity() const {
  return _impl_.smb_connection_diversity_;
}
inline int32_t RansomwareFeatures::smb_connection_diversity() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.smb_connection_diversity)
  return _internal_smb_connection_diversity();
}
inline void RansomwareFeatures::_internal_set_smb_connection_diversity(int32_t value) {
  
  _impl_.smb_connection_diversity_ = value;
}
inline void RansomwareFeatures::set_smb_connection_diversity(int32_t value) {
  _internal_set_smb_connection_diversity(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.smb_connection_diversity)
}

// int32 rdp_failed_auth_count = 8;
inline void RansomwareFeatures::clear_rdp_failed_auth_count() {
  _impl_.rdp_failed_auth_count_ = 0;
}
inline int32_t RansomwareFeatures::_internal_rdp_failed_auth_count() const {
  return _impl_.rdp_failed_auth_count_;
}
inline int32_t RansomwareFeatures::rdp_failed_auth_count() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.rdp_failed_auth_count)
  return _internal_rdp_failed_auth_count();
}
inline void RansomwareFeatures::_internal_set_rdp_failed_auth_count(int32_t value) {
  
  _impl_.rdp_failed_auth_count_ = value;
}
inline void RansomwareFeatures::set_rdp_failed_auth_count(int32_t value) {
  _internal_set_rdp_failed_auth_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.rdp_failed_auth_count)
}

// int32 new_internal_connections_30s = 9;
inline void RansomwareFeatures::clear_new_internal_connections_30s() {
  _impl_.new_internal_connections_30s_ = 0;
}
inline int32_t RansomwareFeatures::_internal_new_internal_connections_30s() const {
  return _impl_.new_internal_connections_30s_;
}
inline int32_t RansomwareFeatures::new_internal_connections_30s() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.new_internal_connections_30s)
  return _internal_new_internal_connections_30s();
}
inline void RansomwareFeatures::_internal_set_new_internal_connections_30s(int32_t value) {
  
  _impl_.new_internal_connections_30s_ = value;
}
inline void RansomwareFeatures::set_new_internal_connections_30s(int32_t value) {
  _internal_set_new_internal_connections_30s(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.new_internal_connections_30s)
}

// float port_scan_pattern_score = 10;
inline void RansomwareFeatures::clear_port_scan_pattern_score() {
  _impl_.port_scan_pattern_score_ = 0;
}
inline float RansomwareFeatures::_internal_port_scan_pattern_score() const {
  return _impl_.port_scan_pattern_score_;
}
inline float RansomwareFeatures::port_scan_pattern_score() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.port_scan_pattern_score)
  return _internal_port_scan_pattern_score();
}
inline void RansomwareFeatures::_internal_set_port_scan_pattern_score(float value) {
  
  _impl_.port_scan_pattern_score_ = value;
}
inline void RansomwareFeatures::set_port_scan_pattern_score(float value) {
  _internal_set_port_scan_pattern_score(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.port_scan_pattern_score)
}

// float upload_download_ratio_30s = 11;
inline void RansomwareFeatures::clear_upload_download_ratio_30s() {
  _impl_.upload_download_ratio_30s_ = 0;
}
inline float RansomwareFeatures::_internal_upload_download_ratio_30s() const {
  return _impl_.upload_download_ratio_30s_;
}
inline float RansomwareFeatures::upload_download_ratio_30s() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.upload_download_ratio_30s)
  return _internal_upload_download_ratio_30s();
}
inline void RansomwareFeatures::_internal_set_upload_download_ratio_30s(float value) {
  
  _impl_.upload_download_ratio_30s_ = value;
}
inline void RansomwareFeatures::set_upload_download_ratio_30s(float value) {
  _internal_set_upload_download_ratio_30s(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.upload_download_ratio_30s)
}

// int32 burst_connections_count = 12;
inline void RansomwareFeatures::clear_burst_connections_count() {
  _impl_.burst_connections_count_ = 0;
}
inline int32_t RansomwareFeatures::_internal_burst_connections_count() const {
  return _impl_.burst_connections_count_;
}
inline int32_t RansomwareFeatures::burst_connections_count() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.burst_connections_count)
  return _internal_burst_connections_count();
}
inline void RansomwareFeatures::_internal_set_burst_connections_count(int32_t value) {
  
  _impl_.burst_connections_count_ = value;
}
inline void RansomwareFeatures::set_burst_connections_count(int32_t value) {
  _internal_set_burst_connections_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.burst_connections_count)
}

// int32 unique_destinations_30s = 13;
inline void RansomwareFeatures::clear_unique_destinations_30s() {
  _impl_.unique_destinations_30s_ = 0;
}
inline int32_t RansomwareFeatures::_internal_unique_destinations_30s() const {
  return _impl_.unique_destinations_30s_;
}
inline int32_t RansomwareFeatures::unique_destinations_30s() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.unique_destinations_30s)
  return _internal_unique_destinations_30s();
}
inline void RansomwareFeatures::_internal_set_unique_destinations_30s(int32_t value) {
  
  _impl_.unique_destinations_30s_ = value;
}
inline void RansomwareFeatures::set_unique_destinations_30s(int32_t value) {
  _internal_set_unique_destinations_30s(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.unique_destinations_30s)
}

// int32 large_upload_sessions_count = 14;
inline void RansomwareFeatures::clear_large_upload_sessions_count() {
  _impl_.large_upload_sessions_count_ = 0;
}
inline int32_t RansomwareFeatures::_internal_large_upload_sessions_count() const {
  return _impl_.large_upload_sessions_count_;
}
inline int32_t RansomwareFeatures::large_upload_sessions_count() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.large_upload_sessions_count)
  return _internal_large_upload_sessions_count();
}
inline void RansomwareFeatures::_internal_set_large_upload_sessions_count(int32_t value) {
  
  _impl_.large_upload_sessions_count_ = value;
}
inline void RansomwareFeatures::set_large_upload_sessions_count(int32_t value) {
  _internal_set_large_upload_sessions_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.large_upload_sessions_count)
}

// bool nocturnal_activity_flag = 15;
inline void RansomwareFeatures::clear_nocturnal_activity_flag() {
  _impl_.nocturnal_activity_flag_ = false;
}
inline bool RansomwareFeatures::_internal_nocturnal_activity_flag() const {
  return _impl_.nocturnal_activity_flag_;
}
inline bool RansomwareFeatures::nocturnal_activity_flag() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.nocturnal_activity_flag)
  return _internal_nocturnal_activity_flag();
}
inline void RansomwareFeatures::_internal_set_nocturnal_activity_flag(bool value) {
  
  _impl_.nocturnal_activity_flag_ = value;
}
inline void RansomwareFeatures::set_nocturnal_activity_flag(bool value) {
  _internal_set_nocturnal_activity_flag(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.nocturnal_activity_flag)
}

// float connection_rate_stddev = 16;
inline void RansomwareFeatures::clear_connection_rate_stddev() {
  _impl_.connection_rate_stddev_ = 0;
}
inline float RansomwareFeatures::_internal_connection_rate_stddev() const {
  return _impl_.connection_rate_stddev_;
}
inline float RansomwareFeatures::connection_rate_stddev() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.connection_rate_stddev)
  return _internal_connection_rate_stddev();
}
inline void RansomwareFeatures::_internal_set_connection_rate_stddev(float value) {
  
  _impl_.connection_rate_stddev_ = value;
}
inline void RansomwareFeatures::set_connection_rate_stddev(float value) {
  _internal_set_connection_rate_stddev(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.connection_rate_stddev)
}

// float protocol_diversity_score = 17;
inline void RansomwareFeatures::clear_protocol_diversity_score() {
  _impl_.protocol_diversity_score_ = 0;
}
inline float RansomwareFeatures::_internal_protocol_diversity_score() const {
  return _impl_.protocol_diversity_score_;
}
inline float RansomwareFeatures::protocol_diversity_score() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.protocol_diversity_score)
  return _internal_protocol_diversity_score();
}
inline void RansomwareFeatures::_internal_set_protocol_diversity_score(float value) {
  
  _impl_.protocol_diversity_score_ = value;
}
inline void RansomwareFeatures::set_protocol_diversity_score(float value) {
  _internal_set_protocol_diversity_score(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.protocol_diversity_score)
}

// float avg_flow_duration_seconds = 18;
inline void RansomwareFeatures::clear_avg_flow_duration_seconds() {
  _impl_.avg_flow_duration_seconds_ = 0;
}
inline float RansomwareFeatures::_internal_avg_flow_duration_seconds() const {
  return _impl_.avg_flow_duration_seconds_;
}
inline float RansomwareFeatures::avg_flow_duration_seconds() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.avg_flow_duration_seconds)
  return _internal_avg_flow_duration_seconds();
}
inline void RansomwareFeatures::_internal_set_avg_flow_duration_seconds(float value) {
  
  _impl_.avg_flow_duration_seconds_ = value;
}
inline void RansomwareFeatures::set_avg_flow_duration_seconds(float value) {
  _internal_set_avg_flow_duration_seconds(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.avg_flow_duration_seconds)
}

// float tcp_rst_ratio = 19;
inline void RansomwareFeatures::clear_tcp_rst_ratio() {
  _impl_.tcp_rst_ratio_ = 0;
}
inline float RansomwareFeatures::_internal_tcp_rst_ratio() const {
  return _impl_.tcp_rst_ratio_;
}
inline float RansomwareFeatures::tcp_rst_ratio() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.tcp_rst_ratio)
  return _internal_tcp_rst_ratio();
}
inline void RansomwareFeatures::_internal_set_tcp_rst_ratio(float value) {
  
  _impl_.tcp_rst_ratio_ = value;
}
inline void RansomwareFeatures::set_tcp_rst_ratio(float value) {
  _internal_set_tcp_rst_ratio(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.tcp_rst_ratio)
}

// float syn_without_ack_ratio = 20;
inline void RansomwareFeatures::clear_syn_without_ack_ratio() {
  _impl_.syn_without_ack_ratio_ = 0;
}
inline float RansomwareFeatures::_internal_syn_without_ack_ratio() const {
  return _impl_.syn_without_ack_ratio_;
}
inline float RansomwareFeatures::syn_without_ack_ratio() const {
  // @@protoc_insertion_point(field_get:protobuf.RansomwareFeatures.syn_without_ack_ratio)
  return _internal_syn_without_ack_ratio();
}
inline void RansomwareFeatures::_internal_set_syn_without_ack_ratio(float value) {
  
  _impl_.syn_without_ack_ratio_ = value;
}
inline void RansomwareFeatures::set_syn_without_ack_ratio(float value) {
  _internal_set_syn_without_ack_ratio(value);
  // @@protoc_insertion_point(field_set:protobuf.RansomwareFeatures.syn_without_ack_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf::GeoLocationInfo_ThreatLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::GeoLocationInfo_ThreatLevel>() {
  return ::protobuf::GeoLocationInfo_ThreatLevel_descriptor();
}
template <> struct is_proto_enum< ::protobuf::TimeWindow_WindowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::TimeWindow_WindowType>() {
  return ::protobuf::TimeWindow_WindowType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::ModelPrediction_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::ModelPrediction_ModelType>() {
  return ::protobuf::ModelPrediction_ModelType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::DistributedNode_NodeRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DistributedNode_NodeRole>() {
  return ::protobuf::DistributedNode_NodeRole_descriptor();
}
template <> struct is_proto_enum< ::protobuf::DistributedNode_NodeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DistributedNode_NodeStatus>() {
  return ::protobuf::DistributedNode_NodeStatus_descriptor();
}
template <> struct is_proto_enum< ::protobuf::HumanFeedback_FeedbackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::HumanFeedback_FeedbackType>() {
  return ::protobuf::HumanFeedback_FeedbackType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::HumanInTheLoopReview_ReviewPriority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::HumanInTheLoopReview_ReviewPriority>() {
  return ::protobuf::HumanInTheLoopReview_ReviewPriority_descriptor();
}
template <> struct is_proto_enum< ::protobuf::EventBatch_ProcessingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::EventBatch_ProcessingMode>() {
  return ::protobuf::EventBatch_ProcessingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5fsecurity_2eproto
