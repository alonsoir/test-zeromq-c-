// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/network_security_v31.proto

#ifndef PROTOBUF_INCLUDED_protobuf_2fnetwork_5fsecurity_2eproto
#define PROTOBUF_INCLUDED_protobuf_2fnetwork_5fsecurity_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_2fnetwork_5fsecurity_2eproto 

namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protobuf_2fnetwork_5fsecurity_2eproto
namespace protobuf {
class DistributedNode;
class DistributedNodeDefaultTypeInternal;
extern DistributedNodeDefaultTypeInternal _DistributedNode_default_instance_;
class DistributedNode_NodeCapabilitiesEntry_DoNotUse;
class DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal;
extern DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal _DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_;
class EventBatch;
class EventBatchDefaultTypeInternal;
extern EventBatchDefaultTypeInternal _EventBatch_default_instance_;
class FlowAggregation;
class FlowAggregationDefaultTypeInternal;
extern FlowAggregationDefaultTypeInternal _FlowAggregation_default_instance_;
class FlowAggregation_CountryDistributionEntry_DoNotUse;
class FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_PortDistributionEntry_DoNotUse;
class FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_;
class FlowAggregation_ProtocolDistributionEntry_DoNotUse;
class FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal;
extern FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_;
class GeoEnrichment;
class GeoEnrichmentDefaultTypeInternal;
extern GeoEnrichmentDefaultTypeInternal _GeoEnrichment_default_instance_;
class GeoLocationInfo;
class GeoLocationInfoDefaultTypeInternal;
extern GeoLocationInfoDefaultTypeInternal _GeoLocationInfo_default_instance_;
class HumanFeedback;
class HumanFeedbackDefaultTypeInternal;
extern HumanFeedbackDefaultTypeInternal _HumanFeedback_default_instance_;
class HumanInTheLoopReview;
class HumanInTheLoopReviewDefaultTypeInternal;
extern HumanInTheLoopReviewDefaultTypeInternal _HumanInTheLoopReview_default_instance_;
class ModelPrediction;
class ModelPredictionDefaultTypeInternal;
extern ModelPredictionDefaultTypeInternal _ModelPrediction_default_instance_;
class NetworkFeatures;
class NetworkFeaturesDefaultTypeInternal;
extern NetworkFeaturesDefaultTypeInternal _NetworkFeatures_default_instance_;
class NetworkFeatures_CustomFeaturesEntry_DoNotUse;
class NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal;
extern NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_;
class NetworkFeatures_FeatureMetadataEntry_DoNotUse;
class NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_;
class NetworkSecurityEvent;
class NetworkSecurityEventDefaultTypeInternal;
extern NetworkSecurityEventDefaultTypeInternal _NetworkSecurityEvent_default_instance_;
class NetworkSecurityEvent_CustomMetadataEntry_DoNotUse;
class NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal _NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_;
class PipelineTracking;
class PipelineTrackingDefaultTypeInternal;
extern PipelineTrackingDefaultTypeInternal _PipelineTracking_default_instance_;
class PipelineTracking_ComponentMetadataEntry_DoNotUse;
class PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal;
extern PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal _PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_;
class RAGAnalysis;
class RAGAnalysisDefaultTypeInternal;
extern RAGAnalysisDefaultTypeInternal _RAGAnalysis_default_instance_;
class SystemConfiguration;
class SystemConfigurationDefaultTypeInternal;
extern SystemConfigurationDefaultTypeInternal _SystemConfiguration_default_instance_;
class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse;
class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_;
class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse;
class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal;
extern SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_;
class TimeWindow;
class TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
class TricapaMLAnalysis;
class TricapaMLAnalysisDefaultTypeInternal;
extern TricapaMLAnalysisDefaultTypeInternal _TricapaMLAnalysis_default_instance_;
class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse;
class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal;
extern TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal _TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_;
}  // namespace protobuf
namespace google {
namespace protobuf {
template<> ::protobuf::DistributedNode* Arena::CreateMaybeMessage<::protobuf::DistributedNode>(Arena*);
template<> ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse>(Arena*);
template<> ::protobuf::EventBatch* Arena::CreateMaybeMessage<::protobuf::EventBatch>(Arena*);
template<> ::protobuf::FlowAggregation* Arena::CreateMaybeMessage<::protobuf::FlowAggregation>(Arena*);
template<> ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse>(Arena*);
template<> ::protobuf::GeoEnrichment* Arena::CreateMaybeMessage<::protobuf::GeoEnrichment>(Arena*);
template<> ::protobuf::GeoLocationInfo* Arena::CreateMaybeMessage<::protobuf::GeoLocationInfo>(Arena*);
template<> ::protobuf::HumanFeedback* Arena::CreateMaybeMessage<::protobuf::HumanFeedback>(Arena*);
template<> ::protobuf::HumanInTheLoopReview* Arena::CreateMaybeMessage<::protobuf::HumanInTheLoopReview>(Arena*);
template<> ::protobuf::ModelPrediction* Arena::CreateMaybeMessage<::protobuf::ModelPrediction>(Arena*);
template<> ::protobuf::NetworkFeatures* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures>(Arena*);
template<> ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse>(Arena*);
template<> ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::NetworkSecurityEvent* Arena::CreateMaybeMessage<::protobuf::NetworkSecurityEvent>(Arena*);
template<> ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::PipelineTracking* Arena::CreateMaybeMessage<::protobuf::PipelineTracking>(Arena*);
template<> ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse>(Arena*);
template<> ::protobuf::RAGAnalysis* Arena::CreateMaybeMessage<::protobuf::RAGAnalysis>(Arena*);
template<> ::protobuf::SystemConfiguration* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration>(Arena*);
template<> ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse>(Arena*);
template<> ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse>(Arena*);
template<> ::protobuf::TimeWindow* Arena::CreateMaybeMessage<::protobuf::TimeWindow>(Arena*);
template<> ::protobuf::TricapaMLAnalysis* Arena::CreateMaybeMessage<::protobuf::TricapaMLAnalysis>(Arena*);
template<> ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protobuf {

enum GeoLocationInfo_ThreatLevel {
  GeoLocationInfo_ThreatLevel_UNKNOWN = 0,
  GeoLocationInfo_ThreatLevel_LOW = 1,
  GeoLocationInfo_ThreatLevel_MEDIUM = 2,
  GeoLocationInfo_ThreatLevel_HIGH = 3,
  GeoLocationInfo_ThreatLevel_CRITICAL = 4,
  GeoLocationInfo_ThreatLevel_GeoLocationInfo_ThreatLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GeoLocationInfo_ThreatLevel_GeoLocationInfo_ThreatLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GeoLocationInfo_ThreatLevel_IsValid(int value);
const GeoLocationInfo_ThreatLevel GeoLocationInfo_ThreatLevel_ThreatLevel_MIN = GeoLocationInfo_ThreatLevel_UNKNOWN;
const GeoLocationInfo_ThreatLevel GeoLocationInfo_ThreatLevel_ThreatLevel_MAX = GeoLocationInfo_ThreatLevel_CRITICAL;
const int GeoLocationInfo_ThreatLevel_ThreatLevel_ARRAYSIZE = GeoLocationInfo_ThreatLevel_ThreatLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeoLocationInfo_ThreatLevel_descriptor();
inline const ::std::string& GeoLocationInfo_ThreatLevel_Name(GeoLocationInfo_ThreatLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeoLocationInfo_ThreatLevel_descriptor(), value);
}
inline bool GeoLocationInfo_ThreatLevel_Parse(
    const ::std::string& name, GeoLocationInfo_ThreatLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeoLocationInfo_ThreatLevel>(
    GeoLocationInfo_ThreatLevel_descriptor(), name, value);
}
enum TimeWindow_WindowType {
  TimeWindow_WindowType_SLIDING = 0,
  TimeWindow_WindowType_TUMBLING = 1,
  TimeWindow_WindowType_SESSION_BASED = 2,
  TimeWindow_WindowType_ADAPTIVE = 3,
  TimeWindow_WindowType_TimeWindow_WindowType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimeWindow_WindowType_TimeWindow_WindowType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimeWindow_WindowType_IsValid(int value);
const TimeWindow_WindowType TimeWindow_WindowType_WindowType_MIN = TimeWindow_WindowType_SLIDING;
const TimeWindow_WindowType TimeWindow_WindowType_WindowType_MAX = TimeWindow_WindowType_ADAPTIVE;
const int TimeWindow_WindowType_WindowType_ARRAYSIZE = TimeWindow_WindowType_WindowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeWindow_WindowType_descriptor();
inline const ::std::string& TimeWindow_WindowType_Name(TimeWindow_WindowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeWindow_WindowType_descriptor(), value);
}
inline bool TimeWindow_WindowType_Parse(
    const ::std::string& name, TimeWindow_WindowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeWindow_WindowType>(
    TimeWindow_WindowType_descriptor(), name, value);
}
enum ModelPrediction_ModelType {
  ModelPrediction_ModelType_RANDOM_FOREST_GENERAL = 0,
  ModelPrediction_ModelType_LIGHTGBM_DDOS = 1,
  ModelPrediction_ModelType_NEURAL_NETWORK_RANSOMWARE = 2,
  ModelPrediction_ModelType_ENSEMBLE_TRICAPA = 3,
  ModelPrediction_ModelType_INTERNAL_TRAFFIC_CLASSIFIER = 4,
  ModelPrediction_ModelType_TRANSFORMER_ADVANCED = 5,
  ModelPrediction_ModelType_ModelPrediction_ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ModelPrediction_ModelType_ModelPrediction_ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ModelPrediction_ModelType_IsValid(int value);
const ModelPrediction_ModelType ModelPrediction_ModelType_ModelType_MIN = ModelPrediction_ModelType_RANDOM_FOREST_GENERAL;
const ModelPrediction_ModelType ModelPrediction_ModelType_ModelType_MAX = ModelPrediction_ModelType_TRANSFORMER_ADVANCED;
const int ModelPrediction_ModelType_ModelType_ARRAYSIZE = ModelPrediction_ModelType_ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelPrediction_ModelType_descriptor();
inline const ::std::string& ModelPrediction_ModelType_Name(ModelPrediction_ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelPrediction_ModelType_descriptor(), value);
}
inline bool ModelPrediction_ModelType_Parse(
    const ::std::string& name, ModelPrediction_ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelPrediction_ModelType>(
    ModelPrediction_ModelType_descriptor(), name, value);
}
enum DistributedNode_NodeRole {
  DistributedNode_NodeRole_PACKET_SNIFFER = 0,
  DistributedNode_NodeRole_FEATURE_PROCESSOR = 1,
  DistributedNode_NodeRole_GEOIP_ENRICHER = 2,
  DistributedNode_NodeRole_ML_ANALYZER = 3,
  DistributedNode_NodeRole_THREAT_DETECTOR = 4,
  DistributedNode_NodeRole_FIREWALL_CONTROLLER = 5,
  DistributedNode_NodeRole_DATA_AGGREGATOR = 6,
  DistributedNode_NodeRole_DASHBOARD_VISUALIZER = 7,
  DistributedNode_NodeRole_CLUSTER_COORDINATOR = 8,
  DistributedNode_NodeRole_DistributedNode_NodeRole_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DistributedNode_NodeRole_DistributedNode_NodeRole_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DistributedNode_NodeRole_IsValid(int value);
const DistributedNode_NodeRole DistributedNode_NodeRole_NodeRole_MIN = DistributedNode_NodeRole_PACKET_SNIFFER;
const DistributedNode_NodeRole DistributedNode_NodeRole_NodeRole_MAX = DistributedNode_NodeRole_CLUSTER_COORDINATOR;
const int DistributedNode_NodeRole_NodeRole_ARRAYSIZE = DistributedNode_NodeRole_NodeRole_MAX + 1;

const ::google::protobuf::EnumDescriptor* DistributedNode_NodeRole_descriptor();
inline const ::std::string& DistributedNode_NodeRole_Name(DistributedNode_NodeRole value) {
  return ::google::protobuf::internal::NameOfEnum(
    DistributedNode_NodeRole_descriptor(), value);
}
inline bool DistributedNode_NodeRole_Parse(
    const ::std::string& name, DistributedNode_NodeRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DistributedNode_NodeRole>(
    DistributedNode_NodeRole_descriptor(), name, value);
}
enum DistributedNode_NodeStatus {
  DistributedNode_NodeStatus_ACTIVE = 0,
  DistributedNode_NodeStatus_STARTING = 1,
  DistributedNode_NodeStatus_STOPPING = 2,
  DistributedNode_NodeStatus_ERROR = 3,
  DistributedNode_NodeStatus_MAINTENANCE = 4,
  DistributedNode_NodeStatus_OVERLOADED = 5,
  DistributedNode_NodeStatus_DistributedNode_NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DistributedNode_NodeStatus_DistributedNode_NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DistributedNode_NodeStatus_IsValid(int value);
const DistributedNode_NodeStatus DistributedNode_NodeStatus_NodeStatus_MIN = DistributedNode_NodeStatus_ACTIVE;
const DistributedNode_NodeStatus DistributedNode_NodeStatus_NodeStatus_MAX = DistributedNode_NodeStatus_OVERLOADED;
const int DistributedNode_NodeStatus_NodeStatus_ARRAYSIZE = DistributedNode_NodeStatus_NodeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DistributedNode_NodeStatus_descriptor();
inline const ::std::string& DistributedNode_NodeStatus_Name(DistributedNode_NodeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DistributedNode_NodeStatus_descriptor(), value);
}
inline bool DistributedNode_NodeStatus_Parse(
    const ::std::string& name, DistributedNode_NodeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DistributedNode_NodeStatus>(
    DistributedNode_NodeStatus_descriptor(), name, value);
}
enum HumanFeedback_FeedbackType {
  HumanFeedback_FeedbackType_VALIDATION = 0,
  HumanFeedback_FeedbackType_CORRECTION = 1,
  HumanFeedback_FeedbackType_ENHANCEMENT = 2,
  HumanFeedback_FeedbackType_FALSE_POSITIVE_REPORT = 3,
  HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT = 4,
  HumanFeedback_FeedbackType_HumanFeedback_FeedbackType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HumanFeedback_FeedbackType_HumanFeedback_FeedbackType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HumanFeedback_FeedbackType_IsValid(int value);
const HumanFeedback_FeedbackType HumanFeedback_FeedbackType_FeedbackType_MIN = HumanFeedback_FeedbackType_VALIDATION;
const HumanFeedback_FeedbackType HumanFeedback_FeedbackType_FeedbackType_MAX = HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT;
const int HumanFeedback_FeedbackType_FeedbackType_ARRAYSIZE = HumanFeedback_FeedbackType_FeedbackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HumanFeedback_FeedbackType_descriptor();
inline const ::std::string& HumanFeedback_FeedbackType_Name(HumanFeedback_FeedbackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HumanFeedback_FeedbackType_descriptor(), value);
}
inline bool HumanFeedback_FeedbackType_Parse(
    const ::std::string& name, HumanFeedback_FeedbackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HumanFeedback_FeedbackType>(
    HumanFeedback_FeedbackType_descriptor(), name, value);
}
enum HumanInTheLoopReview_ReviewPriority {
  HumanInTheLoopReview_ReviewPriority_LOW = 0,
  HumanInTheLoopReview_ReviewPriority_MEDIUM = 1,
  HumanInTheLoopReview_ReviewPriority_HIGH = 2,
  HumanInTheLoopReview_ReviewPriority_CRITICAL = 3,
  HumanInTheLoopReview_ReviewPriority_EMERGENCY = 4,
  HumanInTheLoopReview_ReviewPriority_HumanInTheLoopReview_ReviewPriority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HumanInTheLoopReview_ReviewPriority_HumanInTheLoopReview_ReviewPriority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HumanInTheLoopReview_ReviewPriority_IsValid(int value);
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview_ReviewPriority_ReviewPriority_MIN = HumanInTheLoopReview_ReviewPriority_LOW;
const HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX = HumanInTheLoopReview_ReviewPriority_EMERGENCY;
const int HumanInTheLoopReview_ReviewPriority_ReviewPriority_ARRAYSIZE = HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX + 1;

const ::google::protobuf::EnumDescriptor* HumanInTheLoopReview_ReviewPriority_descriptor();
inline const ::std::string& HumanInTheLoopReview_ReviewPriority_Name(HumanInTheLoopReview_ReviewPriority value) {
  return ::google::protobuf::internal::NameOfEnum(
    HumanInTheLoopReview_ReviewPriority_descriptor(), value);
}
inline bool HumanInTheLoopReview_ReviewPriority_Parse(
    const ::std::string& name, HumanInTheLoopReview_ReviewPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HumanInTheLoopReview_ReviewPriority>(
    HumanInTheLoopReview_ReviewPriority_descriptor(), name, value);
}
enum EventBatch_ProcessingMode {
  EventBatch_ProcessingMode_REAL_TIME = 0,
  EventBatch_ProcessingMode_NEAR_REAL_TIME = 1,
  EventBatch_ProcessingMode_BATCH_PROCESSING = 2,
  EventBatch_ProcessingMode_HISTORICAL_ANALYSIS = 3,
  EventBatch_ProcessingMode_EventBatch_ProcessingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventBatch_ProcessingMode_EventBatch_ProcessingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventBatch_ProcessingMode_IsValid(int value);
const EventBatch_ProcessingMode EventBatch_ProcessingMode_ProcessingMode_MIN = EventBatch_ProcessingMode_REAL_TIME;
const EventBatch_ProcessingMode EventBatch_ProcessingMode_ProcessingMode_MAX = EventBatch_ProcessingMode_HISTORICAL_ANALYSIS;
const int EventBatch_ProcessingMode_ProcessingMode_ARRAYSIZE = EventBatch_ProcessingMode_ProcessingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventBatch_ProcessingMode_descriptor();
inline const ::std::string& EventBatch_ProcessingMode_Name(EventBatch_ProcessingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventBatch_ProcessingMode_descriptor(), value);
}
inline bool EventBatch_ProcessingMode_Parse(
    const ::std::string& name, EventBatch_ProcessingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventBatch_ProcessingMode>(
    EventBatch_ProcessingMode_descriptor(), name, value);
}
// ===================================================================

class NetworkFeatures_CustomFeaturesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NetworkFeatures_CustomFeaturesEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NetworkFeatures_CustomFeaturesEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  NetworkFeatures_CustomFeaturesEntry_DoNotUse();
  NetworkFeatures_CustomFeaturesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NetworkFeatures_CustomFeaturesEntry_DoNotUse& other);
  static const NetworkFeatures_CustomFeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkFeatures_CustomFeaturesEntry_DoNotUse*>(&_NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NetworkFeatures_FeatureMetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NetworkFeatures_FeatureMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NetworkFeatures_FeatureMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NetworkFeatures_FeatureMetadataEntry_DoNotUse();
  NetworkFeatures_FeatureMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NetworkFeatures_FeatureMetadataEntry_DoNotUse& other);
  static const NetworkFeatures_FeatureMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkFeatures_FeatureMetadataEntry_DoNotUse*>(&_NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NetworkFeatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.NetworkFeatures) */ {
 public:
  NetworkFeatures();
  virtual ~NetworkFeatures();

  NetworkFeatures(const NetworkFeatures& from);

  inline NetworkFeatures& operator=(const NetworkFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkFeatures(NetworkFeatures&& from) noexcept
    : NetworkFeatures() {
    *this = ::std::move(from);
  }

  inline NetworkFeatures& operator=(NetworkFeatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkFeatures* internal_default_instance() {
    return reinterpret_cast<const NetworkFeatures*>(
               &_NetworkFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NetworkFeatures* other);
  friend void swap(NetworkFeatures& a, NetworkFeatures& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkFeatures* New() const final {
    return CreateMaybeMessage<NetworkFeatures>(NULL);
  }

  NetworkFeatures* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkFeatures>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkFeatures& from);
  void MergeFrom(const NetworkFeatures& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkFeatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated double ddos_features = 100;
  int ddos_features_size() const;
  void clear_ddos_features();
  static const int kDdosFeaturesFieldNumber = 100;
  double ddos_features(int index) const;
  void set_ddos_features(int index, double value);
  void add_ddos_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      ddos_features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ddos_features();

  // repeated double ransomware_features = 101;
  int ransomware_features_size() const;
  void clear_ransomware_features();
  static const int kRansomwareFeaturesFieldNumber = 101;
  double ransomware_features(int index) const;
  void set_ransomware_features(int index, double value);
  void add_ransomware_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      ransomware_features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ransomware_features();

  // repeated double general_attack_features = 102;
  int general_attack_features_size() const;
  void clear_general_attack_features();
  static const int kGeneralAttackFeaturesFieldNumber = 102;
  double general_attack_features(int index) const;
  void set_general_attack_features(int index, double value);
  void add_general_attack_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      general_attack_features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_general_attack_features();

  // repeated double internal_traffic_features = 103;
  int internal_traffic_features_size() const;
  void clear_internal_traffic_features();
  static const int kInternalTrafficFeaturesFieldNumber = 103;
  double internal_traffic_features(int index) const;
  void set_internal_traffic_features(int index, double value);
  void add_internal_traffic_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      internal_traffic_features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_internal_traffic_features();

  // map<string, double> custom_features = 110;
  int custom_features_size() const;
  void clear_custom_features();
  static const int kCustomFeaturesFieldNumber = 110;
  const ::google::protobuf::Map< ::std::string, double >&
      custom_features() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_custom_features();

  // map<string, string> feature_metadata = 111;
  int feature_metadata_size() const;
  void clear_feature_metadata();
  static const int kFeatureMetadataFieldNumber = 111;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      feature_metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_feature_metadata();

  // string source_ip = 1;
  void clear_source_ip();
  static const int kSourceIpFieldNumber = 1;
  const ::std::string& source_ip() const;
  void set_source_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_source_ip(::std::string&& value);
  #endif
  void set_source_ip(const char* value);
  void set_source_ip(const char* value, size_t size);
  ::std::string* mutable_source_ip();
  ::std::string* release_source_ip();
  void set_allocated_source_ip(::std::string* source_ip);

  // string destination_ip = 2;
  void clear_destination_ip();
  static const int kDestinationIpFieldNumber = 2;
  const ::std::string& destination_ip() const;
  void set_destination_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_ip(::std::string&& value);
  #endif
  void set_destination_ip(const char* value);
  void set_destination_ip(const char* value, size_t size);
  ::std::string* mutable_destination_ip();
  ::std::string* release_destination_ip();
  void set_allocated_destination_ip(::std::string* destination_ip);

  // string protocol_name = 6;
  void clear_protocol_name();
  static const int kProtocolNameFieldNumber = 6;
  const ::std::string& protocol_name() const;
  void set_protocol_name(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol_name(::std::string&& value);
  #endif
  void set_protocol_name(const char* value);
  void set_protocol_name(const char* value, size_t size);
  ::std::string* mutable_protocol_name();
  ::std::string* release_protocol_name();
  void set_allocated_protocol_name(::std::string* protocol_name);

  // .google.protobuf.Timestamp flow_start_time = 7;
  bool has_flow_start_time() const;
  void clear_flow_start_time();
  static const int kFlowStartTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_flow_start_time() const;
  public:
  const ::google::protobuf::Timestamp& flow_start_time() const;
  ::google::protobuf::Timestamp* release_flow_start_time();
  ::google::protobuf::Timestamp* mutable_flow_start_time();
  void set_allocated_flow_start_time(::google::protobuf::Timestamp* flow_start_time);

  // .google.protobuf.Duration flow_duration = 8;
  bool has_flow_duration() const;
  void clear_flow_duration();
  static const int kFlowDurationFieldNumber = 8;
  private:
  const ::google::protobuf::Duration& _internal_flow_duration() const;
  public:
  const ::google::protobuf::Duration& flow_duration() const;
  ::google::protobuf::Duration* release_flow_duration();
  ::google::protobuf::Duration* mutable_flow_duration();
  void set_allocated_flow_duration(::google::protobuf::Duration* flow_duration);

  // uint32 source_port = 3;
  void clear_source_port();
  static const int kSourcePortFieldNumber = 3;
  ::google::protobuf::uint32 source_port() const;
  void set_source_port(::google::protobuf::uint32 value);

  // uint32 destination_port = 4;
  void clear_destination_port();
  static const int kDestinationPortFieldNumber = 4;
  ::google::protobuf::uint32 destination_port() const;
  void set_destination_port(::google::protobuf::uint32 value);

  // uint64 flow_duration_microseconds = 9;
  void clear_flow_duration_microseconds();
  static const int kFlowDurationMicrosecondsFieldNumber = 9;
  ::google::protobuf::uint64 flow_duration_microseconds() const;
  void set_flow_duration_microseconds(::google::protobuf::uint64 value);

  // uint64 total_forward_packets = 10;
  void clear_total_forward_packets();
  static const int kTotalForwardPacketsFieldNumber = 10;
  ::google::protobuf::uint64 total_forward_packets() const;
  void set_total_forward_packets(::google::protobuf::uint64 value);

  // uint64 total_backward_packets = 11;
  void clear_total_backward_packets();
  static const int kTotalBackwardPacketsFieldNumber = 11;
  ::google::protobuf::uint64 total_backward_packets() const;
  void set_total_backward_packets(::google::protobuf::uint64 value);

  // uint64 total_forward_bytes = 12;
  void clear_total_forward_bytes();
  static const int kTotalForwardBytesFieldNumber = 12;
  ::google::protobuf::uint64 total_forward_bytes() const;
  void set_total_forward_bytes(::google::protobuf::uint64 value);

  // uint64 total_backward_bytes = 13;
  void clear_total_backward_bytes();
  static const int kTotalBackwardBytesFieldNumber = 13;
  ::google::protobuf::uint64 total_backward_bytes() const;
  void set_total_backward_bytes(::google::protobuf::uint64 value);

  // uint64 forward_packet_length_max = 20;
  void clear_forward_packet_length_max();
  static const int kForwardPacketLengthMaxFieldNumber = 20;
  ::google::protobuf::uint64 forward_packet_length_max() const;
  void set_forward_packet_length_max(::google::protobuf::uint64 value);

  // uint64 forward_packet_length_min = 21;
  void clear_forward_packet_length_min();
  static const int kForwardPacketLengthMinFieldNumber = 21;
  ::google::protobuf::uint64 forward_packet_length_min() const;
  void set_forward_packet_length_min(::google::protobuf::uint64 value);

  // double forward_packet_length_mean = 22;
  void clear_forward_packet_length_mean();
  static const int kForwardPacketLengthMeanFieldNumber = 22;
  double forward_packet_length_mean() const;
  void set_forward_packet_length_mean(double value);

  // double forward_packet_length_std = 23;
  void clear_forward_packet_length_std();
  static const int kForwardPacketLengthStdFieldNumber = 23;
  double forward_packet_length_std() const;
  void set_forward_packet_length_std(double value);

  // uint64 backward_packet_length_max = 30;
  void clear_backward_packet_length_max();
  static const int kBackwardPacketLengthMaxFieldNumber = 30;
  ::google::protobuf::uint64 backward_packet_length_max() const;
  void set_backward_packet_length_max(::google::protobuf::uint64 value);

  // uint64 backward_packet_length_min = 31;
  void clear_backward_packet_length_min();
  static const int kBackwardPacketLengthMinFieldNumber = 31;
  ::google::protobuf::uint64 backward_packet_length_min() const;
  void set_backward_packet_length_min(::google::protobuf::uint64 value);

  // double backward_packet_length_mean = 32;
  void clear_backward_packet_length_mean();
  static const int kBackwardPacketLengthMeanFieldNumber = 32;
  double backward_packet_length_mean() const;
  void set_backward_packet_length_mean(double value);

  // double backward_packet_length_std = 33;
  void clear_backward_packet_length_std();
  static const int kBackwardPacketLengthStdFieldNumber = 33;
  double backward_packet_length_std() const;
  void set_backward_packet_length_std(double value);

  // uint32 protocol_number = 5;
  void clear_protocol_number();
  static const int kProtocolNumberFieldNumber = 5;
  ::google::protobuf::uint32 protocol_number() const;
  void set_protocol_number(::google::protobuf::uint32 value);

  // uint32 fin_flag_count = 70;
  void clear_fin_flag_count();
  static const int kFinFlagCountFieldNumber = 70;
  ::google::protobuf::uint32 fin_flag_count() const;
  void set_fin_flag_count(::google::protobuf::uint32 value);

  // double flow_bytes_per_second = 40;
  void clear_flow_bytes_per_second();
  static const int kFlowBytesPerSecondFieldNumber = 40;
  double flow_bytes_per_second() const;
  void set_flow_bytes_per_second(double value);

  // double flow_packets_per_second = 41;
  void clear_flow_packets_per_second();
  static const int kFlowPacketsPerSecondFieldNumber = 41;
  double flow_packets_per_second() const;
  void set_flow_packets_per_second(double value);

  // double forward_packets_per_second = 42;
  void clear_forward_packets_per_second();
  static const int kForwardPacketsPerSecondFieldNumber = 42;
  double forward_packets_per_second() const;
  void set_forward_packets_per_second(double value);

  // double backward_packets_per_second = 43;
  void clear_backward_packets_per_second();
  static const int kBackwardPacketsPerSecondFieldNumber = 43;
  double backward_packets_per_second() const;
  void set_backward_packets_per_second(double value);

  // double download_upload_ratio = 44;
  void clear_download_upload_ratio();
  static const int kDownloadUploadRatioFieldNumber = 44;
  double download_upload_ratio() const;
  void set_download_upload_ratio(double value);

  // double average_packet_size = 45;
  void clear_average_packet_size();
  static const int kAveragePacketSizeFieldNumber = 45;
  double average_packet_size() const;
  void set_average_packet_size(double value);

  // double average_forward_segment_size = 46;
  void clear_average_forward_segment_size();
  static const int kAverageForwardSegmentSizeFieldNumber = 46;
  double average_forward_segment_size() const;
  void set_average_forward_segment_size(double value);

  // double average_backward_segment_size = 47;
  void clear_average_backward_segment_size();
  static const int kAverageBackwardSegmentSizeFieldNumber = 47;
  double average_backward_segment_size() const;
  void set_average_backward_segment_size(double value);

  // double flow_inter_arrival_time_mean = 50;
  void clear_flow_inter_arrival_time_mean();
  static const int kFlowInterArrivalTimeMeanFieldNumber = 50;
  double flow_inter_arrival_time_mean() const;
  void set_flow_inter_arrival_time_mean(double value);

  // double flow_inter_arrival_time_std = 51;
  void clear_flow_inter_arrival_time_std();
  static const int kFlowInterArrivalTimeStdFieldNumber = 51;
  double flow_inter_arrival_time_std() const;
  void set_flow_inter_arrival_time_std(double value);

  // uint64 flow_inter_arrival_time_max = 52;
  void clear_flow_inter_arrival_time_max();
  static const int kFlowInterArrivalTimeMaxFieldNumber = 52;
  ::google::protobuf::uint64 flow_inter_arrival_time_max() const;
  void set_flow_inter_arrival_time_max(::google::protobuf::uint64 value);

  // uint64 flow_inter_arrival_time_min = 53;
  void clear_flow_inter_arrival_time_min();
  static const int kFlowInterArrivalTimeMinFieldNumber = 53;
  ::google::protobuf::uint64 flow_inter_arrival_time_min() const;
  void set_flow_inter_arrival_time_min(::google::protobuf::uint64 value);

  // double forward_inter_arrival_time_total = 54;
  void clear_forward_inter_arrival_time_total();
  static const int kForwardInterArrivalTimeTotalFieldNumber = 54;
  double forward_inter_arrival_time_total() const;
  void set_forward_inter_arrival_time_total(double value);

  // double forward_inter_arrival_time_mean = 55;
  void clear_forward_inter_arrival_time_mean();
  static const int kForwardInterArrivalTimeMeanFieldNumber = 55;
  double forward_inter_arrival_time_mean() const;
  void set_forward_inter_arrival_time_mean(double value);

  // double forward_inter_arrival_time_std = 56;
  void clear_forward_inter_arrival_time_std();
  static const int kForwardInterArrivalTimeStdFieldNumber = 56;
  double forward_inter_arrival_time_std() const;
  void set_forward_inter_arrival_time_std(double value);

  // uint64 forward_inter_arrival_time_max = 57;
  void clear_forward_inter_arrival_time_max();
  static const int kForwardInterArrivalTimeMaxFieldNumber = 57;
  ::google::protobuf::uint64 forward_inter_arrival_time_max() const;
  void set_forward_inter_arrival_time_max(::google::protobuf::uint64 value);

  // uint64 forward_inter_arrival_time_min = 58;
  void clear_forward_inter_arrival_time_min();
  static const int kForwardInterArrivalTimeMinFieldNumber = 58;
  ::google::protobuf::uint64 forward_inter_arrival_time_min() const;
  void set_forward_inter_arrival_time_min(::google::protobuf::uint64 value);

  // double backward_inter_arrival_time_total = 59;
  void clear_backward_inter_arrival_time_total();
  static const int kBackwardInterArrivalTimeTotalFieldNumber = 59;
  double backward_inter_arrival_time_total() const;
  void set_backward_inter_arrival_time_total(double value);

  // double backward_inter_arrival_time_mean = 60;
  void clear_backward_inter_arrival_time_mean();
  static const int kBackwardInterArrivalTimeMeanFieldNumber = 60;
  double backward_inter_arrival_time_mean() const;
  void set_backward_inter_arrival_time_mean(double value);

  // double backward_inter_arrival_time_std = 61;
  void clear_backward_inter_arrival_time_std();
  static const int kBackwardInterArrivalTimeStdFieldNumber = 61;
  double backward_inter_arrival_time_std() const;
  void set_backward_inter_arrival_time_std(double value);

  // uint64 backward_inter_arrival_time_max = 62;
  void clear_backward_inter_arrival_time_max();
  static const int kBackwardInterArrivalTimeMaxFieldNumber = 62;
  ::google::protobuf::uint64 backward_inter_arrival_time_max() const;
  void set_backward_inter_arrival_time_max(::google::protobuf::uint64 value);

  // uint64 backward_inter_arrival_time_min = 63;
  void clear_backward_inter_arrival_time_min();
  static const int kBackwardInterArrivalTimeMinFieldNumber = 63;
  ::google::protobuf::uint64 backward_inter_arrival_time_min() const;
  void set_backward_inter_arrival_time_min(::google::protobuf::uint64 value);

  // uint32 syn_flag_count = 71;
  void clear_syn_flag_count();
  static const int kSynFlagCountFieldNumber = 71;
  ::google::protobuf::uint32 syn_flag_count() const;
  void set_syn_flag_count(::google::protobuf::uint32 value);

  // uint32 rst_flag_count = 72;
  void clear_rst_flag_count();
  static const int kRstFlagCountFieldNumber = 72;
  ::google::protobuf::uint32 rst_flag_count() const;
  void set_rst_flag_count(::google::protobuf::uint32 value);

  // uint32 psh_flag_count = 73;
  void clear_psh_flag_count();
  static const int kPshFlagCountFieldNumber = 73;
  ::google::protobuf::uint32 psh_flag_count() const;
  void set_psh_flag_count(::google::protobuf::uint32 value);

  // uint32 ack_flag_count = 74;
  void clear_ack_flag_count();
  static const int kAckFlagCountFieldNumber = 74;
  ::google::protobuf::uint32 ack_flag_count() const;
  void set_ack_flag_count(::google::protobuf::uint32 value);

  // uint32 backward_urg_flags = 81;
  void clear_backward_urg_flags();
  static const int kBackwardUrgFlagsFieldNumber = 81;
  ::google::protobuf::uint32 backward_urg_flags() const;
  void set_backward_urg_flags(::google::protobuf::uint32 value);

  // uint32 urg_flag_count = 75;
  void clear_urg_flag_count();
  static const int kUrgFlagCountFieldNumber = 75;
  ::google::protobuf::uint32 urg_flag_count() const;
  void set_urg_flag_count(::google::protobuf::uint32 value);

  // uint32 cwe_flag_count = 76;
  void clear_cwe_flag_count();
  static const int kCweFlagCountFieldNumber = 76;
  ::google::protobuf::uint32 cwe_flag_count() const;
  void set_cwe_flag_count(::google::protobuf::uint32 value);

  // uint32 ece_flag_count = 77;
  void clear_ece_flag_count();
  static const int kEceFlagCountFieldNumber = 77;
  ::google::protobuf::uint32 ece_flag_count() const;
  void set_ece_flag_count(::google::protobuf::uint32 value);

  // uint32 forward_psh_flags = 78;
  void clear_forward_psh_flags();
  static const int kForwardPshFlagsFieldNumber = 78;
  ::google::protobuf::uint32 forward_psh_flags() const;
  void set_forward_psh_flags(::google::protobuf::uint32 value);

  // uint32 backward_psh_flags = 79;
  void clear_backward_psh_flags();
  static const int kBackwardPshFlagsFieldNumber = 79;
  ::google::protobuf::uint32 backward_psh_flags() const;
  void set_backward_psh_flags(::google::protobuf::uint32 value);

  // uint32 forward_urg_flags = 80;
  void clear_forward_urg_flags();
  static const int kForwardUrgFlagsFieldNumber = 80;
  ::google::protobuf::uint32 forward_urg_flags() const;
  void set_forward_urg_flags(::google::protobuf::uint32 value);

  // double forward_header_length = 85;
  void clear_forward_header_length();
  static const int kForwardHeaderLengthFieldNumber = 85;
  double forward_header_length() const;
  void set_forward_header_length(double value);

  // double backward_header_length = 86;
  void clear_backward_header_length();
  static const int kBackwardHeaderLengthFieldNumber = 86;
  double backward_header_length() const;
  void set_backward_header_length(double value);

  // double forward_average_bytes_bulk = 87;
  void clear_forward_average_bytes_bulk();
  static const int kForwardAverageBytesBulkFieldNumber = 87;
  double forward_average_bytes_bulk() const;
  void set_forward_average_bytes_bulk(double value);

  // double forward_average_packets_bulk = 88;
  void clear_forward_average_packets_bulk();
  static const int kForwardAveragePacketsBulkFieldNumber = 88;
  double forward_average_packets_bulk() const;
  void set_forward_average_packets_bulk(double value);

  // double forward_average_bulk_rate = 89;
  void clear_forward_average_bulk_rate();
  static const int kForwardAverageBulkRateFieldNumber = 89;
  double forward_average_bulk_rate() const;
  void set_forward_average_bulk_rate(double value);

  // double backward_average_bytes_bulk = 90;
  void clear_backward_average_bytes_bulk();
  static const int kBackwardAverageBytesBulkFieldNumber = 90;
  double backward_average_bytes_bulk() const;
  void set_backward_average_bytes_bulk(double value);

  // double backward_average_packets_bulk = 91;
  void clear_backward_average_packets_bulk();
  static const int kBackwardAveragePacketsBulkFieldNumber = 91;
  double backward_average_packets_bulk() const;
  void set_backward_average_packets_bulk(double value);

  // double backward_average_bulk_rate = 92;
  void clear_backward_average_bulk_rate();
  static const int kBackwardAverageBulkRateFieldNumber = 92;
  double backward_average_bulk_rate() const;
  void set_backward_average_bulk_rate(double value);

  // uint64 minimum_packet_length = 95;
  void clear_minimum_packet_length();
  static const int kMinimumPacketLengthFieldNumber = 95;
  ::google::protobuf::uint64 minimum_packet_length() const;
  void set_minimum_packet_length(::google::protobuf::uint64 value);

  // uint64 maximum_packet_length = 96;
  void clear_maximum_packet_length();
  static const int kMaximumPacketLengthFieldNumber = 96;
  ::google::protobuf::uint64 maximum_packet_length() const;
  void set_maximum_packet_length(::google::protobuf::uint64 value);

  // double packet_length_mean = 97;
  void clear_packet_length_mean();
  static const int kPacketLengthMeanFieldNumber = 97;
  double packet_length_mean() const;
  void set_packet_length_mean(double value);

  // double packet_length_std = 98;
  void clear_packet_length_std();
  static const int kPacketLengthStdFieldNumber = 98;
  double packet_length_std() const;
  void set_packet_length_std(double value);

  // double packet_length_variance = 99;
  void clear_packet_length_variance();
  static const int kPacketLengthVarianceFieldNumber = 99;
  double packet_length_variance() const;
  void set_packet_length_variance(double value);

  // @@protoc_insertion_point(class_scope:protobuf.NetworkFeatures)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > ddos_features_;
  mutable int _ddos_features_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > ransomware_features_;
  mutable int _ransomware_features_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > general_attack_features_;
  mutable int _general_attack_features_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > internal_traffic_features_;
  mutable int _internal_traffic_features_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      NetworkFeatures_CustomFeaturesEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > custom_features_;
  ::google::protobuf::internal::MapField<
      NetworkFeatures_FeatureMetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > feature_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_ip_;
  ::google::protobuf::internal::ArenaStringPtr destination_ip_;
  ::google::protobuf::internal::ArenaStringPtr protocol_name_;
  ::google::protobuf::Timestamp* flow_start_time_;
  ::google::protobuf::Duration* flow_duration_;
  ::google::protobuf::uint32 source_port_;
  ::google::protobuf::uint32 destination_port_;
  ::google::protobuf::uint64 flow_duration_microseconds_;
  ::google::protobuf::uint64 total_forward_packets_;
  ::google::protobuf::uint64 total_backward_packets_;
  ::google::protobuf::uint64 total_forward_bytes_;
  ::google::protobuf::uint64 total_backward_bytes_;
  ::google::protobuf::uint64 forward_packet_length_max_;
  ::google::protobuf::uint64 forward_packet_length_min_;
  double forward_packet_length_mean_;
  double forward_packet_length_std_;
  ::google::protobuf::uint64 backward_packet_length_max_;
  ::google::protobuf::uint64 backward_packet_length_min_;
  double backward_packet_length_mean_;
  double backward_packet_length_std_;
  ::google::protobuf::uint32 protocol_number_;
  ::google::protobuf::uint32 fin_flag_count_;
  double flow_bytes_per_second_;
  double flow_packets_per_second_;
  double forward_packets_per_second_;
  double backward_packets_per_second_;
  double download_upload_ratio_;
  double average_packet_size_;
  double average_forward_segment_size_;
  double average_backward_segment_size_;
  double flow_inter_arrival_time_mean_;
  double flow_inter_arrival_time_std_;
  ::google::protobuf::uint64 flow_inter_arrival_time_max_;
  ::google::protobuf::uint64 flow_inter_arrival_time_min_;
  double forward_inter_arrival_time_total_;
  double forward_inter_arrival_time_mean_;
  double forward_inter_arrival_time_std_;
  ::google::protobuf::uint64 forward_inter_arrival_time_max_;
  ::google::protobuf::uint64 forward_inter_arrival_time_min_;
  double backward_inter_arrival_time_total_;
  double backward_inter_arrival_time_mean_;
  double backward_inter_arrival_time_std_;
  ::google::protobuf::uint64 backward_inter_arrival_time_max_;
  ::google::protobuf::uint64 backward_inter_arrival_time_min_;
  ::google::protobuf::uint32 syn_flag_count_;
  ::google::protobuf::uint32 rst_flag_count_;
  ::google::protobuf::uint32 psh_flag_count_;
  ::google::protobuf::uint32 ack_flag_count_;
  ::google::protobuf::uint32 backward_urg_flags_;
  ::google::protobuf::uint32 urg_flag_count_;
  ::google::protobuf::uint32 cwe_flag_count_;
  ::google::protobuf::uint32 ece_flag_count_;
  ::google::protobuf::uint32 forward_psh_flags_;
  ::google::protobuf::uint32 backward_psh_flags_;
  ::google::protobuf::uint32 forward_urg_flags_;
  double forward_header_length_;
  double backward_header_length_;
  double forward_average_bytes_bulk_;
  double forward_average_packets_bulk_;
  double forward_average_bulk_rate_;
  double backward_average_bytes_bulk_;
  double backward_average_packets_bulk_;
  double backward_average_bulk_rate_;
  ::google::protobuf::uint64 minimum_packet_length_;
  ::google::protobuf::uint64 maximum_packet_length_;
  double packet_length_mean_;
  double packet_length_std_;
  double packet_length_variance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeoLocationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.GeoLocationInfo) */ {
 public:
  GeoLocationInfo();
  virtual ~GeoLocationInfo();

  GeoLocationInfo(const GeoLocationInfo& from);

  inline GeoLocationInfo& operator=(const GeoLocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoLocationInfo(GeoLocationInfo&& from) noexcept
    : GeoLocationInfo() {
    *this = ::std::move(from);
  }

  inline GeoLocationInfo& operator=(GeoLocationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoLocationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoLocationInfo* internal_default_instance() {
    return reinterpret_cast<const GeoLocationInfo*>(
               &_GeoLocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GeoLocationInfo* other);
  friend void swap(GeoLocationInfo& a, GeoLocationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoLocationInfo* New() const final {
    return CreateMaybeMessage<GeoLocationInfo>(NULL);
  }

  GeoLocationInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoLocationInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoLocationInfo& from);
  void MergeFrom(const GeoLocationInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLocationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeoLocationInfo_ThreatLevel ThreatLevel;
  static const ThreatLevel UNKNOWN =
    GeoLocationInfo_ThreatLevel_UNKNOWN;
  static const ThreatLevel LOW =
    GeoLocationInfo_ThreatLevel_LOW;
  static const ThreatLevel MEDIUM =
    GeoLocationInfo_ThreatLevel_MEDIUM;
  static const ThreatLevel HIGH =
    GeoLocationInfo_ThreatLevel_HIGH;
  static const ThreatLevel CRITICAL =
    GeoLocationInfo_ThreatLevel_CRITICAL;
  static inline bool ThreatLevel_IsValid(int value) {
    return GeoLocationInfo_ThreatLevel_IsValid(value);
  }
  static const ThreatLevel ThreatLevel_MIN =
    GeoLocationInfo_ThreatLevel_ThreatLevel_MIN;
  static const ThreatLevel ThreatLevel_MAX =
    GeoLocationInfo_ThreatLevel_ThreatLevel_MAX;
  static const int ThreatLevel_ARRAYSIZE =
    GeoLocationInfo_ThreatLevel_ThreatLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ThreatLevel_descriptor() {
    return GeoLocationInfo_ThreatLevel_descriptor();
  }
  static inline const ::std::string& ThreatLevel_Name(ThreatLevel value) {
    return GeoLocationInfo_ThreatLevel_Name(value);
  }
  static inline bool ThreatLevel_Parse(const ::std::string& name,
      ThreatLevel* value) {
    return GeoLocationInfo_ThreatLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string country_name = 1;
  void clear_country_name();
  static const int kCountryNameFieldNumber = 1;
  const ::std::string& country_name() const;
  void set_country_name(const ::std::string& value);
  #if LANG_CXX11
  void set_country_name(::std::string&& value);
  #endif
  void set_country_name(const char* value);
  void set_country_name(const char* value, size_t size);
  ::std::string* mutable_country_name();
  ::std::string* release_country_name();
  void set_allocated_country_name(::std::string* country_name);

  // string country_code = 2;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // string region_name = 3;
  void clear_region_name();
  static const int kRegionNameFieldNumber = 3;
  const ::std::string& region_name() const;
  void set_region_name(const ::std::string& value);
  #if LANG_CXX11
  void set_region_name(::std::string&& value);
  #endif
  void set_region_name(const char* value);
  void set_region_name(const char* value, size_t size);
  ::std::string* mutable_region_name();
  ::std::string* release_region_name();
  void set_allocated_region_name(::std::string* region_name);

  // string city_name = 4;
  void clear_city_name();
  static const int kCityNameFieldNumber = 4;
  const ::std::string& city_name() const;
  void set_city_name(const ::std::string& value);
  #if LANG_CXX11
  void set_city_name(::std::string&& value);
  #endif
  void set_city_name(const char* value);
  void set_city_name(const char* value, size_t size);
  ::std::string* mutable_city_name();
  ::std::string* release_city_name();
  void set_allocated_city_name(::std::string* city_name);

  // string timezone = 7;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 7;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // string isp_name = 8;
  void clear_isp_name();
  static const int kIspNameFieldNumber = 8;
  const ::std::string& isp_name() const;
  void set_isp_name(const ::std::string& value);
  #if LANG_CXX11
  void set_isp_name(::std::string&& value);
  #endif
  void set_isp_name(const char* value);
  void set_isp_name(const char* value, size_t size);
  ::std::string* mutable_isp_name();
  ::std::string* release_isp_name();
  void set_allocated_isp_name(::std::string* isp_name);

  // string organization_name = 9;
  void clear_organization_name();
  static const int kOrganizationNameFieldNumber = 9;
  const ::std::string& organization_name() const;
  void set_organization_name(const ::std::string& value);
  #if LANG_CXX11
  void set_organization_name(::std::string&& value);
  #endif
  void set_organization_name(const char* value);
  void set_organization_name(const char* value, size_t size);
  ::std::string* mutable_organization_name();
  ::std::string* release_organization_name();
  void set_allocated_organization_name(::std::string* organization_name);

  // string autonomous_system_number = 10;
  void clear_autonomous_system_number();
  static const int kAutonomousSystemNumberFieldNumber = 10;
  const ::std::string& autonomous_system_number() const;
  void set_autonomous_system_number(const ::std::string& value);
  #if LANG_CXX11
  void set_autonomous_system_number(::std::string&& value);
  #endif
  void set_autonomous_system_number(const char* value);
  void set_autonomous_system_number(const char* value, size_t size);
  ::std::string* mutable_autonomous_system_number();
  ::std::string* release_autonomous_system_number();
  void set_allocated_autonomous_system_number(::std::string* autonomous_system_number);

  // double latitude = 5;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 6;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  double longitude() const;
  void set_longitude(double value);

  // bool is_anonymous_proxy = 11;
  void clear_is_anonymous_proxy();
  static const int kIsAnonymousProxyFieldNumber = 11;
  bool is_anonymous_proxy() const;
  void set_is_anonymous_proxy(bool value);

  // bool is_satellite_provider = 12;
  void clear_is_satellite_provider();
  static const int kIsSatelliteProviderFieldNumber = 12;
  bool is_satellite_provider() const;
  void set_is_satellite_provider(bool value);

  // bool is_tor_exit_node = 13;
  void clear_is_tor_exit_node();
  static const int kIsTorExitNodeFieldNumber = 13;
  bool is_tor_exit_node() const;
  void set_is_tor_exit_node(bool value);

  // bool is_known_malicious = 14;
  void clear_is_known_malicious();
  static const int kIsKnownMaliciousFieldNumber = 14;
  bool is_known_malicious() const;
  void set_is_known_malicious(bool value);

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  void clear_threat_level();
  static const int kThreatLevelFieldNumber = 15;
  ::protobuf::GeoLocationInfo_ThreatLevel threat_level() const;
  void set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value);

  // @@protoc_insertion_point(class_scope:protobuf.GeoLocationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr country_name_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr region_name_;
  ::google::protobuf::internal::ArenaStringPtr city_name_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr isp_name_;
  ::google::protobuf::internal::ArenaStringPtr organization_name_;
  ::google::protobuf::internal::ArenaStringPtr autonomous_system_number_;
  double latitude_;
  double longitude_;
  bool is_anonymous_proxy_;
  bool is_satellite_provider_;
  bool is_tor_exit_node_;
  bool is_known_malicious_;
  int threat_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeoEnrichment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.GeoEnrichment) */ {
 public:
  GeoEnrichment();
  virtual ~GeoEnrichment();

  GeoEnrichment(const GeoEnrichment& from);

  inline GeoEnrichment& operator=(const GeoEnrichment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoEnrichment(GeoEnrichment&& from) noexcept
    : GeoEnrichment() {
    *this = ::std::move(from);
  }

  inline GeoEnrichment& operator=(GeoEnrichment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoEnrichment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoEnrichment* internal_default_instance() {
    return reinterpret_cast<const GeoEnrichment*>(
               &_GeoEnrichment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GeoEnrichment* other);
  friend void swap(GeoEnrichment& a, GeoEnrichment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoEnrichment* New() const final {
    return CreateMaybeMessage<GeoEnrichment>(NULL);
  }

  GeoEnrichment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoEnrichment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoEnrichment& from);
  void MergeFrom(const GeoEnrichment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoEnrichment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string threat_intelligence_matches = 30;
  int threat_intelligence_matches_size() const;
  void clear_threat_intelligence_matches();
  static const int kThreatIntelligenceMatchesFieldNumber = 30;
  const ::std::string& threat_intelligence_matches(int index) const;
  ::std::string* mutable_threat_intelligence_matches(int index);
  void set_threat_intelligence_matches(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_threat_intelligence_matches(int index, ::std::string&& value);
  #endif
  void set_threat_intelligence_matches(int index, const char* value);
  void set_threat_intelligence_matches(int index, const char* value, size_t size);
  ::std::string* add_threat_intelligence_matches();
  void add_threat_intelligence_matches(const ::std::string& value);
  #if LANG_CXX11
  void add_threat_intelligence_matches(::std::string&& value);
  #endif
  void add_threat_intelligence_matches(const char* value);
  void add_threat_intelligence_matches(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& threat_intelligence_matches() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_threat_intelligence_matches();

  // string distance_category = 13;
  void clear_distance_category();
  static const int kDistanceCategoryFieldNumber = 13;
  const ::std::string& distance_category() const;
  void set_distance_category(const ::std::string& value);
  #if LANG_CXX11
  void set_distance_category(::std::string&& value);
  #endif
  void set_distance_category(const char* value);
  void set_distance_category(const char* value, size_t size);
  ::std::string* mutable_distance_category();
  ::std::string* release_distance_category();
  void set_allocated_distance_category(::std::string* distance_category);

  // string sniffer_source_relationship = 22;
  void clear_sniffer_source_relationship();
  static const int kSnifferSourceRelationshipFieldNumber = 22;
  const ::std::string& sniffer_source_relationship() const;
  void set_sniffer_source_relationship(const ::std::string& value);
  #if LANG_CXX11
  void set_sniffer_source_relationship(::std::string&& value);
  #endif
  void set_sniffer_source_relationship(const char* value);
  void set_sniffer_source_relationship(const char* value, size_t size);
  ::std::string* mutable_sniffer_source_relationship();
  ::std::string* release_sniffer_source_relationship();
  void set_allocated_sniffer_source_relationship(::std::string* sniffer_source_relationship);

  // string sniffer_destination_relationship = 27;
  void clear_sniffer_destination_relationship();
  static const int kSnifferDestinationRelationshipFieldNumber = 27;
  const ::std::string& sniffer_destination_relationship() const;
  void set_sniffer_destination_relationship(const ::std::string& value);
  #if LANG_CXX11
  void set_sniffer_destination_relationship(::std::string&& value);
  #endif
  void set_sniffer_destination_relationship(const char* value);
  void set_sniffer_destination_relationship(const char* value, size_t size);
  ::std::string* mutable_sniffer_destination_relationship();
  ::std::string* release_sniffer_destination_relationship();
  void set_allocated_sniffer_destination_relationship(::std::string* sniffer_destination_relationship);

  // string threat_intelligence_source = 31;
  void clear_threat_intelligence_source();
  static const int kThreatIntelligenceSourceFieldNumber = 31;
  const ::std::string& threat_intelligence_source() const;
  void set_threat_intelligence_source(const ::std::string& value);
  #if LANG_CXX11
  void set_threat_intelligence_source(::std::string&& value);
  #endif
  void set_threat_intelligence_source(const char* value);
  void set_threat_intelligence_source(const char* value, size_t size);
  ::std::string* mutable_threat_intelligence_source();
  ::std::string* release_threat_intelligence_source();
  void set_allocated_threat_intelligence_source(::std::string* threat_intelligence_source);

  // string original_private_ip = 46;
  void clear_original_private_ip();
  static const int kOriginalPrivateIpFieldNumber = 46;
  const ::std::string& original_private_ip() const;
  void set_original_private_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_original_private_ip(::std::string&& value);
  #endif
  void set_original_private_ip(const char* value);
  void set_original_private_ip(const char* value, size_t size);
  ::std::string* mutable_original_private_ip();
  ::std::string* release_original_private_ip();
  void set_allocated_original_private_ip(::std::string* original_private_ip);

  // string discovered_public_ip = 47;
  void clear_discovered_public_ip();
  static const int kDiscoveredPublicIpFieldNumber = 47;
  const ::std::string& discovered_public_ip() const;
  void set_discovered_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_discovered_public_ip(::std::string&& value);
  #endif
  void set_discovered_public_ip(const char* value);
  void set_discovered_public_ip(const char* value, size_t size);
  ::std::string* mutable_discovered_public_ip();
  ::std::string* release_discovered_public_ip();
  void set_allocated_discovered_public_ip(::std::string* discovered_public_ip);

  // string ip_discovery_service = 48;
  void clear_ip_discovery_service();
  static const int kIpDiscoveryServiceFieldNumber = 48;
  const ::std::string& ip_discovery_service() const;
  void set_ip_discovery_service(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_discovery_service(::std::string&& value);
  #endif
  void set_ip_discovery_service(const char* value);
  void set_ip_discovery_service(const char* value, size_t size);
  ::std::string* mutable_ip_discovery_service();
  ::std::string* release_ip_discovery_service();
  void set_allocated_ip_discovery_service(::std::string* ip_discovery_service);

  // string enricher_version = 50;
  void clear_enricher_version();
  static const int kEnricherVersionFieldNumber = 50;
  const ::std::string& enricher_version() const;
  void set_enricher_version(const ::std::string& value);
  #if LANG_CXX11
  void set_enricher_version(::std::string&& value);
  #endif
  void set_enricher_version(const char* value);
  void set_enricher_version(const char* value, size_t size);
  ::std::string* mutable_enricher_version();
  ::std::string* release_enricher_version();
  void set_allocated_enricher_version(::std::string* enricher_version);

  // string geoip_method = 51;
  void clear_geoip_method();
  static const int kGeoipMethodFieldNumber = 51;
  const ::std::string& geoip_method() const;
  void set_geoip_method(const ::std::string& value);
  #if LANG_CXX11
  void set_geoip_method(::std::string&& value);
  #endif
  void set_geoip_method(const char* value);
  void set_geoip_method(const char* value, size_t size);
  ::std::string* mutable_geoip_method();
  ::std::string* release_geoip_method();
  void set_allocated_geoip_method(::std::string* geoip_method);

  // string geoip_database_version = 52;
  void clear_geoip_database_version();
  static const int kGeoipDatabaseVersionFieldNumber = 52;
  const ::std::string& geoip_database_version() const;
  void set_geoip_database_version(const ::std::string& value);
  #if LANG_CXX11
  void set_geoip_database_version(::std::string&& value);
  #endif
  void set_geoip_database_version(const char* value);
  void set_geoip_database_version(const char* value, size_t size);
  ::std::string* mutable_geoip_database_version();
  ::std::string* release_geoip_database_version();
  void set_allocated_geoip_database_version(::std::string* geoip_database_version);

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  bool has_sniffer_node_geo() const;
  void clear_sniffer_node_geo();
  static const int kSnifferNodeGeoFieldNumber = 1;
  private:
  const ::protobuf::GeoLocationInfo& _internal_sniffer_node_geo() const;
  public:
  const ::protobuf::GeoLocationInfo& sniffer_node_geo() const;
  ::protobuf::GeoLocationInfo* release_sniffer_node_geo();
  ::protobuf::GeoLocationInfo* mutable_sniffer_node_geo();
  void set_allocated_sniffer_node_geo(::protobuf::GeoLocationInfo* sniffer_node_geo);

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  bool has_source_ip_geo() const;
  void clear_source_ip_geo();
  static const int kSourceIpGeoFieldNumber = 2;
  private:
  const ::protobuf::GeoLocationInfo& _internal_source_ip_geo() const;
  public:
  const ::protobuf::GeoLocationInfo& source_ip_geo() const;
  ::protobuf::GeoLocationInfo* release_source_ip_geo();
  ::protobuf::GeoLocationInfo* mutable_source_ip_geo();
  void set_allocated_source_ip_geo(::protobuf::GeoLocationInfo* source_ip_geo);

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  bool has_destination_ip_geo() const;
  void clear_destination_ip_geo();
  static const int kDestinationIpGeoFieldNumber = 3;
  private:
  const ::protobuf::GeoLocationInfo& _internal_destination_ip_geo() const;
  public:
  const ::protobuf::GeoLocationInfo& destination_ip_geo() const;
  ::protobuf::GeoLocationInfo* release_destination_ip_geo();
  ::protobuf::GeoLocationInfo* mutable_destination_ip_geo();
  void set_allocated_destination_ip_geo(::protobuf::GeoLocationInfo* destination_ip_geo);

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  bool has_ip_discovery_time() const;
  void clear_ip_discovery_time();
  static const int kIpDiscoveryTimeFieldNumber = 49;
  private:
  const ::google::protobuf::Timestamp& _internal_ip_discovery_time() const;
  public:
  const ::google::protobuf::Timestamp& ip_discovery_time() const;
  ::google::protobuf::Timestamp* release_ip_discovery_time();
  ::google::protobuf::Timestamp* mutable_ip_discovery_time();
  void set_allocated_ip_discovery_time(::google::protobuf::Timestamp* ip_discovery_time);

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  bool has_enrichment_timestamp() const;
  void clear_enrichment_timestamp();
  static const int kEnrichmentTimestampFieldNumber = 58;
  private:
  const ::google::protobuf::Timestamp& _internal_enrichment_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& enrichment_timestamp() const;
  ::google::protobuf::Timestamp* release_enrichment_timestamp();
  ::google::protobuf::Timestamp* mutable_enrichment_timestamp();
  void set_allocated_enrichment_timestamp(::google::protobuf::Timestamp* enrichment_timestamp);

  // double source_destination_distance_km = 10;
  void clear_source_destination_distance_km();
  static const int kSourceDestinationDistanceKmFieldNumber = 10;
  double source_destination_distance_km() const;
  void set_source_destination_distance_km(double value);

  // double sniffer_source_distance_km = 20;
  void clear_sniffer_source_distance_km();
  static const int kSnifferSourceDistanceKmFieldNumber = 20;
  double sniffer_source_distance_km() const;
  void set_sniffer_source_distance_km(double value);

  // bool source_destination_same_country = 11;
  void clear_source_destination_same_country();
  static const int kSourceDestinationSameCountryFieldNumber = 11;
  bool source_destination_same_country() const;
  void set_source_destination_same_country(bool value);

  // bool source_destination_same_continent = 12;
  void clear_source_destination_same_continent();
  static const int kSourceDestinationSameContinentFieldNumber = 12;
  bool source_destination_same_continent() const;
  void set_source_destination_same_continent(bool value);

  // bool sniffer_source_same_country = 21;
  void clear_sniffer_source_same_country();
  static const int kSnifferSourceSameCountryFieldNumber = 21;
  bool sniffer_source_same_country() const;
  void set_sniffer_source_same_country(bool value);

  // bool sniffer_destination_same_country = 26;
  void clear_sniffer_destination_same_country();
  static const int kSnifferDestinationSameCountryFieldNumber = 26;
  bool sniffer_destination_same_country() const;
  void set_sniffer_destination_same_country(bool value);

  // float geographic_anomaly_score = 32;
  void clear_geographic_anomaly_score();
  static const int kGeographicAnomalyScoreFieldNumber = 32;
  float geographic_anomaly_score() const;
  void set_geographic_anomaly_score(float value);

  // double sniffer_destination_distance_km = 25;
  void clear_sniffer_destination_distance_km();
  static const int kSnifferDestinationDistanceKmFieldNumber = 25;
  double sniffer_destination_distance_km() const;
  void set_sniffer_destination_distance_km(double value);

  // bool suspicious_geographic_pattern = 33;
  void clear_suspicious_geographic_pattern();
  static const int kSuspiciousGeographicPatternFieldNumber = 33;
  bool suspicious_geographic_pattern() const;
  void set_suspicious_geographic_pattern(bool value);

  // bool sniffer_node_enriched = 40;
  void clear_sniffer_node_enriched();
  static const int kSnifferNodeEnrichedFieldNumber = 40;
  bool sniffer_node_enriched() const;
  void set_sniffer_node_enriched(bool value);

  // bool source_ip_enriched = 41;
  void clear_source_ip_enriched();
  static const int kSourceIpEnrichedFieldNumber = 41;
  bool source_ip_enriched() const;
  void set_source_ip_enriched(bool value);

  // bool destination_ip_enriched = 42;
  void clear_destination_ip_enriched();
  static const int kDestinationIpEnrichedFieldNumber = 42;
  bool destination_ip_enriched() const;
  void set_destination_ip_enriched(bool value);

  // bool enrichment_complete = 43;
  void clear_enrichment_complete();
  static const int kEnrichmentCompleteFieldNumber = 43;
  bool enrichment_complete() const;
  void set_enrichment_complete(bool value);

  // bool public_ip_discovery_attempted = 45;
  void clear_public_ip_discovery_attempted();
  static const int kPublicIpDiscoveryAttemptedFieldNumber = 45;
  bool public_ip_discovery_attempted() const;
  void set_public_ip_discovery_attempted(bool value);

  // bool fallback_coordinates_used = 53;
  void clear_fallback_coordinates_used();
  static const int kFallbackCoordinatesUsedFieldNumber = 53;
  bool fallback_coordinates_used() const;
  void set_fallback_coordinates_used(bool value);

  // float total_lookup_latency_ms = 54;
  void clear_total_lookup_latency_ms();
  static const int kTotalLookupLatencyMsFieldNumber = 54;
  float total_lookup_latency_ms() const;
  void set_total_lookup_latency_ms(float value);

  // int32 cache_hits = 55;
  void clear_cache_hits();
  static const int kCacheHitsFieldNumber = 55;
  ::google::protobuf::int32 cache_hits() const;
  void set_cache_hits(::google::protobuf::int32 value);

  // int32 cache_misses = 56;
  void clear_cache_misses();
  static const int kCacheMissesFieldNumber = 56;
  ::google::protobuf::int32 cache_misses() const;
  void set_cache_misses(::google::protobuf::int32 value);

  // float enrichment_success_rate = 57;
  void clear_enrichment_success_rate();
  static const int kEnrichmentSuccessRateFieldNumber = 57;
  float enrichment_success_rate() const;
  void set_enrichment_success_rate(float value);

  // @@protoc_insertion_point(class_scope:protobuf.GeoEnrichment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> threat_intelligence_matches_;
  ::google::protobuf::internal::ArenaStringPtr distance_category_;
  ::google::protobuf::internal::ArenaStringPtr sniffer_source_relationship_;
  ::google::protobuf::internal::ArenaStringPtr sniffer_destination_relationship_;
  ::google::protobuf::internal::ArenaStringPtr threat_intelligence_source_;
  ::google::protobuf::internal::ArenaStringPtr original_private_ip_;
  ::google::protobuf::internal::ArenaStringPtr discovered_public_ip_;
  ::google::protobuf::internal::ArenaStringPtr ip_discovery_service_;
  ::google::protobuf::internal::ArenaStringPtr enricher_version_;
  ::google::protobuf::internal::ArenaStringPtr geoip_method_;
  ::google::protobuf::internal::ArenaStringPtr geoip_database_version_;
  ::protobuf::GeoLocationInfo* sniffer_node_geo_;
  ::protobuf::GeoLocationInfo* source_ip_geo_;
  ::protobuf::GeoLocationInfo* destination_ip_geo_;
  ::google::protobuf::Timestamp* ip_discovery_time_;
  ::google::protobuf::Timestamp* enrichment_timestamp_;
  double source_destination_distance_km_;
  double sniffer_source_distance_km_;
  bool source_destination_same_country_;
  bool source_destination_same_continent_;
  bool sniffer_source_same_country_;
  bool sniffer_destination_same_country_;
  float geographic_anomaly_score_;
  double sniffer_destination_distance_km_;
  bool suspicious_geographic_pattern_;
  bool sniffer_node_enriched_;
  bool source_ip_enriched_;
  bool destination_ip_enriched_;
  bool enrichment_complete_;
  bool public_ip_discovery_attempted_;
  bool fallback_coordinates_used_;
  float total_lookup_latency_ms_;
  ::google::protobuf::int32 cache_hits_;
  ::google::protobuf::int32 cache_misses_;
  float enrichment_success_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.TimeWindow) */ {
 public:
  TimeWindow();
  virtual ~TimeWindow();

  TimeWindow(const TimeWindow& from);

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TimeWindow* other);
  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeWindow* New() const final {
    return CreateMaybeMessage<TimeWindow>(NULL);
  }

  TimeWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeWindow& from);
  void MergeFrom(const TimeWindow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimeWindow_WindowType WindowType;
  static const WindowType SLIDING =
    TimeWindow_WindowType_SLIDING;
  static const WindowType TUMBLING =
    TimeWindow_WindowType_TUMBLING;
  static const WindowType SESSION_BASED =
    TimeWindow_WindowType_SESSION_BASED;
  static const WindowType ADAPTIVE =
    TimeWindow_WindowType_ADAPTIVE;
  static inline bool WindowType_IsValid(int value) {
    return TimeWindow_WindowType_IsValid(value);
  }
  static const WindowType WindowType_MIN =
    TimeWindow_WindowType_WindowType_MIN;
  static const WindowType WindowType_MAX =
    TimeWindow_WindowType_WindowType_MAX;
  static const int WindowType_ARRAYSIZE =
    TimeWindow_WindowType_WindowType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WindowType_descriptor() {
    return TimeWindow_WindowType_descriptor();
  }
  static inline const ::std::string& WindowType_Name(WindowType value) {
    return TimeWindow_WindowType_Name(value);
  }
  static inline bool WindowType_Parse(const ::std::string& name,
      WindowType* value) {
    return TimeWindow_WindowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp window_start = 1;
  bool has_window_start() const;
  void clear_window_start();
  static const int kWindowStartFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_window_start() const;
  public:
  const ::google::protobuf::Timestamp& window_start() const;
  ::google::protobuf::Timestamp* release_window_start();
  ::google::protobuf::Timestamp* mutable_window_start();
  void set_allocated_window_start(::google::protobuf::Timestamp* window_start);

  // .google.protobuf.Timestamp window_end = 2;
  bool has_window_end() const;
  void clear_window_end();
  static const int kWindowEndFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_window_end() const;
  public:
  const ::google::protobuf::Timestamp& window_end() const;
  ::google::protobuf::Timestamp* release_window_end();
  ::google::protobuf::Timestamp* mutable_window_end();
  void set_allocated_window_end(::google::protobuf::Timestamp* window_end);

  // .google.protobuf.Duration window_duration = 3;
  bool has_window_duration() const;
  void clear_window_duration();
  static const int kWindowDurationFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_window_duration() const;
  public:
  const ::google::protobuf::Duration& window_duration() const;
  ::google::protobuf::Duration* release_window_duration();
  ::google::protobuf::Duration* mutable_window_duration();
  void set_allocated_window_duration(::google::protobuf::Duration* window_duration);

  // uint64 sequence_number = 4;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint64 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint64 value);

  // .protobuf.TimeWindow.WindowType window_type = 5;
  void clear_window_type();
  static const int kWindowTypeFieldNumber = 5;
  ::protobuf::TimeWindow_WindowType window_type() const;
  void set_window_type(::protobuf::TimeWindow_WindowType value);

  // @@protoc_insertion_point(class_scope:protobuf.TimeWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* window_start_;
  ::google::protobuf::Timestamp* window_end_;
  ::google::protobuf::Duration* window_duration_;
  ::google::protobuf::uint64 sequence_number_;
  int window_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowAggregation_ProtocolDistributionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FlowAggregation_ProtocolDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FlowAggregation_ProtocolDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  FlowAggregation_ProtocolDistributionEntry_DoNotUse();
  FlowAggregation_ProtocolDistributionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FlowAggregation_ProtocolDistributionEntry_DoNotUse& other);
  static const FlowAggregation_ProtocolDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_ProtocolDistributionEntry_DoNotUse*>(&_FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FlowAggregation_PortDistributionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FlowAggregation_PortDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FlowAggregation_PortDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  FlowAggregation_PortDistributionEntry_DoNotUse();
  FlowAggregation_PortDistributionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FlowAggregation_PortDistributionEntry_DoNotUse& other);
  static const FlowAggregation_PortDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_PortDistributionEntry_DoNotUse*>(&_FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FlowAggregation_CountryDistributionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FlowAggregation_CountryDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FlowAggregation_CountryDistributionEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  FlowAggregation_CountryDistributionEntry_DoNotUse();
  FlowAggregation_CountryDistributionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FlowAggregation_CountryDistributionEntry_DoNotUse& other);
  static const FlowAggregation_CountryDistributionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlowAggregation_CountryDistributionEntry_DoNotUse*>(&_FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FlowAggregation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.FlowAggregation) */ {
 public:
  FlowAggregation();
  virtual ~FlowAggregation();

  FlowAggregation(const FlowAggregation& from);

  inline FlowAggregation& operator=(const FlowAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowAggregation(FlowAggregation&& from) noexcept
    : FlowAggregation() {
    *this = ::std::move(from);
  }

  inline FlowAggregation& operator=(FlowAggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowAggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowAggregation* internal_default_instance() {
    return reinterpret_cast<const FlowAggregation*>(
               &_FlowAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FlowAggregation* other);
  friend void swap(FlowAggregation& a, FlowAggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowAggregation* New() const final {
    return CreateMaybeMessage<FlowAggregation>(NULL);
  }

  FlowAggregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowAggregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowAggregation& from);
  void MergeFrom(const FlowAggregation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowAggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, uint64> protocol_distribution = 5;
  int protocol_distribution_size() const;
  void clear_protocol_distribution();
  static const int kProtocolDistributionFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
      protocol_distribution() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
      mutable_protocol_distribution();

  // map<string, uint64> port_distribution = 6;
  int port_distribution_size() const;
  void clear_port_distribution();
  static const int kPortDistributionFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
      port_distribution() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
      mutable_port_distribution();

  // map<string, uint64> country_distribution = 7;
  int country_distribution_size() const;
  void clear_country_distribution();
  static const int kCountryDistributionFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
      country_distribution() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
      mutable_country_distribution();

  // .protobuf.TimeWindow time_window = 1;
  bool has_time_window() const;
  void clear_time_window();
  static const int kTimeWindowFieldNumber = 1;
  private:
  const ::protobuf::TimeWindow& _internal_time_window() const;
  public:
  const ::protobuf::TimeWindow& time_window() const;
  ::protobuf::TimeWindow* release_time_window();
  ::protobuf::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::protobuf::TimeWindow* time_window);

  // uint64 total_flows_in_window = 2;
  void clear_total_flows_in_window();
  static const int kTotalFlowsInWindowFieldNumber = 2;
  ::google::protobuf::uint64 total_flows_in_window() const;
  void set_total_flows_in_window(::google::protobuf::uint64 value);

  // uint64 total_packets_in_window = 3;
  void clear_total_packets_in_window();
  static const int kTotalPacketsInWindowFieldNumber = 3;
  ::google::protobuf::uint64 total_packets_in_window() const;
  void set_total_packets_in_window(::google::protobuf::uint64 value);

  // uint64 total_bytes_in_window = 4;
  void clear_total_bytes_in_window();
  static const int kTotalBytesInWindowFieldNumber = 4;
  ::google::protobuf::uint64 total_bytes_in_window() const;
  void set_total_bytes_in_window(::google::protobuf::uint64 value);

  // double window_anomaly_score = 8;
  void clear_window_anomaly_score();
  static const int kWindowAnomalyScoreFieldNumber = 8;
  double window_anomaly_score() const;
  void set_window_anomaly_score(double value);

  // @@protoc_insertion_point(class_scope:protobuf.FlowAggregation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      FlowAggregation_ProtocolDistributionEntry_DoNotUse,
      ::std::string, ::google::protobuf::uint64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      0 > protocol_distribution_;
  ::google::protobuf::internal::MapField<
      FlowAggregation_PortDistributionEntry_DoNotUse,
      ::std::string, ::google::protobuf::uint64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      0 > port_distribution_;
  ::google::protobuf::internal::MapField<
      FlowAggregation_CountryDistributionEntry_DoNotUse,
      ::std::string, ::google::protobuf::uint64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      0 > country_distribution_;
  ::protobuf::TimeWindow* time_window_;
  ::google::protobuf::uint64 total_flows_in_window_;
  ::google::protobuf::uint64 total_packets_in_window_;
  ::google::protobuf::uint64 total_bytes_in_window_;
  double window_anomaly_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelPrediction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.ModelPrediction) */ {
 public:
  ModelPrediction();
  virtual ~ModelPrediction();

  ModelPrediction(const ModelPrediction& from);

  inline ModelPrediction& operator=(const ModelPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelPrediction(ModelPrediction&& from) noexcept
    : ModelPrediction() {
    *this = ::std::move(from);
  }

  inline ModelPrediction& operator=(ModelPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelPrediction* internal_default_instance() {
    return reinterpret_cast<const ModelPrediction*>(
               &_ModelPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ModelPrediction* other);
  friend void swap(ModelPrediction& a, ModelPrediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelPrediction* New() const final {
    return CreateMaybeMessage<ModelPrediction>(NULL);
  }

  ModelPrediction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelPrediction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelPrediction& from);
  void MergeFrom(const ModelPrediction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPrediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModelPrediction_ModelType ModelType;
  static const ModelType RANDOM_FOREST_GENERAL =
    ModelPrediction_ModelType_RANDOM_FOREST_GENERAL;
  static const ModelType LIGHTGBM_DDOS =
    ModelPrediction_ModelType_LIGHTGBM_DDOS;
  static const ModelType NEURAL_NETWORK_RANSOMWARE =
    ModelPrediction_ModelType_NEURAL_NETWORK_RANSOMWARE;
  static const ModelType ENSEMBLE_TRICAPA =
    ModelPrediction_ModelType_ENSEMBLE_TRICAPA;
  static const ModelType INTERNAL_TRAFFIC_CLASSIFIER =
    ModelPrediction_ModelType_INTERNAL_TRAFFIC_CLASSIFIER;
  static const ModelType TRANSFORMER_ADVANCED =
    ModelPrediction_ModelType_TRANSFORMER_ADVANCED;
  static inline bool ModelType_IsValid(int value) {
    return ModelPrediction_ModelType_IsValid(value);
  }
  static const ModelType ModelType_MIN =
    ModelPrediction_ModelType_ModelType_MIN;
  static const ModelType ModelType_MAX =
    ModelPrediction_ModelType_ModelType_MAX;
  static const int ModelType_ARRAYSIZE =
    ModelPrediction_ModelType_ModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelType_descriptor() {
    return ModelPrediction_ModelType_descriptor();
  }
  static inline const ::std::string& ModelType_Name(ModelType value) {
    return ModelPrediction_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(const ::std::string& name,
      ModelType* value) {
    return ModelPrediction_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double class_probabilities = 6;
  int class_probabilities_size() const;
  void clear_class_probabilities();
  static const int kClassProbabilitiesFieldNumber = 6;
  double class_probabilities(int index) const;
  void set_class_probabilities(int index, double value);
  void add_class_probabilities(double value);
  const ::google::protobuf::RepeatedField< double >&
      class_probabilities() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_class_probabilities();

  // string model_name = 1;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // string model_version = 2;
  void clear_model_version();
  static const int kModelVersionFieldNumber = 2;
  const ::std::string& model_version() const;
  void set_model_version(const ::std::string& value);
  #if LANG_CXX11
  void set_model_version(::std::string&& value);
  #endif
  void set_model_version(const char* value);
  void set_model_version(const char* value, size_t size);
  ::std::string* mutable_model_version();
  ::std::string* release_model_version();
  void set_allocated_model_version(::std::string* model_version);

  // string prediction_class = 4;
  void clear_prediction_class();
  static const int kPredictionClassFieldNumber = 4;
  const ::std::string& prediction_class() const;
  void set_prediction_class(const ::std::string& value);
  #if LANG_CXX11
  void set_prediction_class(::std::string&& value);
  #endif
  void set_prediction_class(const char* value);
  void set_prediction_class(const char* value, size_t size);
  ::std::string* mutable_prediction_class();
  ::std::string* release_prediction_class();
  void set_allocated_prediction_class(::std::string* prediction_class);

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  bool has_prediction_timestamp() const;
  void clear_prediction_timestamp();
  static const int kPredictionTimestampFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_prediction_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& prediction_timestamp() const;
  ::google::protobuf::Timestamp* release_prediction_timestamp();
  ::google::protobuf::Timestamp* mutable_prediction_timestamp();
  void set_allocated_prediction_timestamp(::google::protobuf::Timestamp* prediction_timestamp);

  // .google.protobuf.Duration processing_duration = 8;
  bool has_processing_duration() const;
  void clear_processing_duration();
  static const int kProcessingDurationFieldNumber = 8;
  private:
  const ::google::protobuf::Duration& _internal_processing_duration() const;
  public:
  const ::google::protobuf::Duration& processing_duration() const;
  ::google::protobuf::Duration* release_processing_duration();
  ::google::protobuf::Duration* mutable_processing_duration();
  void set_allocated_processing_duration(::google::protobuf::Duration* processing_duration);

  // double confidence_score = 5;
  void clear_confidence_score();
  static const int kConfidenceScoreFieldNumber = 5;
  double confidence_score() const;
  void set_confidence_score(double value);

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  void clear_model_type();
  static const int kModelTypeFieldNumber = 3;
  ::protobuf::ModelPrediction_ModelType model_type() const;
  void set_model_type(::protobuf::ModelPrediction_ModelType value);

  // @@protoc_insertion_point(class_scope:protobuf.ModelPrediction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > class_probabilities_;
  mutable int _class_probabilities_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr model_version_;
  ::google::protobuf::internal::ArenaStringPtr prediction_class_;
  ::google::protobuf::Timestamp* prediction_timestamp_;
  ::google::protobuf::Duration* processing_duration_;
  double confidence_score_;
  int model_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse();
  TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse& other);
  static const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse*>(&_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TricapaMLAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.TricapaMLAnalysis) */ {
 public:
  TricapaMLAnalysis();
  virtual ~TricapaMLAnalysis();

  TricapaMLAnalysis(const TricapaMLAnalysis& from);

  inline TricapaMLAnalysis& operator=(const TricapaMLAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TricapaMLAnalysis(TricapaMLAnalysis&& from) noexcept
    : TricapaMLAnalysis() {
    *this = ::std::move(from);
  }

  inline TricapaMLAnalysis& operator=(TricapaMLAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TricapaMLAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TricapaMLAnalysis* internal_default_instance() {
    return reinterpret_cast<const TricapaMLAnalysis*>(
               &_TricapaMLAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TricapaMLAnalysis* other);
  friend void swap(TricapaMLAnalysis& a, TricapaMLAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TricapaMLAnalysis* New() const final {
    return CreateMaybeMessage<TricapaMLAnalysis>(NULL);
  }

  TricapaMLAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TricapaMLAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TricapaMLAnalysis& from);
  void MergeFrom(const TricapaMLAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TricapaMLAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  int level3_specialized_predictions_size() const;
  void clear_level3_specialized_predictions();
  static const int kLevel3SpecializedPredictionsFieldNumber = 6;
  ::protobuf::ModelPrediction* mutable_level3_specialized_predictions(int index);
  ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >*
      mutable_level3_specialized_predictions();
  const ::protobuf::ModelPrediction& level3_specialized_predictions(int index) const;
  ::protobuf::ModelPrediction* add_level3_specialized_predictions();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >&
      level3_specialized_predictions() const;

  // repeated string models_activated = 11;
  int models_activated_size() const;
  void clear_models_activated();
  static const int kModelsActivatedFieldNumber = 11;
  const ::std::string& models_activated(int index) const;
  ::std::string* mutable_models_activated(int index);
  void set_models_activated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_models_activated(int index, ::std::string&& value);
  #endif
  void set_models_activated(int index, const char* value);
  void set_models_activated(int index, const char* value, size_t size);
  ::std::string* add_models_activated();
  void add_models_activated(const ::std::string& value);
  #if LANG_CXX11
  void add_models_activated(::std::string&& value);
  #endif
  void add_models_activated(const char* value);
  void add_models_activated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& models_activated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_models_activated();

  // map<string, double> feature_importance_scores = 12;
  int feature_importance_scores_size() const;
  void clear_feature_importance_scores();
  static const int kFeatureImportanceScoresFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, double >&
      feature_importance_scores() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_feature_importance_scores();

  // string traffic_context = 5;
  void clear_traffic_context();
  static const int kTrafficContextFieldNumber = 5;
  const ::std::string& traffic_context() const;
  void set_traffic_context(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_context(::std::string&& value);
  #endif
  void set_traffic_context(const char* value);
  void set_traffic_context(const char* value, size_t size);
  ::std::string* mutable_traffic_context();
  ::std::string* release_traffic_context();
  void set_allocated_traffic_context(::std::string* traffic_context);

  // string final_threat_classification = 7;
  void clear_final_threat_classification();
  static const int kFinalThreatClassificationFieldNumber = 7;
  const ::std::string& final_threat_classification() const;
  void set_final_threat_classification(const ::std::string& value);
  #if LANG_CXX11
  void set_final_threat_classification(::std::string&& value);
  #endif
  void set_final_threat_classification(const char* value);
  void set_final_threat_classification(const char* value, size_t size);
  ::std::string* mutable_final_threat_classification();
  ::std::string* release_final_threat_classification();
  void set_allocated_final_threat_classification(::std::string* final_threat_classification);

  // .protobuf.ModelPrediction level1_general_detection = 1;
  bool has_level1_general_detection() const;
  void clear_level1_general_detection();
  static const int kLevel1GeneralDetectionFieldNumber = 1;
  private:
  const ::protobuf::ModelPrediction& _internal_level1_general_detection() const;
  public:
  const ::protobuf::ModelPrediction& level1_general_detection() const;
  ::protobuf::ModelPrediction* release_level1_general_detection();
  ::protobuf::ModelPrediction* mutable_level1_general_detection();
  void set_allocated_level1_general_detection(::protobuf::ModelPrediction* level1_general_detection);

  // .protobuf.ModelPrediction level2_context_classification = 4;
  bool has_level2_context_classification() const;
  void clear_level2_context_classification();
  static const int kLevel2ContextClassificationFieldNumber = 4;
  private:
  const ::protobuf::ModelPrediction& _internal_level2_context_classification() const;
  public:
  const ::protobuf::ModelPrediction& level2_context_classification() const;
  ::protobuf::ModelPrediction* release_level2_context_classification();
  ::protobuf::ModelPrediction* mutable_level2_context_classification();
  void set_allocated_level2_context_classification(::protobuf::ModelPrediction* level2_context_classification);

  // .google.protobuf.Duration total_analysis_duration = 10;
  bool has_total_analysis_duration() const;
  void clear_total_analysis_duration();
  static const int kTotalAnalysisDurationFieldNumber = 10;
  private:
  const ::google::protobuf::Duration& _internal_total_analysis_duration() const;
  public:
  const ::google::protobuf::Duration& total_analysis_duration() const;
  ::google::protobuf::Duration* release_total_analysis_duration();
  ::google::protobuf::Duration* mutable_total_analysis_duration();
  void set_allocated_total_analysis_duration(::google::protobuf::Duration* total_analysis_duration);

  // double level1_confidence = 3;
  void clear_level1_confidence();
  static const int kLevel1ConfidenceFieldNumber = 3;
  double level1_confidence() const;
  void set_level1_confidence(double value);

  // double ensemble_confidence = 8;
  void clear_ensemble_confidence();
  static const int kEnsembleConfidenceFieldNumber = 8;
  double ensemble_confidence() const;
  void set_ensemble_confidence(double value);

  // bool attack_detected_level1 = 2;
  void clear_attack_detected_level1();
  static const int kAttackDetectedLevel1FieldNumber = 2;
  bool attack_detected_level1() const;
  void set_attack_detected_level1(bool value);

  // bool requires_human_review = 13;
  void clear_requires_human_review();
  static const int kRequiresHumanReviewFieldNumber = 13;
  bool requires_human_review() const;
  void set_requires_human_review(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.TricapaMLAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction > level3_specialized_predictions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> models_activated_;
  ::google::protobuf::internal::MapField<
      TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > feature_importance_scores_;
  ::google::protobuf::internal::ArenaStringPtr traffic_context_;
  ::google::protobuf::internal::ArenaStringPtr final_threat_classification_;
  ::protobuf::ModelPrediction* level1_general_detection_;
  ::protobuf::ModelPrediction* level2_context_classification_;
  ::google::protobuf::Duration* total_analysis_duration_;
  double level1_confidence_;
  double ensemble_confidence_;
  bool attack_detected_level1_;
  bool requires_human_review_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DistributedNode_NodeCapabilitiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DistributedNode_NodeCapabilitiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DistributedNode_NodeCapabilitiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DistributedNode_NodeCapabilitiesEntry_DoNotUse();
  DistributedNode_NodeCapabilitiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DistributedNode_NodeCapabilitiesEntry_DoNotUse& other);
  static const DistributedNode_NodeCapabilitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DistributedNode_NodeCapabilitiesEntry_DoNotUse*>(&_DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DistributedNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.DistributedNode) */ {
 public:
  DistributedNode();
  virtual ~DistributedNode();

  DistributedNode(const DistributedNode& from);

  inline DistributedNode& operator=(const DistributedNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistributedNode(DistributedNode&& from) noexcept
    : DistributedNode() {
    *this = ::std::move(from);
  }

  inline DistributedNode& operator=(DistributedNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DistributedNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributedNode* internal_default_instance() {
    return reinterpret_cast<const DistributedNode*>(
               &_DistributedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DistributedNode* other);
  friend void swap(DistributedNode& a, DistributedNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistributedNode* New() const final {
    return CreateMaybeMessage<DistributedNode>(NULL);
  }

  DistributedNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistributedNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistributedNode& from);
  void MergeFrom(const DistributedNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributedNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef DistributedNode_NodeRole NodeRole;
  static const NodeRole PACKET_SNIFFER =
    DistributedNode_NodeRole_PACKET_SNIFFER;
  static const NodeRole FEATURE_PROCESSOR =
    DistributedNode_NodeRole_FEATURE_PROCESSOR;
  static const NodeRole GEOIP_ENRICHER =
    DistributedNode_NodeRole_GEOIP_ENRICHER;
  static const NodeRole ML_ANALYZER =
    DistributedNode_NodeRole_ML_ANALYZER;
  static const NodeRole THREAT_DETECTOR =
    DistributedNode_NodeRole_THREAT_DETECTOR;
  static const NodeRole FIREWALL_CONTROLLER =
    DistributedNode_NodeRole_FIREWALL_CONTROLLER;
  static const NodeRole DATA_AGGREGATOR =
    DistributedNode_NodeRole_DATA_AGGREGATOR;
  static const NodeRole DASHBOARD_VISUALIZER =
    DistributedNode_NodeRole_DASHBOARD_VISUALIZER;
  static const NodeRole CLUSTER_COORDINATOR =
    DistributedNode_NodeRole_CLUSTER_COORDINATOR;
  static inline bool NodeRole_IsValid(int value) {
    return DistributedNode_NodeRole_IsValid(value);
  }
  static const NodeRole NodeRole_MIN =
    DistributedNode_NodeRole_NodeRole_MIN;
  static const NodeRole NodeRole_MAX =
    DistributedNode_NodeRole_NodeRole_MAX;
  static const int NodeRole_ARRAYSIZE =
    DistributedNode_NodeRole_NodeRole_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeRole_descriptor() {
    return DistributedNode_NodeRole_descriptor();
  }
  static inline const ::std::string& NodeRole_Name(NodeRole value) {
    return DistributedNode_NodeRole_Name(value);
  }
  static inline bool NodeRole_Parse(const ::std::string& name,
      NodeRole* value) {
    return DistributedNode_NodeRole_Parse(name, value);
  }

  typedef DistributedNode_NodeStatus NodeStatus;
  static const NodeStatus ACTIVE =
    DistributedNode_NodeStatus_ACTIVE;
  static const NodeStatus STARTING =
    DistributedNode_NodeStatus_STARTING;
  static const NodeStatus STOPPING =
    DistributedNode_NodeStatus_STOPPING;
  static const NodeStatus ERROR =
    DistributedNode_NodeStatus_ERROR;
  static const NodeStatus MAINTENANCE =
    DistributedNode_NodeStatus_MAINTENANCE;
  static const NodeStatus OVERLOADED =
    DistributedNode_NodeStatus_OVERLOADED;
  static inline bool NodeStatus_IsValid(int value) {
    return DistributedNode_NodeStatus_IsValid(value);
  }
  static const NodeStatus NodeStatus_MIN =
    DistributedNode_NodeStatus_NodeStatus_MIN;
  static const NodeStatus NodeStatus_MAX =
    DistributedNode_NodeStatus_NodeStatus_MAX;
  static const int NodeStatus_ARRAYSIZE =
    DistributedNode_NodeStatus_NodeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeStatus_descriptor() {
    return DistributedNode_NodeStatus_descriptor();
  }
  static inline const ::std::string& NodeStatus_Name(NodeStatus value) {
    return DistributedNode_NodeStatus_Name(value);
  }
  static inline bool NodeStatus_Parse(const ::std::string& name,
      NodeStatus* value) {
    return DistributedNode_NodeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> node_capabilities = 20;
  int node_capabilities_size() const;
  void clear_node_capabilities();
  static const int kNodeCapabilitiesFieldNumber = 20;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      node_capabilities() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_node_capabilities();

  // repeated string supported_protocols = 21;
  int supported_protocols_size() const;
  void clear_supported_protocols();
  static const int kSupportedProtocolsFieldNumber = 21;
  const ::std::string& supported_protocols(int index) const;
  ::std::string* mutable_supported_protocols(int index);
  void set_supported_protocols(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_supported_protocols(int index, ::std::string&& value);
  #endif
  void set_supported_protocols(int index, const char* value);
  void set_supported_protocols(int index, const char* value, size_t size);
  ::std::string* add_supported_protocols();
  void add_supported_protocols(const ::std::string& value);
  #if LANG_CXX11
  void add_supported_protocols(::std::string&& value);
  #endif
  void add_supported_protocols(const char* value);
  void add_supported_protocols(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_protocols() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_protocols();

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // string node_hostname = 2;
  void clear_node_hostname();
  static const int kNodeHostnameFieldNumber = 2;
  const ::std::string& node_hostname() const;
  void set_node_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_node_hostname(::std::string&& value);
  #endif
  void set_node_hostname(const char* value);
  void set_node_hostname(const char* value, size_t size);
  ::std::string* mutable_node_hostname();
  ::std::string* release_node_hostname();
  void set_allocated_node_hostname(::std::string* node_hostname);

  // string node_ip_address = 3;
  void clear_node_ip_address();
  static const int kNodeIpAddressFieldNumber = 3;
  const ::std::string& node_ip_address() const;
  void set_node_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_node_ip_address(::std::string&& value);
  #endif
  void set_node_ip_address(const char* value);
  void set_node_ip_address(const char* value, size_t size);
  ::std::string* mutable_node_ip_address();
  ::std::string* release_node_ip_address();
  void set_allocated_node_ip_address(::std::string* node_ip_address);

  // string physical_location = 4;
  void clear_physical_location();
  static const int kPhysicalLocationFieldNumber = 4;
  const ::std::string& physical_location() const;
  void set_physical_location(const ::std::string& value);
  #if LANG_CXX11
  void set_physical_location(::std::string&& value);
  #endif
  void set_physical_location(const char* value);
  void set_physical_location(const char* value, size_t size);
  ::std::string* mutable_physical_location();
  ::std::string* release_physical_location();
  void set_allocated_physical_location(::std::string* physical_location);

  // string operating_system = 8;
  void clear_operating_system();
  static const int kOperatingSystemFieldNumber = 8;
  const ::std::string& operating_system() const;
  void set_operating_system(const ::std::string& value);
  #if LANG_CXX11
  void set_operating_system(::std::string&& value);
  #endif
  void set_operating_system(const char* value);
  void set_operating_system(const char* value, size_t size);
  ::std::string* mutable_operating_system();
  ::std::string* release_operating_system();
  void set_allocated_operating_system(::std::string* operating_system);

  // string os_version = 9;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 9;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // string agent_version = 10;
  void clear_agent_version();
  static const int kAgentVersionFieldNumber = 10;
  const ::std::string& agent_version() const;
  void set_agent_version(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_version(::std::string&& value);
  #endif
  void set_agent_version(const char* value);
  void set_agent_version(const char* value, size_t size);
  ::std::string* mutable_agent_version();
  ::std::string* release_agent_version();
  void set_allocated_agent_version(::std::string* agent_version);

  // string container_id = 12;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 12;
  const ::std::string& container_id() const;
  void set_container_id(const ::std::string& value);
  #if LANG_CXX11
  void set_container_id(::std::string&& value);
  #endif
  void set_container_id(const char* value);
  void set_container_id(const char* value, size_t size);
  ::std::string* mutable_container_id();
  ::std::string* release_container_id();
  void set_allocated_container_id(::std::string* container_id);

  // string cluster_name = 13;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 13;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string configuration_version = 22;
  void clear_configuration_version();
  static const int kConfigurationVersionFieldNumber = 22;
  const ::std::string& configuration_version() const;
  void set_configuration_version(const ::std::string& value);
  #if LANG_CXX11
  void set_configuration_version(::std::string&& value);
  #endif
  void set_configuration_version(const char* value);
  void set_configuration_version(const char* value, size_t size);
  ::std::string* mutable_configuration_version();
  ::std::string* release_configuration_version();
  void set_allocated_configuration_version(::std::string* configuration_version);

  // .google.protobuf.Timestamp last_heartbeat = 7;
  bool has_last_heartbeat() const;
  void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_last_heartbeat() const;
  public:
  const ::google::protobuf::Timestamp& last_heartbeat() const;
  ::google::protobuf::Timestamp* release_last_heartbeat();
  ::google::protobuf::Timestamp* mutable_last_heartbeat();
  void set_allocated_last_heartbeat(::google::protobuf::Timestamp* last_heartbeat);

  // .google.protobuf.Duration uptime = 19;
  bool has_uptime() const;
  void clear_uptime();
  static const int kUptimeFieldNumber = 19;
  private:
  const ::google::protobuf::Duration& _internal_uptime() const;
  public:
  const ::google::protobuf::Duration& uptime() const;
  ::google::protobuf::Duration* release_uptime();
  ::google::protobuf::Duration* mutable_uptime();
  void set_allocated_uptime(::google::protobuf::Duration* uptime);

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  void clear_node_role();
  static const int kNodeRoleFieldNumber = 5;
  ::protobuf::DistributedNode_NodeRole node_role() const;
  void set_node_role(::protobuf::DistributedNode_NodeRole value);

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  void clear_node_status();
  static const int kNodeStatusFieldNumber = 6;
  ::protobuf::DistributedNode_NodeStatus node_status() const;
  void set_node_status(::protobuf::DistributedNode_NodeStatus value);

  // int32 process_id = 11;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 11;
  ::google::protobuf::int32 process_id() const;
  void set_process_id(::google::protobuf::int32 value);

  // float cpu_usage_percent = 15;
  void clear_cpu_usage_percent();
  static const int kCpuUsagePercentFieldNumber = 15;
  float cpu_usage_percent() const;
  void set_cpu_usage_percent(float value);

  // float memory_usage_mb = 16;
  void clear_memory_usage_mb();
  static const int kMemoryUsageMbFieldNumber = 16;
  float memory_usage_mb() const;
  void set_memory_usage_mb(float value);

  // int32 active_connections = 17;
  void clear_active_connections();
  static const int kActiveConnectionsFieldNumber = 17;
  ::google::protobuf::int32 active_connections() const;
  void set_active_connections(::google::protobuf::int32 value);

  // int32 queue_depth = 18;
  void clear_queue_depth();
  static const int kQueueDepthFieldNumber = 18;
  ::google::protobuf::int32 queue_depth() const;
  void set_queue_depth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.DistributedNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DistributedNode_NodeCapabilitiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > node_capabilities_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_protocols_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr node_hostname_;
  ::google::protobuf::internal::ArenaStringPtr node_ip_address_;
  ::google::protobuf::internal::ArenaStringPtr physical_location_;
  ::google::protobuf::internal::ArenaStringPtr operating_system_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr agent_version_;
  ::google::protobuf::internal::ArenaStringPtr container_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr configuration_version_;
  ::google::protobuf::Timestamp* last_heartbeat_;
  ::google::protobuf::Duration* uptime_;
  int node_role_;
  int node_status_;
  ::google::protobuf::int32 process_id_;
  float cpu_usage_percent_;
  float memory_usage_mb_;
  ::google::protobuf::int32 active_connections_;
  ::google::protobuf::int32 queue_depth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PipelineTracking_ComponentMetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PipelineTracking_ComponentMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PipelineTracking_ComponentMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PipelineTracking_ComponentMetadataEntry_DoNotUse();
  PipelineTracking_ComponentMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PipelineTracking_ComponentMetadataEntry_DoNotUse& other);
  static const PipelineTracking_ComponentMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PipelineTracking_ComponentMetadataEntry_DoNotUse*>(&_PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PipelineTracking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.PipelineTracking) */ {
 public:
  PipelineTracking();
  virtual ~PipelineTracking();

  PipelineTracking(const PipelineTracking& from);

  inline PipelineTracking& operator=(const PipelineTracking& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelineTracking(PipelineTracking&& from) noexcept
    : PipelineTracking() {
    *this = ::std::move(from);
  }

  inline PipelineTracking& operator=(PipelineTracking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelineTracking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelineTracking* internal_default_instance() {
    return reinterpret_cast<const PipelineTracking*>(
               &_PipelineTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(PipelineTracking* other);
  friend void swap(PipelineTracking& a, PipelineTracking& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelineTracking* New() const final {
    return CreateMaybeMessage<PipelineTracking>(NULL);
  }

  PipelineTracking* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PipelineTracking>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PipelineTracking& from);
  void MergeFrom(const PipelineTracking& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineTracking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string processing_errors = 26;
  int processing_errors_size() const;
  void clear_processing_errors();
  static const int kProcessingErrorsFieldNumber = 26;
  const ::std::string& processing_errors(int index) const;
  ::std::string* mutable_processing_errors(int index);
  void set_processing_errors(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_processing_errors(int index, ::std::string&& value);
  #endif
  void set_processing_errors(int index, const char* value);
  void set_processing_errors(int index, const char* value, size_t size);
  ::std::string* add_processing_errors();
  void add_processing_errors(const ::std::string& value);
  #if LANG_CXX11
  void add_processing_errors(::std::string&& value);
  #endif
  void add_processing_errors(const char* value);
  void add_processing_errors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& processing_errors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_processing_errors();

  // map<string, string> component_metadata = 30;
  int component_metadata_size() const;
  void clear_component_metadata();
  static const int kComponentMetadataFieldNumber = 30;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      component_metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_component_metadata();

  // repeated string processing_tags = 31;
  int processing_tags_size() const;
  void clear_processing_tags();
  static const int kProcessingTagsFieldNumber = 31;
  const ::std::string& processing_tags(int index) const;
  ::std::string* mutable_processing_tags(int index);
  void set_processing_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_processing_tags(int index, ::std::string&& value);
  #endif
  void set_processing_tags(int index, const char* value);
  void set_processing_tags(int index, const char* value, size_t size);
  ::std::string* add_processing_tags();
  void add_processing_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_processing_tags(::std::string&& value);
  #endif
  void add_processing_tags(const char* value);
  void add_processing_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& processing_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_processing_tags();

  // string pipeline_id = 1;
  void clear_pipeline_id();
  static const int kPipelineIdFieldNumber = 1;
  const ::std::string& pipeline_id() const;
  void set_pipeline_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pipeline_id(::std::string&& value);
  #endif
  void set_pipeline_id(const char* value);
  void set_pipeline_id(const char* value, size_t size);
  ::std::string* mutable_pipeline_id();
  ::std::string* release_pipeline_id();
  void set_allocated_pipeline_id(::std::string* pipeline_id);

  // string processing_path = 22;
  void clear_processing_path();
  static const int kProcessingPathFieldNumber = 22;
  const ::std::string& processing_path() const;
  void set_processing_path(const ::std::string& value);
  #if LANG_CXX11
  void set_processing_path(::std::string&& value);
  #endif
  void set_processing_path(const char* value);
  void set_processing_path(const char* value, size_t size);
  ::std::string* mutable_processing_path();
  ::std::string* release_processing_path();
  void set_allocated_processing_path(::std::string* processing_path);

  // .google.protobuf.Timestamp pipeline_start = 2;
  bool has_pipeline_start() const;
  void clear_pipeline_start();
  static const int kPipelineStartFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_pipeline_start() const;
  public:
  const ::google::protobuf::Timestamp& pipeline_start() const;
  ::google::protobuf::Timestamp* release_pipeline_start();
  ::google::protobuf::Timestamp* mutable_pipeline_start();
  void set_allocated_pipeline_start(::google::protobuf::Timestamp* pipeline_start);

  // .google.protobuf.Timestamp packet_captured_at = 10;
  bool has_packet_captured_at() const;
  void clear_packet_captured_at();
  static const int kPacketCapturedAtFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_packet_captured_at() const;
  public:
  const ::google::protobuf::Timestamp& packet_captured_at() const;
  ::google::protobuf::Timestamp* release_packet_captured_at();
  ::google::protobuf::Timestamp* mutable_packet_captured_at();
  void set_allocated_packet_captured_at(::google::protobuf::Timestamp* packet_captured_at);

  // .google.protobuf.Timestamp features_extracted_at = 11;
  bool has_features_extracted_at() const;
  void clear_features_extracted_at();
  static const int kFeaturesExtractedAtFieldNumber = 11;
  private:
  const ::google::protobuf::Timestamp& _internal_features_extracted_at() const;
  public:
  const ::google::protobuf::Timestamp& features_extracted_at() const;
  ::google::protobuf::Timestamp* release_features_extracted_at();
  ::google::protobuf::Timestamp* mutable_features_extracted_at();
  void set_allocated_features_extracted_at(::google::protobuf::Timestamp* features_extracted_at);

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  bool has_geoip_enriched_at() const;
  void clear_geoip_enriched_at();
  static const int kGeoipEnrichedAtFieldNumber = 12;
  private:
  const ::google::protobuf::Timestamp& _internal_geoip_enriched_at() const;
  public:
  const ::google::protobuf::Timestamp& geoip_enriched_at() const;
  ::google::protobuf::Timestamp* release_geoip_enriched_at();
  ::google::protobuf::Timestamp* mutable_geoip_enriched_at();
  void set_allocated_geoip_enriched_at(::google::protobuf::Timestamp* geoip_enriched_at);

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  bool has_ml_analyzed_at() const;
  void clear_ml_analyzed_at();
  static const int kMlAnalyzedAtFieldNumber = 13;
  private:
  const ::google::protobuf::Timestamp& _internal_ml_analyzed_at() const;
  public:
  const ::google::protobuf::Timestamp& ml_analyzed_at() const;
  ::google::protobuf::Timestamp* release_ml_analyzed_at();
  ::google::protobuf::Timestamp* mutable_ml_analyzed_at();
  void set_allocated_ml_analyzed_at(::google::protobuf::Timestamp* ml_analyzed_at);

  // .google.protobuf.Timestamp threat_detected_at = 14;
  bool has_threat_detected_at() const;
  void clear_threat_detected_at();
  static const int kThreatDetectedAtFieldNumber = 14;
  private:
  const ::google::protobuf::Timestamp& _internal_threat_detected_at() const;
  public:
  const ::google::protobuf::Timestamp& threat_detected_at() const;
  ::google::protobuf::Timestamp* release_threat_detected_at();
  ::google::protobuf::Timestamp* mutable_threat_detected_at();
  void set_allocated_threat_detected_at(::google::protobuf::Timestamp* threat_detected_at);

  // .google.protobuf.Timestamp action_taken_at = 15;
  bool has_action_taken_at() const;
  void clear_action_taken_at();
  static const int kActionTakenAtFieldNumber = 15;
  private:
  const ::google::protobuf::Timestamp& _internal_action_taken_at() const;
  public:
  const ::google::protobuf::Timestamp& action_taken_at() const;
  ::google::protobuf::Timestamp* release_action_taken_at();
  ::google::protobuf::Timestamp* mutable_action_taken_at();
  void set_allocated_action_taken_at(::google::protobuf::Timestamp* action_taken_at);

  // .google.protobuf.Duration total_processing_latency = 20;
  bool has_total_processing_latency() const;
  void clear_total_processing_latency();
  static const int kTotalProcessingLatencyFieldNumber = 20;
  private:
  const ::google::protobuf::Duration& _internal_total_processing_latency() const;
  public:
  const ::google::protobuf::Duration& total_processing_latency() const;
  ::google::protobuf::Duration* release_total_processing_latency();
  ::google::protobuf::Duration* mutable_total_processing_latency();
  void set_allocated_total_processing_latency(::google::protobuf::Duration* total_processing_latency);

  // int32 sniffer_process_id = 3;
  void clear_sniffer_process_id();
  static const int kSnifferProcessIdFieldNumber = 3;
  ::google::protobuf::int32 sniffer_process_id() const;
  void set_sniffer_process_id(::google::protobuf::int32 value);

  // int32 processor_process_id = 4;
  void clear_processor_process_id();
  static const int kProcessorProcessIdFieldNumber = 4;
  ::google::protobuf::int32 processor_process_id() const;
  void set_processor_process_id(::google::protobuf::int32 value);

  // int32 enricher_process_id = 5;
  void clear_enricher_process_id();
  static const int kEnricherProcessIdFieldNumber = 5;
  ::google::protobuf::int32 enricher_process_id() const;
  void set_enricher_process_id(::google::protobuf::int32 value);

  // int32 analyzer_process_id = 6;
  void clear_analyzer_process_id();
  static const int kAnalyzerProcessIdFieldNumber = 6;
  ::google::protobuf::int32 analyzer_process_id() const;
  void set_analyzer_process_id(::google::protobuf::int32 value);

  // int32 detector_process_id = 7;
  void clear_detector_process_id();
  static const int kDetectorProcessIdFieldNumber = 7;
  ::google::protobuf::int32 detector_process_id() const;
  void set_detector_process_id(::google::protobuf::int32 value);

  // int32 controller_process_id = 8;
  void clear_controller_process_id();
  static const int kControllerProcessIdFieldNumber = 8;
  ::google::protobuf::int32 controller_process_id() const;
  void set_controller_process_id(::google::protobuf::int32 value);

  // int32 pipeline_hops_count = 21;
  void clear_pipeline_hops_count();
  static const int kPipelineHopsCountFieldNumber = 21;
  ::google::protobuf::int32 pipeline_hops_count() const;
  void set_pipeline_hops_count(::google::protobuf::int32 value);

  // int32 retry_attempts = 25;
  void clear_retry_attempts();
  static const int kRetryAttemptsFieldNumber = 25;
  ::google::protobuf::int32 retry_attempts() const;
  void set_retry_attempts(::google::protobuf::int32 value);

  // bool requires_reprocessing = 27;
  void clear_requires_reprocessing();
  static const int kRequiresReprocessingFieldNumber = 27;
  bool requires_reprocessing() const;
  void set_requires_reprocessing(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.PipelineTracking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> processing_errors_;
  ::google::protobuf::internal::MapField<
      PipelineTracking_ComponentMetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > component_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> processing_tags_;
  ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
  ::google::protobuf::internal::ArenaStringPtr processing_path_;
  ::google::protobuf::Timestamp* pipeline_start_;
  ::google::protobuf::Timestamp* packet_captured_at_;
  ::google::protobuf::Timestamp* features_extracted_at_;
  ::google::protobuf::Timestamp* geoip_enriched_at_;
  ::google::protobuf::Timestamp* ml_analyzed_at_;
  ::google::protobuf::Timestamp* threat_detected_at_;
  ::google::protobuf::Timestamp* action_taken_at_;
  ::google::protobuf::Duration* total_processing_latency_;
  ::google::protobuf::int32 sniffer_process_id_;
  ::google::protobuf::int32 processor_process_id_;
  ::google::protobuf::int32 enricher_process_id_;
  ::google::protobuf::int32 analyzer_process_id_;
  ::google::protobuf::int32 detector_process_id_;
  ::google::protobuf::int32 controller_process_id_;
  ::google::protobuf::int32 pipeline_hops_count_;
  ::google::protobuf::int32 retry_attempts_;
  bool requires_reprocessing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RAGAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.RAGAnalysis) */ {
 public:
  RAGAnalysis();
  virtual ~RAGAnalysis();

  RAGAnalysis(const RAGAnalysis& from);

  inline RAGAnalysis& operator=(const RAGAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RAGAnalysis(RAGAnalysis&& from) noexcept
    : RAGAnalysis() {
    *this = ::std::move(from);
  }

  inline RAGAnalysis& operator=(RAGAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RAGAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RAGAnalysis* internal_default_instance() {
    return reinterpret_cast<const RAGAnalysis*>(
               &_RAGAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RAGAnalysis* other);
  friend void swap(RAGAnalysis& a, RAGAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RAGAnalysis* New() const final {
    return CreateMaybeMessage<RAGAnalysis>(NULL);
  }

  RAGAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RAGAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RAGAnalysis& from);
  void MergeFrom(const RAGAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RAGAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string retrieved_knowledge = 2;
  int retrieved_knowledge_size() const;
  void clear_retrieved_knowledge();
  static const int kRetrievedKnowledgeFieldNumber = 2;
  const ::std::string& retrieved_knowledge(int index) const;
  ::std::string* mutable_retrieved_knowledge(int index);
  void set_retrieved_knowledge(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_retrieved_knowledge(int index, ::std::string&& value);
  #endif
  void set_retrieved_knowledge(int index, const char* value);
  void set_retrieved_knowledge(int index, const char* value, size_t size);
  ::std::string* add_retrieved_knowledge();
  void add_retrieved_knowledge(const ::std::string& value);
  #if LANG_CXX11
  void add_retrieved_knowledge(::std::string&& value);
  #endif
  void add_retrieved_knowledge(const char* value);
  void add_retrieved_knowledge(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& retrieved_knowledge() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_retrieved_knowledge();

  // repeated double relevance_scores = 3;
  int relevance_scores_size() const;
  void clear_relevance_scores();
  static const int kRelevanceScoresFieldNumber = 3;
  double relevance_scores(int index) const;
  void set_relevance_scores(int index, double value);
  void add_relevance_scores(double value);
  const ::google::protobuf::RepeatedField< double >&
      relevance_scores() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_relevance_scores();

  // repeated string knowledge_sources = 6;
  int knowledge_sources_size() const;
  void clear_knowledge_sources();
  static const int kKnowledgeSourcesFieldNumber = 6;
  const ::std::string& knowledge_sources(int index) const;
  ::std::string* mutable_knowledge_sources(int index);
  void set_knowledge_sources(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_knowledge_sources(int index, ::std::string&& value);
  #endif
  void set_knowledge_sources(int index, const char* value);
  void set_knowledge_sources(int index, const char* value, size_t size);
  ::std::string* add_knowledge_sources();
  void add_knowledge_sources(const ::std::string& value);
  #if LANG_CXX11
  void add_knowledge_sources(::std::string&& value);
  #endif
  void add_knowledge_sources(const char* value);
  void add_knowledge_sources(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& knowledge_sources() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_knowledge_sources();

  // string query_text = 1;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // string ai_generated_analysis = 4;
  void clear_ai_generated_analysis();
  static const int kAiGeneratedAnalysisFieldNumber = 4;
  const ::std::string& ai_generated_analysis() const;
  void set_ai_generated_analysis(const ::std::string& value);
  #if LANG_CXX11
  void set_ai_generated_analysis(::std::string&& value);
  #endif
  void set_ai_generated_analysis(const char* value);
  void set_ai_generated_analysis(const char* value, size_t size);
  ::std::string* mutable_ai_generated_analysis();
  ::std::string* release_ai_generated_analysis();
  void set_allocated_ai_generated_analysis(::std::string* ai_generated_analysis);

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  bool has_analysis_timestamp() const;
  void clear_analysis_timestamp();
  static const int kAnalysisTimestampFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_analysis_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& analysis_timestamp() const;
  ::google::protobuf::Timestamp* release_analysis_timestamp();
  ::google::protobuf::Timestamp* mutable_analysis_timestamp();
  void set_allocated_analysis_timestamp(::google::protobuf::Timestamp* analysis_timestamp);

  // double analysis_confidence = 5;
  void clear_analysis_confidence();
  static const int kAnalysisConfidenceFieldNumber = 5;
  double analysis_confidence() const;
  void set_analysis_confidence(double value);

  // @@protoc_insertion_point(class_scope:protobuf.RAGAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> retrieved_knowledge_;
  ::google::protobuf::RepeatedField< double > relevance_scores_;
  mutable int _relevance_scores_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> knowledge_sources_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::google::protobuf::internal::ArenaStringPtr ai_generated_analysis_;
  ::google::protobuf::Timestamp* analysis_timestamp_;
  double analysis_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.HumanFeedback) */ {
 public:
  HumanFeedback();
  virtual ~HumanFeedback();

  HumanFeedback(const HumanFeedback& from);

  inline HumanFeedback& operator=(const HumanFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanFeedback(HumanFeedback&& from) noexcept
    : HumanFeedback() {
    *this = ::std::move(from);
  }

  inline HumanFeedback& operator=(HumanFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanFeedback* internal_default_instance() {
    return reinterpret_cast<const HumanFeedback*>(
               &_HumanFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(HumanFeedback* other);
  friend void swap(HumanFeedback& a, HumanFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanFeedback* New() const final {
    return CreateMaybeMessage<HumanFeedback>(NULL);
  }

  HumanFeedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanFeedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanFeedback& from);
  void MergeFrom(const HumanFeedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HumanFeedback_FeedbackType FeedbackType;
  static const FeedbackType VALIDATION =
    HumanFeedback_FeedbackType_VALIDATION;
  static const FeedbackType CORRECTION =
    HumanFeedback_FeedbackType_CORRECTION;
  static const FeedbackType ENHANCEMENT =
    HumanFeedback_FeedbackType_ENHANCEMENT;
  static const FeedbackType FALSE_POSITIVE_REPORT =
    HumanFeedback_FeedbackType_FALSE_POSITIVE_REPORT;
  static const FeedbackType ADDITIONAL_CONTEXT =
    HumanFeedback_FeedbackType_ADDITIONAL_CONTEXT;
  static inline bool FeedbackType_IsValid(int value) {
    return HumanFeedback_FeedbackType_IsValid(value);
  }
  static const FeedbackType FeedbackType_MIN =
    HumanFeedback_FeedbackType_FeedbackType_MIN;
  static const FeedbackType FeedbackType_MAX =
    HumanFeedback_FeedbackType_FeedbackType_MAX;
  static const int FeedbackType_ARRAYSIZE =
    HumanFeedback_FeedbackType_FeedbackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FeedbackType_descriptor() {
    return HumanFeedback_FeedbackType_descriptor();
  }
  static inline const ::std::string& FeedbackType_Name(FeedbackType value) {
    return HumanFeedback_FeedbackType_Name(value);
  }
  static inline bool FeedbackType_Parse(const ::std::string& name,
      FeedbackType* value) {
    return HumanFeedback_FeedbackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string analyst_tags = 8;
  int analyst_tags_size() const;
  void clear_analyst_tags();
  static const int kAnalystTagsFieldNumber = 8;
  const ::std::string& analyst_tags(int index) const;
  ::std::string* mutable_analyst_tags(int index);
  void set_analyst_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_analyst_tags(int index, ::std::string&& value);
  #endif
  void set_analyst_tags(int index, const char* value);
  void set_analyst_tags(int index, const char* value, size_t size);
  ::std::string* add_analyst_tags();
  void add_analyst_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_analyst_tags(::std::string&& value);
  #endif
  void add_analyst_tags(const char* value);
  void add_analyst_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& analyst_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_analyst_tags();

  // string feedback_id = 1;
  void clear_feedback_id();
  static const int kFeedbackIdFieldNumber = 1;
  const ::std::string& feedback_id() const;
  void set_feedback_id(const ::std::string& value);
  #if LANG_CXX11
  void set_feedback_id(::std::string&& value);
  #endif
  void set_feedback_id(const char* value);
  void set_feedback_id(const char* value, size_t size);
  ::std::string* mutable_feedback_id();
  ::std::string* release_feedback_id();
  void set_allocated_feedback_id(::std::string* feedback_id);

  // string analyst_user_id = 2;
  void clear_analyst_user_id();
  static const int kAnalystUserIdFieldNumber = 2;
  const ::std::string& analyst_user_id() const;
  void set_analyst_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_analyst_user_id(::std::string&& value);
  #endif
  void set_analyst_user_id(const char* value);
  void set_analyst_user_id(const char* value, size_t size);
  ::std::string* mutable_analyst_user_id();
  ::std::string* release_analyst_user_id();
  void set_allocated_analyst_user_id(::std::string* analyst_user_id);

  // string event_reference_id = 3;
  void clear_event_reference_id();
  static const int kEventReferenceIdFieldNumber = 3;
  const ::std::string& event_reference_id() const;
  void set_event_reference_id(const ::std::string& value);
  #if LANG_CXX11
  void set_event_reference_id(::std::string&& value);
  #endif
  void set_event_reference_id(const char* value);
  void set_event_reference_id(const char* value, size_t size);
  ::std::string* mutable_event_reference_id();
  ::std::string* release_event_reference_id();
  void set_allocated_event_reference_id(::std::string* event_reference_id);

  // string analyst_explanation = 7;
  void clear_analyst_explanation();
  static const int kAnalystExplanationFieldNumber = 7;
  const ::std::string& analyst_explanation() const;
  void set_analyst_explanation(const ::std::string& value);
  #if LANG_CXX11
  void set_analyst_explanation(::std::string&& value);
  #endif
  void set_analyst_explanation(const char* value);
  void set_analyst_explanation(const char* value, size_t size);
  ::std::string* mutable_analyst_explanation();
  ::std::string* release_analyst_explanation();
  void set_allocated_analyst_explanation(::std::string* analyst_explanation);

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  bool has_feedback_timestamp() const;
  void clear_feedback_timestamp();
  static const int kFeedbackTimestampFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_feedback_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& feedback_timestamp() const;
  ::google::protobuf::Timestamp* release_feedback_timestamp();
  ::google::protobuf::Timestamp* mutable_feedback_timestamp();
  void set_allocated_feedback_timestamp(::google::protobuf::Timestamp* feedback_timestamp);

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  void clear_feedback_type();
  static const int kFeedbackTypeFieldNumber = 4;
  ::protobuf::HumanFeedback_FeedbackType feedback_type() const;
  void set_feedback_type(::protobuf::HumanFeedback_FeedbackType value);

  // bool confirmed_true_positive = 5;
  void clear_confirmed_true_positive();
  static const int kConfirmedTruePositiveFieldNumber = 5;
  bool confirmed_true_positive() const;
  void set_confirmed_true_positive(bool value);

  // bool confirmed_false_positive = 6;
  void clear_confirmed_false_positive();
  static const int kConfirmedFalsePositiveFieldNumber = 6;
  bool confirmed_false_positive() const;
  void set_confirmed_false_positive(bool value);

  // int32 analyst_confidence_rating = 9;
  void clear_analyst_confidence_rating();
  static const int kAnalystConfidenceRatingFieldNumber = 9;
  ::google::protobuf::int32 analyst_confidence_rating() const;
  void set_analyst_confidence_rating(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.HumanFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> analyst_tags_;
  ::google::protobuf::internal::ArenaStringPtr feedback_id_;
  ::google::protobuf::internal::ArenaStringPtr analyst_user_id_;
  ::google::protobuf::internal::ArenaStringPtr event_reference_id_;
  ::google::protobuf::internal::ArenaStringPtr analyst_explanation_;
  ::google::protobuf::Timestamp* feedback_timestamp_;
  int feedback_type_;
  bool confirmed_true_positive_;
  bool confirmed_false_positive_;
  ::google::protobuf::int32 analyst_confidence_rating_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanInTheLoopReview : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.HumanInTheLoopReview) */ {
 public:
  HumanInTheLoopReview();
  virtual ~HumanInTheLoopReview();

  HumanInTheLoopReview(const HumanInTheLoopReview& from);

  inline HumanInTheLoopReview& operator=(const HumanInTheLoopReview& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanInTheLoopReview(HumanInTheLoopReview&& from) noexcept
    : HumanInTheLoopReview() {
    *this = ::std::move(from);
  }

  inline HumanInTheLoopReview& operator=(HumanInTheLoopReview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanInTheLoopReview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanInTheLoopReview* internal_default_instance() {
    return reinterpret_cast<const HumanInTheLoopReview*>(
               &_HumanInTheLoopReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(HumanInTheLoopReview* other);
  friend void swap(HumanInTheLoopReview& a, HumanInTheLoopReview& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanInTheLoopReview* New() const final {
    return CreateMaybeMessage<HumanInTheLoopReview>(NULL);
  }

  HumanInTheLoopReview* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanInTheLoopReview>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanInTheLoopReview& from);
  void MergeFrom(const HumanInTheLoopReview& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanInTheLoopReview* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HumanInTheLoopReview_ReviewPriority ReviewPriority;
  static const ReviewPriority LOW =
    HumanInTheLoopReview_ReviewPriority_LOW;
  static const ReviewPriority MEDIUM =
    HumanInTheLoopReview_ReviewPriority_MEDIUM;
  static const ReviewPriority HIGH =
    HumanInTheLoopReview_ReviewPriority_HIGH;
  static const ReviewPriority CRITICAL =
    HumanInTheLoopReview_ReviewPriority_CRITICAL;
  static const ReviewPriority EMERGENCY =
    HumanInTheLoopReview_ReviewPriority_EMERGENCY;
  static inline bool ReviewPriority_IsValid(int value) {
    return HumanInTheLoopReview_ReviewPriority_IsValid(value);
  }
  static const ReviewPriority ReviewPriority_MIN =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_MIN;
  static const ReviewPriority ReviewPriority_MAX =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_MAX;
  static const int ReviewPriority_ARRAYSIZE =
    HumanInTheLoopReview_ReviewPriority_ReviewPriority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReviewPriority_descriptor() {
    return HumanInTheLoopReview_ReviewPriority_descriptor();
  }
  static inline const ::std::string& ReviewPriority_Name(ReviewPriority value) {
    return HumanInTheLoopReview_ReviewPriority_Name(value);
  }
  static inline bool ReviewPriority_Parse(const ::std::string& name,
      ReviewPriority* value) {
    return HumanInTheLoopReview_ReviewPriority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string review_reasons = 3;
  int review_reasons_size() const;
  void clear_review_reasons();
  static const int kReviewReasonsFieldNumber = 3;
  const ::std::string& review_reasons(int index) const;
  ::std::string* mutable_review_reasons(int index);
  void set_review_reasons(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_review_reasons(int index, ::std::string&& value);
  #endif
  void set_review_reasons(int index, const char* value);
  void set_review_reasons(int index, const char* value, size_t size);
  ::std::string* add_review_reasons();
  void add_review_reasons(const ::std::string& value);
  #if LANG_CXX11
  void add_review_reasons(::std::string&& value);
  #endif
  void add_review_reasons(const char* value);
  void add_review_reasons(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& review_reasons() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_review_reasons();

  // .protobuf.HumanFeedback analyst_feedback = 4;
  bool has_analyst_feedback() const;
  void clear_analyst_feedback();
  static const int kAnalystFeedbackFieldNumber = 4;
  private:
  const ::protobuf::HumanFeedback& _internal_analyst_feedback() const;
  public:
  const ::protobuf::HumanFeedback& analyst_feedback() const;
  ::protobuf::HumanFeedback* release_analyst_feedback();
  ::protobuf::HumanFeedback* mutable_analyst_feedback();
  void set_allocated_analyst_feedback(::protobuf::HumanFeedback* analyst_feedback);

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  bool has_escalated_timestamp() const;
  void clear_escalated_timestamp();
  static const int kEscalatedTimestampFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_escalated_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& escalated_timestamp() const;
  ::google::protobuf::Timestamp* release_escalated_timestamp();
  ::google::protobuf::Timestamp* mutable_escalated_timestamp();
  void set_allocated_escalated_timestamp(::google::protobuf::Timestamp* escalated_timestamp);

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  bool has_reviewed_timestamp() const;
  void clear_reviewed_timestamp();
  static const int kReviewedTimestampFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_reviewed_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& reviewed_timestamp() const;
  ::google::protobuf::Timestamp* release_reviewed_timestamp();
  ::google::protobuf::Timestamp* mutable_reviewed_timestamp();
  void set_allocated_reviewed_timestamp(::google::protobuf::Timestamp* reviewed_timestamp);

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  void clear_review_priority();
  static const int kReviewPriorityFieldNumber = 2;
  ::protobuf::HumanInTheLoopReview_ReviewPriority review_priority() const;
  void set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value);

  // bool requires_human_analysis = 1;
  void clear_requires_human_analysis();
  static const int kRequiresHumanAnalysisFieldNumber = 1;
  bool requires_human_analysis() const;
  void set_requires_human_analysis(bool value);

  // bool review_completed = 7;
  void clear_review_completed();
  static const int kReviewCompletedFieldNumber = 7;
  bool review_completed() const;
  void set_review_completed(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.HumanInTheLoopReview)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> review_reasons_;
  ::protobuf::HumanFeedback* analyst_feedback_;
  ::google::protobuf::Timestamp* escalated_timestamp_;
  ::google::protobuf::Timestamp* reviewed_timestamp_;
  int review_priority_;
  bool requires_human_analysis_;
  bool review_completed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkSecurityEvent_CustomMetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NetworkSecurityEvent_CustomMetadataEntry_DoNotUse();
  NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse& other);
  static const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse*>(&_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NetworkSecurityEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.NetworkSecurityEvent) */ {
 public:
  NetworkSecurityEvent();
  virtual ~NetworkSecurityEvent();

  NetworkSecurityEvent(const NetworkSecurityEvent& from);

  inline NetworkSecurityEvent& operator=(const NetworkSecurityEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkSecurityEvent(NetworkSecurityEvent&& from) noexcept
    : NetworkSecurityEvent() {
    *this = ::std::move(from);
  }

  inline NetworkSecurityEvent& operator=(NetworkSecurityEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkSecurityEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkSecurityEvent* internal_default_instance() {
    return reinterpret_cast<const NetworkSecurityEvent*>(
               &_NetworkSecurityEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(NetworkSecurityEvent* other);
  friend void swap(NetworkSecurityEvent& a, NetworkSecurityEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkSecurityEvent* New() const final {
    return CreateMaybeMessage<NetworkSecurityEvent>(NULL);
  }

  NetworkSecurityEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkSecurityEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkSecurityEvent& from);
  void MergeFrom(const NetworkSecurityEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSecurityEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  int additional_model_predictions_size() const;
  void clear_additional_model_predictions();
  static const int kAdditionalModelPredictionsFieldNumber = 8;
  ::protobuf::ModelPrediction* mutable_additional_model_predictions(int index);
  ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >*
      mutable_additional_model_predictions();
  const ::protobuf::ModelPrediction& additional_model_predictions(int index) const;
  ::protobuf::ModelPrediction* add_additional_model_predictions();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >&
      additional_model_predictions() const;

  // repeated string related_event_ids = 21;
  int related_event_ids_size() const;
  void clear_related_event_ids();
  static const int kRelatedEventIdsFieldNumber = 21;
  const ::std::string& related_event_ids(int index) const;
  ::std::string* mutable_related_event_ids(int index);
  void set_related_event_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_related_event_ids(int index, ::std::string&& value);
  #endif
  void set_related_event_ids(int index, const char* value);
  void set_related_event_ids(int index, const char* value, size_t size);
  ::std::string* add_related_event_ids();
  void add_related_event_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_related_event_ids(::std::string&& value);
  #endif
  void add_related_event_ids(const char* value);
  void add_related_event_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& related_event_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_related_event_ids();

  // map<string, string> custom_metadata = 26;
  int custom_metadata_size() const;
  void clear_custom_metadata();
  static const int kCustomMetadataFieldNumber = 26;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      custom_metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_custom_metadata();

  // repeated string event_tags = 27;
  int event_tags_size() const;
  void clear_event_tags();
  static const int kEventTagsFieldNumber = 27;
  const ::std::string& event_tags(int index) const;
  ::std::string* mutable_event_tags(int index);
  void set_event_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_event_tags(int index, ::std::string&& value);
  #endif
  void set_event_tags(int index, const char* value);
  void set_event_tags(int index, const char* value, size_t size);
  ::std::string* add_event_tags();
  void add_event_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_event_tags(::std::string&& value);
  #endif
  void add_event_tags(const char* value);
  void add_event_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& event_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event_tags();

  // string event_id = 1;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  const ::std::string& event_id() const;
  void set_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_event_id(::std::string&& value);
  #endif
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  ::std::string* mutable_event_id();
  ::std::string* release_event_id();
  void set_allocated_event_id(::std::string* event_id);

  // string originating_node_id = 3;
  void clear_originating_node_id();
  static const int kOriginatingNodeIdFieldNumber = 3;
  const ::std::string& originating_node_id() const;
  void set_originating_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_originating_node_id(::std::string&& value);
  #endif
  void set_originating_node_id(const char* value);
  void set_originating_node_id(const char* value, size_t size);
  ::std::string* mutable_originating_node_id();
  ::std::string* release_originating_node_id();
  void set_allocated_originating_node_id(::std::string* originating_node_id);

  // string final_classification = 16;
  void clear_final_classification();
  static const int kFinalClassificationFieldNumber = 16;
  const ::std::string& final_classification() const;
  void set_final_classification(const ::std::string& value);
  #if LANG_CXX11
  void set_final_classification(::std::string&& value);
  #endif
  void set_final_classification(const char* value);
  void set_final_classification(const char* value, size_t size);
  ::std::string* mutable_final_classification();
  ::std::string* release_final_classification();
  void set_allocated_final_classification(::std::string* final_classification);

  // string threat_category = 17;
  void clear_threat_category();
  static const int kThreatCategoryFieldNumber = 17;
  const ::std::string& threat_category() const;
  void set_threat_category(const ::std::string& value);
  #if LANG_CXX11
  void set_threat_category(::std::string&& value);
  #endif
  void set_threat_category(const char* value);
  void set_threat_category(const char* value, size_t size);
  ::std::string* mutable_threat_category();
  ::std::string* release_threat_category();
  void set_allocated_threat_category(::std::string* threat_category);

  // string correlation_id = 20;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 20;
  const ::std::string& correlation_id() const;
  void set_correlation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_correlation_id(::std::string&& value);
  #endif
  void set_correlation_id(const char* value);
  void set_correlation_id(const char* value, size_t size);
  ::std::string* mutable_correlation_id();
  ::std::string* release_correlation_id();
  void set_allocated_correlation_id(::std::string* correlation_id);

  // string event_chain_id = 22;
  void clear_event_chain_id();
  static const int kEventChainIdFieldNumber = 22;
  const ::std::string& event_chain_id() const;
  void set_event_chain_id(const ::std::string& value);
  #if LANG_CXX11
  void set_event_chain_id(::std::string&& value);
  #endif
  void set_event_chain_id(const char* value);
  void set_event_chain_id(const char* value, size_t size);
  ::std::string* mutable_event_chain_id();
  ::std::string* release_event_chain_id();
  void set_allocated_event_chain_id(::std::string* event_chain_id);

  // string protobuf_version = 28;
  void clear_protobuf_version();
  static const int kProtobufVersionFieldNumber = 28;
  const ::std::string& protobuf_version() const;
  void set_protobuf_version(const ::std::string& value);
  #if LANG_CXX11
  void set_protobuf_version(::std::string&& value);
  #endif
  void set_protobuf_version(const char* value);
  void set_protobuf_version(const char* value, size_t size);
  ::std::string* mutable_protobuf_version();
  ::std::string* release_protobuf_version();
  void set_allocated_protobuf_version(::std::string* protobuf_version);

  // .google.protobuf.Timestamp event_timestamp = 2;
  bool has_event_timestamp() const;
  void clear_event_timestamp();
  static const int kEventTimestampFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_event_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& event_timestamp() const;
  ::google::protobuf::Timestamp* release_event_timestamp();
  ::google::protobuf::Timestamp* mutable_event_timestamp();
  void set_allocated_event_timestamp(::google::protobuf::Timestamp* event_timestamp);

  // .protobuf.NetworkFeatures network_features = 4;
  bool has_network_features() const;
  void clear_network_features();
  static const int kNetworkFeaturesFieldNumber = 4;
  private:
  const ::protobuf::NetworkFeatures& _internal_network_features() const;
  public:
  const ::protobuf::NetworkFeatures& network_features() const;
  ::protobuf::NetworkFeatures* release_network_features();
  ::protobuf::NetworkFeatures* mutable_network_features();
  void set_allocated_network_features(::protobuf::NetworkFeatures* network_features);

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  bool has_geo_enrichment() const;
  void clear_geo_enrichment();
  static const int kGeoEnrichmentFieldNumber = 5;
  private:
  const ::protobuf::GeoEnrichment& _internal_geo_enrichment() const;
  public:
  const ::protobuf::GeoEnrichment& geo_enrichment() const;
  ::protobuf::GeoEnrichment* release_geo_enrichment();
  ::protobuf::GeoEnrichment* mutable_geo_enrichment();
  void set_allocated_geo_enrichment(::protobuf::GeoEnrichment* geo_enrichment);

  // .protobuf.TimeWindow time_window = 6;
  bool has_time_window() const;
  void clear_time_window();
  static const int kTimeWindowFieldNumber = 6;
  private:
  const ::protobuf::TimeWindow& _internal_time_window() const;
  public:
  const ::protobuf::TimeWindow& time_window() const;
  ::protobuf::TimeWindow* release_time_window();
  ::protobuf::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::protobuf::TimeWindow* time_window);

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  bool has_ml_analysis() const;
  void clear_ml_analysis();
  static const int kMlAnalysisFieldNumber = 7;
  private:
  const ::protobuf::TricapaMLAnalysis& _internal_ml_analysis() const;
  public:
  const ::protobuf::TricapaMLAnalysis& ml_analysis() const;
  ::protobuf::TricapaMLAnalysis* release_ml_analysis();
  ::protobuf::TricapaMLAnalysis* mutable_ml_analysis();
  void set_allocated_ml_analysis(::protobuf::TricapaMLAnalysis* ml_analysis);

  // .protobuf.DistributedNode capturing_node = 9;
  bool has_capturing_node() const;
  void clear_capturing_node();
  static const int kCapturingNodeFieldNumber = 9;
  private:
  const ::protobuf::DistributedNode& _internal_capturing_node() const;
  public:
  const ::protobuf::DistributedNode& capturing_node() const;
  ::protobuf::DistributedNode* release_capturing_node();
  ::protobuf::DistributedNode* mutable_capturing_node();
  void set_allocated_capturing_node(::protobuf::DistributedNode* capturing_node);

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  bool has_pipeline_tracking() const;
  void clear_pipeline_tracking();
  static const int kPipelineTrackingFieldNumber = 10;
  private:
  const ::protobuf::PipelineTracking& _internal_pipeline_tracking() const;
  public:
  const ::protobuf::PipelineTracking& pipeline_tracking() const;
  ::protobuf::PipelineTracking* release_pipeline_tracking();
  ::protobuf::PipelineTracking* mutable_pipeline_tracking();
  void set_allocated_pipeline_tracking(::protobuf::PipelineTracking* pipeline_tracking);

  // .protobuf.RAGAnalysis rag_analysis = 11;
  bool has_rag_analysis() const;
  void clear_rag_analysis();
  static const int kRagAnalysisFieldNumber = 11;
  private:
  const ::protobuf::RAGAnalysis& _internal_rag_analysis() const;
  public:
  const ::protobuf::RAGAnalysis& rag_analysis() const;
  ::protobuf::RAGAnalysis* release_rag_analysis();
  ::protobuf::RAGAnalysis* mutable_rag_analysis();
  void set_allocated_rag_analysis(::protobuf::RAGAnalysis* rag_analysis);

  // .protobuf.HumanInTheLoopReview human_review = 12;
  bool has_human_review() const;
  void clear_human_review();
  static const int kHumanReviewFieldNumber = 12;
  private:
  const ::protobuf::HumanInTheLoopReview& _internal_human_review() const;
  public:
  const ::protobuf::HumanInTheLoopReview& human_review() const;
  ::protobuf::HumanInTheLoopReview* release_human_review();
  ::protobuf::HumanInTheLoopReview* mutable_human_review();
  void set_allocated_human_review(::protobuf::HumanInTheLoopReview* human_review);

  // double overall_threat_score = 15;
  void clear_overall_threat_score();
  static const int kOverallThreatScoreFieldNumber = 15;
  double overall_threat_score() const;
  void set_overall_threat_score(double value);

  // uint32 schema_version = 25;
  void clear_schema_version();
  static const int kSchemaVersionFieldNumber = 25;
  ::google::protobuf::uint32 schema_version() const;
  void set_schema_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf.NetworkSecurityEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction > additional_model_predictions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> related_event_ids_;
  ::google::protobuf::internal::MapField<
      NetworkSecurityEvent_CustomMetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > custom_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_tags_;
  ::google::protobuf::internal::ArenaStringPtr event_id_;
  ::google::protobuf::internal::ArenaStringPtr originating_node_id_;
  ::google::protobuf::internal::ArenaStringPtr final_classification_;
  ::google::protobuf::internal::ArenaStringPtr threat_category_;
  ::google::protobuf::internal::ArenaStringPtr correlation_id_;
  ::google::protobuf::internal::ArenaStringPtr event_chain_id_;
  ::google::protobuf::internal::ArenaStringPtr protobuf_version_;
  ::google::protobuf::Timestamp* event_timestamp_;
  ::protobuf::NetworkFeatures* network_features_;
  ::protobuf::GeoEnrichment* geo_enrichment_;
  ::protobuf::TimeWindow* time_window_;
  ::protobuf::TricapaMLAnalysis* ml_analysis_;
  ::protobuf::DistributedNode* capturing_node_;
  ::protobuf::PipelineTracking* pipeline_tracking_;
  ::protobuf::RAGAnalysis* rag_analysis_;
  ::protobuf::HumanInTheLoopReview* human_review_;
  double overall_threat_score_;
  ::google::protobuf::uint32 schema_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.EventBatch) */ {
 public:
  EventBatch();
  virtual ~EventBatch();

  EventBatch(const EventBatch& from);

  inline EventBatch& operator=(const EventBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventBatch(EventBatch&& from) noexcept
    : EventBatch() {
    *this = ::std::move(from);
  }

  inline EventBatch& operator=(EventBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventBatch* internal_default_instance() {
    return reinterpret_cast<const EventBatch*>(
               &_EventBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(EventBatch* other);
  friend void swap(EventBatch& a, EventBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventBatch* New() const final {
    return CreateMaybeMessage<EventBatch>(NULL);
  }

  EventBatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventBatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventBatch& from);
  void MergeFrom(const EventBatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventBatch_ProcessingMode ProcessingMode;
  static const ProcessingMode REAL_TIME =
    EventBatch_ProcessingMode_REAL_TIME;
  static const ProcessingMode NEAR_REAL_TIME =
    EventBatch_ProcessingMode_NEAR_REAL_TIME;
  static const ProcessingMode BATCH_PROCESSING =
    EventBatch_ProcessingMode_BATCH_PROCESSING;
  static const ProcessingMode HISTORICAL_ANALYSIS =
    EventBatch_ProcessingMode_HISTORICAL_ANALYSIS;
  static inline bool ProcessingMode_IsValid(int value) {
    return EventBatch_ProcessingMode_IsValid(value);
  }
  static const ProcessingMode ProcessingMode_MIN =
    EventBatch_ProcessingMode_ProcessingMode_MIN;
  static const ProcessingMode ProcessingMode_MAX =
    EventBatch_ProcessingMode_ProcessingMode_MAX;
  static const int ProcessingMode_ARRAYSIZE =
    EventBatch_ProcessingMode_ProcessingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProcessingMode_descriptor() {
    return EventBatch_ProcessingMode_descriptor();
  }
  static inline const ::std::string& ProcessingMode_Name(ProcessingMode value) {
    return EventBatch_ProcessingMode_Name(value);
  }
  static inline bool ProcessingMode_Parse(const ::std::string& name,
      ProcessingMode* value) {
    return EventBatch_ProcessingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .protobuf.NetworkSecurityEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  ::protobuf::NetworkSecurityEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >*
      mutable_events();
  const ::protobuf::NetworkSecurityEvent& events(int index) const;
  ::protobuf::NetworkSecurityEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >&
      events() const;

  // string batch_source_node = 6;
  void clear_batch_source_node();
  static const int kBatchSourceNodeFieldNumber = 6;
  const ::std::string& batch_source_node() const;
  void set_batch_source_node(const ::std::string& value);
  #if LANG_CXX11
  void set_batch_source_node(::std::string&& value);
  #endif
  void set_batch_source_node(const char* value);
  void set_batch_source_node(const char* value, size_t size);
  ::std::string* mutable_batch_source_node();
  ::std::string* release_batch_source_node();
  void set_allocated_batch_source_node(::std::string* batch_source_node);

  // .google.protobuf.Timestamp batch_created_at = 3;
  bool has_batch_created_at() const;
  void clear_batch_created_at();
  static const int kBatchCreatedAtFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_batch_created_at() const;
  public:
  const ::google::protobuf::Timestamp& batch_created_at() const;
  ::google::protobuf::Timestamp* release_batch_created_at();
  ::google::protobuf::Timestamp* mutable_batch_created_at();
  void set_allocated_batch_created_at(::google::protobuf::Timestamp* batch_created_at);

  // uint64 batch_id = 2;
  void clear_batch_id();
  static const int kBatchIdFieldNumber = 2;
  ::google::protobuf::uint64 batch_id() const;
  void set_batch_id(::google::protobuf::uint64 value);

  // uint32 batch_size = 4;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  void clear_processing_mode();
  static const int kProcessingModeFieldNumber = 5;
  ::protobuf::EventBatch_ProcessingMode processing_mode() const;
  void set_processing_mode(::protobuf::EventBatch_ProcessingMode value);

  // @@protoc_insertion_point(class_scope:protobuf.EventBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::NetworkSecurityEvent > events_;
  ::google::protobuf::internal::ArenaStringPtr batch_source_node_;
  ::google::protobuf::Timestamp* batch_created_at_;
  ::google::protobuf::uint64 batch_id_;
  ::google::protobuf::uint32 batch_size_;
  int processing_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse();
  SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse& other);
  static const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse*>(&_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse();
  SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse& other);
  static const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse*>(&_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SystemConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.SystemConfiguration) */ {
 public:
  SystemConfiguration();
  virtual ~SystemConfiguration();

  SystemConfiguration(const SystemConfiguration& from);

  inline SystemConfiguration& operator=(const SystemConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemConfiguration(SystemConfiguration&& from) noexcept
    : SystemConfiguration() {
    *this = ::std::move(from);
  }

  inline SystemConfiguration& operator=(SystemConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemConfiguration* internal_default_instance() {
    return reinterpret_cast<const SystemConfiguration*>(
               &_SystemConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(SystemConfiguration* other);
  friend void swap(SystemConfiguration& a, SystemConfiguration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemConfiguration* New() const final {
    return CreateMaybeMessage<SystemConfiguration>(NULL);
  }

  SystemConfiguration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemConfiguration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemConfiguration& from);
  void MergeFrom(const SystemConfiguration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string enabled_ml_models = 1;
  int enabled_ml_models_size() const;
  void clear_enabled_ml_models();
  static const int kEnabledMlModelsFieldNumber = 1;
  const ::std::string& enabled_ml_models(int index) const;
  ::std::string* mutable_enabled_ml_models(int index);
  void set_enabled_ml_models(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_enabled_ml_models(int index, ::std::string&& value);
  #endif
  void set_enabled_ml_models(int index, const char* value);
  void set_enabled_ml_models(int index, const char* value, size_t size);
  ::std::string* add_enabled_ml_models();
  void add_enabled_ml_models(const ::std::string& value);
  #if LANG_CXX11
  void add_enabled_ml_models(::std::string&& value);
  #endif
  void add_enabled_ml_models(const char* value);
  void add_enabled_ml_models(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& enabled_ml_models() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enabled_ml_models();

  // map<string, double> threat_score_thresholds = 2;
  int threat_score_thresholds_size() const;
  void clear_threat_score_thresholds();
  static const int kThreatScoreThresholdsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, double >&
      threat_score_thresholds() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_threat_score_thresholds();

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  int cluster_nodes_size() const;
  void clear_cluster_nodes();
  static const int kClusterNodesFieldNumber = 5;
  ::protobuf::DistributedNode* mutable_cluster_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::protobuf::DistributedNode >*
      mutable_cluster_nodes();
  const ::protobuf::DistributedNode& cluster_nodes(int index) const;
  ::protobuf::DistributedNode* add_cluster_nodes();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::DistributedNode >&
      cluster_nodes() const;

  // map<string, string> node_role_assignments = 6;
  int node_role_assignments_size() const;
  void clear_node_role_assignments();
  static const int kNodeRoleAssignmentsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      node_role_assignments() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_node_role_assignments();

  // repeated string knowledge_base_sources = 12;
  int knowledge_base_sources_size() const;
  void clear_knowledge_base_sources();
  static const int kKnowledgeBaseSourcesFieldNumber = 12;
  const ::std::string& knowledge_base_sources(int index) const;
  ::std::string* mutable_knowledge_base_sources(int index);
  void set_knowledge_base_sources(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_knowledge_base_sources(int index, ::std::string&& value);
  #endif
  void set_knowledge_base_sources(int index, const char* value);
  void set_knowledge_base_sources(int index, const char* value, size_t size);
  ::std::string* add_knowledge_base_sources();
  void add_knowledge_base_sources(const ::std::string& value);
  #if LANG_CXX11
  void add_knowledge_base_sources(::std::string&& value);
  #endif
  void add_knowledge_base_sources(const char* value);
  void add_knowledge_base_sources(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& knowledge_base_sources() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_knowledge_base_sources();

  // string encryption_algorithm = 9;
  void clear_encryption_algorithm();
  static const int kEncryptionAlgorithmFieldNumber = 9;
  const ::std::string& encryption_algorithm() const;
  void set_encryption_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_encryption_algorithm(::std::string&& value);
  #endif
  void set_encryption_algorithm(const char* value);
  void set_encryption_algorithm(const char* value, size_t size);
  ::std::string* mutable_encryption_algorithm();
  ::std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(::std::string* encryption_algorithm);

  // string rag_model_endpoint = 11;
  void clear_rag_model_endpoint();
  static const int kRagModelEndpointFieldNumber = 11;
  const ::std::string& rag_model_endpoint() const;
  void set_rag_model_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_rag_model_endpoint(::std::string&& value);
  #endif
  void set_rag_model_endpoint(const char* value);
  void set_rag_model_endpoint(const char* value, size_t size);
  ::std::string* mutable_rag_model_endpoint();
  ::std::string* release_rag_model_endpoint();
  void set_allocated_rag_model_endpoint(::std::string* rag_model_endpoint);

  // .google.protobuf.Duration time_window_size = 3;
  bool has_time_window_size() const;
  void clear_time_window_size();
  static const int kTimeWindowSizeFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_time_window_size() const;
  public:
  const ::google::protobuf::Duration& time_window_size() const;
  ::google::protobuf::Duration* release_time_window_size();
  ::google::protobuf::Duration* mutable_time_window_size();
  void set_allocated_time_window_size(::google::protobuf::Duration* time_window_size);

  // uint32 max_events_per_window = 4;
  void clear_max_events_per_window();
  static const int kMaxEventsPerWindowFieldNumber = 4;
  ::google::protobuf::uint32 max_events_per_window() const;
  void set_max_events_per_window(::google::protobuf::uint32 value);

  // bool encryption_enabled = 7;
  void clear_encryption_enabled();
  static const int kEncryptionEnabledFieldNumber = 7;
  bool encryption_enabled() const;
  void set_encryption_enabled(bool value);

  // bool compression_enabled = 8;
  void clear_compression_enabled();
  static const int kCompressionEnabledFieldNumber = 8;
  bool compression_enabled() const;
  void set_compression_enabled(bool value);

  // bool rag_analysis_enabled = 10;
  void clear_rag_analysis_enabled();
  static const int kRagAnalysisEnabledFieldNumber = 10;
  bool rag_analysis_enabled() const;
  void set_rag_analysis_enabled(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.SystemConfiguration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> enabled_ml_models_;
  ::google::protobuf::internal::MapField<
      SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > threat_score_thresholds_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::DistributedNode > cluster_nodes_;
  ::google::protobuf::internal::MapField<
      SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > node_role_assignments_;
  ::google::protobuf::RepeatedPtrField< ::std::string> knowledge_base_sources_;
  ::google::protobuf::internal::ArenaStringPtr encryption_algorithm_;
  ::google::protobuf::internal::ArenaStringPtr rag_model_endpoint_;
  ::google::protobuf::Duration* time_window_size_;
  ::google::protobuf::uint32 max_events_per_window_;
  bool encryption_enabled_;
  bool compression_enabled_;
  bool rag_analysis_enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_2fnetwork_5fsecurity_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkFeatures

// string source_ip = 1;
inline void NetworkFeatures::clear_source_ip() {
  source_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkFeatures::source_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.source_ip)
  return source_ip_.GetNoArena();
}
inline void NetworkFeatures::set_source_ip(const ::std::string& value) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.source_ip)
}
#if LANG_CXX11
inline void NetworkFeatures::set_source_ip(::std::string&& value) {
  
  source_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkFeatures.source_ip)
}
#endif
inline void NetworkFeatures::set_source_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkFeatures.source_ip)
}
inline void NetworkFeatures::set_source_ip(const char* value, size_t size) {
  
  source_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkFeatures.source_ip)
}
inline ::std::string* NetworkFeatures::mutable_source_ip() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.source_ip)
  return source_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkFeatures::release_source_ip() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.source_ip)
  
  return source_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkFeatures::set_allocated_source_ip(::std::string* source_ip) {
  if (source_ip != NULL) {
    
  } else {
    
  }
  source_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_ip);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.source_ip)
}

// string destination_ip = 2;
inline void NetworkFeatures::clear_destination_ip() {
  destination_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkFeatures::destination_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.destination_ip)
  return destination_ip_.GetNoArena();
}
inline void NetworkFeatures::set_destination_ip(const ::std::string& value) {
  
  destination_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.destination_ip)
}
#if LANG_CXX11
inline void NetworkFeatures::set_destination_ip(::std::string&& value) {
  
  destination_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkFeatures.destination_ip)
}
#endif
inline void NetworkFeatures::set_destination_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkFeatures.destination_ip)
}
inline void NetworkFeatures::set_destination_ip(const char* value, size_t size) {
  
  destination_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkFeatures.destination_ip)
}
inline ::std::string* NetworkFeatures::mutable_destination_ip() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.destination_ip)
  return destination_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkFeatures::release_destination_ip() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.destination_ip)
  
  return destination_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkFeatures::set_allocated_destination_ip(::std::string* destination_ip) {
  if (destination_ip != NULL) {
    
  } else {
    
  }
  destination_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_ip);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.destination_ip)
}

// uint32 source_port = 3;
inline void NetworkFeatures::clear_source_port() {
  source_port_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::source_port() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.source_port)
  return source_port_;
}
inline void NetworkFeatures::set_source_port(::google::protobuf::uint32 value) {
  
  source_port_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.source_port)
}

// uint32 destination_port = 4;
inline void NetworkFeatures::clear_destination_port() {
  destination_port_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::destination_port() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.destination_port)
  return destination_port_;
}
inline void NetworkFeatures::set_destination_port(::google::protobuf::uint32 value) {
  
  destination_port_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.destination_port)
}

// uint32 protocol_number = 5;
inline void NetworkFeatures::clear_protocol_number() {
  protocol_number_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::protocol_number() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.protocol_number)
  return protocol_number_;
}
inline void NetworkFeatures::set_protocol_number(::google::protobuf::uint32 value) {
  
  protocol_number_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.protocol_number)
}

// string protocol_name = 6;
inline void NetworkFeatures::clear_protocol_name() {
  protocol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkFeatures::protocol_name() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.protocol_name)
  return protocol_name_.GetNoArena();
}
inline void NetworkFeatures::set_protocol_name(const ::std::string& value) {
  
  protocol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.protocol_name)
}
#if LANG_CXX11
inline void NetworkFeatures::set_protocol_name(::std::string&& value) {
  
  protocol_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkFeatures.protocol_name)
}
#endif
inline void NetworkFeatures::set_protocol_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkFeatures.protocol_name)
}
inline void NetworkFeatures::set_protocol_name(const char* value, size_t size) {
  
  protocol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkFeatures.protocol_name)
}
inline ::std::string* NetworkFeatures::mutable_protocol_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.protocol_name)
  return protocol_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkFeatures::release_protocol_name() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.protocol_name)
  
  return protocol_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkFeatures::set_allocated_protocol_name(::std::string* protocol_name) {
  if (protocol_name != NULL) {
    
  } else {
    
  }
  protocol_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.protocol_name)
}

// .google.protobuf.Timestamp flow_start_time = 7;
inline bool NetworkFeatures::has_flow_start_time() const {
  return this != internal_default_instance() && flow_start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& NetworkFeatures::_internal_flow_start_time() const {
  return *flow_start_time_;
}
inline const ::google::protobuf::Timestamp& NetworkFeatures::flow_start_time() const {
  const ::google::protobuf::Timestamp* p = flow_start_time_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NetworkFeatures::release_flow_start_time() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.flow_start_time)
  
  ::google::protobuf::Timestamp* temp = flow_start_time_;
  flow_start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* NetworkFeatures::mutable_flow_start_time() {
  
  if (flow_start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    flow_start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.flow_start_time)
  return flow_start_time_;
}
inline void NetworkFeatures::set_allocated_flow_start_time(::google::protobuf::Timestamp* flow_start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(flow_start_time_);
  }
  if (flow_start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(flow_start_time)->GetArena();
    if (message_arena != submessage_arena) {
      flow_start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flow_start_time, submessage_arena);
    }
    
  } else {
    
  }
  flow_start_time_ = flow_start_time;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.flow_start_time)
}

// .google.protobuf.Duration flow_duration = 8;
inline bool NetworkFeatures::has_flow_duration() const {
  return this != internal_default_instance() && flow_duration_ != NULL;
}
inline const ::google::protobuf::Duration& NetworkFeatures::_internal_flow_duration() const {
  return *flow_duration_;
}
inline const ::google::protobuf::Duration& NetworkFeatures::flow_duration() const {
  const ::google::protobuf::Duration* p = flow_duration_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NetworkFeatures::release_flow_duration() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkFeatures.flow_duration)
  
  ::google::protobuf::Duration* temp = flow_duration_;
  flow_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* NetworkFeatures::mutable_flow_duration() {
  
  if (flow_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    flow_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkFeatures.flow_duration)
  return flow_duration_;
}
inline void NetworkFeatures::set_allocated_flow_duration(::google::protobuf::Duration* flow_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(flow_duration_);
  }
  if (flow_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(flow_duration)->GetArena();
    if (message_arena != submessage_arena) {
      flow_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flow_duration, submessage_arena);
    }
    
  } else {
    
  }
  flow_duration_ = flow_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkFeatures.flow_duration)
}

// uint64 flow_duration_microseconds = 9;
inline void NetworkFeatures::clear_flow_duration_microseconds() {
  flow_duration_microseconds_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::flow_duration_microseconds() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_duration_microseconds)
  return flow_duration_microseconds_;
}
inline void NetworkFeatures::set_flow_duration_microseconds(::google::protobuf::uint64 value) {
  
  flow_duration_microseconds_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_duration_microseconds)
}

// uint64 total_forward_packets = 10;
inline void NetworkFeatures::clear_total_forward_packets() {
  total_forward_packets_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::total_forward_packets() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_forward_packets)
  return total_forward_packets_;
}
inline void NetworkFeatures::set_total_forward_packets(::google::protobuf::uint64 value) {
  
  total_forward_packets_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_forward_packets)
}

// uint64 total_backward_packets = 11;
inline void NetworkFeatures::clear_total_backward_packets() {
  total_backward_packets_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::total_backward_packets() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_backward_packets)
  return total_backward_packets_;
}
inline void NetworkFeatures::set_total_backward_packets(::google::protobuf::uint64 value) {
  
  total_backward_packets_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_backward_packets)
}

// uint64 total_forward_bytes = 12;
inline void NetworkFeatures::clear_total_forward_bytes() {
  total_forward_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::total_forward_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_forward_bytes)
  return total_forward_bytes_;
}
inline void NetworkFeatures::set_total_forward_bytes(::google::protobuf::uint64 value) {
  
  total_forward_bytes_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_forward_bytes)
}

// uint64 total_backward_bytes = 13;
inline void NetworkFeatures::clear_total_backward_bytes() {
  total_backward_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::total_backward_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.total_backward_bytes)
  return total_backward_bytes_;
}
inline void NetworkFeatures::set_total_backward_bytes(::google::protobuf::uint64 value) {
  
  total_backward_bytes_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.total_backward_bytes)
}

// uint64 forward_packet_length_max = 20;
inline void NetworkFeatures::clear_forward_packet_length_max() {
  forward_packet_length_max_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::forward_packet_length_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_max)
  return forward_packet_length_max_;
}
inline void NetworkFeatures::set_forward_packet_length_max(::google::protobuf::uint64 value) {
  
  forward_packet_length_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_max)
}

// uint64 forward_packet_length_min = 21;
inline void NetworkFeatures::clear_forward_packet_length_min() {
  forward_packet_length_min_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::forward_packet_length_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_min)
  return forward_packet_length_min_;
}
inline void NetworkFeatures::set_forward_packet_length_min(::google::protobuf::uint64 value) {
  
  forward_packet_length_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_min)
}

// double forward_packet_length_mean = 22;
inline void NetworkFeatures::clear_forward_packet_length_mean() {
  forward_packet_length_mean_ = 0;
}
inline double NetworkFeatures::forward_packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_mean)
  return forward_packet_length_mean_;
}
inline void NetworkFeatures::set_forward_packet_length_mean(double value) {
  
  forward_packet_length_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_mean)
}

// double forward_packet_length_std = 23;
inline void NetworkFeatures::clear_forward_packet_length_std() {
  forward_packet_length_std_ = 0;
}
inline double NetworkFeatures::forward_packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packet_length_std)
  return forward_packet_length_std_;
}
inline void NetworkFeatures::set_forward_packet_length_std(double value) {
  
  forward_packet_length_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packet_length_std)
}

// uint64 backward_packet_length_max = 30;
inline void NetworkFeatures::clear_backward_packet_length_max() {
  backward_packet_length_max_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::backward_packet_length_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_max)
  return backward_packet_length_max_;
}
inline void NetworkFeatures::set_backward_packet_length_max(::google::protobuf::uint64 value) {
  
  backward_packet_length_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_max)
}

// uint64 backward_packet_length_min = 31;
inline void NetworkFeatures::clear_backward_packet_length_min() {
  backward_packet_length_min_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::backward_packet_length_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_min)
  return backward_packet_length_min_;
}
inline void NetworkFeatures::set_backward_packet_length_min(::google::protobuf::uint64 value) {
  
  backward_packet_length_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_min)
}

// double backward_packet_length_mean = 32;
inline void NetworkFeatures::clear_backward_packet_length_mean() {
  backward_packet_length_mean_ = 0;
}
inline double NetworkFeatures::backward_packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_mean)
  return backward_packet_length_mean_;
}
inline void NetworkFeatures::set_backward_packet_length_mean(double value) {
  
  backward_packet_length_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_mean)
}

// double backward_packet_length_std = 33;
inline void NetworkFeatures::clear_backward_packet_length_std() {
  backward_packet_length_std_ = 0;
}
inline double NetworkFeatures::backward_packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packet_length_std)
  return backward_packet_length_std_;
}
inline void NetworkFeatures::set_backward_packet_length_std(double value) {
  
  backward_packet_length_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packet_length_std)
}

// double flow_bytes_per_second = 40;
inline void NetworkFeatures::clear_flow_bytes_per_second() {
  flow_bytes_per_second_ = 0;
}
inline double NetworkFeatures::flow_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_bytes_per_second)
  return flow_bytes_per_second_;
}
inline void NetworkFeatures::set_flow_bytes_per_second(double value) {
  
  flow_bytes_per_second_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_bytes_per_second)
}

// double flow_packets_per_second = 41;
inline void NetworkFeatures::clear_flow_packets_per_second() {
  flow_packets_per_second_ = 0;
}
inline double NetworkFeatures::flow_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_packets_per_second)
  return flow_packets_per_second_;
}
inline void NetworkFeatures::set_flow_packets_per_second(double value) {
  
  flow_packets_per_second_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_packets_per_second)
}

// double forward_packets_per_second = 42;
inline void NetworkFeatures::clear_forward_packets_per_second() {
  forward_packets_per_second_ = 0;
}
inline double NetworkFeatures::forward_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_packets_per_second)
  return forward_packets_per_second_;
}
inline void NetworkFeatures::set_forward_packets_per_second(double value) {
  
  forward_packets_per_second_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_packets_per_second)
}

// double backward_packets_per_second = 43;
inline void NetworkFeatures::clear_backward_packets_per_second() {
  backward_packets_per_second_ = 0;
}
inline double NetworkFeatures::backward_packets_per_second() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_packets_per_second)
  return backward_packets_per_second_;
}
inline void NetworkFeatures::set_backward_packets_per_second(double value) {
  
  backward_packets_per_second_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_packets_per_second)
}

// double download_upload_ratio = 44;
inline void NetworkFeatures::clear_download_upload_ratio() {
  download_upload_ratio_ = 0;
}
inline double NetworkFeatures::download_upload_ratio() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.download_upload_ratio)
  return download_upload_ratio_;
}
inline void NetworkFeatures::set_download_upload_ratio(double value) {
  
  download_upload_ratio_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.download_upload_ratio)
}

// double average_packet_size = 45;
inline void NetworkFeatures::clear_average_packet_size() {
  average_packet_size_ = 0;
}
inline double NetworkFeatures::average_packet_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_packet_size)
  return average_packet_size_;
}
inline void NetworkFeatures::set_average_packet_size(double value) {
  
  average_packet_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_packet_size)
}

// double average_forward_segment_size = 46;
inline void NetworkFeatures::clear_average_forward_segment_size() {
  average_forward_segment_size_ = 0;
}
inline double NetworkFeatures::average_forward_segment_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_forward_segment_size)
  return average_forward_segment_size_;
}
inline void NetworkFeatures::set_average_forward_segment_size(double value) {
  
  average_forward_segment_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_forward_segment_size)
}

// double average_backward_segment_size = 47;
inline void NetworkFeatures::clear_average_backward_segment_size() {
  average_backward_segment_size_ = 0;
}
inline double NetworkFeatures::average_backward_segment_size() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.average_backward_segment_size)
  return average_backward_segment_size_;
}
inline void NetworkFeatures::set_average_backward_segment_size(double value) {
  
  average_backward_segment_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.average_backward_segment_size)
}

// double flow_inter_arrival_time_mean = 50;
inline void NetworkFeatures::clear_flow_inter_arrival_time_mean() {
  flow_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::flow_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_mean)
  return flow_inter_arrival_time_mean_;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_mean(double value) {
  
  flow_inter_arrival_time_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_mean)
}

// double flow_inter_arrival_time_std = 51;
inline void NetworkFeatures::clear_flow_inter_arrival_time_std() {
  flow_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::flow_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_std)
  return flow_inter_arrival_time_std_;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_std(double value) {
  
  flow_inter_arrival_time_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_std)
}

// uint64 flow_inter_arrival_time_max = 52;
inline void NetworkFeatures::clear_flow_inter_arrival_time_max() {
  flow_inter_arrival_time_max_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::flow_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_max)
  return flow_inter_arrival_time_max_;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_max(::google::protobuf::uint64 value) {
  
  flow_inter_arrival_time_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_max)
}

// uint64 flow_inter_arrival_time_min = 53;
inline void NetworkFeatures::clear_flow_inter_arrival_time_min() {
  flow_inter_arrival_time_min_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::flow_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.flow_inter_arrival_time_min)
  return flow_inter_arrival_time_min_;
}
inline void NetworkFeatures::set_flow_inter_arrival_time_min(::google::protobuf::uint64 value) {
  
  flow_inter_arrival_time_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.flow_inter_arrival_time_min)
}

// double forward_inter_arrival_time_total = 54;
inline void NetworkFeatures::clear_forward_inter_arrival_time_total() {
  forward_inter_arrival_time_total_ = 0;
}
inline double NetworkFeatures::forward_inter_arrival_time_total() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_total)
  return forward_inter_arrival_time_total_;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_total(double value) {
  
  forward_inter_arrival_time_total_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_total)
}

// double forward_inter_arrival_time_mean = 55;
inline void NetworkFeatures::clear_forward_inter_arrival_time_mean() {
  forward_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::forward_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_mean)
  return forward_inter_arrival_time_mean_;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_mean(double value) {
  
  forward_inter_arrival_time_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_mean)
}

// double forward_inter_arrival_time_std = 56;
inline void NetworkFeatures::clear_forward_inter_arrival_time_std() {
  forward_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::forward_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_std)
  return forward_inter_arrival_time_std_;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_std(double value) {
  
  forward_inter_arrival_time_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_std)
}

// uint64 forward_inter_arrival_time_max = 57;
inline void NetworkFeatures::clear_forward_inter_arrival_time_max() {
  forward_inter_arrival_time_max_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::forward_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_max)
  return forward_inter_arrival_time_max_;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_max(::google::protobuf::uint64 value) {
  
  forward_inter_arrival_time_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_max)
}

// uint64 forward_inter_arrival_time_min = 58;
inline void NetworkFeatures::clear_forward_inter_arrival_time_min() {
  forward_inter_arrival_time_min_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::forward_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_inter_arrival_time_min)
  return forward_inter_arrival_time_min_;
}
inline void NetworkFeatures::set_forward_inter_arrival_time_min(::google::protobuf::uint64 value) {
  
  forward_inter_arrival_time_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_inter_arrival_time_min)
}

// double backward_inter_arrival_time_total = 59;
inline void NetworkFeatures::clear_backward_inter_arrival_time_total() {
  backward_inter_arrival_time_total_ = 0;
}
inline double NetworkFeatures::backward_inter_arrival_time_total() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_total)
  return backward_inter_arrival_time_total_;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_total(double value) {
  
  backward_inter_arrival_time_total_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_total)
}

// double backward_inter_arrival_time_mean = 60;
inline void NetworkFeatures::clear_backward_inter_arrival_time_mean() {
  backward_inter_arrival_time_mean_ = 0;
}
inline double NetworkFeatures::backward_inter_arrival_time_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_mean)
  return backward_inter_arrival_time_mean_;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_mean(double value) {
  
  backward_inter_arrival_time_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_mean)
}

// double backward_inter_arrival_time_std = 61;
inline void NetworkFeatures::clear_backward_inter_arrival_time_std() {
  backward_inter_arrival_time_std_ = 0;
}
inline double NetworkFeatures::backward_inter_arrival_time_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_std)
  return backward_inter_arrival_time_std_;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_std(double value) {
  
  backward_inter_arrival_time_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_std)
}

// uint64 backward_inter_arrival_time_max = 62;
inline void NetworkFeatures::clear_backward_inter_arrival_time_max() {
  backward_inter_arrival_time_max_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::backward_inter_arrival_time_max() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_max)
  return backward_inter_arrival_time_max_;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_max(::google::protobuf::uint64 value) {
  
  backward_inter_arrival_time_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_max)
}

// uint64 backward_inter_arrival_time_min = 63;
inline void NetworkFeatures::clear_backward_inter_arrival_time_min() {
  backward_inter_arrival_time_min_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::backward_inter_arrival_time_min() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_inter_arrival_time_min)
  return backward_inter_arrival_time_min_;
}
inline void NetworkFeatures::set_backward_inter_arrival_time_min(::google::protobuf::uint64 value) {
  
  backward_inter_arrival_time_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_inter_arrival_time_min)
}

// uint32 fin_flag_count = 70;
inline void NetworkFeatures::clear_fin_flag_count() {
  fin_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::fin_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.fin_flag_count)
  return fin_flag_count_;
}
inline void NetworkFeatures::set_fin_flag_count(::google::protobuf::uint32 value) {
  
  fin_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.fin_flag_count)
}

// uint32 syn_flag_count = 71;
inline void NetworkFeatures::clear_syn_flag_count() {
  syn_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::syn_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.syn_flag_count)
  return syn_flag_count_;
}
inline void NetworkFeatures::set_syn_flag_count(::google::protobuf::uint32 value) {
  
  syn_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.syn_flag_count)
}

// uint32 rst_flag_count = 72;
inline void NetworkFeatures::clear_rst_flag_count() {
  rst_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::rst_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.rst_flag_count)
  return rst_flag_count_;
}
inline void NetworkFeatures::set_rst_flag_count(::google::protobuf::uint32 value) {
  
  rst_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.rst_flag_count)
}

// uint32 psh_flag_count = 73;
inline void NetworkFeatures::clear_psh_flag_count() {
  psh_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::psh_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.psh_flag_count)
  return psh_flag_count_;
}
inline void NetworkFeatures::set_psh_flag_count(::google::protobuf::uint32 value) {
  
  psh_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.psh_flag_count)
}

// uint32 ack_flag_count = 74;
inline void NetworkFeatures::clear_ack_flag_count() {
  ack_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::ack_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ack_flag_count)
  return ack_flag_count_;
}
inline void NetworkFeatures::set_ack_flag_count(::google::protobuf::uint32 value) {
  
  ack_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ack_flag_count)
}

// uint32 urg_flag_count = 75;
inline void NetworkFeatures::clear_urg_flag_count() {
  urg_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::urg_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.urg_flag_count)
  return urg_flag_count_;
}
inline void NetworkFeatures::set_urg_flag_count(::google::protobuf::uint32 value) {
  
  urg_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.urg_flag_count)
}

// uint32 cwe_flag_count = 76;
inline void NetworkFeatures::clear_cwe_flag_count() {
  cwe_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::cwe_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.cwe_flag_count)
  return cwe_flag_count_;
}
inline void NetworkFeatures::set_cwe_flag_count(::google::protobuf::uint32 value) {
  
  cwe_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.cwe_flag_count)
}

// uint32 ece_flag_count = 77;
inline void NetworkFeatures::clear_ece_flag_count() {
  ece_flag_count_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::ece_flag_count() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ece_flag_count)
  return ece_flag_count_;
}
inline void NetworkFeatures::set_ece_flag_count(::google::protobuf::uint32 value) {
  
  ece_flag_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ece_flag_count)
}

// uint32 forward_psh_flags = 78;
inline void NetworkFeatures::clear_forward_psh_flags() {
  forward_psh_flags_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::forward_psh_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_psh_flags)
  return forward_psh_flags_;
}
inline void NetworkFeatures::set_forward_psh_flags(::google::protobuf::uint32 value) {
  
  forward_psh_flags_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_psh_flags)
}

// uint32 backward_psh_flags = 79;
inline void NetworkFeatures::clear_backward_psh_flags() {
  backward_psh_flags_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::backward_psh_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_psh_flags)
  return backward_psh_flags_;
}
inline void NetworkFeatures::set_backward_psh_flags(::google::protobuf::uint32 value) {
  
  backward_psh_flags_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_psh_flags)
}

// uint32 forward_urg_flags = 80;
inline void NetworkFeatures::clear_forward_urg_flags() {
  forward_urg_flags_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::forward_urg_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_urg_flags)
  return forward_urg_flags_;
}
inline void NetworkFeatures::set_forward_urg_flags(::google::protobuf::uint32 value) {
  
  forward_urg_flags_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_urg_flags)
}

// uint32 backward_urg_flags = 81;
inline void NetworkFeatures::clear_backward_urg_flags() {
  backward_urg_flags_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFeatures::backward_urg_flags() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_urg_flags)
  return backward_urg_flags_;
}
inline void NetworkFeatures::set_backward_urg_flags(::google::protobuf::uint32 value) {
  
  backward_urg_flags_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_urg_flags)
}

// double forward_header_length = 85;
inline void NetworkFeatures::clear_forward_header_length() {
  forward_header_length_ = 0;
}
inline double NetworkFeatures::forward_header_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_header_length)
  return forward_header_length_;
}
inline void NetworkFeatures::set_forward_header_length(double value) {
  
  forward_header_length_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_header_length)
}

// double backward_header_length = 86;
inline void NetworkFeatures::clear_backward_header_length() {
  backward_header_length_ = 0;
}
inline double NetworkFeatures::backward_header_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_header_length)
  return backward_header_length_;
}
inline void NetworkFeatures::set_backward_header_length(double value) {
  
  backward_header_length_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_header_length)
}

// double forward_average_bytes_bulk = 87;
inline void NetworkFeatures::clear_forward_average_bytes_bulk() {
  forward_average_bytes_bulk_ = 0;
}
inline double NetworkFeatures::forward_average_bytes_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_bytes_bulk)
  return forward_average_bytes_bulk_;
}
inline void NetworkFeatures::set_forward_average_bytes_bulk(double value) {
  
  forward_average_bytes_bulk_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_bytes_bulk)
}

// double forward_average_packets_bulk = 88;
inline void NetworkFeatures::clear_forward_average_packets_bulk() {
  forward_average_packets_bulk_ = 0;
}
inline double NetworkFeatures::forward_average_packets_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_packets_bulk)
  return forward_average_packets_bulk_;
}
inline void NetworkFeatures::set_forward_average_packets_bulk(double value) {
  
  forward_average_packets_bulk_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_packets_bulk)
}

// double forward_average_bulk_rate = 89;
inline void NetworkFeatures::clear_forward_average_bulk_rate() {
  forward_average_bulk_rate_ = 0;
}
inline double NetworkFeatures::forward_average_bulk_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.forward_average_bulk_rate)
  return forward_average_bulk_rate_;
}
inline void NetworkFeatures::set_forward_average_bulk_rate(double value) {
  
  forward_average_bulk_rate_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.forward_average_bulk_rate)
}

// double backward_average_bytes_bulk = 90;
inline void NetworkFeatures::clear_backward_average_bytes_bulk() {
  backward_average_bytes_bulk_ = 0;
}
inline double NetworkFeatures::backward_average_bytes_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_bytes_bulk)
  return backward_average_bytes_bulk_;
}
inline void NetworkFeatures::set_backward_average_bytes_bulk(double value) {
  
  backward_average_bytes_bulk_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_bytes_bulk)
}

// double backward_average_packets_bulk = 91;
inline void NetworkFeatures::clear_backward_average_packets_bulk() {
  backward_average_packets_bulk_ = 0;
}
inline double NetworkFeatures::backward_average_packets_bulk() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_packets_bulk)
  return backward_average_packets_bulk_;
}
inline void NetworkFeatures::set_backward_average_packets_bulk(double value) {
  
  backward_average_packets_bulk_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_packets_bulk)
}

// double backward_average_bulk_rate = 92;
inline void NetworkFeatures::clear_backward_average_bulk_rate() {
  backward_average_bulk_rate_ = 0;
}
inline double NetworkFeatures::backward_average_bulk_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.backward_average_bulk_rate)
  return backward_average_bulk_rate_;
}
inline void NetworkFeatures::set_backward_average_bulk_rate(double value) {
  
  backward_average_bulk_rate_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.backward_average_bulk_rate)
}

// uint64 minimum_packet_length = 95;
inline void NetworkFeatures::clear_minimum_packet_length() {
  minimum_packet_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::minimum_packet_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.minimum_packet_length)
  return minimum_packet_length_;
}
inline void NetworkFeatures::set_minimum_packet_length(::google::protobuf::uint64 value) {
  
  minimum_packet_length_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.minimum_packet_length)
}

// uint64 maximum_packet_length = 96;
inline void NetworkFeatures::clear_maximum_packet_length() {
  maximum_packet_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkFeatures::maximum_packet_length() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.maximum_packet_length)
  return maximum_packet_length_;
}
inline void NetworkFeatures::set_maximum_packet_length(::google::protobuf::uint64 value) {
  
  maximum_packet_length_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.maximum_packet_length)
}

// double packet_length_mean = 97;
inline void NetworkFeatures::clear_packet_length_mean() {
  packet_length_mean_ = 0;
}
inline double NetworkFeatures::packet_length_mean() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_mean)
  return packet_length_mean_;
}
inline void NetworkFeatures::set_packet_length_mean(double value) {
  
  packet_length_mean_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_mean)
}

// double packet_length_std = 98;
inline void NetworkFeatures::clear_packet_length_std() {
  packet_length_std_ = 0;
}
inline double NetworkFeatures::packet_length_std() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_std)
  return packet_length_std_;
}
inline void NetworkFeatures::set_packet_length_std(double value) {
  
  packet_length_std_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_std)
}

// double packet_length_variance = 99;
inline void NetworkFeatures::clear_packet_length_variance() {
  packet_length_variance_ = 0;
}
inline double NetworkFeatures::packet_length_variance() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.packet_length_variance)
  return packet_length_variance_;
}
inline void NetworkFeatures::set_packet_length_variance(double value) {
  
  packet_length_variance_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.packet_length_variance)
}

// repeated double ddos_features = 100;
inline int NetworkFeatures::ddos_features_size() const {
  return ddos_features_.size();
}
inline void NetworkFeatures::clear_ddos_features() {
  ddos_features_.Clear();
}
inline double NetworkFeatures::ddos_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ddos_features)
  return ddos_features_.Get(index);
}
inline void NetworkFeatures::set_ddos_features(int index, double value) {
  ddos_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ddos_features)
}
inline void NetworkFeatures::add_ddos_features(double value) {
  ddos_features_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.ddos_features)
}
inline const ::google::protobuf::RepeatedField< double >&
NetworkFeatures::ddos_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.ddos_features)
  return ddos_features_;
}
inline ::google::protobuf::RepeatedField< double >*
NetworkFeatures::mutable_ddos_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.ddos_features)
  return &ddos_features_;
}

// repeated double ransomware_features = 101;
inline int NetworkFeatures::ransomware_features_size() const {
  return ransomware_features_.size();
}
inline void NetworkFeatures::clear_ransomware_features() {
  ransomware_features_.Clear();
}
inline double NetworkFeatures::ransomware_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.ransomware_features)
  return ransomware_features_.Get(index);
}
inline void NetworkFeatures::set_ransomware_features(int index, double value) {
  ransomware_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.ransomware_features)
}
inline void NetworkFeatures::add_ransomware_features(double value) {
  ransomware_features_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.ransomware_features)
}
inline const ::google::protobuf::RepeatedField< double >&
NetworkFeatures::ransomware_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.ransomware_features)
  return ransomware_features_;
}
inline ::google::protobuf::RepeatedField< double >*
NetworkFeatures::mutable_ransomware_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.ransomware_features)
  return &ransomware_features_;
}

// repeated double general_attack_features = 102;
inline int NetworkFeatures::general_attack_features_size() const {
  return general_attack_features_.size();
}
inline void NetworkFeatures::clear_general_attack_features() {
  general_attack_features_.Clear();
}
inline double NetworkFeatures::general_attack_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.general_attack_features)
  return general_attack_features_.Get(index);
}
inline void NetworkFeatures::set_general_attack_features(int index, double value) {
  general_attack_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.general_attack_features)
}
inline void NetworkFeatures::add_general_attack_features(double value) {
  general_attack_features_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.general_attack_features)
}
inline const ::google::protobuf::RepeatedField< double >&
NetworkFeatures::general_attack_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.general_attack_features)
  return general_attack_features_;
}
inline ::google::protobuf::RepeatedField< double >*
NetworkFeatures::mutable_general_attack_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.general_attack_features)
  return &general_attack_features_;
}

// repeated double internal_traffic_features = 103;
inline int NetworkFeatures::internal_traffic_features_size() const {
  return internal_traffic_features_.size();
}
inline void NetworkFeatures::clear_internal_traffic_features() {
  internal_traffic_features_.Clear();
}
inline double NetworkFeatures::internal_traffic_features(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkFeatures.internal_traffic_features)
  return internal_traffic_features_.Get(index);
}
inline void NetworkFeatures::set_internal_traffic_features(int index, double value) {
  internal_traffic_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkFeatures.internal_traffic_features)
}
inline void NetworkFeatures::add_internal_traffic_features(double value) {
  internal_traffic_features_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkFeatures.internal_traffic_features)
}
inline const ::google::protobuf::RepeatedField< double >&
NetworkFeatures::internal_traffic_features() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkFeatures.internal_traffic_features)
  return internal_traffic_features_;
}
inline ::google::protobuf::RepeatedField< double >*
NetworkFeatures::mutable_internal_traffic_features() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkFeatures.internal_traffic_features)
  return &internal_traffic_features_;
}

// map<string, double> custom_features = 110;
inline int NetworkFeatures::custom_features_size() const {
  return custom_features_.size();
}
inline void NetworkFeatures::clear_custom_features() {
  custom_features_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
NetworkFeatures::custom_features() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkFeatures.custom_features)
  return custom_features_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
NetworkFeatures::mutable_custom_features() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkFeatures.custom_features)
  return custom_features_.MutableMap();
}

// map<string, string> feature_metadata = 111;
inline int NetworkFeatures::feature_metadata_size() const {
  return feature_metadata_.size();
}
inline void NetworkFeatures::clear_feature_metadata() {
  feature_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NetworkFeatures::feature_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkFeatures.feature_metadata)
  return feature_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NetworkFeatures::mutable_feature_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkFeatures.feature_metadata)
  return feature_metadata_.MutableMap();
}

// -------------------------------------------------------------------

// GeoLocationInfo

// string country_name = 1;
inline void GeoLocationInfo::clear_country_name() {
  country_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::country_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.country_name)
  return country_name_.GetNoArena();
}
inline void GeoLocationInfo::set_country_name(const ::std::string& value) {
  
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.country_name)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_country_name(::std::string&& value) {
  
  country_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.country_name)
}
#endif
inline void GeoLocationInfo::set_country_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.country_name)
}
inline void GeoLocationInfo::set_country_name(const char* value, size_t size) {
  
  country_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.country_name)
}
inline ::std::string* GeoLocationInfo::mutable_country_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.country_name)
  return country_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_country_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.country_name)
  
  return country_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_country_name(::std::string* country_name) {
  if (country_name != NULL) {
    
  } else {
    
  }
  country_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.country_name)
}

// string country_code = 2;
inline void GeoLocationInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::country_code() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.country_code)
  return country_code_.GetNoArena();
}
inline void GeoLocationInfo::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.country_code)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.country_code)
}
#endif
inline void GeoLocationInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.country_code)
}
inline void GeoLocationInfo::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.country_code)
}
inline ::std::string* GeoLocationInfo::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.country_code)
}

// string region_name = 3;
inline void GeoLocationInfo::clear_region_name() {
  region_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::region_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.region_name)
  return region_name_.GetNoArena();
}
inline void GeoLocationInfo::set_region_name(const ::std::string& value) {
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.region_name)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_region_name(::std::string&& value) {
  
  region_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.region_name)
}
#endif
inline void GeoLocationInfo::set_region_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.region_name)
}
inline void GeoLocationInfo::set_region_name(const char* value, size_t size) {
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.region_name)
}
inline ::std::string* GeoLocationInfo::mutable_region_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.region_name)
  return region_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_region_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.region_name)
  
  return region_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_region_name(::std::string* region_name) {
  if (region_name != NULL) {
    
  } else {
    
  }
  region_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.region_name)
}

// string city_name = 4;
inline void GeoLocationInfo::clear_city_name() {
  city_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::city_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.city_name)
  return city_name_.GetNoArena();
}
inline void GeoLocationInfo::set_city_name(const ::std::string& value) {
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.city_name)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_city_name(::std::string&& value) {
  
  city_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.city_name)
}
#endif
inline void GeoLocationInfo::set_city_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.city_name)
}
inline void GeoLocationInfo::set_city_name(const char* value, size_t size) {
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.city_name)
}
inline ::std::string* GeoLocationInfo::mutable_city_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.city_name)
  return city_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_city_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.city_name)
  
  return city_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_city_name(::std::string* city_name) {
  if (city_name != NULL) {
    
  } else {
    
  }
  city_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.city_name)
}

// double latitude = 5;
inline void GeoLocationInfo::clear_latitude() {
  latitude_ = 0;
}
inline double GeoLocationInfo::latitude() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.latitude)
  return latitude_;
}
inline void GeoLocationInfo::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.latitude)
}

// double longitude = 6;
inline void GeoLocationInfo::clear_longitude() {
  longitude_ = 0;
}
inline double GeoLocationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.longitude)
  return longitude_;
}
inline void GeoLocationInfo::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.longitude)
}

// string timezone = 7;
inline void GeoLocationInfo::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::timezone() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.timezone)
  return timezone_.GetNoArena();
}
inline void GeoLocationInfo::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.timezone)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.timezone)
}
#endif
inline void GeoLocationInfo::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.timezone)
}
inline void GeoLocationInfo::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.timezone)
}
inline ::std::string* GeoLocationInfo::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.timezone)
}

// string isp_name = 8;
inline void GeoLocationInfo::clear_isp_name() {
  isp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::isp_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.isp_name)
  return isp_name_.GetNoArena();
}
inline void GeoLocationInfo::set_isp_name(const ::std::string& value) {
  
  isp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.isp_name)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_isp_name(::std::string&& value) {
  
  isp_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.isp_name)
}
#endif
inline void GeoLocationInfo::set_isp_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  isp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.isp_name)
}
inline void GeoLocationInfo::set_isp_name(const char* value, size_t size) {
  
  isp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.isp_name)
}
inline ::std::string* GeoLocationInfo::mutable_isp_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.isp_name)
  return isp_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_isp_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.isp_name)
  
  return isp_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_isp_name(::std::string* isp_name) {
  if (isp_name != NULL) {
    
  } else {
    
  }
  isp_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isp_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.isp_name)
}

// string organization_name = 9;
inline void GeoLocationInfo::clear_organization_name() {
  organization_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::organization_name() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.organization_name)
  return organization_name_.GetNoArena();
}
inline void GeoLocationInfo::set_organization_name(const ::std::string& value) {
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.organization_name)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_organization_name(::std::string&& value) {
  
  organization_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.organization_name)
}
#endif
inline void GeoLocationInfo::set_organization_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.organization_name)
}
inline void GeoLocationInfo::set_organization_name(const char* value, size_t size) {
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.organization_name)
}
inline ::std::string* GeoLocationInfo::mutable_organization_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.organization_name)
  return organization_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_organization_name() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.organization_name)
  
  return organization_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_organization_name(::std::string* organization_name) {
  if (organization_name != NULL) {
    
  } else {
    
  }
  organization_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.organization_name)
}

// string autonomous_system_number = 10;
inline void GeoLocationInfo::clear_autonomous_system_number() {
  autonomous_system_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoLocationInfo::autonomous_system_number() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.autonomous_system_number)
  return autonomous_system_number_.GetNoArena();
}
inline void GeoLocationInfo::set_autonomous_system_number(const ::std::string& value) {
  
  autonomous_system_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.autonomous_system_number)
}
#if LANG_CXX11
inline void GeoLocationInfo::set_autonomous_system_number(::std::string&& value) {
  
  autonomous_system_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoLocationInfo.autonomous_system_number)
}
#endif
inline void GeoLocationInfo::set_autonomous_system_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  autonomous_system_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoLocationInfo.autonomous_system_number)
}
inline void GeoLocationInfo::set_autonomous_system_number(const char* value, size_t size) {
  
  autonomous_system_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoLocationInfo.autonomous_system_number)
}
inline ::std::string* GeoLocationInfo::mutable_autonomous_system_number() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoLocationInfo.autonomous_system_number)
  return autonomous_system_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoLocationInfo::release_autonomous_system_number() {
  // @@protoc_insertion_point(field_release:protobuf.GeoLocationInfo.autonomous_system_number)
  
  return autonomous_system_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLocationInfo::set_allocated_autonomous_system_number(::std::string* autonomous_system_number) {
  if (autonomous_system_number != NULL) {
    
  } else {
    
  }
  autonomous_system_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autonomous_system_number);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoLocationInfo.autonomous_system_number)
}

// bool is_anonymous_proxy = 11;
inline void GeoLocationInfo::clear_is_anonymous_proxy() {
  is_anonymous_proxy_ = false;
}
inline bool GeoLocationInfo::is_anonymous_proxy() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_anonymous_proxy)
  return is_anonymous_proxy_;
}
inline void GeoLocationInfo::set_is_anonymous_proxy(bool value) {
  
  is_anonymous_proxy_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_anonymous_proxy)
}

// bool is_satellite_provider = 12;
inline void GeoLocationInfo::clear_is_satellite_provider() {
  is_satellite_provider_ = false;
}
inline bool GeoLocationInfo::is_satellite_provider() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_satellite_provider)
  return is_satellite_provider_;
}
inline void GeoLocationInfo::set_is_satellite_provider(bool value) {
  
  is_satellite_provider_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_satellite_provider)
}

// bool is_tor_exit_node = 13;
inline void GeoLocationInfo::clear_is_tor_exit_node() {
  is_tor_exit_node_ = false;
}
inline bool GeoLocationInfo::is_tor_exit_node() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_tor_exit_node)
  return is_tor_exit_node_;
}
inline void GeoLocationInfo::set_is_tor_exit_node(bool value) {
  
  is_tor_exit_node_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_tor_exit_node)
}

// bool is_known_malicious = 14;
inline void GeoLocationInfo::clear_is_known_malicious() {
  is_known_malicious_ = false;
}
inline bool GeoLocationInfo::is_known_malicious() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.is_known_malicious)
  return is_known_malicious_;
}
inline void GeoLocationInfo::set_is_known_malicious(bool value) {
  
  is_known_malicious_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.is_known_malicious)
}

// .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
inline void GeoLocationInfo::clear_threat_level() {
  threat_level_ = 0;
}
inline ::protobuf::GeoLocationInfo_ThreatLevel GeoLocationInfo::threat_level() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoLocationInfo.threat_level)
  return static_cast< ::protobuf::GeoLocationInfo_ThreatLevel >(threat_level_);
}
inline void GeoLocationInfo::set_threat_level(::protobuf::GeoLocationInfo_ThreatLevel value) {
  
  threat_level_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoLocationInfo.threat_level)
}

// -------------------------------------------------------------------

// GeoEnrichment

// .protobuf.GeoLocationInfo sniffer_node_geo = 1;
inline bool GeoEnrichment::has_sniffer_node_geo() const {
  return this != internal_default_instance() && sniffer_node_geo_ != NULL;
}
inline void GeoEnrichment::clear_sniffer_node_geo() {
  if (GetArenaNoVirtual() == NULL && sniffer_node_geo_ != NULL) {
    delete sniffer_node_geo_;
  }
  sniffer_node_geo_ = NULL;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_sniffer_node_geo() const {
  return *sniffer_node_geo_;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::sniffer_node_geo() const {
  const ::protobuf::GeoLocationInfo* p = sniffer_node_geo_;
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_node_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::GeoLocationInfo*>(
      &::protobuf::_GeoLocationInfo_default_instance_);
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_sniffer_node_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_node_geo)
  
  ::protobuf::GeoLocationInfo* temp = sniffer_node_geo_;
  sniffer_node_geo_ = NULL;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_sniffer_node_geo() {
  
  if (sniffer_node_geo_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaNoVirtual());
    sniffer_node_geo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_node_geo)
  return sniffer_node_geo_;
}
inline void GeoEnrichment::set_allocated_sniffer_node_geo(::protobuf::GeoLocationInfo* sniffer_node_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sniffer_node_geo_;
  }
  if (sniffer_node_geo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sniffer_node_geo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sniffer_node_geo, submessage_arena);
    }
    
  } else {
    
  }
  sniffer_node_geo_ = sniffer_node_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_node_geo)
}

// .protobuf.GeoLocationInfo source_ip_geo = 2;
inline bool GeoEnrichment::has_source_ip_geo() const {
  return this != internal_default_instance() && source_ip_geo_ != NULL;
}
inline void GeoEnrichment::clear_source_ip_geo() {
  if (GetArenaNoVirtual() == NULL && source_ip_geo_ != NULL) {
    delete source_ip_geo_;
  }
  source_ip_geo_ = NULL;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_source_ip_geo() const {
  return *source_ip_geo_;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::source_ip_geo() const {
  const ::protobuf::GeoLocationInfo* p = source_ip_geo_;
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_ip_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::GeoLocationInfo*>(
      &::protobuf::_GeoLocationInfo_default_instance_);
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_source_ip_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.source_ip_geo)
  
  ::protobuf::GeoLocationInfo* temp = source_ip_geo_;
  source_ip_geo_ = NULL;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_source_ip_geo() {
  
  if (source_ip_geo_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaNoVirtual());
    source_ip_geo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.source_ip_geo)
  return source_ip_geo_;
}
inline void GeoEnrichment::set_allocated_source_ip_geo(::protobuf::GeoLocationInfo* source_ip_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_ip_geo_;
  }
  if (source_ip_geo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_ip_geo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_ip_geo, submessage_arena);
    }
    
  } else {
    
  }
  source_ip_geo_ = source_ip_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.source_ip_geo)
}

// .protobuf.GeoLocationInfo destination_ip_geo = 3;
inline bool GeoEnrichment::has_destination_ip_geo() const {
  return this != internal_default_instance() && destination_ip_geo_ != NULL;
}
inline void GeoEnrichment::clear_destination_ip_geo() {
  if (GetArenaNoVirtual() == NULL && destination_ip_geo_ != NULL) {
    delete destination_ip_geo_;
  }
  destination_ip_geo_ = NULL;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::_internal_destination_ip_geo() const {
  return *destination_ip_geo_;
}
inline const ::protobuf::GeoLocationInfo& GeoEnrichment::destination_ip_geo() const {
  const ::protobuf::GeoLocationInfo* p = destination_ip_geo_;
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.destination_ip_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::GeoLocationInfo*>(
      &::protobuf::_GeoLocationInfo_default_instance_);
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::release_destination_ip_geo() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.destination_ip_geo)
  
  ::protobuf::GeoLocationInfo* temp = destination_ip_geo_;
  destination_ip_geo_ = NULL;
  return temp;
}
inline ::protobuf::GeoLocationInfo* GeoEnrichment::mutable_destination_ip_geo() {
  
  if (destination_ip_geo_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::GeoLocationInfo>(GetArenaNoVirtual());
    destination_ip_geo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.destination_ip_geo)
  return destination_ip_geo_;
}
inline void GeoEnrichment::set_allocated_destination_ip_geo(::protobuf::GeoLocationInfo* destination_ip_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_ip_geo_;
  }
  if (destination_ip_geo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_ip_geo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_ip_geo, submessage_arena);
    }
    
  } else {
    
  }
  destination_ip_geo_ = destination_ip_geo;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.destination_ip_geo)
}

// double source_destination_distance_km = 10;
inline void GeoEnrichment::clear_source_destination_distance_km() {
  source_destination_distance_km_ = 0;
}
inline double GeoEnrichment::source_destination_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_distance_km)
  return source_destination_distance_km_;
}
inline void GeoEnrichment::set_source_destination_distance_km(double value) {
  
  source_destination_distance_km_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_distance_km)
}

// bool source_destination_same_country = 11;
inline void GeoEnrichment::clear_source_destination_same_country() {
  source_destination_same_country_ = false;
}
inline bool GeoEnrichment::source_destination_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_same_country)
  return source_destination_same_country_;
}
inline void GeoEnrichment::set_source_destination_same_country(bool value) {
  
  source_destination_same_country_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_same_country)
}

// bool source_destination_same_continent = 12;
inline void GeoEnrichment::clear_source_destination_same_continent() {
  source_destination_same_continent_ = false;
}
inline bool GeoEnrichment::source_destination_same_continent() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_destination_same_continent)
  return source_destination_same_continent_;
}
inline void GeoEnrichment::set_source_destination_same_continent(bool value) {
  
  source_destination_same_continent_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_destination_same_continent)
}

// string distance_category = 13;
inline void GeoEnrichment::clear_distance_category() {
  distance_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::distance_category() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.distance_category)
  return distance_category_.GetNoArena();
}
inline void GeoEnrichment::set_distance_category(const ::std::string& value) {
  
  distance_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.distance_category)
}
#if LANG_CXX11
inline void GeoEnrichment::set_distance_category(::std::string&& value) {
  
  distance_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.distance_category)
}
#endif
inline void GeoEnrichment::set_distance_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  distance_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.distance_category)
}
inline void GeoEnrichment::set_distance_category(const char* value, size_t size) {
  
  distance_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.distance_category)
}
inline ::std::string* GeoEnrichment::mutable_distance_category() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.distance_category)
  return distance_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_distance_category() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.distance_category)
  
  return distance_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_distance_category(::std::string* distance_category) {
  if (distance_category != NULL) {
    
  } else {
    
  }
  distance_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distance_category);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.distance_category)
}

// double sniffer_source_distance_km = 20;
inline void GeoEnrichment::clear_sniffer_source_distance_km() {
  sniffer_source_distance_km_ = 0;
}
inline double GeoEnrichment::sniffer_source_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_distance_km)
  return sniffer_source_distance_km_;
}
inline void GeoEnrichment::set_sniffer_source_distance_km(double value) {
  
  sniffer_source_distance_km_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_distance_km)
}

// bool sniffer_source_same_country = 21;
inline void GeoEnrichment::clear_sniffer_source_same_country() {
  sniffer_source_same_country_ = false;
}
inline bool GeoEnrichment::sniffer_source_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_same_country)
  return sniffer_source_same_country_;
}
inline void GeoEnrichment::set_sniffer_source_same_country(bool value) {
  
  sniffer_source_same_country_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_same_country)
}

// string sniffer_source_relationship = 22;
inline void GeoEnrichment::clear_sniffer_source_relationship() {
  sniffer_source_relationship_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::sniffer_source_relationship() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_source_relationship)
  return sniffer_source_relationship_.GetNoArena();
}
inline void GeoEnrichment::set_sniffer_source_relationship(const ::std::string& value) {
  
  sniffer_source_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_source_relationship)
}
#if LANG_CXX11
inline void GeoEnrichment::set_sniffer_source_relationship(::std::string&& value) {
  
  sniffer_source_relationship_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.sniffer_source_relationship)
}
#endif
inline void GeoEnrichment::set_sniffer_source_relationship(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sniffer_source_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.sniffer_source_relationship)
}
inline void GeoEnrichment::set_sniffer_source_relationship(const char* value, size_t size) {
  
  sniffer_source_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.sniffer_source_relationship)
}
inline ::std::string* GeoEnrichment::mutable_sniffer_source_relationship() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_source_relationship)
  return sniffer_source_relationship_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_sniffer_source_relationship() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_source_relationship)
  
  return sniffer_source_relationship_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_sniffer_source_relationship(::std::string* sniffer_source_relationship) {
  if (sniffer_source_relationship != NULL) {
    
  } else {
    
  }
  sniffer_source_relationship_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sniffer_source_relationship);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_source_relationship)
}

// double sniffer_destination_distance_km = 25;
inline void GeoEnrichment::clear_sniffer_destination_distance_km() {
  sniffer_destination_distance_km_ = 0;
}
inline double GeoEnrichment::sniffer_destination_distance_km() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_distance_km)
  return sniffer_destination_distance_km_;
}
inline void GeoEnrichment::set_sniffer_destination_distance_km(double value) {
  
  sniffer_destination_distance_km_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_distance_km)
}

// bool sniffer_destination_same_country = 26;
inline void GeoEnrichment::clear_sniffer_destination_same_country() {
  sniffer_destination_same_country_ = false;
}
inline bool GeoEnrichment::sniffer_destination_same_country() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_same_country)
  return sniffer_destination_same_country_;
}
inline void GeoEnrichment::set_sniffer_destination_same_country(bool value) {
  
  sniffer_destination_same_country_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_same_country)
}

// string sniffer_destination_relationship = 27;
inline void GeoEnrichment::clear_sniffer_destination_relationship() {
  sniffer_destination_relationship_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::sniffer_destination_relationship() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_destination_relationship)
  return sniffer_destination_relationship_.GetNoArena();
}
inline void GeoEnrichment::set_sniffer_destination_relationship(const ::std::string& value) {
  
  sniffer_destination_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_destination_relationship)
}
#if LANG_CXX11
inline void GeoEnrichment::set_sniffer_destination_relationship(::std::string&& value) {
  
  sniffer_destination_relationship_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.sniffer_destination_relationship)
}
#endif
inline void GeoEnrichment::set_sniffer_destination_relationship(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sniffer_destination_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.sniffer_destination_relationship)
}
inline void GeoEnrichment::set_sniffer_destination_relationship(const char* value, size_t size) {
  
  sniffer_destination_relationship_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.sniffer_destination_relationship)
}
inline ::std::string* GeoEnrichment::mutable_sniffer_destination_relationship() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.sniffer_destination_relationship)
  return sniffer_destination_relationship_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_sniffer_destination_relationship() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.sniffer_destination_relationship)
  
  return sniffer_destination_relationship_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_sniffer_destination_relationship(::std::string* sniffer_destination_relationship) {
  if (sniffer_destination_relationship != NULL) {
    
  } else {
    
  }
  sniffer_destination_relationship_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sniffer_destination_relationship);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.sniffer_destination_relationship)
}

// repeated string threat_intelligence_matches = 30;
inline int GeoEnrichment::threat_intelligence_matches_size() const {
  return threat_intelligence_matches_.size();
}
inline void GeoEnrichment::clear_threat_intelligence_matches() {
  threat_intelligence_matches_.Clear();
}
inline const ::std::string& GeoEnrichment::threat_intelligence_matches(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.threat_intelligence_matches)
  return threat_intelligence_matches_.Get(index);
}
inline ::std::string* GeoEnrichment::mutable_threat_intelligence_matches(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.threat_intelligence_matches)
  return threat_intelligence_matches_.Mutable(index);
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_matches)
  threat_intelligence_matches_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GeoEnrichment::set_threat_intelligence_matches(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_matches)
  threat_intelligence_matches_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  threat_intelligence_matches_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::set_threat_intelligence_matches(int index, const char* value, size_t size) {
  threat_intelligence_matches_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline ::std::string* GeoEnrichment::add_threat_intelligence_matches() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.GeoEnrichment.threat_intelligence_matches)
  return threat_intelligence_matches_.Add();
}
inline void GeoEnrichment::add_threat_intelligence_matches(const ::std::string& value) {
  threat_intelligence_matches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.GeoEnrichment.threat_intelligence_matches)
}
#if LANG_CXX11
inline void GeoEnrichment::add_threat_intelligence_matches(::std::string&& value) {
  threat_intelligence_matches_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.GeoEnrichment.threat_intelligence_matches)
}
#endif
inline void GeoEnrichment::add_threat_intelligence_matches(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  threat_intelligence_matches_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline void GeoEnrichment::add_threat_intelligence_matches(const char* value, size_t size) {
  threat_intelligence_matches_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.GeoEnrichment.threat_intelligence_matches)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GeoEnrichment::threat_intelligence_matches() const {
  // @@protoc_insertion_point(field_list:protobuf.GeoEnrichment.threat_intelligence_matches)
  return threat_intelligence_matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GeoEnrichment::mutable_threat_intelligence_matches() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.GeoEnrichment.threat_intelligence_matches)
  return &threat_intelligence_matches_;
}

// string threat_intelligence_source = 31;
inline void GeoEnrichment::clear_threat_intelligence_source() {
  threat_intelligence_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::threat_intelligence_source() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.threat_intelligence_source)
  return threat_intelligence_source_.GetNoArena();
}
inline void GeoEnrichment::set_threat_intelligence_source(const ::std::string& value) {
  
  threat_intelligence_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.threat_intelligence_source)
}
#if LANG_CXX11
inline void GeoEnrichment::set_threat_intelligence_source(::std::string&& value) {
  
  threat_intelligence_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.threat_intelligence_source)
}
#endif
inline void GeoEnrichment::set_threat_intelligence_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  threat_intelligence_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.threat_intelligence_source)
}
inline void GeoEnrichment::set_threat_intelligence_source(const char* value, size_t size) {
  
  threat_intelligence_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.threat_intelligence_source)
}
inline ::std::string* GeoEnrichment::mutable_threat_intelligence_source() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.threat_intelligence_source)
  return threat_intelligence_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_threat_intelligence_source() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.threat_intelligence_source)
  
  return threat_intelligence_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_threat_intelligence_source(::std::string* threat_intelligence_source) {
  if (threat_intelligence_source != NULL) {
    
  } else {
    
  }
  threat_intelligence_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), threat_intelligence_source);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.threat_intelligence_source)
}

// float geographic_anomaly_score = 32;
inline void GeoEnrichment::clear_geographic_anomaly_score() {
  geographic_anomaly_score_ = 0;
}
inline float GeoEnrichment::geographic_anomaly_score() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geographic_anomaly_score)
  return geographic_anomaly_score_;
}
inline void GeoEnrichment::set_geographic_anomaly_score(float value) {
  
  geographic_anomaly_score_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geographic_anomaly_score)
}

// bool suspicious_geographic_pattern = 33;
inline void GeoEnrichment::clear_suspicious_geographic_pattern() {
  suspicious_geographic_pattern_ = false;
}
inline bool GeoEnrichment::suspicious_geographic_pattern() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.suspicious_geographic_pattern)
  return suspicious_geographic_pattern_;
}
inline void GeoEnrichment::set_suspicious_geographic_pattern(bool value) {
  
  suspicious_geographic_pattern_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.suspicious_geographic_pattern)
}

// bool sniffer_node_enriched = 40;
inline void GeoEnrichment::clear_sniffer_node_enriched() {
  sniffer_node_enriched_ = false;
}
inline bool GeoEnrichment::sniffer_node_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.sniffer_node_enriched)
  return sniffer_node_enriched_;
}
inline void GeoEnrichment::set_sniffer_node_enriched(bool value) {
  
  sniffer_node_enriched_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.sniffer_node_enriched)
}

// bool source_ip_enriched = 41;
inline void GeoEnrichment::clear_source_ip_enriched() {
  source_ip_enriched_ = false;
}
inline bool GeoEnrichment::source_ip_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.source_ip_enriched)
  return source_ip_enriched_;
}
inline void GeoEnrichment::set_source_ip_enriched(bool value) {
  
  source_ip_enriched_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.source_ip_enriched)
}

// bool destination_ip_enriched = 42;
inline void GeoEnrichment::clear_destination_ip_enriched() {
  destination_ip_enriched_ = false;
}
inline bool GeoEnrichment::destination_ip_enriched() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.destination_ip_enriched)
  return destination_ip_enriched_;
}
inline void GeoEnrichment::set_destination_ip_enriched(bool value) {
  
  destination_ip_enriched_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.destination_ip_enriched)
}

// bool enrichment_complete = 43;
inline void GeoEnrichment::clear_enrichment_complete() {
  enrichment_complete_ = false;
}
inline bool GeoEnrichment::enrichment_complete() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_complete)
  return enrichment_complete_;
}
inline void GeoEnrichment::set_enrichment_complete(bool value) {
  
  enrichment_complete_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enrichment_complete)
}

// bool public_ip_discovery_attempted = 45;
inline void GeoEnrichment::clear_public_ip_discovery_attempted() {
  public_ip_discovery_attempted_ = false;
}
inline bool GeoEnrichment::public_ip_discovery_attempted() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.public_ip_discovery_attempted)
  return public_ip_discovery_attempted_;
}
inline void GeoEnrichment::set_public_ip_discovery_attempted(bool value) {
  
  public_ip_discovery_attempted_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.public_ip_discovery_attempted)
}

// string original_private_ip = 46;
inline void GeoEnrichment::clear_original_private_ip() {
  original_private_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::original_private_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.original_private_ip)
  return original_private_ip_.GetNoArena();
}
inline void GeoEnrichment::set_original_private_ip(const ::std::string& value) {
  
  original_private_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.original_private_ip)
}
#if LANG_CXX11
inline void GeoEnrichment::set_original_private_ip(::std::string&& value) {
  
  original_private_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.original_private_ip)
}
#endif
inline void GeoEnrichment::set_original_private_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_private_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.original_private_ip)
}
inline void GeoEnrichment::set_original_private_ip(const char* value, size_t size) {
  
  original_private_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.original_private_ip)
}
inline ::std::string* GeoEnrichment::mutable_original_private_ip() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.original_private_ip)
  return original_private_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_original_private_ip() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.original_private_ip)
  
  return original_private_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_original_private_ip(::std::string* original_private_ip) {
  if (original_private_ip != NULL) {
    
  } else {
    
  }
  original_private_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_private_ip);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.original_private_ip)
}

// string discovered_public_ip = 47;
inline void GeoEnrichment::clear_discovered_public_ip() {
  discovered_public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::discovered_public_ip() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.discovered_public_ip)
  return discovered_public_ip_.GetNoArena();
}
inline void GeoEnrichment::set_discovered_public_ip(const ::std::string& value) {
  
  discovered_public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.discovered_public_ip)
}
#if LANG_CXX11
inline void GeoEnrichment::set_discovered_public_ip(::std::string&& value) {
  
  discovered_public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.discovered_public_ip)
}
#endif
inline void GeoEnrichment::set_discovered_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  discovered_public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.discovered_public_ip)
}
inline void GeoEnrichment::set_discovered_public_ip(const char* value, size_t size) {
  
  discovered_public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.discovered_public_ip)
}
inline ::std::string* GeoEnrichment::mutable_discovered_public_ip() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.discovered_public_ip)
  return discovered_public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_discovered_public_ip() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.discovered_public_ip)
  
  return discovered_public_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_discovered_public_ip(::std::string* discovered_public_ip) {
  if (discovered_public_ip != NULL) {
    
  } else {
    
  }
  discovered_public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discovered_public_ip);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.discovered_public_ip)
}

// string ip_discovery_service = 48;
inline void GeoEnrichment::clear_ip_discovery_service() {
  ip_discovery_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::ip_discovery_service() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.ip_discovery_service)
  return ip_discovery_service_.GetNoArena();
}
inline void GeoEnrichment::set_ip_discovery_service(const ::std::string& value) {
  
  ip_discovery_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.ip_discovery_service)
}
#if LANG_CXX11
inline void GeoEnrichment::set_ip_discovery_service(::std::string&& value) {
  
  ip_discovery_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.ip_discovery_service)
}
#endif
inline void GeoEnrichment::set_ip_discovery_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_discovery_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.ip_discovery_service)
}
inline void GeoEnrichment::set_ip_discovery_service(const char* value, size_t size) {
  
  ip_discovery_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.ip_discovery_service)
}
inline ::std::string* GeoEnrichment::mutable_ip_discovery_service() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.ip_discovery_service)
  return ip_discovery_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_ip_discovery_service() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.ip_discovery_service)
  
  return ip_discovery_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_ip_discovery_service(::std::string* ip_discovery_service) {
  if (ip_discovery_service != NULL) {
    
  } else {
    
  }
  ip_discovery_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_discovery_service);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.ip_discovery_service)
}

// .google.protobuf.Timestamp ip_discovery_time = 49;
inline bool GeoEnrichment::has_ip_discovery_time() const {
  return this != internal_default_instance() && ip_discovery_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& GeoEnrichment::_internal_ip_discovery_time() const {
  return *ip_discovery_time_;
}
inline const ::google::protobuf::Timestamp& GeoEnrichment::ip_discovery_time() const {
  const ::google::protobuf::Timestamp* p = ip_discovery_time_;
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.ip_discovery_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GeoEnrichment::release_ip_discovery_time() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.ip_discovery_time)
  
  ::google::protobuf::Timestamp* temp = ip_discovery_time_;
  ip_discovery_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* GeoEnrichment::mutable_ip_discovery_time() {
  
  if (ip_discovery_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    ip_discovery_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.ip_discovery_time)
  return ip_discovery_time_;
}
inline void GeoEnrichment::set_allocated_ip_discovery_time(::google::protobuf::Timestamp* ip_discovery_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ip_discovery_time_);
  }
  if (ip_discovery_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ip_discovery_time)->GetArena();
    if (message_arena != submessage_arena) {
      ip_discovery_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_discovery_time, submessage_arena);
    }
    
  } else {
    
  }
  ip_discovery_time_ = ip_discovery_time;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.ip_discovery_time)
}

// string enricher_version = 50;
inline void GeoEnrichment::clear_enricher_version() {
  enricher_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::enricher_version() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enricher_version)
  return enricher_version_.GetNoArena();
}
inline void GeoEnrichment::set_enricher_version(const ::std::string& value) {
  
  enricher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enricher_version)
}
#if LANG_CXX11
inline void GeoEnrichment::set_enricher_version(::std::string&& value) {
  
  enricher_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.enricher_version)
}
#endif
inline void GeoEnrichment::set_enricher_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enricher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.enricher_version)
}
inline void GeoEnrichment::set_enricher_version(const char* value, size_t size) {
  
  enricher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.enricher_version)
}
inline ::std::string* GeoEnrichment::mutable_enricher_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.enricher_version)
  return enricher_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_enricher_version() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.enricher_version)
  
  return enricher_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_enricher_version(::std::string* enricher_version) {
  if (enricher_version != NULL) {
    
  } else {
    
  }
  enricher_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enricher_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.enricher_version)
}

// string geoip_method = 51;
inline void GeoEnrichment::clear_geoip_method() {
  geoip_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::geoip_method() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geoip_method)
  return geoip_method_.GetNoArena();
}
inline void GeoEnrichment::set_geoip_method(const ::std::string& value) {
  
  geoip_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geoip_method)
}
#if LANG_CXX11
inline void GeoEnrichment::set_geoip_method(::std::string&& value) {
  
  geoip_method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.geoip_method)
}
#endif
inline void GeoEnrichment::set_geoip_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geoip_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.geoip_method)
}
inline void GeoEnrichment::set_geoip_method(const char* value, size_t size) {
  
  geoip_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.geoip_method)
}
inline ::std::string* GeoEnrichment::mutable_geoip_method() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.geoip_method)
  return geoip_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_geoip_method() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.geoip_method)
  
  return geoip_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_geoip_method(::std::string* geoip_method) {
  if (geoip_method != NULL) {
    
  } else {
    
  }
  geoip_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoip_method);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.geoip_method)
}

// string geoip_database_version = 52;
inline void GeoEnrichment::clear_geoip_database_version() {
  geoip_database_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoEnrichment::geoip_database_version() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.geoip_database_version)
  return geoip_database_version_.GetNoArena();
}
inline void GeoEnrichment::set_geoip_database_version(const ::std::string& value) {
  
  geoip_database_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.geoip_database_version)
}
#if LANG_CXX11
inline void GeoEnrichment::set_geoip_database_version(::std::string&& value) {
  
  geoip_database_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.GeoEnrichment.geoip_database_version)
}
#endif
inline void GeoEnrichment::set_geoip_database_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geoip_database_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GeoEnrichment.geoip_database_version)
}
inline void GeoEnrichment::set_geoip_database_version(const char* value, size_t size) {
  
  geoip_database_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GeoEnrichment.geoip_database_version)
}
inline ::std::string* GeoEnrichment::mutable_geoip_database_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.geoip_database_version)
  return geoip_database_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoEnrichment::release_geoip_database_version() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.geoip_database_version)
  
  return geoip_database_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoEnrichment::set_allocated_geoip_database_version(::std::string* geoip_database_version) {
  if (geoip_database_version != NULL) {
    
  } else {
    
  }
  geoip_database_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoip_database_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.geoip_database_version)
}

// bool fallback_coordinates_used = 53;
inline void GeoEnrichment::clear_fallback_coordinates_used() {
  fallback_coordinates_used_ = false;
}
inline bool GeoEnrichment::fallback_coordinates_used() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.fallback_coordinates_used)
  return fallback_coordinates_used_;
}
inline void GeoEnrichment::set_fallback_coordinates_used(bool value) {
  
  fallback_coordinates_used_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.fallback_coordinates_used)
}

// float total_lookup_latency_ms = 54;
inline void GeoEnrichment::clear_total_lookup_latency_ms() {
  total_lookup_latency_ms_ = 0;
}
inline float GeoEnrichment::total_lookup_latency_ms() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.total_lookup_latency_ms)
  return total_lookup_latency_ms_;
}
inline void GeoEnrichment::set_total_lookup_latency_ms(float value) {
  
  total_lookup_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.total_lookup_latency_ms)
}

// int32 cache_hits = 55;
inline void GeoEnrichment::clear_cache_hits() {
  cache_hits_ = 0;
}
inline ::google::protobuf::int32 GeoEnrichment::cache_hits() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.cache_hits)
  return cache_hits_;
}
inline void GeoEnrichment::set_cache_hits(::google::protobuf::int32 value) {
  
  cache_hits_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.cache_hits)
}

// int32 cache_misses = 56;
inline void GeoEnrichment::clear_cache_misses() {
  cache_misses_ = 0;
}
inline ::google::protobuf::int32 GeoEnrichment::cache_misses() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.cache_misses)
  return cache_misses_;
}
inline void GeoEnrichment::set_cache_misses(::google::protobuf::int32 value) {
  
  cache_misses_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.cache_misses)
}

// float enrichment_success_rate = 57;
inline void GeoEnrichment::clear_enrichment_success_rate() {
  enrichment_success_rate_ = 0;
}
inline float GeoEnrichment::enrichment_success_rate() const {
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_success_rate)
  return enrichment_success_rate_;
}
inline void GeoEnrichment::set_enrichment_success_rate(float value) {
  
  enrichment_success_rate_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GeoEnrichment.enrichment_success_rate)
}

// .google.protobuf.Timestamp enrichment_timestamp = 58;
inline bool GeoEnrichment::has_enrichment_timestamp() const {
  return this != internal_default_instance() && enrichment_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& GeoEnrichment::_internal_enrichment_timestamp() const {
  return *enrichment_timestamp_;
}
inline const ::google::protobuf::Timestamp& GeoEnrichment::enrichment_timestamp() const {
  const ::google::protobuf::Timestamp* p = enrichment_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.GeoEnrichment.enrichment_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GeoEnrichment::release_enrichment_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.GeoEnrichment.enrichment_timestamp)
  
  ::google::protobuf::Timestamp* temp = enrichment_timestamp_;
  enrichment_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* GeoEnrichment::mutable_enrichment_timestamp() {
  
  if (enrichment_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    enrichment_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.GeoEnrichment.enrichment_timestamp)
  return enrichment_timestamp_;
}
inline void GeoEnrichment::set_allocated_enrichment_timestamp(::google::protobuf::Timestamp* enrichment_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enrichment_timestamp_);
  }
  if (enrichment_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(enrichment_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      enrichment_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enrichment_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  enrichment_timestamp_ = enrichment_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.GeoEnrichment.enrichment_timestamp)
}

// -------------------------------------------------------------------

// TimeWindow

// .google.protobuf.Timestamp window_start = 1;
inline bool TimeWindow::has_window_start() const {
  return this != internal_default_instance() && window_start_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeWindow::_internal_window_start() const {
  return *window_start_;
}
inline const ::google::protobuf::Timestamp& TimeWindow::window_start() const {
  const ::google::protobuf::Timestamp* p = window_start_;
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_window_start() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_start)
  
  ::google::protobuf::Timestamp* temp = window_start_;
  window_start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_window_start() {
  
  if (window_start_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    window_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_start)
  return window_start_;
}
inline void TimeWindow::set_allocated_window_start(::google::protobuf::Timestamp* window_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(window_start_);
  }
  if (window_start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(window_start)->GetArena();
    if (message_arena != submessage_arena) {
      window_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_start, submessage_arena);
    }
    
  } else {
    
  }
  window_start_ = window_start;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_start)
}

// .google.protobuf.Timestamp window_end = 2;
inline bool TimeWindow::has_window_end() const {
  return this != internal_default_instance() && window_end_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeWindow::_internal_window_end() const {
  return *window_end_;
}
inline const ::google::protobuf::Timestamp& TimeWindow::window_end() const {
  const ::google::protobuf::Timestamp* p = window_end_;
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_end)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_window_end() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_end)
  
  ::google::protobuf::Timestamp* temp = window_end_;
  window_end_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_window_end() {
  
  if (window_end_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    window_end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_end)
  return window_end_;
}
inline void TimeWindow::set_allocated_window_end(::google::protobuf::Timestamp* window_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(window_end_);
  }
  if (window_end) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(window_end)->GetArena();
    if (message_arena != submessage_arena) {
      window_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_end, submessage_arena);
    }
    
  } else {
    
  }
  window_end_ = window_end;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_end)
}

// .google.protobuf.Duration window_duration = 3;
inline bool TimeWindow::has_window_duration() const {
  return this != internal_default_instance() && window_duration_ != NULL;
}
inline const ::google::protobuf::Duration& TimeWindow::_internal_window_duration() const {
  return *window_duration_;
}
inline const ::google::protobuf::Duration& TimeWindow::window_duration() const {
  const ::google::protobuf::Duration* p = window_duration_;
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TimeWindow::release_window_duration() {
  // @@protoc_insertion_point(field_release:protobuf.TimeWindow.window_duration)
  
  ::google::protobuf::Duration* temp = window_duration_;
  window_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* TimeWindow::mutable_window_duration() {
  
  if (window_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    window_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TimeWindow.window_duration)
  return window_duration_;
}
inline void TimeWindow::set_allocated_window_duration(::google::protobuf::Duration* window_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(window_duration_);
  }
  if (window_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(window_duration)->GetArena();
    if (message_arena != submessage_arena) {
      window_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_duration, submessage_arena);
    }
    
  } else {
    
  }
  window_duration_ = window_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TimeWindow.window_duration)
}

// uint64 sequence_number = 4;
inline void TimeWindow::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeWindow::sequence_number() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.sequence_number)
  return sequence_number_;
}
inline void TimeWindow::set_sequence_number(::google::protobuf::uint64 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TimeWindow.sequence_number)
}

// .protobuf.TimeWindow.WindowType window_type = 5;
inline void TimeWindow::clear_window_type() {
  window_type_ = 0;
}
inline ::protobuf::TimeWindow_WindowType TimeWindow::window_type() const {
  // @@protoc_insertion_point(field_get:protobuf.TimeWindow.window_type)
  return static_cast< ::protobuf::TimeWindow_WindowType >(window_type_);
}
inline void TimeWindow::set_window_type(::protobuf::TimeWindow_WindowType value) {
  
  window_type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TimeWindow.window_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlowAggregation

// .protobuf.TimeWindow time_window = 1;
inline bool FlowAggregation::has_time_window() const {
  return this != internal_default_instance() && time_window_ != NULL;
}
inline void FlowAggregation::clear_time_window() {
  if (GetArenaNoVirtual() == NULL && time_window_ != NULL) {
    delete time_window_;
  }
  time_window_ = NULL;
}
inline const ::protobuf::TimeWindow& FlowAggregation::_internal_time_window() const {
  return *time_window_;
}
inline const ::protobuf::TimeWindow& FlowAggregation::time_window() const {
  const ::protobuf::TimeWindow* p = time_window_;
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.time_window)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::TimeWindow*>(
      &::protobuf::_TimeWindow_default_instance_);
}
inline ::protobuf::TimeWindow* FlowAggregation::release_time_window() {
  // @@protoc_insertion_point(field_release:protobuf.FlowAggregation.time_window)
  
  ::protobuf::TimeWindow* temp = time_window_;
  time_window_ = NULL;
  return temp;
}
inline ::protobuf::TimeWindow* FlowAggregation::mutable_time_window() {
  
  if (time_window_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::TimeWindow>(GetArenaNoVirtual());
    time_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.FlowAggregation.time_window)
  return time_window_;
}
inline void FlowAggregation::set_allocated_time_window(::protobuf::TimeWindow* time_window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_window_;
  }
  if (time_window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:protobuf.FlowAggregation.time_window)
}

// uint64 total_flows_in_window = 2;
inline void FlowAggregation::clear_total_flows_in_window() {
  total_flows_in_window_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowAggregation::total_flows_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_flows_in_window)
  return total_flows_in_window_;
}
inline void FlowAggregation::set_total_flows_in_window(::google::protobuf::uint64 value) {
  
  total_flows_in_window_ = value;
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_flows_in_window)
}

// uint64 total_packets_in_window = 3;
inline void FlowAggregation::clear_total_packets_in_window() {
  total_packets_in_window_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowAggregation::total_packets_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_packets_in_window)
  return total_packets_in_window_;
}
inline void FlowAggregation::set_total_packets_in_window(::google::protobuf::uint64 value) {
  
  total_packets_in_window_ = value;
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_packets_in_window)
}

// uint64 total_bytes_in_window = 4;
inline void FlowAggregation::clear_total_bytes_in_window() {
  total_bytes_in_window_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowAggregation::total_bytes_in_window() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.total_bytes_in_window)
  return total_bytes_in_window_;
}
inline void FlowAggregation::set_total_bytes_in_window(::google::protobuf::uint64 value) {
  
  total_bytes_in_window_ = value;
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.total_bytes_in_window)
}

// map<string, uint64> protocol_distribution = 5;
inline int FlowAggregation::protocol_distribution_size() const {
  return protocol_distribution_.size();
}
inline void FlowAggregation::clear_protocol_distribution() {
  protocol_distribution_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
FlowAggregation::protocol_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.protocol_distribution)
  return protocol_distribution_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
FlowAggregation::mutable_protocol_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.protocol_distribution)
  return protocol_distribution_.MutableMap();
}

// map<string, uint64> port_distribution = 6;
inline int FlowAggregation::port_distribution_size() const {
  return port_distribution_.size();
}
inline void FlowAggregation::clear_port_distribution() {
  port_distribution_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
FlowAggregation::port_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.port_distribution)
  return port_distribution_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
FlowAggregation::mutable_port_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.port_distribution)
  return port_distribution_.MutableMap();
}

// map<string, uint64> country_distribution = 7;
inline int FlowAggregation::country_distribution_size() const {
  return country_distribution_.size();
}
inline void FlowAggregation::clear_country_distribution() {
  country_distribution_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
FlowAggregation::country_distribution() const {
  // @@protoc_insertion_point(field_map:protobuf.FlowAggregation.country_distribution)
  return country_distribution_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
FlowAggregation::mutable_country_distribution() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.FlowAggregation.country_distribution)
  return country_distribution_.MutableMap();
}

// double window_anomaly_score = 8;
inline void FlowAggregation::clear_window_anomaly_score() {
  window_anomaly_score_ = 0;
}
inline double FlowAggregation::window_anomaly_score() const {
  // @@protoc_insertion_point(field_get:protobuf.FlowAggregation.window_anomaly_score)
  return window_anomaly_score_;
}
inline void FlowAggregation::set_window_anomaly_score(double value) {
  
  window_anomaly_score_ = value;
  // @@protoc_insertion_point(field_set:protobuf.FlowAggregation.window_anomaly_score)
}

// -------------------------------------------------------------------

// ModelPrediction

// string model_name = 1;
inline void ModelPrediction::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrediction::model_name() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_name)
  return model_name_.GetNoArena();
}
inline void ModelPrediction::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_name)
}
#if LANG_CXX11
inline void ModelPrediction::set_model_name(::std::string&& value) {
  
  model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ModelPrediction.model_name)
}
#endif
inline void ModelPrediction::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.ModelPrediction.model_name)
}
inline void ModelPrediction::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.ModelPrediction.model_name)
}
inline ::std::string* ModelPrediction::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrediction::release_model_name() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrediction::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.model_name)
}

// string model_version = 2;
inline void ModelPrediction::clear_model_version() {
  model_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrediction::model_version() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_version)
  return model_version_.GetNoArena();
}
inline void ModelPrediction::set_model_version(const ::std::string& value) {
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_version)
}
#if LANG_CXX11
inline void ModelPrediction::set_model_version(::std::string&& value) {
  
  model_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ModelPrediction.model_version)
}
#endif
inline void ModelPrediction::set_model_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.ModelPrediction.model_version)
}
inline void ModelPrediction::set_model_version(const char* value, size_t size) {
  
  model_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.ModelPrediction.model_version)
}
inline ::std::string* ModelPrediction::mutable_model_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.model_version)
  return model_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrediction::release_model_version() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.model_version)
  
  return model_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrediction::set_allocated_model_version(::std::string* model_version) {
  if (model_version != NULL) {
    
  } else {
    
  }
  model_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.model_version)
}

// .protobuf.ModelPrediction.ModelType model_type = 3;
inline void ModelPrediction::clear_model_type() {
  model_type_ = 0;
}
inline ::protobuf::ModelPrediction_ModelType ModelPrediction::model_type() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.model_type)
  return static_cast< ::protobuf::ModelPrediction_ModelType >(model_type_);
}
inline void ModelPrediction::set_model_type(::protobuf::ModelPrediction_ModelType value) {
  
  model_type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.model_type)
}

// string prediction_class = 4;
inline void ModelPrediction::clear_prediction_class() {
  prediction_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrediction::prediction_class() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.prediction_class)
  return prediction_class_.GetNoArena();
}
inline void ModelPrediction::set_prediction_class(const ::std::string& value) {
  
  prediction_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.prediction_class)
}
#if LANG_CXX11
inline void ModelPrediction::set_prediction_class(::std::string&& value) {
  
  prediction_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ModelPrediction.prediction_class)
}
#endif
inline void ModelPrediction::set_prediction_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prediction_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.ModelPrediction.prediction_class)
}
inline void ModelPrediction::set_prediction_class(const char* value, size_t size) {
  
  prediction_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.ModelPrediction.prediction_class)
}
inline ::std::string* ModelPrediction::mutable_prediction_class() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.prediction_class)
  return prediction_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrediction::release_prediction_class() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.prediction_class)
  
  return prediction_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrediction::set_allocated_prediction_class(::std::string* prediction_class) {
  if (prediction_class != NULL) {
    
  } else {
    
  }
  prediction_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prediction_class);
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.prediction_class)
}

// double confidence_score = 5;
inline void ModelPrediction::clear_confidence_score() {
  confidence_score_ = 0;
}
inline double ModelPrediction::confidence_score() const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.confidence_score)
  return confidence_score_;
}
inline void ModelPrediction::set_confidence_score(double value) {
  
  confidence_score_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.confidence_score)
}

// repeated double class_probabilities = 6;
inline int ModelPrediction::class_probabilities_size() const {
  return class_probabilities_.size();
}
inline void ModelPrediction::clear_class_probabilities() {
  class_probabilities_.Clear();
}
inline double ModelPrediction::class_probabilities(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.class_probabilities)
  return class_probabilities_.Get(index);
}
inline void ModelPrediction::set_class_probabilities(int index, double value) {
  class_probabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.ModelPrediction.class_probabilities)
}
inline void ModelPrediction::add_class_probabilities(double value) {
  class_probabilities_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.ModelPrediction.class_probabilities)
}
inline const ::google::protobuf::RepeatedField< double >&
ModelPrediction::class_probabilities() const {
  // @@protoc_insertion_point(field_list:protobuf.ModelPrediction.class_probabilities)
  return class_probabilities_;
}
inline ::google::protobuf::RepeatedField< double >*
ModelPrediction::mutable_class_probabilities() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.ModelPrediction.class_probabilities)
  return &class_probabilities_;
}

// .google.protobuf.Timestamp prediction_timestamp = 7;
inline bool ModelPrediction::has_prediction_timestamp() const {
  return this != internal_default_instance() && prediction_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& ModelPrediction::_internal_prediction_timestamp() const {
  return *prediction_timestamp_;
}
inline const ::google::protobuf::Timestamp& ModelPrediction::prediction_timestamp() const {
  const ::google::protobuf::Timestamp* p = prediction_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.prediction_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ModelPrediction::release_prediction_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.prediction_timestamp)
  
  ::google::protobuf::Timestamp* temp = prediction_timestamp_;
  prediction_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ModelPrediction::mutable_prediction_timestamp() {
  
  if (prediction_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    prediction_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.prediction_timestamp)
  return prediction_timestamp_;
}
inline void ModelPrediction::set_allocated_prediction_timestamp(::google::protobuf::Timestamp* prediction_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(prediction_timestamp_);
  }
  if (prediction_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(prediction_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      prediction_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prediction_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  prediction_timestamp_ = prediction_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.prediction_timestamp)
}

// .google.protobuf.Duration processing_duration = 8;
inline bool ModelPrediction::has_processing_duration() const {
  return this != internal_default_instance() && processing_duration_ != NULL;
}
inline const ::google::protobuf::Duration& ModelPrediction::_internal_processing_duration() const {
  return *processing_duration_;
}
inline const ::google::protobuf::Duration& ModelPrediction::processing_duration() const {
  const ::google::protobuf::Duration* p = processing_duration_;
  // @@protoc_insertion_point(field_get:protobuf.ModelPrediction.processing_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ModelPrediction::release_processing_duration() {
  // @@protoc_insertion_point(field_release:protobuf.ModelPrediction.processing_duration)
  
  ::google::protobuf::Duration* temp = processing_duration_;
  processing_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* ModelPrediction::mutable_processing_duration() {
  
  if (processing_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    processing_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.ModelPrediction.processing_duration)
  return processing_duration_;
}
inline void ModelPrediction::set_allocated_processing_duration(::google::protobuf::Duration* processing_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(processing_duration_);
  }
  if (processing_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(processing_duration)->GetArena();
    if (message_arena != submessage_arena) {
      processing_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processing_duration, submessage_arena);
    }
    
  } else {
    
  }
  processing_duration_ = processing_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModelPrediction.processing_duration)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TricapaMLAnalysis

// .protobuf.ModelPrediction level1_general_detection = 1;
inline bool TricapaMLAnalysis::has_level1_general_detection() const {
  return this != internal_default_instance() && level1_general_detection_ != NULL;
}
inline void TricapaMLAnalysis::clear_level1_general_detection() {
  if (GetArenaNoVirtual() == NULL && level1_general_detection_ != NULL) {
    delete level1_general_detection_;
  }
  level1_general_detection_ = NULL;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level1_general_detection() const {
  return *level1_general_detection_;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level1_general_detection() const {
  const ::protobuf::ModelPrediction* p = level1_general_detection_;
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level1_general_detection)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::ModelPrediction*>(
      &::protobuf::_ModelPrediction_default_instance_);
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::release_level1_general_detection() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.level1_general_detection)
  
  ::protobuf::ModelPrediction* temp = level1_general_detection_;
  level1_general_detection_ = NULL;
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level1_general_detection() {
  
  if (level1_general_detection_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::ModelPrediction>(GetArenaNoVirtual());
    level1_general_detection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level1_general_detection)
  return level1_general_detection_;
}
inline void TricapaMLAnalysis::set_allocated_level1_general_detection(::protobuf::ModelPrediction* level1_general_detection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete level1_general_detection_;
  }
  if (level1_general_detection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      level1_general_detection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, level1_general_detection, submessage_arena);
    }
    
  } else {
    
  }
  level1_general_detection_ = level1_general_detection;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.level1_general_detection)
}

// bool attack_detected_level1 = 2;
inline void TricapaMLAnalysis::clear_attack_detected_level1() {
  attack_detected_level1_ = false;
}
inline bool TricapaMLAnalysis::attack_detected_level1() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.attack_detected_level1)
  return attack_detected_level1_;
}
inline void TricapaMLAnalysis::set_attack_detected_level1(bool value) {
  
  attack_detected_level1_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.attack_detected_level1)
}

// double level1_confidence = 3;
inline void TricapaMLAnalysis::clear_level1_confidence() {
  level1_confidence_ = 0;
}
inline double TricapaMLAnalysis::level1_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level1_confidence)
  return level1_confidence_;
}
inline void TricapaMLAnalysis::set_level1_confidence(double value) {
  
  level1_confidence_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.level1_confidence)
}

// .protobuf.ModelPrediction level2_context_classification = 4;
inline bool TricapaMLAnalysis::has_level2_context_classification() const {
  return this != internal_default_instance() && level2_context_classification_ != NULL;
}
inline void TricapaMLAnalysis::clear_level2_context_classification() {
  if (GetArenaNoVirtual() == NULL && level2_context_classification_ != NULL) {
    delete level2_context_classification_;
  }
  level2_context_classification_ = NULL;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::_internal_level2_context_classification() const {
  return *level2_context_classification_;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level2_context_classification() const {
  const ::protobuf::ModelPrediction* p = level2_context_classification_;
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level2_context_classification)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::ModelPrediction*>(
      &::protobuf::_ModelPrediction_default_instance_);
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::release_level2_context_classification() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.level2_context_classification)
  
  ::protobuf::ModelPrediction* temp = level2_context_classification_;
  level2_context_classification_ = NULL;
  return temp;
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level2_context_classification() {
  
  if (level2_context_classification_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::ModelPrediction>(GetArenaNoVirtual());
    level2_context_classification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level2_context_classification)
  return level2_context_classification_;
}
inline void TricapaMLAnalysis::set_allocated_level2_context_classification(::protobuf::ModelPrediction* level2_context_classification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete level2_context_classification_;
  }
  if (level2_context_classification) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      level2_context_classification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, level2_context_classification, submessage_arena);
    }
    
  } else {
    
  }
  level2_context_classification_ = level2_context_classification;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.level2_context_classification)
}

// string traffic_context = 5;
inline void TricapaMLAnalysis::clear_traffic_context() {
  traffic_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TricapaMLAnalysis::traffic_context() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.traffic_context)
  return traffic_context_.GetNoArena();
}
inline void TricapaMLAnalysis::set_traffic_context(const ::std::string& value) {
  
  traffic_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.traffic_context)
}
#if LANG_CXX11
inline void TricapaMLAnalysis::set_traffic_context(::std::string&& value) {
  
  traffic_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.TricapaMLAnalysis.traffic_context)
}
#endif
inline void TricapaMLAnalysis::set_traffic_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.TricapaMLAnalysis.traffic_context)
}
inline void TricapaMLAnalysis::set_traffic_context(const char* value, size_t size) {
  
  traffic_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.TricapaMLAnalysis.traffic_context)
}
inline ::std::string* TricapaMLAnalysis::mutable_traffic_context() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.traffic_context)
  return traffic_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TricapaMLAnalysis::release_traffic_context() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.traffic_context)
  
  return traffic_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TricapaMLAnalysis::set_allocated_traffic_context(::std::string* traffic_context) {
  if (traffic_context != NULL) {
    
  } else {
    
  }
  traffic_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_context);
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.traffic_context)
}

// repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
inline int TricapaMLAnalysis::level3_specialized_predictions_size() const {
  return level3_specialized_predictions_.size();
}
inline void TricapaMLAnalysis::clear_level3_specialized_predictions() {
  level3_specialized_predictions_.Clear();
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::mutable_level3_specialized_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return level3_specialized_predictions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >*
TricapaMLAnalysis::mutable_level3_specialized_predictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return &level3_specialized_predictions_;
}
inline const ::protobuf::ModelPrediction& TricapaMLAnalysis::level3_specialized_predictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return level3_specialized_predictions_.Get(index);
}
inline ::protobuf::ModelPrediction* TricapaMLAnalysis::add_level3_specialized_predictions() {
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return level3_specialized_predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >&
TricapaMLAnalysis::level3_specialized_predictions() const {
  // @@protoc_insertion_point(field_list:protobuf.TricapaMLAnalysis.level3_specialized_predictions)
  return level3_specialized_predictions_;
}

// string final_threat_classification = 7;
inline void TricapaMLAnalysis::clear_final_threat_classification() {
  final_threat_classification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TricapaMLAnalysis::final_threat_classification() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.final_threat_classification)
  return final_threat_classification_.GetNoArena();
}
inline void TricapaMLAnalysis::set_final_threat_classification(const ::std::string& value) {
  
  final_threat_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.final_threat_classification)
}
#if LANG_CXX11
inline void TricapaMLAnalysis::set_final_threat_classification(::std::string&& value) {
  
  final_threat_classification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.TricapaMLAnalysis.final_threat_classification)
}
#endif
inline void TricapaMLAnalysis::set_final_threat_classification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  final_threat_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.TricapaMLAnalysis.final_threat_classification)
}
inline void TricapaMLAnalysis::set_final_threat_classification(const char* value, size_t size) {
  
  final_threat_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.TricapaMLAnalysis.final_threat_classification)
}
inline ::std::string* TricapaMLAnalysis::mutable_final_threat_classification() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.final_threat_classification)
  return final_threat_classification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TricapaMLAnalysis::release_final_threat_classification() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.final_threat_classification)
  
  return final_threat_classification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TricapaMLAnalysis::set_allocated_final_threat_classification(::std::string* final_threat_classification) {
  if (final_threat_classification != NULL) {
    
  } else {
    
  }
  final_threat_classification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_threat_classification);
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.final_threat_classification)
}

// double ensemble_confidence = 8;
inline void TricapaMLAnalysis::clear_ensemble_confidence() {
  ensemble_confidence_ = 0;
}
inline double TricapaMLAnalysis::ensemble_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.ensemble_confidence)
  return ensemble_confidence_;
}
inline void TricapaMLAnalysis::set_ensemble_confidence(double value) {
  
  ensemble_confidence_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.ensemble_confidence)
}

// .google.protobuf.Duration total_analysis_duration = 10;
inline bool TricapaMLAnalysis::has_total_analysis_duration() const {
  return this != internal_default_instance() && total_analysis_duration_ != NULL;
}
inline const ::google::protobuf::Duration& TricapaMLAnalysis::_internal_total_analysis_duration() const {
  return *total_analysis_duration_;
}
inline const ::google::protobuf::Duration& TricapaMLAnalysis::total_analysis_duration() const {
  const ::google::protobuf::Duration* p = total_analysis_duration_;
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.total_analysis_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TricapaMLAnalysis::release_total_analysis_duration() {
  // @@protoc_insertion_point(field_release:protobuf.TricapaMLAnalysis.total_analysis_duration)
  
  ::google::protobuf::Duration* temp = total_analysis_duration_;
  total_analysis_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* TricapaMLAnalysis::mutable_total_analysis_duration() {
  
  if (total_analysis_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    total_analysis_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.total_analysis_duration)
  return total_analysis_duration_;
}
inline void TricapaMLAnalysis::set_allocated_total_analysis_duration(::google::protobuf::Duration* total_analysis_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(total_analysis_duration_);
  }
  if (total_analysis_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(total_analysis_duration)->GetArena();
    if (message_arena != submessage_arena) {
      total_analysis_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, total_analysis_duration, submessage_arena);
    }
    
  } else {
    
  }
  total_analysis_duration_ = total_analysis_duration;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TricapaMLAnalysis.total_analysis_duration)
}

// repeated string models_activated = 11;
inline int TricapaMLAnalysis::models_activated_size() const {
  return models_activated_.size();
}
inline void TricapaMLAnalysis::clear_models_activated() {
  models_activated_.Clear();
}
inline const ::std::string& TricapaMLAnalysis::models_activated(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.models_activated)
  return models_activated_.Get(index);
}
inline ::std::string* TricapaMLAnalysis::mutable_models_activated(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TricapaMLAnalysis.models_activated)
  return models_activated_.Mutable(index);
}
inline void TricapaMLAnalysis::set_models_activated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.models_activated)
  models_activated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TricapaMLAnalysis::set_models_activated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.models_activated)
  models_activated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TricapaMLAnalysis::set_models_activated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  models_activated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::set_models_activated(int index, const char* value, size_t size) {
  models_activated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.TricapaMLAnalysis.models_activated)
}
inline ::std::string* TricapaMLAnalysis::add_models_activated() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.TricapaMLAnalysis.models_activated)
  return models_activated_.Add();
}
inline void TricapaMLAnalysis::add_models_activated(const ::std::string& value) {
  models_activated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.models_activated)
}
#if LANG_CXX11
inline void TricapaMLAnalysis::add_models_activated(::std::string&& value) {
  models_activated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.TricapaMLAnalysis.models_activated)
}
#endif
inline void TricapaMLAnalysis::add_models_activated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  models_activated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.TricapaMLAnalysis.models_activated)
}
inline void TricapaMLAnalysis::add_models_activated(const char* value, size_t size) {
  models_activated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.TricapaMLAnalysis.models_activated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TricapaMLAnalysis::models_activated() const {
  // @@protoc_insertion_point(field_list:protobuf.TricapaMLAnalysis.models_activated)
  return models_activated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TricapaMLAnalysis::mutable_models_activated() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TricapaMLAnalysis.models_activated)
  return &models_activated_;
}

// map<string, double> feature_importance_scores = 12;
inline int TricapaMLAnalysis::feature_importance_scores_size() const {
  return feature_importance_scores_.size();
}
inline void TricapaMLAnalysis::clear_feature_importance_scores() {
  feature_importance_scores_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
TricapaMLAnalysis::feature_importance_scores() const {
  // @@protoc_insertion_point(field_map:protobuf.TricapaMLAnalysis.feature_importance_scores)
  return feature_importance_scores_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
TricapaMLAnalysis::mutable_feature_importance_scores() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.TricapaMLAnalysis.feature_importance_scores)
  return feature_importance_scores_.MutableMap();
}

// bool requires_human_review = 13;
inline void TricapaMLAnalysis::clear_requires_human_review() {
  requires_human_review_ = false;
}
inline bool TricapaMLAnalysis::requires_human_review() const {
  // @@protoc_insertion_point(field_get:protobuf.TricapaMLAnalysis.requires_human_review)
  return requires_human_review_;
}
inline void TricapaMLAnalysis::set_requires_human_review(bool value) {
  
  requires_human_review_ = value;
  // @@protoc_insertion_point(field_set:protobuf.TricapaMLAnalysis.requires_human_review)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DistributedNode

// string node_id = 1;
inline void DistributedNode::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::node_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_id)
  return node_id_.GetNoArena();
}
inline void DistributedNode::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_id)
}
#if LANG_CXX11
inline void DistributedNode::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.node_id)
}
#endif
inline void DistributedNode::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.node_id)
}
inline void DistributedNode::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.node_id)
}
inline ::std::string* DistributedNode::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_node_id() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_id)
}

// string node_hostname = 2;
inline void DistributedNode::clear_node_hostname() {
  node_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::node_hostname() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_hostname)
  return node_hostname_.GetNoArena();
}
inline void DistributedNode::set_node_hostname(const ::std::string& value) {
  
  node_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_hostname)
}
#if LANG_CXX11
inline void DistributedNode::set_node_hostname(::std::string&& value) {
  
  node_hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.node_hostname)
}
#endif
inline void DistributedNode::set_node_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.node_hostname)
}
inline void DistributedNode::set_node_hostname(const char* value, size_t size) {
  
  node_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.node_hostname)
}
inline ::std::string* DistributedNode::mutable_node_hostname() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_hostname)
  return node_hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_node_hostname() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_hostname)
  
  return node_hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_node_hostname(::std::string* node_hostname) {
  if (node_hostname != NULL) {
    
  } else {
    
  }
  node_hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_hostname);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_hostname)
}

// string node_ip_address = 3;
inline void DistributedNode::clear_node_ip_address() {
  node_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::node_ip_address() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_ip_address)
  return node_ip_address_.GetNoArena();
}
inline void DistributedNode::set_node_ip_address(const ::std::string& value) {
  
  node_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_ip_address)
}
#if LANG_CXX11
inline void DistributedNode::set_node_ip_address(::std::string&& value) {
  
  node_ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.node_ip_address)
}
#endif
inline void DistributedNode::set_node_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.node_ip_address)
}
inline void DistributedNode::set_node_ip_address(const char* value, size_t size) {
  
  node_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.node_ip_address)
}
inline ::std::string* DistributedNode::mutable_node_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.node_ip_address)
  return node_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_node_ip_address() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.node_ip_address)
  
  return node_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_node_ip_address(::std::string* node_ip_address) {
  if (node_ip_address != NULL) {
    
  } else {
    
  }
  node_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ip_address);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.node_ip_address)
}

// string physical_location = 4;
inline void DistributedNode::clear_physical_location() {
  physical_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::physical_location() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.physical_location)
  return physical_location_.GetNoArena();
}
inline void DistributedNode::set_physical_location(const ::std::string& value) {
  
  physical_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.physical_location)
}
#if LANG_CXX11
inline void DistributedNode::set_physical_location(::std::string&& value) {
  
  physical_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.physical_location)
}
#endif
inline void DistributedNode::set_physical_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  physical_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.physical_location)
}
inline void DistributedNode::set_physical_location(const char* value, size_t size) {
  
  physical_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.physical_location)
}
inline ::std::string* DistributedNode::mutable_physical_location() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.physical_location)
  return physical_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_physical_location() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.physical_location)
  
  return physical_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_physical_location(::std::string* physical_location) {
  if (physical_location != NULL) {
    
  } else {
    
  }
  physical_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_location);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.physical_location)
}

// .protobuf.DistributedNode.NodeRole node_role = 5;
inline void DistributedNode::clear_node_role() {
  node_role_ = 0;
}
inline ::protobuf::DistributedNode_NodeRole DistributedNode::node_role() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_role)
  return static_cast< ::protobuf::DistributedNode_NodeRole >(node_role_);
}
inline void DistributedNode::set_node_role(::protobuf::DistributedNode_NodeRole value) {
  
  node_role_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_role)
}

// .protobuf.DistributedNode.NodeStatus node_status = 6;
inline void DistributedNode::clear_node_status() {
  node_status_ = 0;
}
inline ::protobuf::DistributedNode_NodeStatus DistributedNode::node_status() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.node_status)
  return static_cast< ::protobuf::DistributedNode_NodeStatus >(node_status_);
}
inline void DistributedNode::set_node_status(::protobuf::DistributedNode_NodeStatus value) {
  
  node_status_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.node_status)
}

// .google.protobuf.Timestamp last_heartbeat = 7;
inline bool DistributedNode::has_last_heartbeat() const {
  return this != internal_default_instance() && last_heartbeat_ != NULL;
}
inline const ::google::protobuf::Timestamp& DistributedNode::_internal_last_heartbeat() const {
  return *last_heartbeat_;
}
inline const ::google::protobuf::Timestamp& DistributedNode::last_heartbeat() const {
  const ::google::protobuf::Timestamp* p = last_heartbeat_;
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.last_heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DistributedNode::release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.last_heartbeat)
  
  ::google::protobuf::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DistributedNode::mutable_last_heartbeat() {
  
  if (last_heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.last_heartbeat)
  return last_heartbeat_;
}
inline void DistributedNode::set_allocated_last_heartbeat(::google::protobuf::Timestamp* last_heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_heartbeat_);
  }
  if (last_heartbeat) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_heartbeat)->GetArena();
    if (message_arena != submessage_arena) {
      last_heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  last_heartbeat_ = last_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.last_heartbeat)
}

// string operating_system = 8;
inline void DistributedNode::clear_operating_system() {
  operating_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::operating_system() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.operating_system)
  return operating_system_.GetNoArena();
}
inline void DistributedNode::set_operating_system(const ::std::string& value) {
  
  operating_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.operating_system)
}
#if LANG_CXX11
inline void DistributedNode::set_operating_system(::std::string&& value) {
  
  operating_system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.operating_system)
}
#endif
inline void DistributedNode::set_operating_system(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operating_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.operating_system)
}
inline void DistributedNode::set_operating_system(const char* value, size_t size) {
  
  operating_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.operating_system)
}
inline ::std::string* DistributedNode::mutable_operating_system() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.operating_system)
  return operating_system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_operating_system() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.operating_system)
  
  return operating_system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_operating_system(::std::string* operating_system) {
  if (operating_system != NULL) {
    
  } else {
    
  }
  operating_system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.operating_system)
}

// string os_version = 9;
inline void DistributedNode::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::os_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.os_version)
  return os_version_.GetNoArena();
}
inline void DistributedNode::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.os_version)
}
#if LANG_CXX11
inline void DistributedNode::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.os_version)
}
#endif
inline void DistributedNode::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.os_version)
}
inline void DistributedNode::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.os_version)
}
inline ::std::string* DistributedNode::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_os_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.os_version)
}

// string agent_version = 10;
inline void DistributedNode::clear_agent_version() {
  agent_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::agent_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.agent_version)
  return agent_version_.GetNoArena();
}
inline void DistributedNode::set_agent_version(const ::std::string& value) {
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.agent_version)
}
#if LANG_CXX11
inline void DistributedNode::set_agent_version(::std::string&& value) {
  
  agent_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.agent_version)
}
#endif
inline void DistributedNode::set_agent_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.agent_version)
}
inline void DistributedNode::set_agent_version(const char* value, size_t size) {
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.agent_version)
}
inline ::std::string* DistributedNode::mutable_agent_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.agent_version)
  return agent_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_agent_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.agent_version)
  
  return agent_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_agent_version(::std::string* agent_version) {
  if (agent_version != NULL) {
    
  } else {
    
  }
  agent_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.agent_version)
}

// int32 process_id = 11;
inline void DistributedNode::clear_process_id() {
  process_id_ = 0;
}
inline ::google::protobuf::int32 DistributedNode::process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.process_id)
  return process_id_;
}
inline void DistributedNode::set_process_id(::google::protobuf::int32 value) {
  
  process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.process_id)
}

// string container_id = 12;
inline void DistributedNode::clear_container_id() {
  container_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::container_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.container_id)
  return container_id_.GetNoArena();
}
inline void DistributedNode::set_container_id(const ::std::string& value) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.container_id)
}
#if LANG_CXX11
inline void DistributedNode::set_container_id(::std::string&& value) {
  
  container_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.container_id)
}
#endif
inline void DistributedNode::set_container_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.container_id)
}
inline void DistributedNode::set_container_id(const char* value, size_t size) {
  
  container_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.container_id)
}
inline ::std::string* DistributedNode::mutable_container_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.container_id)
  return container_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_container_id() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.container_id)
  
  return container_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_container_id(::std::string* container_id) {
  if (container_id != NULL) {
    
  } else {
    
  }
  container_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.container_id)
}

// string cluster_name = 13;
inline void DistributedNode::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::cluster_name() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void DistributedNode::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.cluster_name)
}
#if LANG_CXX11
inline void DistributedNode::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.cluster_name)
}
#endif
inline void DistributedNode::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.cluster_name)
}
inline void DistributedNode::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.cluster_name)
}
inline ::std::string* DistributedNode::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_cluster_name() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.cluster_name)
}

// float cpu_usage_percent = 15;
inline void DistributedNode::clear_cpu_usage_percent() {
  cpu_usage_percent_ = 0;
}
inline float DistributedNode::cpu_usage_percent() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.cpu_usage_percent)
  return cpu_usage_percent_;
}
inline void DistributedNode::set_cpu_usage_percent(float value) {
  
  cpu_usage_percent_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.cpu_usage_percent)
}

// float memory_usage_mb = 16;
inline void DistributedNode::clear_memory_usage_mb() {
  memory_usage_mb_ = 0;
}
inline float DistributedNode::memory_usage_mb() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.memory_usage_mb)
  return memory_usage_mb_;
}
inline void DistributedNode::set_memory_usage_mb(float value) {
  
  memory_usage_mb_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.memory_usage_mb)
}

// int32 active_connections = 17;
inline void DistributedNode::clear_active_connections() {
  active_connections_ = 0;
}
inline ::google::protobuf::int32 DistributedNode::active_connections() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.active_connections)
  return active_connections_;
}
inline void DistributedNode::set_active_connections(::google::protobuf::int32 value) {
  
  active_connections_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.active_connections)
}

// int32 queue_depth = 18;
inline void DistributedNode::clear_queue_depth() {
  queue_depth_ = 0;
}
inline ::google::protobuf::int32 DistributedNode::queue_depth() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.queue_depth)
  return queue_depth_;
}
inline void DistributedNode::set_queue_depth(::google::protobuf::int32 value) {
  
  queue_depth_ = value;
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.queue_depth)
}

// .google.protobuf.Duration uptime = 19;
inline bool DistributedNode::has_uptime() const {
  return this != internal_default_instance() && uptime_ != NULL;
}
inline const ::google::protobuf::Duration& DistributedNode::_internal_uptime() const {
  return *uptime_;
}
inline const ::google::protobuf::Duration& DistributedNode::uptime() const {
  const ::google::protobuf::Duration* p = uptime_;
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.uptime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* DistributedNode::release_uptime() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.uptime)
  
  ::google::protobuf::Duration* temp = uptime_;
  uptime_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* DistributedNode::mutable_uptime() {
  
  if (uptime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    uptime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.uptime)
  return uptime_;
}
inline void DistributedNode::set_allocated_uptime(::google::protobuf::Duration* uptime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uptime_);
  }
  if (uptime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(uptime)->GetArena();
    if (message_arena != submessage_arena) {
      uptime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uptime, submessage_arena);
    }
    
  } else {
    
  }
  uptime_ = uptime;
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.uptime)
}

// map<string, string> node_capabilities = 20;
inline int DistributedNode::node_capabilities_size() const {
  return node_capabilities_.size();
}
inline void DistributedNode::clear_node_capabilities() {
  node_capabilities_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DistributedNode::node_capabilities() const {
  // @@protoc_insertion_point(field_map:protobuf.DistributedNode.node_capabilities)
  return node_capabilities_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DistributedNode::mutable_node_capabilities() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.DistributedNode.node_capabilities)
  return node_capabilities_.MutableMap();
}

// repeated string supported_protocols = 21;
inline int DistributedNode::supported_protocols_size() const {
  return supported_protocols_.size();
}
inline void DistributedNode::clear_supported_protocols() {
  supported_protocols_.Clear();
}
inline const ::std::string& DistributedNode::supported_protocols(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.supported_protocols)
  return supported_protocols_.Get(index);
}
inline ::std::string* DistributedNode::mutable_supported_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.supported_protocols)
  return supported_protocols_.Mutable(index);
}
inline void DistributedNode::set_supported_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.supported_protocols)
  supported_protocols_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DistributedNode::set_supported_protocols(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.supported_protocols)
  supported_protocols_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DistributedNode::set_supported_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::set_supported_protocols(int index, const char* value, size_t size) {
  supported_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.supported_protocols)
}
inline ::std::string* DistributedNode::add_supported_protocols() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.DistributedNode.supported_protocols)
  return supported_protocols_.Add();
}
inline void DistributedNode::add_supported_protocols(const ::std::string& value) {
  supported_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.DistributedNode.supported_protocols)
}
#if LANG_CXX11
inline void DistributedNode::add_supported_protocols(::std::string&& value) {
  supported_protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.DistributedNode.supported_protocols)
}
#endif
inline void DistributedNode::add_supported_protocols(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.DistributedNode.supported_protocols)
}
inline void DistributedNode::add_supported_protocols(const char* value, size_t size) {
  supported_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.DistributedNode.supported_protocols)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DistributedNode::supported_protocols() const {
  // @@protoc_insertion_point(field_list:protobuf.DistributedNode.supported_protocols)
  return supported_protocols_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DistributedNode::mutable_supported_protocols() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.DistributedNode.supported_protocols)
  return &supported_protocols_;
}

// string configuration_version = 22;
inline void DistributedNode::clear_configuration_version() {
  configuration_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedNode::configuration_version() const {
  // @@protoc_insertion_point(field_get:protobuf.DistributedNode.configuration_version)
  return configuration_version_.GetNoArena();
}
inline void DistributedNode::set_configuration_version(const ::std::string& value) {
  
  configuration_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.DistributedNode.configuration_version)
}
#if LANG_CXX11
inline void DistributedNode::set_configuration_version(::std::string&& value) {
  
  configuration_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.DistributedNode.configuration_version)
}
#endif
inline void DistributedNode::set_configuration_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configuration_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.DistributedNode.configuration_version)
}
inline void DistributedNode::set_configuration_version(const char* value, size_t size) {
  
  configuration_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.DistributedNode.configuration_version)
}
inline ::std::string* DistributedNode::mutable_configuration_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.DistributedNode.configuration_version)
  return configuration_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedNode::release_configuration_version() {
  // @@protoc_insertion_point(field_release:protobuf.DistributedNode.configuration_version)
  
  return configuration_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedNode::set_allocated_configuration_version(::std::string* configuration_version) {
  if (configuration_version != NULL) {
    
  } else {
    
  }
  configuration_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuration_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DistributedNode.configuration_version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PipelineTracking

// string pipeline_id = 1;
inline void PipelineTracking::clear_pipeline_id() {
  pipeline_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PipelineTracking::pipeline_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_id)
  return pipeline_id_.GetNoArena();
}
inline void PipelineTracking::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.pipeline_id)
}
#if LANG_CXX11
inline void PipelineTracking::set_pipeline_id(::std::string&& value) {
  
  pipeline_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.PipelineTracking.pipeline_id)
}
#endif
inline void PipelineTracking::set_pipeline_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pipeline_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.pipeline_id)
}
inline void PipelineTracking::set_pipeline_id(const char* value, size_t size) {
  
  pipeline_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.pipeline_id)
}
inline ::std::string* PipelineTracking::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.pipeline_id)
  return pipeline_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PipelineTracking::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.pipeline_id)
  
  return pipeline_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PipelineTracking::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.pipeline_id)
}

// .google.protobuf.Timestamp pipeline_start = 2;
inline bool PipelineTracking::has_pipeline_start() const {
  return this != internal_default_instance() && pipeline_start_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_pipeline_start() const {
  return *pipeline_start_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::pipeline_start() const {
  const ::google::protobuf::Timestamp* p = pipeline_start_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_pipeline_start() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.pipeline_start)
  
  ::google::protobuf::Timestamp* temp = pipeline_start_;
  pipeline_start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_pipeline_start() {
  
  if (pipeline_start_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    pipeline_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.pipeline_start)
  return pipeline_start_;
}
inline void PipelineTracking::set_allocated_pipeline_start(::google::protobuf::Timestamp* pipeline_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pipeline_start_);
  }
  if (pipeline_start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(pipeline_start)->GetArena();
    if (message_arena != submessage_arena) {
      pipeline_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pipeline_start, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_start_ = pipeline_start;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.pipeline_start)
}

// int32 sniffer_process_id = 3;
inline void PipelineTracking::clear_sniffer_process_id() {
  sniffer_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::sniffer_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.sniffer_process_id)
  return sniffer_process_id_;
}
inline void PipelineTracking::set_sniffer_process_id(::google::protobuf::int32 value) {
  
  sniffer_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.sniffer_process_id)
}

// int32 processor_process_id = 4;
inline void PipelineTracking::clear_processor_process_id() {
  processor_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::processor_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processor_process_id)
  return processor_process_id_;
}
inline void PipelineTracking::set_processor_process_id(::google::protobuf::int32 value) {
  
  processor_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processor_process_id)
}

// int32 enricher_process_id = 5;
inline void PipelineTracking::clear_enricher_process_id() {
  enricher_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::enricher_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.enricher_process_id)
  return enricher_process_id_;
}
inline void PipelineTracking::set_enricher_process_id(::google::protobuf::int32 value) {
  
  enricher_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.enricher_process_id)
}

// int32 analyzer_process_id = 6;
inline void PipelineTracking::clear_analyzer_process_id() {
  analyzer_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::analyzer_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.analyzer_process_id)
  return analyzer_process_id_;
}
inline void PipelineTracking::set_analyzer_process_id(::google::protobuf::int32 value) {
  
  analyzer_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.analyzer_process_id)
}

// int32 detector_process_id = 7;
inline void PipelineTracking::clear_detector_process_id() {
  detector_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::detector_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.detector_process_id)
  return detector_process_id_;
}
inline void PipelineTracking::set_detector_process_id(::google::protobuf::int32 value) {
  
  detector_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.detector_process_id)
}

// int32 controller_process_id = 8;
inline void PipelineTracking::clear_controller_process_id() {
  controller_process_id_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::controller_process_id() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.controller_process_id)
  return controller_process_id_;
}
inline void PipelineTracking::set_controller_process_id(::google::protobuf::int32 value) {
  
  controller_process_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.controller_process_id)
}

// .google.protobuf.Timestamp packet_captured_at = 10;
inline bool PipelineTracking::has_packet_captured_at() const {
  return this != internal_default_instance() && packet_captured_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_packet_captured_at() const {
  return *packet_captured_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::packet_captured_at() const {
  const ::google::protobuf::Timestamp* p = packet_captured_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.packet_captured_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_packet_captured_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.packet_captured_at)
  
  ::google::protobuf::Timestamp* temp = packet_captured_at_;
  packet_captured_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_packet_captured_at() {
  
  if (packet_captured_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    packet_captured_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.packet_captured_at)
  return packet_captured_at_;
}
inline void PipelineTracking::set_allocated_packet_captured_at(::google::protobuf::Timestamp* packet_captured_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(packet_captured_at_);
  }
  if (packet_captured_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(packet_captured_at)->GetArena();
    if (message_arena != submessage_arena) {
      packet_captured_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet_captured_at, submessage_arena);
    }
    
  } else {
    
  }
  packet_captured_at_ = packet_captured_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.packet_captured_at)
}

// .google.protobuf.Timestamp features_extracted_at = 11;
inline bool PipelineTracking::has_features_extracted_at() const {
  return this != internal_default_instance() && features_extracted_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_features_extracted_at() const {
  return *features_extracted_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::features_extracted_at() const {
  const ::google::protobuf::Timestamp* p = features_extracted_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.features_extracted_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_features_extracted_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.features_extracted_at)
  
  ::google::protobuf::Timestamp* temp = features_extracted_at_;
  features_extracted_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_features_extracted_at() {
  
  if (features_extracted_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    features_extracted_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.features_extracted_at)
  return features_extracted_at_;
}
inline void PipelineTracking::set_allocated_features_extracted_at(::google::protobuf::Timestamp* features_extracted_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(features_extracted_at_);
  }
  if (features_extracted_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(features_extracted_at)->GetArena();
    if (message_arena != submessage_arena) {
      features_extracted_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, features_extracted_at, submessage_arena);
    }
    
  } else {
    
  }
  features_extracted_at_ = features_extracted_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.features_extracted_at)
}

// .google.protobuf.Timestamp geoip_enriched_at = 12;
inline bool PipelineTracking::has_geoip_enriched_at() const {
  return this != internal_default_instance() && geoip_enriched_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_geoip_enriched_at() const {
  return *geoip_enriched_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::geoip_enriched_at() const {
  const ::google::protobuf::Timestamp* p = geoip_enriched_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.geoip_enriched_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_geoip_enriched_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.geoip_enriched_at)
  
  ::google::protobuf::Timestamp* temp = geoip_enriched_at_;
  geoip_enriched_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_geoip_enriched_at() {
  
  if (geoip_enriched_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    geoip_enriched_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.geoip_enriched_at)
  return geoip_enriched_at_;
}
inline void PipelineTracking::set_allocated_geoip_enriched_at(::google::protobuf::Timestamp* geoip_enriched_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geoip_enriched_at_);
  }
  if (geoip_enriched_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(geoip_enriched_at)->GetArena();
    if (message_arena != submessage_arena) {
      geoip_enriched_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geoip_enriched_at, submessage_arena);
    }
    
  } else {
    
  }
  geoip_enriched_at_ = geoip_enriched_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.geoip_enriched_at)
}

// .google.protobuf.Timestamp ml_analyzed_at = 13;
inline bool PipelineTracking::has_ml_analyzed_at() const {
  return this != internal_default_instance() && ml_analyzed_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_ml_analyzed_at() const {
  return *ml_analyzed_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::ml_analyzed_at() const {
  const ::google::protobuf::Timestamp* p = ml_analyzed_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.ml_analyzed_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_ml_analyzed_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.ml_analyzed_at)
  
  ::google::protobuf::Timestamp* temp = ml_analyzed_at_;
  ml_analyzed_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_ml_analyzed_at() {
  
  if (ml_analyzed_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    ml_analyzed_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.ml_analyzed_at)
  return ml_analyzed_at_;
}
inline void PipelineTracking::set_allocated_ml_analyzed_at(::google::protobuf::Timestamp* ml_analyzed_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ml_analyzed_at_);
  }
  if (ml_analyzed_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ml_analyzed_at)->GetArena();
    if (message_arena != submessage_arena) {
      ml_analyzed_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ml_analyzed_at, submessage_arena);
    }
    
  } else {
    
  }
  ml_analyzed_at_ = ml_analyzed_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.ml_analyzed_at)
}

// .google.protobuf.Timestamp threat_detected_at = 14;
inline bool PipelineTracking::has_threat_detected_at() const {
  return this != internal_default_instance() && threat_detected_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_threat_detected_at() const {
  return *threat_detected_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::threat_detected_at() const {
  const ::google::protobuf::Timestamp* p = threat_detected_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.threat_detected_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_threat_detected_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.threat_detected_at)
  
  ::google::protobuf::Timestamp* temp = threat_detected_at_;
  threat_detected_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_threat_detected_at() {
  
  if (threat_detected_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    threat_detected_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.threat_detected_at)
  return threat_detected_at_;
}
inline void PipelineTracking::set_allocated_threat_detected_at(::google::protobuf::Timestamp* threat_detected_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(threat_detected_at_);
  }
  if (threat_detected_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(threat_detected_at)->GetArena();
    if (message_arena != submessage_arena) {
      threat_detected_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threat_detected_at, submessage_arena);
    }
    
  } else {
    
  }
  threat_detected_at_ = threat_detected_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.threat_detected_at)
}

// .google.protobuf.Timestamp action_taken_at = 15;
inline bool PipelineTracking::has_action_taken_at() const {
  return this != internal_default_instance() && action_taken_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::_internal_action_taken_at() const {
  return *action_taken_at_;
}
inline const ::google::protobuf::Timestamp& PipelineTracking::action_taken_at() const {
  const ::google::protobuf::Timestamp* p = action_taken_at_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.action_taken_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PipelineTracking::release_action_taken_at() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.action_taken_at)
  
  ::google::protobuf::Timestamp* temp = action_taken_at_;
  action_taken_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PipelineTracking::mutable_action_taken_at() {
  
  if (action_taken_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    action_taken_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.action_taken_at)
  return action_taken_at_;
}
inline void PipelineTracking::set_allocated_action_taken_at(::google::protobuf::Timestamp* action_taken_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(action_taken_at_);
  }
  if (action_taken_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(action_taken_at)->GetArena();
    if (message_arena != submessage_arena) {
      action_taken_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_taken_at, submessage_arena);
    }
    
  } else {
    
  }
  action_taken_at_ = action_taken_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.action_taken_at)
}

// .google.protobuf.Duration total_processing_latency = 20;
inline bool PipelineTracking::has_total_processing_latency() const {
  return this != internal_default_instance() && total_processing_latency_ != NULL;
}
inline const ::google::protobuf::Duration& PipelineTracking::_internal_total_processing_latency() const {
  return *total_processing_latency_;
}
inline const ::google::protobuf::Duration& PipelineTracking::total_processing_latency() const {
  const ::google::protobuf::Duration* p = total_processing_latency_;
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.total_processing_latency)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* PipelineTracking::release_total_processing_latency() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.total_processing_latency)
  
  ::google::protobuf::Duration* temp = total_processing_latency_;
  total_processing_latency_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* PipelineTracking::mutable_total_processing_latency() {
  
  if (total_processing_latency_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    total_processing_latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.total_processing_latency)
  return total_processing_latency_;
}
inline void PipelineTracking::set_allocated_total_processing_latency(::google::protobuf::Duration* total_processing_latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(total_processing_latency_);
  }
  if (total_processing_latency) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(total_processing_latency)->GetArena();
    if (message_arena != submessage_arena) {
      total_processing_latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, total_processing_latency, submessage_arena);
    }
    
  } else {
    
  }
  total_processing_latency_ = total_processing_latency;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.total_processing_latency)
}

// int32 pipeline_hops_count = 21;
inline void PipelineTracking::clear_pipeline_hops_count() {
  pipeline_hops_count_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::pipeline_hops_count() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.pipeline_hops_count)
  return pipeline_hops_count_;
}
inline void PipelineTracking::set_pipeline_hops_count(::google::protobuf::int32 value) {
  
  pipeline_hops_count_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.pipeline_hops_count)
}

// string processing_path = 22;
inline void PipelineTracking::clear_processing_path() {
  processing_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PipelineTracking::processing_path() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_path)
  return processing_path_.GetNoArena();
}
inline void PipelineTracking::set_processing_path(const ::std::string& value) {
  
  processing_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_path)
}
#if LANG_CXX11
inline void PipelineTracking::set_processing_path(::std::string&& value) {
  
  processing_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.PipelineTracking.processing_path)
}
#endif
inline void PipelineTracking::set_processing_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processing_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.processing_path)
}
inline void PipelineTracking::set_processing_path(const char* value, size_t size) {
  
  processing_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.processing_path)
}
inline ::std::string* PipelineTracking::mutable_processing_path() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_path)
  return processing_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PipelineTracking::release_processing_path() {
  // @@protoc_insertion_point(field_release:protobuf.PipelineTracking.processing_path)
  
  return processing_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PipelineTracking::set_allocated_processing_path(::std::string* processing_path) {
  if (processing_path != NULL) {
    
  } else {
    
  }
  processing_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_path);
  // @@protoc_insertion_point(field_set_allocated:protobuf.PipelineTracking.processing_path)
}

// int32 retry_attempts = 25;
inline void PipelineTracking::clear_retry_attempts() {
  retry_attempts_ = 0;
}
inline ::google::protobuf::int32 PipelineTracking::retry_attempts() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.retry_attempts)
  return retry_attempts_;
}
inline void PipelineTracking::set_retry_attempts(::google::protobuf::int32 value) {
  
  retry_attempts_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.retry_attempts)
}

// repeated string processing_errors = 26;
inline int PipelineTracking::processing_errors_size() const {
  return processing_errors_.size();
}
inline void PipelineTracking::clear_processing_errors() {
  processing_errors_.Clear();
}
inline const ::std::string& PipelineTracking::processing_errors(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_errors)
  return processing_errors_.Get(index);
}
inline ::std::string* PipelineTracking::mutable_processing_errors(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_errors)
  return processing_errors_.Mutable(index);
}
inline void PipelineTracking::set_processing_errors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_errors)
  processing_errors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PipelineTracking::set_processing_errors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_errors)
  processing_errors_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PipelineTracking::set_processing_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  processing_errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::set_processing_errors(int index, const char* value, size_t size) {
  processing_errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.processing_errors)
}
inline ::std::string* PipelineTracking::add_processing_errors() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.PipelineTracking.processing_errors)
  return processing_errors_.Add();
}
inline void PipelineTracking::add_processing_errors(const ::std::string& value) {
  processing_errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_errors)
}
#if LANG_CXX11
inline void PipelineTracking::add_processing_errors(::std::string&& value) {
  processing_errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_errors)
}
#endif
inline void PipelineTracking::add_processing_errors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  processing_errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.PipelineTracking.processing_errors)
}
inline void PipelineTracking::add_processing_errors(const char* value, size_t size) {
  processing_errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.PipelineTracking.processing_errors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PipelineTracking::processing_errors() const {
  // @@protoc_insertion_point(field_list:protobuf.PipelineTracking.processing_errors)
  return processing_errors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PipelineTracking::mutable_processing_errors() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.PipelineTracking.processing_errors)
  return &processing_errors_;
}

// bool requires_reprocessing = 27;
inline void PipelineTracking::clear_requires_reprocessing() {
  requires_reprocessing_ = false;
}
inline bool PipelineTracking::requires_reprocessing() const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.requires_reprocessing)
  return requires_reprocessing_;
}
inline void PipelineTracking::set_requires_reprocessing(bool value) {
  
  requires_reprocessing_ = value;
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.requires_reprocessing)
}

// map<string, string> component_metadata = 30;
inline int PipelineTracking::component_metadata_size() const {
  return component_metadata_.size();
}
inline void PipelineTracking::clear_component_metadata() {
  component_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PipelineTracking::component_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.PipelineTracking.component_metadata)
  return component_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PipelineTracking::mutable_component_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.PipelineTracking.component_metadata)
  return component_metadata_.MutableMap();
}

// repeated string processing_tags = 31;
inline int PipelineTracking::processing_tags_size() const {
  return processing_tags_.size();
}
inline void PipelineTracking::clear_processing_tags() {
  processing_tags_.Clear();
}
inline const ::std::string& PipelineTracking::processing_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.PipelineTracking.processing_tags)
  return processing_tags_.Get(index);
}
inline ::std::string* PipelineTracking::mutable_processing_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.PipelineTracking.processing_tags)
  return processing_tags_.Mutable(index);
}
inline void PipelineTracking::set_processing_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_tags)
  processing_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PipelineTracking::set_processing_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.PipelineTracking.processing_tags)
  processing_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PipelineTracking::set_processing_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  processing_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::set_processing_tags(int index, const char* value, size_t size) {
  processing_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.PipelineTracking.processing_tags)
}
inline ::std::string* PipelineTracking::add_processing_tags() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.PipelineTracking.processing_tags)
  return processing_tags_.Add();
}
inline void PipelineTracking::add_processing_tags(const ::std::string& value) {
  processing_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_tags)
}
#if LANG_CXX11
inline void PipelineTracking::add_processing_tags(::std::string&& value) {
  processing_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.PipelineTracking.processing_tags)
}
#endif
inline void PipelineTracking::add_processing_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  processing_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.PipelineTracking.processing_tags)
}
inline void PipelineTracking::add_processing_tags(const char* value, size_t size) {
  processing_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.PipelineTracking.processing_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PipelineTracking::processing_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.PipelineTracking.processing_tags)
  return processing_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PipelineTracking::mutable_processing_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.PipelineTracking.processing_tags)
  return &processing_tags_;
}

// -------------------------------------------------------------------

// RAGAnalysis

// string query_text = 1;
inline void RAGAnalysis::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RAGAnalysis::query_text() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.query_text)
  return query_text_.GetNoArena();
}
inline void RAGAnalysis::set_query_text(const ::std::string& value) {
  
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.query_text)
}
#if LANG_CXX11
inline void RAGAnalysis::set_query_text(::std::string&& value) {
  
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.RAGAnalysis.query_text)
}
#endif
inline void RAGAnalysis::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.query_text)
}
inline void RAGAnalysis::set_query_text(const char* value, size_t size) {
  
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.query_text)
}
inline ::std::string* RAGAnalysis::mutable_query_text() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RAGAnalysis::release_query_text() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.query_text)
  
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RAGAnalysis::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    
  } else {
    
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.query_text)
}

// repeated string retrieved_knowledge = 2;
inline int RAGAnalysis::retrieved_knowledge_size() const {
  return retrieved_knowledge_.size();
}
inline void RAGAnalysis::clear_retrieved_knowledge() {
  retrieved_knowledge_.Clear();
}
inline const ::std::string& RAGAnalysis::retrieved_knowledge(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.retrieved_knowledge)
  return retrieved_knowledge_.Get(index);
}
inline ::std::string* RAGAnalysis::mutable_retrieved_knowledge(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.retrieved_knowledge)
  return retrieved_knowledge_.Mutable(index);
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.retrieved_knowledge)
  retrieved_knowledge_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RAGAnalysis::set_retrieved_knowledge(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.retrieved_knowledge)
  retrieved_knowledge_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RAGAnalysis::set_retrieved_knowledge(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  retrieved_knowledge_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::set_retrieved_knowledge(int index, const char* value, size_t size) {
  retrieved_knowledge_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline ::std::string* RAGAnalysis::add_retrieved_knowledge() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.RAGAnalysis.retrieved_knowledge)
  return retrieved_knowledge_.Add();
}
inline void RAGAnalysis::add_retrieved_knowledge(const ::std::string& value) {
  retrieved_knowledge_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.retrieved_knowledge)
}
#if LANG_CXX11
inline void RAGAnalysis::add_retrieved_knowledge(::std::string&& value) {
  retrieved_knowledge_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.retrieved_knowledge)
}
#endif
inline void RAGAnalysis::add_retrieved_knowledge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  retrieved_knowledge_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline void RAGAnalysis::add_retrieved_knowledge(const char* value, size_t size) {
  retrieved_knowledge_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.RAGAnalysis.retrieved_knowledge)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RAGAnalysis::retrieved_knowledge() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.retrieved_knowledge)
  return retrieved_knowledge_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RAGAnalysis::mutable_retrieved_knowledge() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.retrieved_knowledge)
  return &retrieved_knowledge_;
}

// repeated double relevance_scores = 3;
inline int RAGAnalysis::relevance_scores_size() const {
  return relevance_scores_.size();
}
inline void RAGAnalysis::clear_relevance_scores() {
  relevance_scores_.Clear();
}
inline double RAGAnalysis::relevance_scores(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.relevance_scores)
  return relevance_scores_.Get(index);
}
inline void RAGAnalysis::set_relevance_scores(int index, double value) {
  relevance_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.relevance_scores)
}
inline void RAGAnalysis::add_relevance_scores(double value) {
  relevance_scores_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.relevance_scores)
}
inline const ::google::protobuf::RepeatedField< double >&
RAGAnalysis::relevance_scores() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.relevance_scores)
  return relevance_scores_;
}
inline ::google::protobuf::RepeatedField< double >*
RAGAnalysis::mutable_relevance_scores() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.relevance_scores)
  return &relevance_scores_;
}

// string ai_generated_analysis = 4;
inline void RAGAnalysis::clear_ai_generated_analysis() {
  ai_generated_analysis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RAGAnalysis::ai_generated_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.ai_generated_analysis)
  return ai_generated_analysis_.GetNoArena();
}
inline void RAGAnalysis::set_ai_generated_analysis(const ::std::string& value) {
  
  ai_generated_analysis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.ai_generated_analysis)
}
#if LANG_CXX11
inline void RAGAnalysis::set_ai_generated_analysis(::std::string&& value) {
  
  ai_generated_analysis_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.RAGAnalysis.ai_generated_analysis)
}
#endif
inline void RAGAnalysis::set_ai_generated_analysis(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ai_generated_analysis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.ai_generated_analysis)
}
inline void RAGAnalysis::set_ai_generated_analysis(const char* value, size_t size) {
  
  ai_generated_analysis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.ai_generated_analysis)
}
inline ::std::string* RAGAnalysis::mutable_ai_generated_analysis() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.ai_generated_analysis)
  return ai_generated_analysis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RAGAnalysis::release_ai_generated_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.ai_generated_analysis)
  
  return ai_generated_analysis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RAGAnalysis::set_allocated_ai_generated_analysis(::std::string* ai_generated_analysis) {
  if (ai_generated_analysis != NULL) {
    
  } else {
    
  }
  ai_generated_analysis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ai_generated_analysis);
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.ai_generated_analysis)
}

// double analysis_confidence = 5;
inline void RAGAnalysis::clear_analysis_confidence() {
  analysis_confidence_ = 0;
}
inline double RAGAnalysis::analysis_confidence() const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.analysis_confidence)
  return analysis_confidence_;
}
inline void RAGAnalysis::set_analysis_confidence(double value) {
  
  analysis_confidence_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.analysis_confidence)
}

// repeated string knowledge_sources = 6;
inline int RAGAnalysis::knowledge_sources_size() const {
  return knowledge_sources_.size();
}
inline void RAGAnalysis::clear_knowledge_sources() {
  knowledge_sources_.Clear();
}
inline const ::std::string& RAGAnalysis::knowledge_sources(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.knowledge_sources)
  return knowledge_sources_.Get(index);
}
inline ::std::string* RAGAnalysis::mutable_knowledge_sources(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.knowledge_sources)
  return knowledge_sources_.Mutable(index);
}
inline void RAGAnalysis::set_knowledge_sources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.knowledge_sources)
  knowledge_sources_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RAGAnalysis::set_knowledge_sources(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.RAGAnalysis.knowledge_sources)
  knowledge_sources_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RAGAnalysis::set_knowledge_sources(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  knowledge_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::set_knowledge_sources(int index, const char* value, size_t size) {
  knowledge_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.RAGAnalysis.knowledge_sources)
}
inline ::std::string* RAGAnalysis::add_knowledge_sources() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.RAGAnalysis.knowledge_sources)
  return knowledge_sources_.Add();
}
inline void RAGAnalysis::add_knowledge_sources(const ::std::string& value) {
  knowledge_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.knowledge_sources)
}
#if LANG_CXX11
inline void RAGAnalysis::add_knowledge_sources(::std::string&& value) {
  knowledge_sources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.RAGAnalysis.knowledge_sources)
}
#endif
inline void RAGAnalysis::add_knowledge_sources(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  knowledge_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.RAGAnalysis.knowledge_sources)
}
inline void RAGAnalysis::add_knowledge_sources(const char* value, size_t size) {
  knowledge_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.RAGAnalysis.knowledge_sources)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RAGAnalysis::knowledge_sources() const {
  // @@protoc_insertion_point(field_list:protobuf.RAGAnalysis.knowledge_sources)
  return knowledge_sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RAGAnalysis::mutable_knowledge_sources() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RAGAnalysis.knowledge_sources)
  return &knowledge_sources_;
}

// .google.protobuf.Timestamp analysis_timestamp = 7;
inline bool RAGAnalysis::has_analysis_timestamp() const {
  return this != internal_default_instance() && analysis_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& RAGAnalysis::_internal_analysis_timestamp() const {
  return *analysis_timestamp_;
}
inline const ::google::protobuf::Timestamp& RAGAnalysis::analysis_timestamp() const {
  const ::google::protobuf::Timestamp* p = analysis_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.RAGAnalysis.analysis_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* RAGAnalysis::release_analysis_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.RAGAnalysis.analysis_timestamp)
  
  ::google::protobuf::Timestamp* temp = analysis_timestamp_;
  analysis_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* RAGAnalysis::mutable_analysis_timestamp() {
  
  if (analysis_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    analysis_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.RAGAnalysis.analysis_timestamp)
  return analysis_timestamp_;
}
inline void RAGAnalysis::set_allocated_analysis_timestamp(::google::protobuf::Timestamp* analysis_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(analysis_timestamp_);
  }
  if (analysis_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(analysis_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      analysis_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, analysis_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  analysis_timestamp_ = analysis_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.RAGAnalysis.analysis_timestamp)
}

// -------------------------------------------------------------------

// HumanFeedback

// string feedback_id = 1;
inline void HumanFeedback::clear_feedback_id() {
  feedback_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumanFeedback::feedback_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_id)
  return feedback_id_.GetNoArena();
}
inline void HumanFeedback::set_feedback_id(const ::std::string& value) {
  
  feedback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.feedback_id)
}
#if LANG_CXX11
inline void HumanFeedback::set_feedback_id(::std::string&& value) {
  
  feedback_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HumanFeedback.feedback_id)
}
#endif
inline void HumanFeedback::set_feedback_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feedback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.feedback_id)
}
inline void HumanFeedback::set_feedback_id(const char* value, size_t size) {
  
  feedback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.feedback_id)
}
inline ::std::string* HumanFeedback::mutable_feedback_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.feedback_id)
  return feedback_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumanFeedback::release_feedback_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.feedback_id)
  
  return feedback_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumanFeedback::set_allocated_feedback_id(::std::string* feedback_id) {
  if (feedback_id != NULL) {
    
  } else {
    
  }
  feedback_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.feedback_id)
}

// string analyst_user_id = 2;
inline void HumanFeedback::clear_analyst_user_id() {
  analyst_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumanFeedback::analyst_user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_user_id)
  return analyst_user_id_.GetNoArena();
}
inline void HumanFeedback::set_analyst_user_id(const ::std::string& value) {
  
  analyst_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_user_id)
}
#if LANG_CXX11
inline void HumanFeedback::set_analyst_user_id(::std::string&& value) {
  
  analyst_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HumanFeedback.analyst_user_id)
}
#endif
inline void HumanFeedback::set_analyst_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  analyst_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.analyst_user_id)
}
inline void HumanFeedback::set_analyst_user_id(const char* value, size_t size) {
  
  analyst_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.analyst_user_id)
}
inline ::std::string* HumanFeedback::mutable_analyst_user_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_user_id)
  return analyst_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumanFeedback::release_analyst_user_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.analyst_user_id)
  
  return analyst_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumanFeedback::set_allocated_analyst_user_id(::std::string* analyst_user_id) {
  if (analyst_user_id != NULL) {
    
  } else {
    
  }
  analyst_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analyst_user_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.analyst_user_id)
}

// string event_reference_id = 3;
inline void HumanFeedback::clear_event_reference_id() {
  event_reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumanFeedback::event_reference_id() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.event_reference_id)
  return event_reference_id_.GetNoArena();
}
inline void HumanFeedback::set_event_reference_id(const ::std::string& value) {
  
  event_reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.event_reference_id)
}
#if LANG_CXX11
inline void HumanFeedback::set_event_reference_id(::std::string&& value) {
  
  event_reference_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HumanFeedback.event_reference_id)
}
#endif
inline void HumanFeedback::set_event_reference_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.event_reference_id)
}
inline void HumanFeedback::set_event_reference_id(const char* value, size_t size) {
  
  event_reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.event_reference_id)
}
inline ::std::string* HumanFeedback::mutable_event_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.event_reference_id)
  return event_reference_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumanFeedback::release_event_reference_id() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.event_reference_id)
  
  return event_reference_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumanFeedback::set_allocated_event_reference_id(::std::string* event_reference_id) {
  if (event_reference_id != NULL) {
    
  } else {
    
  }
  event_reference_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_reference_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.event_reference_id)
}

// .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
inline void HumanFeedback::clear_feedback_type() {
  feedback_type_ = 0;
}
inline ::protobuf::HumanFeedback_FeedbackType HumanFeedback::feedback_type() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_type)
  return static_cast< ::protobuf::HumanFeedback_FeedbackType >(feedback_type_);
}
inline void HumanFeedback::set_feedback_type(::protobuf::HumanFeedback_FeedbackType value) {
  
  feedback_type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.feedback_type)
}

// bool confirmed_true_positive = 5;
inline void HumanFeedback::clear_confirmed_true_positive() {
  confirmed_true_positive_ = false;
}
inline bool HumanFeedback::confirmed_true_positive() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.confirmed_true_positive)
  return confirmed_true_positive_;
}
inline void HumanFeedback::set_confirmed_true_positive(bool value) {
  
  confirmed_true_positive_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.confirmed_true_positive)
}

// bool confirmed_false_positive = 6;
inline void HumanFeedback::clear_confirmed_false_positive() {
  confirmed_false_positive_ = false;
}
inline bool HumanFeedback::confirmed_false_positive() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.confirmed_false_positive)
  return confirmed_false_positive_;
}
inline void HumanFeedback::set_confirmed_false_positive(bool value) {
  
  confirmed_false_positive_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.confirmed_false_positive)
}

// string analyst_explanation = 7;
inline void HumanFeedback::clear_analyst_explanation() {
  analyst_explanation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumanFeedback::analyst_explanation() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_explanation)
  return analyst_explanation_.GetNoArena();
}
inline void HumanFeedback::set_analyst_explanation(const ::std::string& value) {
  
  analyst_explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_explanation)
}
#if LANG_CXX11
inline void HumanFeedback::set_analyst_explanation(::std::string&& value) {
  
  analyst_explanation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HumanFeedback.analyst_explanation)
}
#endif
inline void HumanFeedback::set_analyst_explanation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  analyst_explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.analyst_explanation)
}
inline void HumanFeedback::set_analyst_explanation(const char* value, size_t size) {
  
  analyst_explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.analyst_explanation)
}
inline ::std::string* HumanFeedback::mutable_analyst_explanation() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_explanation)
  return analyst_explanation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumanFeedback::release_analyst_explanation() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.analyst_explanation)
  
  return analyst_explanation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumanFeedback::set_allocated_analyst_explanation(::std::string* analyst_explanation) {
  if (analyst_explanation != NULL) {
    
  } else {
    
  }
  analyst_explanation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analyst_explanation);
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.analyst_explanation)
}

// repeated string analyst_tags = 8;
inline int HumanFeedback::analyst_tags_size() const {
  return analyst_tags_.size();
}
inline void HumanFeedback::clear_analyst_tags() {
  analyst_tags_.Clear();
}
inline const ::std::string& HumanFeedback::analyst_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_tags)
  return analyst_tags_.Get(index);
}
inline ::std::string* HumanFeedback::mutable_analyst_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.analyst_tags)
  return analyst_tags_.Mutable(index);
}
inline void HumanFeedback::set_analyst_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_tags)
  analyst_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HumanFeedback::set_analyst_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_tags)
  analyst_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HumanFeedback::set_analyst_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  analyst_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::set_analyst_tags(int index, const char* value, size_t size) {
  analyst_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanFeedback.analyst_tags)
}
inline ::std::string* HumanFeedback::add_analyst_tags() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.HumanFeedback.analyst_tags)
  return analyst_tags_.Add();
}
inline void HumanFeedback::add_analyst_tags(const ::std::string& value) {
  analyst_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.HumanFeedback.analyst_tags)
}
#if LANG_CXX11
inline void HumanFeedback::add_analyst_tags(::std::string&& value) {
  analyst_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.HumanFeedback.analyst_tags)
}
#endif
inline void HumanFeedback::add_analyst_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  analyst_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.HumanFeedback.analyst_tags)
}
inline void HumanFeedback::add_analyst_tags(const char* value, size_t size) {
  analyst_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.HumanFeedback.analyst_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HumanFeedback::analyst_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.HumanFeedback.analyst_tags)
  return analyst_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HumanFeedback::mutable_analyst_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.HumanFeedback.analyst_tags)
  return &analyst_tags_;
}

// int32 analyst_confidence_rating = 9;
inline void HumanFeedback::clear_analyst_confidence_rating() {
  analyst_confidence_rating_ = 0;
}
inline ::google::protobuf::int32 HumanFeedback::analyst_confidence_rating() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.analyst_confidence_rating)
  return analyst_confidence_rating_;
}
inline void HumanFeedback::set_analyst_confidence_rating(::google::protobuf::int32 value) {
  
  analyst_confidence_rating_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanFeedback.analyst_confidence_rating)
}

// .google.protobuf.Timestamp feedback_timestamp = 10;
inline bool HumanFeedback::has_feedback_timestamp() const {
  return this != internal_default_instance() && feedback_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& HumanFeedback::_internal_feedback_timestamp() const {
  return *feedback_timestamp_;
}
inline const ::google::protobuf::Timestamp& HumanFeedback::feedback_timestamp() const {
  const ::google::protobuf::Timestamp* p = feedback_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.HumanFeedback.feedback_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* HumanFeedback::release_feedback_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanFeedback.feedback_timestamp)
  
  ::google::protobuf::Timestamp* temp = feedback_timestamp_;
  feedback_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* HumanFeedback::mutable_feedback_timestamp() {
  
  if (feedback_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    feedback_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.HumanFeedback.feedback_timestamp)
  return feedback_timestamp_;
}
inline void HumanFeedback::set_allocated_feedback_timestamp(::google::protobuf::Timestamp* feedback_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(feedback_timestamp_);
  }
  if (feedback_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(feedback_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      feedback_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feedback_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  feedback_timestamp_ = feedback_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanFeedback.feedback_timestamp)
}

// -------------------------------------------------------------------

// HumanInTheLoopReview

// bool requires_human_analysis = 1;
inline void HumanInTheLoopReview::clear_requires_human_analysis() {
  requires_human_analysis_ = false;
}
inline bool HumanInTheLoopReview::requires_human_analysis() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.requires_human_analysis)
  return requires_human_analysis_;
}
inline void HumanInTheLoopReview::set_requires_human_analysis(bool value) {
  
  requires_human_analysis_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.requires_human_analysis)
}

// .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
inline void HumanInTheLoopReview::clear_review_priority() {
  review_priority_ = 0;
}
inline ::protobuf::HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::review_priority() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_priority)
  return static_cast< ::protobuf::HumanInTheLoopReview_ReviewPriority >(review_priority_);
}
inline void HumanInTheLoopReview::set_review_priority(::protobuf::HumanInTheLoopReview_ReviewPriority value) {
  
  review_priority_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_priority)
}

// repeated string review_reasons = 3;
inline int HumanInTheLoopReview::review_reasons_size() const {
  return review_reasons_.size();
}
inline void HumanInTheLoopReview::clear_review_reasons() {
  review_reasons_.Clear();
}
inline const ::std::string& HumanInTheLoopReview::review_reasons(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_reasons)
  return review_reasons_.Get(index);
}
inline ::std::string* HumanInTheLoopReview::mutable_review_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.review_reasons)
  return review_reasons_.Mutable(index);
}
inline void HumanInTheLoopReview::set_review_reasons(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_reasons)
  review_reasons_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HumanInTheLoopReview::set_review_reasons(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_reasons)
  review_reasons_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HumanInTheLoopReview::set_review_reasons(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  review_reasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::set_review_reasons(int index, const char* value, size_t size) {
  review_reasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.HumanInTheLoopReview.review_reasons)
}
inline ::std::string* HumanInTheLoopReview::add_review_reasons() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.HumanInTheLoopReview.review_reasons)
  return review_reasons_.Add();
}
inline void HumanInTheLoopReview::add_review_reasons(const ::std::string& value) {
  review_reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.HumanInTheLoopReview.review_reasons)
}
#if LANG_CXX11
inline void HumanInTheLoopReview::add_review_reasons(::std::string&& value) {
  review_reasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.HumanInTheLoopReview.review_reasons)
}
#endif
inline void HumanInTheLoopReview::add_review_reasons(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  review_reasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.HumanInTheLoopReview.review_reasons)
}
inline void HumanInTheLoopReview::add_review_reasons(const char* value, size_t size) {
  review_reasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.HumanInTheLoopReview.review_reasons)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HumanInTheLoopReview::review_reasons() const {
  // @@protoc_insertion_point(field_list:protobuf.HumanInTheLoopReview.review_reasons)
  return review_reasons_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HumanInTheLoopReview::mutable_review_reasons() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.HumanInTheLoopReview.review_reasons)
  return &review_reasons_;
}

// .protobuf.HumanFeedback analyst_feedback = 4;
inline bool HumanInTheLoopReview::has_analyst_feedback() const {
  return this != internal_default_instance() && analyst_feedback_ != NULL;
}
inline void HumanInTheLoopReview::clear_analyst_feedback() {
  if (GetArenaNoVirtual() == NULL && analyst_feedback_ != NULL) {
    delete analyst_feedback_;
  }
  analyst_feedback_ = NULL;
}
inline const ::protobuf::HumanFeedback& HumanInTheLoopReview::_internal_analyst_feedback() const {
  return *analyst_feedback_;
}
inline const ::protobuf::HumanFeedback& HumanInTheLoopReview::analyst_feedback() const {
  const ::protobuf::HumanFeedback* p = analyst_feedback_;
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.analyst_feedback)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::HumanFeedback*>(
      &::protobuf::_HumanFeedback_default_instance_);
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::release_analyst_feedback() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.analyst_feedback)
  
  ::protobuf::HumanFeedback* temp = analyst_feedback_;
  analyst_feedback_ = NULL;
  return temp;
}
inline ::protobuf::HumanFeedback* HumanInTheLoopReview::mutable_analyst_feedback() {
  
  if (analyst_feedback_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::HumanFeedback>(GetArenaNoVirtual());
    analyst_feedback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.analyst_feedback)
  return analyst_feedback_;
}
inline void HumanInTheLoopReview::set_allocated_analyst_feedback(::protobuf::HumanFeedback* analyst_feedback) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete analyst_feedback_;
  }
  if (analyst_feedback) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      analyst_feedback = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, analyst_feedback, submessage_arena);
    }
    
  } else {
    
  }
  analyst_feedback_ = analyst_feedback;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.analyst_feedback)
}

// .google.protobuf.Timestamp escalated_timestamp = 5;
inline bool HumanInTheLoopReview::has_escalated_timestamp() const {
  return this != internal_default_instance() && escalated_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& HumanInTheLoopReview::_internal_escalated_timestamp() const {
  return *escalated_timestamp_;
}
inline const ::google::protobuf::Timestamp& HumanInTheLoopReview::escalated_timestamp() const {
  const ::google::protobuf::Timestamp* p = escalated_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.escalated_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* HumanInTheLoopReview::release_escalated_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.escalated_timestamp)
  
  ::google::protobuf::Timestamp* temp = escalated_timestamp_;
  escalated_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* HumanInTheLoopReview::mutable_escalated_timestamp() {
  
  if (escalated_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    escalated_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.escalated_timestamp)
  return escalated_timestamp_;
}
inline void HumanInTheLoopReview::set_allocated_escalated_timestamp(::google::protobuf::Timestamp* escalated_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(escalated_timestamp_);
  }
  if (escalated_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(escalated_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      escalated_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, escalated_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  escalated_timestamp_ = escalated_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.escalated_timestamp)
}

// .google.protobuf.Timestamp reviewed_timestamp = 6;
inline bool HumanInTheLoopReview::has_reviewed_timestamp() const {
  return this != internal_default_instance() && reviewed_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& HumanInTheLoopReview::_internal_reviewed_timestamp() const {
  return *reviewed_timestamp_;
}
inline const ::google::protobuf::Timestamp& HumanInTheLoopReview::reviewed_timestamp() const {
  const ::google::protobuf::Timestamp* p = reviewed_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* HumanInTheLoopReview::release_reviewed_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  
  ::google::protobuf::Timestamp* temp = reviewed_timestamp_;
  reviewed_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* HumanInTheLoopReview::mutable_reviewed_timestamp() {
  
  if (reviewed_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    reviewed_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.HumanInTheLoopReview.reviewed_timestamp)
  return reviewed_timestamp_;
}
inline void HumanInTheLoopReview::set_allocated_reviewed_timestamp(::google::protobuf::Timestamp* reviewed_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reviewed_timestamp_);
  }
  if (reviewed_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reviewed_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      reviewed_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reviewed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  reviewed_timestamp_ = reviewed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HumanInTheLoopReview.reviewed_timestamp)
}

// bool review_completed = 7;
inline void HumanInTheLoopReview::clear_review_completed() {
  review_completed_ = false;
}
inline bool HumanInTheLoopReview::review_completed() const {
  // @@protoc_insertion_point(field_get:protobuf.HumanInTheLoopReview.review_completed)
  return review_completed_;
}
inline void HumanInTheLoopReview::set_review_completed(bool value) {
  
  review_completed_ = value;
  // @@protoc_insertion_point(field_set:protobuf.HumanInTheLoopReview.review_completed)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkSecurityEvent

// string event_id = 1;
inline void NetworkSecurityEvent::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::event_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_id)
  return event_id_.GetNoArena();
}
inline void NetworkSecurityEvent::set_event_id(const ::std::string& value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_id)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_event_id(::std::string&& value) {
  
  event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.event_id)
}
#endif
inline void NetworkSecurityEvent::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.event_id)
}
inline void NetworkSecurityEvent::set_event_id(const char* value, size_t size) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.event_id)
}
inline ::std::string* NetworkSecurityEvent::mutable_event_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_id)
  
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    
  } else {
    
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_id)
}

// .google.protobuf.Timestamp event_timestamp = 2;
inline bool NetworkSecurityEvent::has_event_timestamp() const {
  return this != internal_default_instance() && event_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& NetworkSecurityEvent::_internal_event_timestamp() const {
  return *event_timestamp_;
}
inline const ::google::protobuf::Timestamp& NetworkSecurityEvent::event_timestamp() const {
  const ::google::protobuf::Timestamp* p = event_timestamp_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NetworkSecurityEvent::release_event_timestamp() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_timestamp)
  
  ::google::protobuf::Timestamp* temp = event_timestamp_;
  event_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* NetworkSecurityEvent::mutable_event_timestamp() {
  
  if (event_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    event_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_timestamp)
  return event_timestamp_;
}
inline void NetworkSecurityEvent::set_allocated_event_timestamp(::google::protobuf::Timestamp* event_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_timestamp_);
  }
  if (event_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(event_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      event_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  event_timestamp_ = event_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_timestamp)
}

// string originating_node_id = 3;
inline void NetworkSecurityEvent::clear_originating_node_id() {
  originating_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::originating_node_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.originating_node_id)
  return originating_node_id_.GetNoArena();
}
inline void NetworkSecurityEvent::set_originating_node_id(const ::std::string& value) {
  
  originating_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.originating_node_id)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_originating_node_id(::std::string&& value) {
  
  originating_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.originating_node_id)
}
#endif
inline void NetworkSecurityEvent::set_originating_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  originating_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.originating_node_id)
}
inline void NetworkSecurityEvent::set_originating_node_id(const char* value, size_t size) {
  
  originating_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.originating_node_id)
}
inline ::std::string* NetworkSecurityEvent::mutable_originating_node_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.originating_node_id)
  return originating_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_originating_node_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.originating_node_id)
  
  return originating_node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_originating_node_id(::std::string* originating_node_id) {
  if (originating_node_id != NULL) {
    
  } else {
    
  }
  originating_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originating_node_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.originating_node_id)
}

// .protobuf.NetworkFeatures network_features = 4;
inline bool NetworkSecurityEvent::has_network_features() const {
  return this != internal_default_instance() && network_features_ != NULL;
}
inline void NetworkSecurityEvent::clear_network_features() {
  if (GetArenaNoVirtual() == NULL && network_features_ != NULL) {
    delete network_features_;
  }
  network_features_ = NULL;
}
inline const ::protobuf::NetworkFeatures& NetworkSecurityEvent::_internal_network_features() const {
  return *network_features_;
}
inline const ::protobuf::NetworkFeatures& NetworkSecurityEvent::network_features() const {
  const ::protobuf::NetworkFeatures* p = network_features_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.network_features)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::NetworkFeatures*>(
      &::protobuf::_NetworkFeatures_default_instance_);
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::release_network_features() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.network_features)
  
  ::protobuf::NetworkFeatures* temp = network_features_;
  network_features_ = NULL;
  return temp;
}
inline ::protobuf::NetworkFeatures* NetworkSecurityEvent::mutable_network_features() {
  
  if (network_features_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::NetworkFeatures>(GetArenaNoVirtual());
    network_features_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.network_features)
  return network_features_;
}
inline void NetworkSecurityEvent::set_allocated_network_features(::protobuf::NetworkFeatures* network_features) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_features_;
  }
  if (network_features) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_features = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_features, submessage_arena);
    }
    
  } else {
    
  }
  network_features_ = network_features;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.network_features)
}

// .protobuf.GeoEnrichment geo_enrichment = 5;
inline bool NetworkSecurityEvent::has_geo_enrichment() const {
  return this != internal_default_instance() && geo_enrichment_ != NULL;
}
inline void NetworkSecurityEvent::clear_geo_enrichment() {
  if (GetArenaNoVirtual() == NULL && geo_enrichment_ != NULL) {
    delete geo_enrichment_;
  }
  geo_enrichment_ = NULL;
}
inline const ::protobuf::GeoEnrichment& NetworkSecurityEvent::_internal_geo_enrichment() const {
  return *geo_enrichment_;
}
inline const ::protobuf::GeoEnrichment& NetworkSecurityEvent::geo_enrichment() const {
  const ::protobuf::GeoEnrichment* p = geo_enrichment_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.geo_enrichment)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::GeoEnrichment*>(
      &::protobuf::_GeoEnrichment_default_instance_);
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::release_geo_enrichment() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.geo_enrichment)
  
  ::protobuf::GeoEnrichment* temp = geo_enrichment_;
  geo_enrichment_ = NULL;
  return temp;
}
inline ::protobuf::GeoEnrichment* NetworkSecurityEvent::mutable_geo_enrichment() {
  
  if (geo_enrichment_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::GeoEnrichment>(GetArenaNoVirtual());
    geo_enrichment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.geo_enrichment)
  return geo_enrichment_;
}
inline void NetworkSecurityEvent::set_allocated_geo_enrichment(::protobuf::GeoEnrichment* geo_enrichment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete geo_enrichment_;
  }
  if (geo_enrichment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geo_enrichment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geo_enrichment, submessage_arena);
    }
    
  } else {
    
  }
  geo_enrichment_ = geo_enrichment;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.geo_enrichment)
}

// .protobuf.TimeWindow time_window = 6;
inline bool NetworkSecurityEvent::has_time_window() const {
  return this != internal_default_instance() && time_window_ != NULL;
}
inline void NetworkSecurityEvent::clear_time_window() {
  if (GetArenaNoVirtual() == NULL && time_window_ != NULL) {
    delete time_window_;
  }
  time_window_ = NULL;
}
inline const ::protobuf::TimeWindow& NetworkSecurityEvent::_internal_time_window() const {
  return *time_window_;
}
inline const ::protobuf::TimeWindow& NetworkSecurityEvent::time_window() const {
  const ::protobuf::TimeWindow* p = time_window_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.time_window)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::TimeWindow*>(
      &::protobuf::_TimeWindow_default_instance_);
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::release_time_window() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.time_window)
  
  ::protobuf::TimeWindow* temp = time_window_;
  time_window_ = NULL;
  return temp;
}
inline ::protobuf::TimeWindow* NetworkSecurityEvent::mutable_time_window() {
  
  if (time_window_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::TimeWindow>(GetArenaNoVirtual());
    time_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.time_window)
  return time_window_;
}
inline void NetworkSecurityEvent::set_allocated_time_window(::protobuf::TimeWindow* time_window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_window_;
  }
  if (time_window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.time_window)
}

// .protobuf.TricapaMLAnalysis ml_analysis = 7;
inline bool NetworkSecurityEvent::has_ml_analysis() const {
  return this != internal_default_instance() && ml_analysis_ != NULL;
}
inline void NetworkSecurityEvent::clear_ml_analysis() {
  if (GetArenaNoVirtual() == NULL && ml_analysis_ != NULL) {
    delete ml_analysis_;
  }
  ml_analysis_ = NULL;
}
inline const ::protobuf::TricapaMLAnalysis& NetworkSecurityEvent::_internal_ml_analysis() const {
  return *ml_analysis_;
}
inline const ::protobuf::TricapaMLAnalysis& NetworkSecurityEvent::ml_analysis() const {
  const ::protobuf::TricapaMLAnalysis* p = ml_analysis_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.ml_analysis)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::TricapaMLAnalysis*>(
      &::protobuf::_TricapaMLAnalysis_default_instance_);
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::release_ml_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.ml_analysis)
  
  ::protobuf::TricapaMLAnalysis* temp = ml_analysis_;
  ml_analysis_ = NULL;
  return temp;
}
inline ::protobuf::TricapaMLAnalysis* NetworkSecurityEvent::mutable_ml_analysis() {
  
  if (ml_analysis_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::TricapaMLAnalysis>(GetArenaNoVirtual());
    ml_analysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.ml_analysis)
  return ml_analysis_;
}
inline void NetworkSecurityEvent::set_allocated_ml_analysis(::protobuf::TricapaMLAnalysis* ml_analysis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ml_analysis_;
  }
  if (ml_analysis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ml_analysis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ml_analysis, submessage_arena);
    }
    
  } else {
    
  }
  ml_analysis_ = ml_analysis;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.ml_analysis)
}

// repeated .protobuf.ModelPrediction additional_model_predictions = 8;
inline int NetworkSecurityEvent::additional_model_predictions_size() const {
  return additional_model_predictions_.size();
}
inline void NetworkSecurityEvent::clear_additional_model_predictions() {
  additional_model_predictions_.Clear();
}
inline ::protobuf::ModelPrediction* NetworkSecurityEvent::mutable_additional_model_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return additional_model_predictions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >*
NetworkSecurityEvent::mutable_additional_model_predictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return &additional_model_predictions_;
}
inline const ::protobuf::ModelPrediction& NetworkSecurityEvent::additional_model_predictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return additional_model_predictions_.Get(index);
}
inline ::protobuf::ModelPrediction* NetworkSecurityEvent::add_additional_model_predictions() {
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return additional_model_predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::ModelPrediction >&
NetworkSecurityEvent::additional_model_predictions() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.additional_model_predictions)
  return additional_model_predictions_;
}

// .protobuf.DistributedNode capturing_node = 9;
inline bool NetworkSecurityEvent::has_capturing_node() const {
  return this != internal_default_instance() && capturing_node_ != NULL;
}
inline void NetworkSecurityEvent::clear_capturing_node() {
  if (GetArenaNoVirtual() == NULL && capturing_node_ != NULL) {
    delete capturing_node_;
  }
  capturing_node_ = NULL;
}
inline const ::protobuf::DistributedNode& NetworkSecurityEvent::_internal_capturing_node() const {
  return *capturing_node_;
}
inline const ::protobuf::DistributedNode& NetworkSecurityEvent::capturing_node() const {
  const ::protobuf::DistributedNode* p = capturing_node_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.capturing_node)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::DistributedNode*>(
      &::protobuf::_DistributedNode_default_instance_);
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::release_capturing_node() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.capturing_node)
  
  ::protobuf::DistributedNode* temp = capturing_node_;
  capturing_node_ = NULL;
  return temp;
}
inline ::protobuf::DistributedNode* NetworkSecurityEvent::mutable_capturing_node() {
  
  if (capturing_node_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::DistributedNode>(GetArenaNoVirtual());
    capturing_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.capturing_node)
  return capturing_node_;
}
inline void NetworkSecurityEvent::set_allocated_capturing_node(::protobuf::DistributedNode* capturing_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capturing_node_;
  }
  if (capturing_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capturing_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capturing_node, submessage_arena);
    }
    
  } else {
    
  }
  capturing_node_ = capturing_node;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.capturing_node)
}

// .protobuf.PipelineTracking pipeline_tracking = 10;
inline bool NetworkSecurityEvent::has_pipeline_tracking() const {
  return this != internal_default_instance() && pipeline_tracking_ != NULL;
}
inline void NetworkSecurityEvent::clear_pipeline_tracking() {
  if (GetArenaNoVirtual() == NULL && pipeline_tracking_ != NULL) {
    delete pipeline_tracking_;
  }
  pipeline_tracking_ = NULL;
}
inline const ::protobuf::PipelineTracking& NetworkSecurityEvent::_internal_pipeline_tracking() const {
  return *pipeline_tracking_;
}
inline const ::protobuf::PipelineTracking& NetworkSecurityEvent::pipeline_tracking() const {
  const ::protobuf::PipelineTracking* p = pipeline_tracking_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.pipeline_tracking)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::PipelineTracking*>(
      &::protobuf::_PipelineTracking_default_instance_);
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::release_pipeline_tracking() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.pipeline_tracking)
  
  ::protobuf::PipelineTracking* temp = pipeline_tracking_;
  pipeline_tracking_ = NULL;
  return temp;
}
inline ::protobuf::PipelineTracking* NetworkSecurityEvent::mutable_pipeline_tracking() {
  
  if (pipeline_tracking_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::PipelineTracking>(GetArenaNoVirtual());
    pipeline_tracking_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.pipeline_tracking)
  return pipeline_tracking_;
}
inline void NetworkSecurityEvent::set_allocated_pipeline_tracking(::protobuf::PipelineTracking* pipeline_tracking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pipeline_tracking_;
  }
  if (pipeline_tracking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pipeline_tracking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pipeline_tracking, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_tracking_ = pipeline_tracking;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.pipeline_tracking)
}

// .protobuf.RAGAnalysis rag_analysis = 11;
inline bool NetworkSecurityEvent::has_rag_analysis() const {
  return this != internal_default_instance() && rag_analysis_ != NULL;
}
inline void NetworkSecurityEvent::clear_rag_analysis() {
  if (GetArenaNoVirtual() == NULL && rag_analysis_ != NULL) {
    delete rag_analysis_;
  }
  rag_analysis_ = NULL;
}
inline const ::protobuf::RAGAnalysis& NetworkSecurityEvent::_internal_rag_analysis() const {
  return *rag_analysis_;
}
inline const ::protobuf::RAGAnalysis& NetworkSecurityEvent::rag_analysis() const {
  const ::protobuf::RAGAnalysis* p = rag_analysis_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.rag_analysis)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::RAGAnalysis*>(
      &::protobuf::_RAGAnalysis_default_instance_);
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::release_rag_analysis() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.rag_analysis)
  
  ::protobuf::RAGAnalysis* temp = rag_analysis_;
  rag_analysis_ = NULL;
  return temp;
}
inline ::protobuf::RAGAnalysis* NetworkSecurityEvent::mutable_rag_analysis() {
  
  if (rag_analysis_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::RAGAnalysis>(GetArenaNoVirtual());
    rag_analysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.rag_analysis)
  return rag_analysis_;
}
inline void NetworkSecurityEvent::set_allocated_rag_analysis(::protobuf::RAGAnalysis* rag_analysis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rag_analysis_;
  }
  if (rag_analysis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rag_analysis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rag_analysis, submessage_arena);
    }
    
  } else {
    
  }
  rag_analysis_ = rag_analysis;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.rag_analysis)
}

// .protobuf.HumanInTheLoopReview human_review = 12;
inline bool NetworkSecurityEvent::has_human_review() const {
  return this != internal_default_instance() && human_review_ != NULL;
}
inline void NetworkSecurityEvent::clear_human_review() {
  if (GetArenaNoVirtual() == NULL && human_review_ != NULL) {
    delete human_review_;
  }
  human_review_ = NULL;
}
inline const ::protobuf::HumanInTheLoopReview& NetworkSecurityEvent::_internal_human_review() const {
  return *human_review_;
}
inline const ::protobuf::HumanInTheLoopReview& NetworkSecurityEvent::human_review() const {
  const ::protobuf::HumanInTheLoopReview* p = human_review_;
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.human_review)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuf::HumanInTheLoopReview*>(
      &::protobuf::_HumanInTheLoopReview_default_instance_);
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::release_human_review() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.human_review)
  
  ::protobuf::HumanInTheLoopReview* temp = human_review_;
  human_review_ = NULL;
  return temp;
}
inline ::protobuf::HumanInTheLoopReview* NetworkSecurityEvent::mutable_human_review() {
  
  if (human_review_ == NULL) {
    auto* p = CreateMaybeMessage<::protobuf::HumanInTheLoopReview>(GetArenaNoVirtual());
    human_review_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.human_review)
  return human_review_;
}
inline void NetworkSecurityEvent::set_allocated_human_review(::protobuf::HumanInTheLoopReview* human_review) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete human_review_;
  }
  if (human_review) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      human_review = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, human_review, submessage_arena);
    }
    
  } else {
    
  }
  human_review_ = human_review;
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.human_review)
}

// double overall_threat_score = 15;
inline void NetworkSecurityEvent::clear_overall_threat_score() {
  overall_threat_score_ = 0;
}
inline double NetworkSecurityEvent::overall_threat_score() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.overall_threat_score)
  return overall_threat_score_;
}
inline void NetworkSecurityEvent::set_overall_threat_score(double value) {
  
  overall_threat_score_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.overall_threat_score)
}

// string final_classification = 16;
inline void NetworkSecurityEvent::clear_final_classification() {
  final_classification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::final_classification() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.final_classification)
  return final_classification_.GetNoArena();
}
inline void NetworkSecurityEvent::set_final_classification(const ::std::string& value) {
  
  final_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.final_classification)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_final_classification(::std::string&& value) {
  
  final_classification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.final_classification)
}
#endif
inline void NetworkSecurityEvent::set_final_classification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  final_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.final_classification)
}
inline void NetworkSecurityEvent::set_final_classification(const char* value, size_t size) {
  
  final_classification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.final_classification)
}
inline ::std::string* NetworkSecurityEvent::mutable_final_classification() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.final_classification)
  return final_classification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_final_classification() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.final_classification)
  
  return final_classification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_final_classification(::std::string* final_classification) {
  if (final_classification != NULL) {
    
  } else {
    
  }
  final_classification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_classification);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.final_classification)
}

// string threat_category = 17;
inline void NetworkSecurityEvent::clear_threat_category() {
  threat_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::threat_category() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.threat_category)
  return threat_category_.GetNoArena();
}
inline void NetworkSecurityEvent::set_threat_category(const ::std::string& value) {
  
  threat_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.threat_category)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_threat_category(::std::string&& value) {
  
  threat_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.threat_category)
}
#endif
inline void NetworkSecurityEvent::set_threat_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  threat_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.threat_category)
}
inline void NetworkSecurityEvent::set_threat_category(const char* value, size_t size) {
  
  threat_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.threat_category)
}
inline ::std::string* NetworkSecurityEvent::mutable_threat_category() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.threat_category)
  return threat_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_threat_category() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.threat_category)
  
  return threat_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_threat_category(::std::string* threat_category) {
  if (threat_category != NULL) {
    
  } else {
    
  }
  threat_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), threat_category);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.threat_category)
}

// string correlation_id = 20;
inline void NetworkSecurityEvent::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::correlation_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.correlation_id)
  return correlation_id_.GetNoArena();
}
inline void NetworkSecurityEvent::set_correlation_id(const ::std::string& value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.correlation_id)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_correlation_id(::std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.correlation_id)
}
#endif
inline void NetworkSecurityEvent::set_correlation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.correlation_id)
}
inline void NetworkSecurityEvent::set_correlation_id(const char* value, size_t size) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.correlation_id)
}
inline ::std::string* NetworkSecurityEvent::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.correlation_id)
  return correlation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_correlation_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_correlation_id(::std::string* correlation_id) {
  if (correlation_id != NULL) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.correlation_id)
}

// repeated string related_event_ids = 21;
inline int NetworkSecurityEvent::related_event_ids_size() const {
  return related_event_ids_.size();
}
inline void NetworkSecurityEvent::clear_related_event_ids() {
  related_event_ids_.Clear();
}
inline const ::std::string& NetworkSecurityEvent::related_event_ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.related_event_ids)
  return related_event_ids_.Get(index);
}
inline ::std::string* NetworkSecurityEvent::mutable_related_event_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.related_event_ids)
  return related_event_ids_.Mutable(index);
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.related_event_ids)
  related_event_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_related_event_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.related_event_ids)
  related_event_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetworkSecurityEvent::set_related_event_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  related_event_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::set_related_event_ids(int index, const char* value, size_t size) {
  related_event_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline ::std::string* NetworkSecurityEvent::add_related_event_ids() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.NetworkSecurityEvent.related_event_ids)
  return related_event_ids_.Add();
}
inline void NetworkSecurityEvent::add_related_event_ids(const ::std::string& value) {
  related_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.related_event_ids)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::add_related_event_ids(::std::string&& value) {
  related_event_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.related_event_ids)
}
#endif
inline void NetworkSecurityEvent::add_related_event_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  related_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline void NetworkSecurityEvent::add_related_event_ids(const char* value, size_t size) {
  related_event_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.NetworkSecurityEvent.related_event_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkSecurityEvent::related_event_ids() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.related_event_ids)
  return related_event_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkSecurityEvent::mutable_related_event_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.related_event_ids)
  return &related_event_ids_;
}

// string event_chain_id = 22;
inline void NetworkSecurityEvent::clear_event_chain_id() {
  event_chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::event_chain_id() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_chain_id)
  return event_chain_id_.GetNoArena();
}
inline void NetworkSecurityEvent::set_event_chain_id(const ::std::string& value) {
  
  event_chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_chain_id)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_event_chain_id(::std::string&& value) {
  
  event_chain_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.event_chain_id)
}
#endif
inline void NetworkSecurityEvent::set_event_chain_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.event_chain_id)
}
inline void NetworkSecurityEvent::set_event_chain_id(const char* value, size_t size) {
  
  event_chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.event_chain_id)
}
inline ::std::string* NetworkSecurityEvent::mutable_event_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_chain_id)
  return event_chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_event_chain_id() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.event_chain_id)
  
  return event_chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_event_chain_id(::std::string* event_chain_id) {
  if (event_chain_id != NULL) {
    
  } else {
    
  }
  event_chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_chain_id);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.event_chain_id)
}

// uint32 schema_version = 25;
inline void NetworkSecurityEvent::clear_schema_version() {
  schema_version_ = 0u;
}
inline ::google::protobuf::uint32 NetworkSecurityEvent::schema_version() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.schema_version)
  return schema_version_;
}
inline void NetworkSecurityEvent::set_schema_version(::google::protobuf::uint32 value) {
  
  schema_version_ = value;
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.schema_version)
}

// map<string, string> custom_metadata = 26;
inline int NetworkSecurityEvent::custom_metadata_size() const {
  return custom_metadata_.size();
}
inline void NetworkSecurityEvent::clear_custom_metadata() {
  custom_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NetworkSecurityEvent::custom_metadata() const {
  // @@protoc_insertion_point(field_map:protobuf.NetworkSecurityEvent.custom_metadata)
  return custom_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NetworkSecurityEvent::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.NetworkSecurityEvent.custom_metadata)
  return custom_metadata_.MutableMap();
}

// repeated string event_tags = 27;
inline int NetworkSecurityEvent::event_tags_size() const {
  return event_tags_.size();
}
inline void NetworkSecurityEvent::clear_event_tags() {
  event_tags_.Clear();
}
inline const ::std::string& NetworkSecurityEvent::event_tags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.event_tags)
  return event_tags_.Get(index);
}
inline ::std::string* NetworkSecurityEvent::mutable_event_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.event_tags)
  return event_tags_.Mutable(index);
}
inline void NetworkSecurityEvent::set_event_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_tags)
  event_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_event_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.event_tags)
  event_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetworkSecurityEvent::set_event_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::set_event_tags(int index, const char* value, size_t size) {
  event_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.event_tags)
}
inline ::std::string* NetworkSecurityEvent::add_event_tags() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.NetworkSecurityEvent.event_tags)
  return event_tags_.Add();
}
inline void NetworkSecurityEvent::add_event_tags(const ::std::string& value) {
  event_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.event_tags)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::add_event_tags(::std::string&& value) {
  event_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.NetworkSecurityEvent.event_tags)
}
#endif
inline void NetworkSecurityEvent::add_event_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.NetworkSecurityEvent.event_tags)
}
inline void NetworkSecurityEvent::add_event_tags(const char* value, size_t size) {
  event_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.NetworkSecurityEvent.event_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkSecurityEvent::event_tags() const {
  // @@protoc_insertion_point(field_list:protobuf.NetworkSecurityEvent.event_tags)
  return event_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkSecurityEvent::mutable_event_tags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.NetworkSecurityEvent.event_tags)
  return &event_tags_;
}

// string protobuf_version = 28;
inline void NetworkSecurityEvent::clear_protobuf_version() {
  protobuf_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkSecurityEvent::protobuf_version() const {
  // @@protoc_insertion_point(field_get:protobuf.NetworkSecurityEvent.protobuf_version)
  return protobuf_version_.GetNoArena();
}
inline void NetworkSecurityEvent::set_protobuf_version(const ::std::string& value) {
  
  protobuf_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.NetworkSecurityEvent.protobuf_version)
}
#if LANG_CXX11
inline void NetworkSecurityEvent::set_protobuf_version(::std::string&& value) {
  
  protobuf_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.NetworkSecurityEvent.protobuf_version)
}
#endif
inline void NetworkSecurityEvent::set_protobuf_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protobuf_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.NetworkSecurityEvent.protobuf_version)
}
inline void NetworkSecurityEvent::set_protobuf_version(const char* value, size_t size) {
  
  protobuf_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.NetworkSecurityEvent.protobuf_version)
}
inline ::std::string* NetworkSecurityEvent::mutable_protobuf_version() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.NetworkSecurityEvent.protobuf_version)
  return protobuf_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkSecurityEvent::release_protobuf_version() {
  // @@protoc_insertion_point(field_release:protobuf.NetworkSecurityEvent.protobuf_version)
  
  return protobuf_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSecurityEvent::set_allocated_protobuf_version(::std::string* protobuf_version) {
  if (protobuf_version != NULL) {
    
  } else {
    
  }
  protobuf_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf_version);
  // @@protoc_insertion_point(field_set_allocated:protobuf.NetworkSecurityEvent.protobuf_version)
}

// -------------------------------------------------------------------

// EventBatch

// repeated .protobuf.NetworkSecurityEvent events = 1;
inline int EventBatch::events_size() const {
  return events_.size();
}
inline void EventBatch::clear_events() {
  events_.Clear();
}
inline ::protobuf::NetworkSecurityEvent* EventBatch::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.events)
  return events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >*
EventBatch::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.EventBatch.events)
  return &events_;
}
inline const ::protobuf::NetworkSecurityEvent& EventBatch::events(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.events)
  return events_.Get(index);
}
inline ::protobuf::NetworkSecurityEvent* EventBatch::add_events() {
  // @@protoc_insertion_point(field_add:protobuf.EventBatch.events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::NetworkSecurityEvent >&
EventBatch::events() const {
  // @@protoc_insertion_point(field_list:protobuf.EventBatch.events)
  return events_;
}

// uint64 batch_id = 2;
inline void EventBatch::clear_batch_id() {
  batch_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventBatch::batch_id() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_id)
  return batch_id_;
}
inline void EventBatch::set_batch_id(::google::protobuf::uint64 value) {
  
  batch_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_id)
}

// .google.protobuf.Timestamp batch_created_at = 3;
inline bool EventBatch::has_batch_created_at() const {
  return this != internal_default_instance() && batch_created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& EventBatch::_internal_batch_created_at() const {
  return *batch_created_at_;
}
inline const ::google::protobuf::Timestamp& EventBatch::batch_created_at() const {
  const ::google::protobuf::Timestamp* p = batch_created_at_;
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* EventBatch::release_batch_created_at() {
  // @@protoc_insertion_point(field_release:protobuf.EventBatch.batch_created_at)
  
  ::google::protobuf::Timestamp* temp = batch_created_at_;
  batch_created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* EventBatch::mutable_batch_created_at() {
  
  if (batch_created_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    batch_created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.batch_created_at)
  return batch_created_at_;
}
inline void EventBatch::set_allocated_batch_created_at(::google::protobuf::Timestamp* batch_created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(batch_created_at_);
  }
  if (batch_created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(batch_created_at)->GetArena();
    if (message_arena != submessage_arena) {
      batch_created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batch_created_at, submessage_arena);
    }
    
  } else {
    
  }
  batch_created_at_ = batch_created_at;
  // @@protoc_insertion_point(field_set_allocated:protobuf.EventBatch.batch_created_at)
}

// uint32 batch_size = 4;
inline void EventBatch::clear_batch_size() {
  batch_size_ = 0u;
}
inline ::google::protobuf::uint32 EventBatch::batch_size() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_size)
  return batch_size_;
}
inline void EventBatch::set_batch_size(::google::protobuf::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_size)
}

// .protobuf.EventBatch.ProcessingMode processing_mode = 5;
inline void EventBatch::clear_processing_mode() {
  processing_mode_ = 0;
}
inline ::protobuf::EventBatch_ProcessingMode EventBatch::processing_mode() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.processing_mode)
  return static_cast< ::protobuf::EventBatch_ProcessingMode >(processing_mode_);
}
inline void EventBatch::set_processing_mode(::protobuf::EventBatch_ProcessingMode value) {
  
  processing_mode_ = value;
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.processing_mode)
}

// string batch_source_node = 6;
inline void EventBatch::clear_batch_source_node() {
  batch_source_node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventBatch::batch_source_node() const {
  // @@protoc_insertion_point(field_get:protobuf.EventBatch.batch_source_node)
  return batch_source_node_.GetNoArena();
}
inline void EventBatch::set_batch_source_node(const ::std::string& value) {
  
  batch_source_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.EventBatch.batch_source_node)
}
#if LANG_CXX11
inline void EventBatch::set_batch_source_node(::std::string&& value) {
  
  batch_source_node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.EventBatch.batch_source_node)
}
#endif
inline void EventBatch::set_batch_source_node(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  batch_source_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.EventBatch.batch_source_node)
}
inline void EventBatch::set_batch_source_node(const char* value, size_t size) {
  
  batch_source_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.EventBatch.batch_source_node)
}
inline ::std::string* EventBatch::mutable_batch_source_node() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.EventBatch.batch_source_node)
  return batch_source_node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventBatch::release_batch_source_node() {
  // @@protoc_insertion_point(field_release:protobuf.EventBatch.batch_source_node)
  
  return batch_source_node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventBatch::set_allocated_batch_source_node(::std::string* batch_source_node) {
  if (batch_source_node != NULL) {
    
  } else {
    
  }
  batch_source_node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batch_source_node);
  // @@protoc_insertion_point(field_set_allocated:protobuf.EventBatch.batch_source_node)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemConfiguration

// repeated string enabled_ml_models = 1;
inline int SystemConfiguration::enabled_ml_models_size() const {
  return enabled_ml_models_.size();
}
inline void SystemConfiguration::clear_enabled_ml_models() {
  enabled_ml_models_.Clear();
}
inline const ::std::string& SystemConfiguration::enabled_ml_models(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.enabled_ml_models)
  return enabled_ml_models_.Get(index);
}
inline ::std::string* SystemConfiguration::mutable_enabled_ml_models(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.enabled_ml_models)
  return enabled_ml_models_.Mutable(index);
}
inline void SystemConfiguration::set_enabled_ml_models(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.enabled_ml_models)
  enabled_ml_models_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemConfiguration::set_enabled_ml_models(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.enabled_ml_models)
  enabled_ml_models_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemConfiguration::set_enabled_ml_models(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enabled_ml_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::set_enabled_ml_models(int index, const char* value, size_t size) {
  enabled_ml_models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.enabled_ml_models)
}
inline ::std::string* SystemConfiguration::add_enabled_ml_models() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.SystemConfiguration.enabled_ml_models)
  return enabled_ml_models_.Add();
}
inline void SystemConfiguration::add_enabled_ml_models(const ::std::string& value) {
  enabled_ml_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.enabled_ml_models)
}
#if LANG_CXX11
inline void SystemConfiguration::add_enabled_ml_models(::std::string&& value) {
  enabled_ml_models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.enabled_ml_models)
}
#endif
inline void SystemConfiguration::add_enabled_ml_models(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enabled_ml_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.SystemConfiguration.enabled_ml_models)
}
inline void SystemConfiguration::add_enabled_ml_models(const char* value, size_t size) {
  enabled_ml_models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.SystemConfiguration.enabled_ml_models)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemConfiguration::enabled_ml_models() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.enabled_ml_models)
  return enabled_ml_models_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemConfiguration::mutable_enabled_ml_models() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.enabled_ml_models)
  return &enabled_ml_models_;
}

// map<string, double> threat_score_thresholds = 2;
inline int SystemConfiguration::threat_score_thresholds_size() const {
  return threat_score_thresholds_.size();
}
inline void SystemConfiguration::clear_threat_score_thresholds() {
  threat_score_thresholds_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
SystemConfiguration::threat_score_thresholds() const {
  // @@protoc_insertion_point(field_map:protobuf.SystemConfiguration.threat_score_thresholds)
  return threat_score_thresholds_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
SystemConfiguration::mutable_threat_score_thresholds() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.SystemConfiguration.threat_score_thresholds)
  return threat_score_thresholds_.MutableMap();
}

// .google.protobuf.Duration time_window_size = 3;
inline bool SystemConfiguration::has_time_window_size() const {
  return this != internal_default_instance() && time_window_size_ != NULL;
}
inline const ::google::protobuf::Duration& SystemConfiguration::_internal_time_window_size() const {
  return *time_window_size_;
}
inline const ::google::protobuf::Duration& SystemConfiguration::time_window_size() const {
  const ::google::protobuf::Duration* p = time_window_size_;
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.time_window_size)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* SystemConfiguration::release_time_window_size() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.time_window_size)
  
  ::google::protobuf::Duration* temp = time_window_size_;
  time_window_size_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* SystemConfiguration::mutable_time_window_size() {
  
  if (time_window_size_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    time_window_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.time_window_size)
  return time_window_size_;
}
inline void SystemConfiguration::set_allocated_time_window_size(::google::protobuf::Duration* time_window_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_window_size_);
  }
  if (time_window_size) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_window_size)->GetArena();
    if (message_arena != submessage_arena) {
      time_window_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_window_size, submessage_arena);
    }
    
  } else {
    
  }
  time_window_size_ = time_window_size;
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.time_window_size)
}

// uint32 max_events_per_window = 4;
inline void SystemConfiguration::clear_max_events_per_window() {
  max_events_per_window_ = 0u;
}
inline ::google::protobuf::uint32 SystemConfiguration::max_events_per_window() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.max_events_per_window)
  return max_events_per_window_;
}
inline void SystemConfiguration::set_max_events_per_window(::google::protobuf::uint32 value) {
  
  max_events_per_window_ = value;
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.max_events_per_window)
}

// repeated .protobuf.DistributedNode cluster_nodes = 5;
inline int SystemConfiguration::cluster_nodes_size() const {
  return cluster_nodes_.size();
}
inline void SystemConfiguration::clear_cluster_nodes() {
  cluster_nodes_.Clear();
}
inline ::protobuf::DistributedNode* SystemConfiguration::mutable_cluster_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.cluster_nodes)
  return cluster_nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::DistributedNode >*
SystemConfiguration::mutable_cluster_nodes() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.cluster_nodes)
  return &cluster_nodes_;
}
inline const ::protobuf::DistributedNode& SystemConfiguration::cluster_nodes(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.cluster_nodes)
  return cluster_nodes_.Get(index);
}
inline ::protobuf::DistributedNode* SystemConfiguration::add_cluster_nodes() {
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.cluster_nodes)
  return cluster_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::DistributedNode >&
SystemConfiguration::cluster_nodes() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.cluster_nodes)
  return cluster_nodes_;
}

// map<string, string> node_role_assignments = 6;
inline int SystemConfiguration::node_role_assignments_size() const {
  return node_role_assignments_.size();
}
inline void SystemConfiguration::clear_node_role_assignments() {
  node_role_assignments_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SystemConfiguration::node_role_assignments() const {
  // @@protoc_insertion_point(field_map:protobuf.SystemConfiguration.node_role_assignments)
  return node_role_assignments_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SystemConfiguration::mutable_node_role_assignments() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.SystemConfiguration.node_role_assignments)
  return node_role_assignments_.MutableMap();
}

// bool encryption_enabled = 7;
inline void SystemConfiguration::clear_encryption_enabled() {
  encryption_enabled_ = false;
}
inline bool SystemConfiguration::encryption_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.encryption_enabled)
  return encryption_enabled_;
}
inline void SystemConfiguration::set_encryption_enabled(bool value) {
  
  encryption_enabled_ = value;
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.encryption_enabled)
}

// bool compression_enabled = 8;
inline void SystemConfiguration::clear_compression_enabled() {
  compression_enabled_ = false;
}
inline bool SystemConfiguration::compression_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.compression_enabled)
  return compression_enabled_;
}
inline void SystemConfiguration::set_compression_enabled(bool value) {
  
  compression_enabled_ = value;
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.compression_enabled)
}

// string encryption_algorithm = 9;
inline void SystemConfiguration::clear_encryption_algorithm() {
  encryption_algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemConfiguration::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.encryption_algorithm)
  return encryption_algorithm_.GetNoArena();
}
inline void SystemConfiguration::set_encryption_algorithm(const ::std::string& value) {
  
  encryption_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.encryption_algorithm)
}
#if LANG_CXX11
inline void SystemConfiguration::set_encryption_algorithm(::std::string&& value) {
  
  encryption_algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.SystemConfiguration.encryption_algorithm)
}
#endif
inline void SystemConfiguration::set_encryption_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encryption_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.encryption_algorithm)
}
inline void SystemConfiguration::set_encryption_algorithm(const char* value, size_t size) {
  
  encryption_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.encryption_algorithm)
}
inline ::std::string* SystemConfiguration::mutable_encryption_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.encryption_algorithm)
  return encryption_algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemConfiguration::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.encryption_algorithm)
  
  return encryption_algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemConfiguration::set_allocated_encryption_algorithm(::std::string* encryption_algorithm) {
  if (encryption_algorithm != NULL) {
    
  } else {
    
  }
  encryption_algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_algorithm);
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.encryption_algorithm)
}

// bool rag_analysis_enabled = 10;
inline void SystemConfiguration::clear_rag_analysis_enabled() {
  rag_analysis_enabled_ = false;
}
inline bool SystemConfiguration::rag_analysis_enabled() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.rag_analysis_enabled)
  return rag_analysis_enabled_;
}
inline void SystemConfiguration::set_rag_analysis_enabled(bool value) {
  
  rag_analysis_enabled_ = value;
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.rag_analysis_enabled)
}

// string rag_model_endpoint = 11;
inline void SystemConfiguration::clear_rag_model_endpoint() {
  rag_model_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemConfiguration::rag_model_endpoint() const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.rag_model_endpoint)
  return rag_model_endpoint_.GetNoArena();
}
inline void SystemConfiguration::set_rag_model_endpoint(const ::std::string& value) {
  
  rag_model_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.rag_model_endpoint)
}
#if LANG_CXX11
inline void SystemConfiguration::set_rag_model_endpoint(::std::string&& value) {
  
  rag_model_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.SystemConfiguration.rag_model_endpoint)
}
#endif
inline void SystemConfiguration::set_rag_model_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rag_model_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.rag_model_endpoint)
}
inline void SystemConfiguration::set_rag_model_endpoint(const char* value, size_t size) {
  
  rag_model_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.rag_model_endpoint)
}
inline ::std::string* SystemConfiguration::mutable_rag_model_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.rag_model_endpoint)
  return rag_model_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemConfiguration::release_rag_model_endpoint() {
  // @@protoc_insertion_point(field_release:protobuf.SystemConfiguration.rag_model_endpoint)
  
  return rag_model_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemConfiguration::set_allocated_rag_model_endpoint(::std::string* rag_model_endpoint) {
  if (rag_model_endpoint != NULL) {
    
  } else {
    
  }
  rag_model_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rag_model_endpoint);
  // @@protoc_insertion_point(field_set_allocated:protobuf.SystemConfiguration.rag_model_endpoint)
}

// repeated string knowledge_base_sources = 12;
inline int SystemConfiguration::knowledge_base_sources_size() const {
  return knowledge_base_sources_.size();
}
inline void SystemConfiguration::clear_knowledge_base_sources() {
  knowledge_base_sources_.Clear();
}
inline const ::std::string& SystemConfiguration::knowledge_base_sources(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.SystemConfiguration.knowledge_base_sources)
  return knowledge_base_sources_.Get(index);
}
inline ::std::string* SystemConfiguration::mutable_knowledge_base_sources(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.SystemConfiguration.knowledge_base_sources)
  return knowledge_base_sources_.Mutable(index);
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.knowledge_base_sources)
  knowledge_base_sources_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SystemConfiguration::set_knowledge_base_sources(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.SystemConfiguration.knowledge_base_sources)
  knowledge_base_sources_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SystemConfiguration::set_knowledge_base_sources(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  knowledge_base_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::set_knowledge_base_sources(int index, const char* value, size_t size) {
  knowledge_base_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline ::std::string* SystemConfiguration::add_knowledge_base_sources() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.SystemConfiguration.knowledge_base_sources)
  return knowledge_base_sources_.Add();
}
inline void SystemConfiguration::add_knowledge_base_sources(const ::std::string& value) {
  knowledge_base_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.knowledge_base_sources)
}
#if LANG_CXX11
inline void SystemConfiguration::add_knowledge_base_sources(::std::string&& value) {
  knowledge_base_sources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.SystemConfiguration.knowledge_base_sources)
}
#endif
inline void SystemConfiguration::add_knowledge_base_sources(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  knowledge_base_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline void SystemConfiguration::add_knowledge_base_sources(const char* value, size_t size) {
  knowledge_base_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.SystemConfiguration.knowledge_base_sources)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemConfiguration::knowledge_base_sources() const {
  // @@protoc_insertion_point(field_list:protobuf.SystemConfiguration.knowledge_base_sources)
  return knowledge_base_sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemConfiguration::mutable_knowledge_base_sources() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.SystemConfiguration.knowledge_base_sources)
  return &knowledge_base_sources_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobuf::GeoLocationInfo_ThreatLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::GeoLocationInfo_ThreatLevel>() {
  return ::protobuf::GeoLocationInfo_ThreatLevel_descriptor();
}
template <> struct is_proto_enum< ::protobuf::TimeWindow_WindowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::TimeWindow_WindowType>() {
  return ::protobuf::TimeWindow_WindowType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::ModelPrediction_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::ModelPrediction_ModelType>() {
  return ::protobuf::ModelPrediction_ModelType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::DistributedNode_NodeRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DistributedNode_NodeRole>() {
  return ::protobuf::DistributedNode_NodeRole_descriptor();
}
template <> struct is_proto_enum< ::protobuf::DistributedNode_NodeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DistributedNode_NodeStatus>() {
  return ::protobuf::DistributedNode_NodeStatus_descriptor();
}
template <> struct is_proto_enum< ::protobuf::HumanFeedback_FeedbackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::HumanFeedback_FeedbackType>() {
  return ::protobuf::HumanFeedback_FeedbackType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::HumanInTheLoopReview_ReviewPriority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::HumanInTheLoopReview_ReviewPriority>() {
  return ::protobuf::HumanInTheLoopReview_ReviewPriority_descriptor();
}
template <> struct is_proto_enum< ::protobuf::EventBatch_ProcessingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::EventBatch_ProcessingMode>() {
  return ::protobuf::EventBatch_ProcessingMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protobuf_2fnetwork_5fsecurity_2eproto
