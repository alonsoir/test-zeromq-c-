// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_security.proto

#include "network_security.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf {
PROTOBUF_CONSTEXPR NetworkFeatures_CustomFeaturesEntry_DoNotUse::NetworkFeatures_CustomFeaturesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NetworkFeatures_CustomFeaturesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkFeatures_CustomFeaturesEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR NetworkFeatures_FeatureMetadataEntry_DoNotUse::NetworkFeatures_FeatureMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NetworkFeatures_FeatureMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkFeatures_FeatureMetadataEntry_DoNotUseDefaultTypeInternal _NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR NetworkFeatures::NetworkFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ddos_features_)*/{}
  , /*decltype(_impl_.ransomware_features_)*/{}
  , /*decltype(_impl_.general_attack_features_)*/{}
  , /*decltype(_impl_.internal_traffic_features_)*/{}
  , /*decltype(_impl_.custom_features_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.feature_metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.source_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flow_start_time_)*/nullptr
  , /*decltype(_impl_.flow_duration_)*/nullptr
  , /*decltype(_impl_.source_port_)*/0u
  , /*decltype(_impl_.destination_port_)*/0u
  , /*decltype(_impl_.flow_duration_microseconds_)*/uint64_t{0u}
  , /*decltype(_impl_.total_forward_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.total_backward_packets_)*/uint64_t{0u}
  , /*decltype(_impl_.total_forward_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.total_backward_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.forward_packet_length_max_)*/uint64_t{0u}
  , /*decltype(_impl_.forward_packet_length_min_)*/uint64_t{0u}
  , /*decltype(_impl_.forward_packet_length_mean_)*/0
  , /*decltype(_impl_.forward_packet_length_std_)*/0
  , /*decltype(_impl_.backward_packet_length_max_)*/uint64_t{0u}
  , /*decltype(_impl_.backward_packet_length_min_)*/uint64_t{0u}
  , /*decltype(_impl_.backward_packet_length_mean_)*/0
  , /*decltype(_impl_.backward_packet_length_std_)*/0
  , /*decltype(_impl_.protocol_number_)*/0u
  , /*decltype(_impl_.fin_flag_count_)*/0u
  , /*decltype(_impl_.flow_bytes_per_second_)*/0
  , /*decltype(_impl_.flow_packets_per_second_)*/0
  , /*decltype(_impl_.forward_packets_per_second_)*/0
  , /*decltype(_impl_.backward_packets_per_second_)*/0
  , /*decltype(_impl_.download_upload_ratio_)*/0
  , /*decltype(_impl_.average_packet_size_)*/0
  , /*decltype(_impl_.average_forward_segment_size_)*/0
  , /*decltype(_impl_.average_backward_segment_size_)*/0
  , /*decltype(_impl_.flow_inter_arrival_time_mean_)*/0
  , /*decltype(_impl_.flow_inter_arrival_time_std_)*/0
  , /*decltype(_impl_.flow_inter_arrival_time_max_)*/uint64_t{0u}
  , /*decltype(_impl_.flow_inter_arrival_time_min_)*/uint64_t{0u}
  , /*decltype(_impl_.forward_inter_arrival_time_total_)*/0
  , /*decltype(_impl_.forward_inter_arrival_time_mean_)*/0
  , /*decltype(_impl_.forward_inter_arrival_time_std_)*/0
  , /*decltype(_impl_.forward_inter_arrival_time_max_)*/uint64_t{0u}
  , /*decltype(_impl_.forward_inter_arrival_time_min_)*/uint64_t{0u}
  , /*decltype(_impl_.backward_inter_arrival_time_total_)*/0
  , /*decltype(_impl_.backward_inter_arrival_time_mean_)*/0
  , /*decltype(_impl_.backward_inter_arrival_time_std_)*/0
  , /*decltype(_impl_.backward_inter_arrival_time_max_)*/uint64_t{0u}
  , /*decltype(_impl_.backward_inter_arrival_time_min_)*/uint64_t{0u}
  , /*decltype(_impl_.syn_flag_count_)*/0u
  , /*decltype(_impl_.rst_flag_count_)*/0u
  , /*decltype(_impl_.psh_flag_count_)*/0u
  , /*decltype(_impl_.ack_flag_count_)*/0u
  , /*decltype(_impl_.urg_flag_count_)*/0u
  , /*decltype(_impl_.cwe_flag_count_)*/0u
  , /*decltype(_impl_.ece_flag_count_)*/0u
  , /*decltype(_impl_.forward_psh_flags_)*/0u
  , /*decltype(_impl_.backward_psh_flags_)*/0u
  , /*decltype(_impl_.forward_urg_flags_)*/0u
  , /*decltype(_impl_.forward_header_length_)*/0
  , /*decltype(_impl_.backward_header_length_)*/0
  , /*decltype(_impl_.forward_average_bytes_bulk_)*/0
  , /*decltype(_impl_.forward_average_packets_bulk_)*/0
  , /*decltype(_impl_.forward_average_bulk_rate_)*/0
  , /*decltype(_impl_.backward_average_bytes_bulk_)*/0
  , /*decltype(_impl_.backward_average_packets_bulk_)*/0
  , /*decltype(_impl_.backward_average_bulk_rate_)*/0
  , /*decltype(_impl_.minimum_packet_length_)*/uint64_t{0u}
  , /*decltype(_impl_.maximum_packet_length_)*/uint64_t{0u}
  , /*decltype(_impl_.packet_length_mean_)*/0
  , /*decltype(_impl_.packet_length_std_)*/0
  , /*decltype(_impl_.packet_length_variance_)*/0
  , /*decltype(_impl_.active_mean_)*/0
  , /*decltype(_impl_.idle_mean_)*/0
  , /*decltype(_impl_.backward_urg_flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkFeaturesDefaultTypeInternal() {}
  union {
    NetworkFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkFeaturesDefaultTypeInternal _NetworkFeatures_default_instance_;
PROTOBUF_CONSTEXPR GeoLocationInfo::GeoLocationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.country_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isp_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.organization_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.autonomous_system_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.is_anonymous_proxy_)*/false
  , /*decltype(_impl_.is_satellite_provider_)*/false
  , /*decltype(_impl_.is_tor_exit_node_)*/false
  , /*decltype(_impl_.is_known_malicious_)*/false
  , /*decltype(_impl_.threat_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoLocationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoLocationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoLocationInfoDefaultTypeInternal() {}
  union {
    GeoLocationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoLocationInfoDefaultTypeInternal _GeoLocationInfo_default_instance_;
PROTOBUF_CONSTEXPR GeoEnrichment::GeoEnrichment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.threat_intelligence_matches_)*/{}
  , /*decltype(_impl_.distance_category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sniffer_source_relationship_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sniffer_destination_relationship_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.threat_intelligence_source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_private_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.discovered_public_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_discovery_service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enricher_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.geoip_method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.geoip_database_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sniffer_node_geo_)*/nullptr
  , /*decltype(_impl_.source_ip_geo_)*/nullptr
  , /*decltype(_impl_.destination_ip_geo_)*/nullptr
  , /*decltype(_impl_.ip_discovery_time_)*/nullptr
  , /*decltype(_impl_.enrichment_timestamp_)*/nullptr
  , /*decltype(_impl_.source_destination_distance_km_)*/0
  , /*decltype(_impl_.sniffer_source_distance_km_)*/0
  , /*decltype(_impl_.source_destination_same_country_)*/false
  , /*decltype(_impl_.source_destination_same_continent_)*/false
  , /*decltype(_impl_.sniffer_source_same_country_)*/false
  , /*decltype(_impl_.sniffer_destination_same_country_)*/false
  , /*decltype(_impl_.geographic_anomaly_score_)*/0
  , /*decltype(_impl_.sniffer_destination_distance_km_)*/0
  , /*decltype(_impl_.suspicious_geographic_pattern_)*/false
  , /*decltype(_impl_.sniffer_node_enriched_)*/false
  , /*decltype(_impl_.source_ip_enriched_)*/false
  , /*decltype(_impl_.destination_ip_enriched_)*/false
  , /*decltype(_impl_.enrichment_complete_)*/false
  , /*decltype(_impl_.public_ip_discovery_attempted_)*/false
  , /*decltype(_impl_.fallback_coordinates_used_)*/false
  , /*decltype(_impl_.total_lookup_latency_ms_)*/0
  , /*decltype(_impl_.cache_hits_)*/0
  , /*decltype(_impl_.cache_misses_)*/0
  , /*decltype(_impl_.enrichment_success_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoEnrichmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoEnrichmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoEnrichmentDefaultTypeInternal() {}
  union {
    GeoEnrichment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoEnrichmentDefaultTypeInternal _GeoEnrichment_default_instance_;
PROTOBUF_CONSTEXPR TimeWindow::TimeWindow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_start_)*/nullptr
  , /*decltype(_impl_.window_end_)*/nullptr
  , /*decltype(_impl_.window_duration_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/uint64_t{0u}
  , /*decltype(_impl_.window_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeWindowDefaultTypeInternal() {}
  union {
    TimeWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
PROTOBUF_CONSTEXPR FlowAggregation_ProtocolDistributionEntry_DoNotUse::FlowAggregation_ProtocolDistributionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlowAggregation_ProtocolDistributionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowAggregation_ProtocolDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlowAggregation_PortDistributionEntry_DoNotUse::FlowAggregation_PortDistributionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlowAggregation_PortDistributionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowAggregation_PortDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlowAggregation_CountryDistributionEntry_DoNotUse::FlowAggregation_CountryDistributionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlowAggregation_CountryDistributionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowAggregation_CountryDistributionEntry_DoNotUseDefaultTypeInternal _FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FlowAggregation::FlowAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_distribution_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.port_distribution_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.country_distribution_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.time_window_)*/nullptr
  , /*decltype(_impl_.total_flows_in_window_)*/uint64_t{0u}
  , /*decltype(_impl_.total_packets_in_window_)*/uint64_t{0u}
  , /*decltype(_impl_.total_bytes_in_window_)*/uint64_t{0u}
  , /*decltype(_impl_.window_anomaly_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlowAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowAggregationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowAggregationDefaultTypeInternal() {}
  union {
    FlowAggregation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowAggregationDefaultTypeInternal _FlowAggregation_default_instance_;
PROTOBUF_CONSTEXPR ModelPrediction::ModelPrediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_probabilities_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prediction_class_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prediction_timestamp_)*/nullptr
  , /*decltype(_impl_.processing_duration_)*/nullptr
  , /*decltype(_impl_.confidence_score_)*/0
  , /*decltype(_impl_.model_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelPredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPredictionDefaultTypeInternal() {}
  union {
    ModelPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPredictionDefaultTypeInternal _ModelPrediction_default_instance_;
PROTOBUF_CONSTEXPR TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUseDefaultTypeInternal _TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TricapaMLAnalysis::TricapaMLAnalysis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level3_specialized_predictions_)*/{}
  , /*decltype(_impl_.level2_specialized_predictions_)*/{}
  , /*decltype(_impl_.models_activated_)*/{}
  , /*decltype(_impl_.feature_importance_scores_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.traffic_context_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.final_threat_classification_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level1_general_detection_)*/nullptr
  , /*decltype(_impl_.level2_context_classification_)*/nullptr
  , /*decltype(_impl_.total_analysis_duration_)*/nullptr
  , /*decltype(_impl_.level1_confidence_)*/0
  , /*decltype(_impl_.ensemble_confidence_)*/0
  , /*decltype(_impl_.attack_detected_level1_)*/false
  , /*decltype(_impl_.requires_human_review_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TricapaMLAnalysisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TricapaMLAnalysisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TricapaMLAnalysisDefaultTypeInternal() {}
  union {
    TricapaMLAnalysis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TricapaMLAnalysisDefaultTypeInternal _TricapaMLAnalysis_default_instance_;
PROTOBUF_CONSTEXPR DistributedNode_NodeCapabilitiesEntry_DoNotUse::DistributedNode_NodeCapabilitiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DistributedNode_NodeCapabilitiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistributedNode_NodeCapabilitiesEntry_DoNotUseDefaultTypeInternal _DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DistributedNode::DistributedNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_capabilities_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.supported_protocols_)*/{}
  , /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physical_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operating_system_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.container_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.configuration_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_heartbeat_)*/nullptr
  , /*decltype(_impl_.uptime_)*/nullptr
  , /*decltype(_impl_.node_role_)*/0
  , /*decltype(_impl_.node_status_)*/0
  , /*decltype(_impl_.process_id_)*/0
  , /*decltype(_impl_.cpu_usage_percent_)*/0
  , /*decltype(_impl_.memory_usage_mb_)*/0
  , /*decltype(_impl_.active_connections_)*/0
  , /*decltype(_impl_.queue_depth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistributedNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistributedNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistributedNodeDefaultTypeInternal() {}
  union {
    DistributedNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistributedNodeDefaultTypeInternal _DistributedNode_default_instance_;
PROTOBUF_CONSTEXPR PipelineTracking_ComponentMetadataEntry_DoNotUse::PipelineTracking_ComponentMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PipelineTracking_ComponentMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PipelineTracking_ComponentMetadataEntry_DoNotUseDefaultTypeInternal _PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PipelineTracking::PipelineTracking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processing_errors_)*/{}
  , /*decltype(_impl_.component_metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.processing_tags_)*/{}
  , /*decltype(_impl_.pipeline_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processing_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pipeline_start_)*/nullptr
  , /*decltype(_impl_.packet_captured_at_)*/nullptr
  , /*decltype(_impl_.features_extracted_at_)*/nullptr
  , /*decltype(_impl_.geoip_enriched_at_)*/nullptr
  , /*decltype(_impl_.ml_analyzed_at_)*/nullptr
  , /*decltype(_impl_.threat_detected_at_)*/nullptr
  , /*decltype(_impl_.action_taken_at_)*/nullptr
  , /*decltype(_impl_.total_processing_latency_)*/nullptr
  , /*decltype(_impl_.sniffer_process_id_)*/0
  , /*decltype(_impl_.processor_process_id_)*/0
  , /*decltype(_impl_.enricher_process_id_)*/0
  , /*decltype(_impl_.analyzer_process_id_)*/0
  , /*decltype(_impl_.detector_process_id_)*/0
  , /*decltype(_impl_.controller_process_id_)*/0
  , /*decltype(_impl_.pipeline_hops_count_)*/0
  , /*decltype(_impl_.retry_attempts_)*/0
  , /*decltype(_impl_.requires_reprocessing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PipelineTrackingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PipelineTrackingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PipelineTrackingDefaultTypeInternal() {}
  union {
    PipelineTracking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PipelineTrackingDefaultTypeInternal _PipelineTracking_default_instance_;
PROTOBUF_CONSTEXPR RAGAnalysis::RAGAnalysis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retrieved_knowledge_)*/{}
  , /*decltype(_impl_.relevance_scores_)*/{}
  , /*decltype(_impl_.knowledge_sources_)*/{}
  , /*decltype(_impl_.query_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ai_generated_analysis_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.analysis_timestamp_)*/nullptr
  , /*decltype(_impl_.analysis_confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RAGAnalysisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RAGAnalysisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RAGAnalysisDefaultTypeInternal() {}
  union {
    RAGAnalysis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RAGAnalysisDefaultTypeInternal _RAGAnalysis_default_instance_;
PROTOBUF_CONSTEXPR HumanFeedback::HumanFeedback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.analyst_tags_)*/{}
  , /*decltype(_impl_.feedback_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.analyst_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_reference_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.analyst_explanation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feedback_timestamp_)*/nullptr
  , /*decltype(_impl_.feedback_type_)*/0
  , /*decltype(_impl_.confirmed_true_positive_)*/false
  , /*decltype(_impl_.confirmed_false_positive_)*/false
  , /*decltype(_impl_.analyst_confidence_rating_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HumanFeedbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HumanFeedbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HumanFeedbackDefaultTypeInternal() {}
  union {
    HumanFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HumanFeedbackDefaultTypeInternal _HumanFeedback_default_instance_;
PROTOBUF_CONSTEXPR HumanInTheLoopReview::HumanInTheLoopReview(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.review_reasons_)*/{}
  , /*decltype(_impl_.analyst_feedback_)*/nullptr
  , /*decltype(_impl_.escalated_timestamp_)*/nullptr
  , /*decltype(_impl_.reviewed_timestamp_)*/nullptr
  , /*decltype(_impl_.review_priority_)*/0
  , /*decltype(_impl_.requires_human_analysis_)*/false
  , /*decltype(_impl_.review_completed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HumanInTheLoopReviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HumanInTheLoopReviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HumanInTheLoopReviewDefaultTypeInternal() {}
  union {
    HumanInTheLoopReview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HumanInTheLoopReviewDefaultTypeInternal _HumanInTheLoopReview_default_instance_;
PROTOBUF_CONSTEXPR NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NetworkSecurityEvent_CustomMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkSecurityEvent_CustomMetadataEntry_DoNotUseDefaultTypeInternal _NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR NetworkSecurityEvent::NetworkSecurityEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_model_predictions_)*/{}
  , /*decltype(_impl_.related_event_ids_)*/{}
  , /*decltype(_impl_.custom_metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.event_tags_)*/{}
  , /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originating_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.final_classification_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.threat_category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_chain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protobuf_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_timestamp_)*/nullptr
  , /*decltype(_impl_.network_features_)*/nullptr
  , /*decltype(_impl_.geo_enrichment_)*/nullptr
  , /*decltype(_impl_.time_window_)*/nullptr
  , /*decltype(_impl_.ml_analysis_)*/nullptr
  , /*decltype(_impl_.capturing_node_)*/nullptr
  , /*decltype(_impl_.pipeline_tracking_)*/nullptr
  , /*decltype(_impl_.rag_analysis_)*/nullptr
  , /*decltype(_impl_.human_review_)*/nullptr
  , /*decltype(_impl_.overall_threat_score_)*/0
  , /*decltype(_impl_.schema_version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkSecurityEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkSecurityEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkSecurityEventDefaultTypeInternal() {}
  union {
    NetworkSecurityEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkSecurityEventDefaultTypeInternal _NetworkSecurityEvent_default_instance_;
PROTOBUF_CONSTEXPR EventBatch::EventBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.batch_source_node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_created_at_)*/nullptr
  , /*decltype(_impl_.batch_id_)*/uint64_t{0u}
  , /*decltype(_impl_.batch_size_)*/0u
  , /*decltype(_impl_.processing_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBatchDefaultTypeInternal() {}
  union {
    EventBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBatchDefaultTypeInternal _EventBatch_default_instance_;
PROTOBUF_CONSTEXPR SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUseDefaultTypeInternal _SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SystemConfiguration::SystemConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_ml_models_)*/{}
  , /*decltype(_impl_.threat_score_thresholds_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.cluster_nodes_)*/{}
  , /*decltype(_impl_.node_role_assignments_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.knowledge_base_sources_)*/{}
  , /*decltype(_impl_.encryption_algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rag_model_endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_window_size_)*/nullptr
  , /*decltype(_impl_.max_events_per_window_)*/0u
  , /*decltype(_impl_.encryption_enabled_)*/false
  , /*decltype(_impl_.compression_enabled_)*/false
  , /*decltype(_impl_.rag_analysis_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemConfigurationDefaultTypeInternal() {}
  union {
    SystemConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemConfigurationDefaultTypeInternal _SystemConfiguration_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_network_5fsecurity_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_network_5fsecurity_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_network_5fsecurity_2eproto = nullptr;

const uint32_t TableStruct_network_5fsecurity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.source_ip_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.destination_ip_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.source_port_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.destination_port_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.protocol_number_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.protocol_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_start_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_duration_microseconds_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.total_forward_packets_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.total_backward_packets_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.total_forward_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.total_backward_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_packet_length_max_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_packet_length_min_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_packet_length_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_packet_length_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_packet_length_max_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_packet_length_min_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_packet_length_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_packet_length_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_bytes_per_second_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_packets_per_second_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_packets_per_second_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_packets_per_second_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.download_upload_ratio_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.average_packet_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.average_forward_segment_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.average_backward_segment_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_inter_arrival_time_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_inter_arrival_time_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_inter_arrival_time_max_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.flow_inter_arrival_time_min_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_inter_arrival_time_total_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_inter_arrival_time_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_inter_arrival_time_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_inter_arrival_time_max_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_inter_arrival_time_min_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_inter_arrival_time_total_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_inter_arrival_time_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_inter_arrival_time_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_inter_arrival_time_max_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_inter_arrival_time_min_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.fin_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.syn_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.rst_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.psh_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.ack_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.urg_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.cwe_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.ece_flag_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_psh_flags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_psh_flags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_urg_flags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_urg_flags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_header_length_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_header_length_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_average_bytes_bulk_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_average_packets_bulk_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.forward_average_bulk_rate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_average_bytes_bulk_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_average_packets_bulk_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.backward_average_bulk_rate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.minimum_packet_length_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.maximum_packet_length_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.packet_length_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.packet_length_std_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.packet_length_variance_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.active_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.idle_mean_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.ddos_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.ransomware_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.general_attack_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.internal_traffic_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.custom_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkFeatures, _impl_.feature_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.country_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.region_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.city_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.isp_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.organization_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.autonomous_system_number_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.is_anonymous_proxy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.is_satellite_provider_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.is_tor_exit_node_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.is_known_malicious_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoLocationInfo, _impl_.threat_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_node_geo_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.source_ip_geo_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.destination_ip_geo_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.source_destination_distance_km_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.source_destination_same_country_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.source_destination_same_continent_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.distance_category_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_source_distance_km_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_source_same_country_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_source_relationship_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_destination_distance_km_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_destination_same_country_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_destination_relationship_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.threat_intelligence_matches_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.threat_intelligence_source_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.geographic_anomaly_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.suspicious_geographic_pattern_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.sniffer_node_enriched_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.source_ip_enriched_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.destination_ip_enriched_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.enrichment_complete_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.public_ip_discovery_attempted_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.original_private_ip_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.discovered_public_ip_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.ip_discovery_service_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.ip_discovery_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.enricher_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.geoip_method_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.geoip_database_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.fallback_coordinates_used_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.total_lookup_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.cache_hits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.cache_misses_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.enrichment_success_rate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::GeoEnrichment, _impl_.enrichment_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _impl_.window_start_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _impl_.window_end_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _impl_.window_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TimeWindow, _impl_.window_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.time_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.total_flows_in_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.total_packets_in_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.total_bytes_in_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.protocol_distribution_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.port_distribution_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.country_distribution_),
  PROTOBUF_FIELD_OFFSET(::protobuf::FlowAggregation, _impl_.window_anomaly_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.model_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.prediction_class_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.confidence_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.class_probabilities_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.prediction_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ModelPrediction, _impl_.processing_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.level1_general_detection_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.attack_detected_level1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.level1_confidence_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.level2_context_classification_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.traffic_context_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.level2_specialized_predictions_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.level3_specialized_predictions_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.final_threat_classification_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.ensemble_confidence_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.total_analysis_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.models_activated_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.feature_importance_scores_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TricapaMLAnalysis, _impl_.requires_human_review_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_hostname_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_ip_address_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.physical_location_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_role_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_status_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.last_heartbeat_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.operating_system_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.os_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.agent_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.container_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.cluster_name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.cpu_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.memory_usage_mb_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.active_connections_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.queue_depth_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.node_capabilities_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.supported_protocols_),
  PROTOBUF_FIELD_OFFSET(::protobuf::DistributedNode, _impl_.configuration_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.pipeline_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.pipeline_start_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.sniffer_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.processor_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.enricher_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.analyzer_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.detector_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.controller_process_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.packet_captured_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.features_extracted_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.geoip_enriched_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.ml_analyzed_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.threat_detected_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.action_taken_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.total_processing_latency_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.pipeline_hops_count_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.processing_path_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.retry_attempts_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.processing_errors_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.requires_reprocessing_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.component_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf::PipelineTracking, _impl_.processing_tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.query_text_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.retrieved_knowledge_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.relevance_scores_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.ai_generated_analysis_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.analysis_confidence_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.knowledge_sources_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RAGAnalysis, _impl_.analysis_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.feedback_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.analyst_user_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.event_reference_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.feedback_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.confirmed_true_positive_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.confirmed_false_positive_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.analyst_explanation_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.analyst_tags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.analyst_confidence_rating_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanFeedback, _impl_.feedback_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.requires_human_analysis_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.review_priority_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.review_reasons_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.analyst_feedback_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.escalated_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.reviewed_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HumanInTheLoopReview, _impl_.review_completed_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.event_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.originating_node_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.network_features_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.geo_enrichment_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.time_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.ml_analysis_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.additional_model_predictions_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.capturing_node_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.pipeline_tracking_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.rag_analysis_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.human_review_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.overall_threat_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.final_classification_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.threat_category_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.related_event_ids_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.event_chain_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.schema_version_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.event_tags_),
  PROTOBUF_FIELD_OFFSET(::protobuf::NetworkSecurityEvent, _impl_.protobuf_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.batch_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.batch_created_at_),
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.processing_mode_),
  PROTOBUF_FIELD_OFFSET(::protobuf::EventBatch, _impl_.batch_source_node_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.enabled_ml_models_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.threat_score_thresholds_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.time_window_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.max_events_per_window_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.cluster_nodes_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.node_role_assignments_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.encryption_enabled_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.compression_enabled_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.encryption_algorithm_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.rag_analysis_enabled_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.rag_model_endpoint_),
  PROTOBUF_FIELD_OFFSET(::protobuf::SystemConfiguration, _impl_.knowledge_base_sources_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::protobuf::NetworkFeatures)},
  { 102, -1, -1, sizeof(::protobuf::GeoLocationInfo)},
  { 123, -1, -1, sizeof(::protobuf::GeoEnrichment)},
  { 164, -1, -1, sizeof(::protobuf::TimeWindow)},
  { 175, 183, -1, sizeof(::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse)},
  { 185, 193, -1, sizeof(::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse)},
  { 195, 203, -1, sizeof(::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse)},
  { 205, -1, -1, sizeof(::protobuf::FlowAggregation)},
  { 219, -1, -1, sizeof(::protobuf::ModelPrediction)},
  { 233, 241, -1, sizeof(::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse)},
  { 243, -1, -1, sizeof(::protobuf::TricapaMLAnalysis)},
  { 262, 270, -1, sizeof(::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse)},
  { 272, -1, -1, sizeof(::protobuf::DistributedNode)},
  { 299, 307, -1, sizeof(::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse)},
  { 309, -1, -1, sizeof(::protobuf::PipelineTracking)},
  { 337, -1, -1, sizeof(::protobuf::RAGAnalysis)},
  { 350, -1, -1, sizeof(::protobuf::HumanFeedback)},
  { 366, -1, -1, sizeof(::protobuf::HumanInTheLoopReview)},
  { 379, 387, -1, sizeof(::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse)},
  { 389, -1, -1, sizeof(::protobuf::NetworkSecurityEvent)},
  { 417, -1, -1, sizeof(::protobuf::EventBatch)},
  { 429, 437, -1, sizeof(::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse)},
  { 439, 447, -1, sizeof(::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse)},
  { 449, -1, -1, sizeof(::protobuf::SystemConfiguration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf::_NetworkFeatures_CustomFeaturesEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_NetworkFeatures_FeatureMetadataEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_NetworkFeatures_default_instance_._instance,
  &::protobuf::_GeoLocationInfo_default_instance_._instance,
  &::protobuf::_GeoEnrichment_default_instance_._instance,
  &::protobuf::_TimeWindow_default_instance_._instance,
  &::protobuf::_FlowAggregation_ProtocolDistributionEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_FlowAggregation_PortDistributionEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_FlowAggregation_CountryDistributionEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_FlowAggregation_default_instance_._instance,
  &::protobuf::_ModelPrediction_default_instance_._instance,
  &::protobuf::_TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_TricapaMLAnalysis_default_instance_._instance,
  &::protobuf::_DistributedNode_NodeCapabilitiesEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_DistributedNode_default_instance_._instance,
  &::protobuf::_PipelineTracking_ComponentMetadataEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_PipelineTracking_default_instance_._instance,
  &::protobuf::_RAGAnalysis_default_instance_._instance,
  &::protobuf::_HumanFeedback_default_instance_._instance,
  &::protobuf::_HumanInTheLoopReview_default_instance_._instance,
  &::protobuf::_NetworkSecurityEvent_CustomMetadataEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_NetworkSecurityEvent_default_instance_._instance,
  &::protobuf::_EventBatch_default_instance_._instance,
  &::protobuf::_SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse_default_instance_._instance,
  &::protobuf::_SystemConfiguration_default_instance_._instance,
};

const char descriptor_table_protodef_network_5fsecurity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026network_security.proto\022\010protobuf\032\037goog"
  "le/protobuf/timestamp.proto\032\036google/prot"
  "obuf/duration.proto\"\200\025\n\017NetworkFeatures\022"
  "\021\n\tsource_ip\030\001 \001(\t\022\026\n\016destination_ip\030\002 \001"
  "(\t\022\023\n\013source_port\030\003 \001(\r\022\030\n\020destination_p"
  "ort\030\004 \001(\r\022\027\n\017protocol_number\030\005 \001(\r\022\025\n\rpr"
  "otocol_name\030\006 \001(\t\0223\n\017flow_start_time\030\007 \001"
  "(\0132\032.google.protobuf.Timestamp\0220\n\rflow_d"
  "uration\030\010 \001(\0132\031.google.protobuf.Duration"
  "\022\"\n\032flow_duration_microseconds\030\t \001(\004\022\035\n\025"
  "total_forward_packets\030\n \001(\004\022\036\n\026total_bac"
  "kward_packets\030\013 \001(\004\022\033\n\023total_forward_byt"
  "es\030\014 \001(\004\022\034\n\024total_backward_bytes\030\r \001(\004\022!"
  "\n\031forward_packet_length_max\030\024 \001(\004\022!\n\031for"
  "ward_packet_length_min\030\025 \001(\004\022\"\n\032forward_"
  "packet_length_mean\030\026 \001(\001\022!\n\031forward_pack"
  "et_length_std\030\027 \001(\001\022\"\n\032backward_packet_l"
  "ength_max\030\036 \001(\004\022\"\n\032backward_packet_lengt"
  "h_min\030\037 \001(\004\022#\n\033backward_packet_length_me"
  "an\030  \001(\001\022\"\n\032backward_packet_length_std\030!"
  " \001(\001\022\035\n\025flow_bytes_per_second\030( \001(\001\022\037\n\027f"
  "low_packets_per_second\030) \001(\001\022\"\n\032forward_"
  "packets_per_second\030* \001(\001\022#\n\033backward_pac"
  "kets_per_second\030+ \001(\001\022\035\n\025download_upload"
  "_ratio\030, \001(\001\022\033\n\023average_packet_size\030- \001("
  "\001\022$\n\034average_forward_segment_size\030. \001(\001\022"
  "%\n\035average_backward_segment_size\030/ \001(\001\022$"
  "\n\034flow_inter_arrival_time_mean\0302 \001(\001\022#\n\033"
  "flow_inter_arrival_time_std\0303 \001(\001\022#\n\033flo"
  "w_inter_arrival_time_max\0304 \001(\004\022#\n\033flow_i"
  "nter_arrival_time_min\0305 \001(\004\022(\n forward_i"
  "nter_arrival_time_total\0306 \001(\001\022\'\n\037forward"
  "_inter_arrival_time_mean\0307 \001(\001\022&\n\036forwar"
  "d_inter_arrival_time_std\0308 \001(\001\022&\n\036forwar"
  "d_inter_arrival_time_max\0309 \001(\004\022&\n\036forwar"
  "d_inter_arrival_time_min\030: \001(\004\022)\n!backwa"
  "rd_inter_arrival_time_total\030; \001(\001\022(\n bac"
  "kward_inter_arrival_time_mean\030< \001(\001\022\'\n\037b"
  "ackward_inter_arrival_time_std\030= \001(\001\022\'\n\037"
  "backward_inter_arrival_time_max\030> \001(\004\022\'\n"
  "\037backward_inter_arrival_time_min\030\? \001(\004\022\026"
  "\n\016fin_flag_count\030F \001(\r\022\026\n\016syn_flag_count"
  "\030G \001(\r\022\026\n\016rst_flag_count\030H \001(\r\022\026\n\016psh_fl"
  "ag_count\030I \001(\r\022\026\n\016ack_flag_count\030J \001(\r\022\026"
  "\n\016urg_flag_count\030K \001(\r\022\026\n\016cwe_flag_count"
  "\030L \001(\r\022\026\n\016ece_flag_count\030M \001(\r\022\031\n\021forwar"
  "d_psh_flags\030N \001(\r\022\032\n\022backward_psh_flags\030"
  "O \001(\r\022\031\n\021forward_urg_flags\030P \001(\r\022\032\n\022back"
  "ward_urg_flags\030Q \001(\r\022\035\n\025forward_header_l"
  "ength\030U \001(\001\022\036\n\026backward_header_length\030V "
  "\001(\001\022\"\n\032forward_average_bytes_bulk\030W \001(\001\022"
  "$\n\034forward_average_packets_bulk\030X \001(\001\022!\n"
  "\031forward_average_bulk_rate\030Y \001(\001\022#\n\033back"
  "ward_average_bytes_bulk\030Z \001(\001\022%\n\035backwar"
  "d_average_packets_bulk\030[ \001(\001\022\"\n\032backward"
  "_average_bulk_rate\030\\ \001(\001\022\035\n\025minimum_pack"
  "et_length\030_ \001(\004\022\035\n\025maximum_packet_length"
  "\030` \001(\004\022\032\n\022packet_length_mean\030a \001(\001\022\031\n\021pa"
  "cket_length_std\030b \001(\001\022\036\n\026packet_length_v"
  "ariance\030c \001(\001\022\023\n\013active_mean\030h \001(\001\022\021\n\tid"
  "le_mean\030i \001(\001\022\025\n\rddos_features\030d \003(\001\022\033\n\023"
  "ransomware_features\030e \003(\001\022\037\n\027general_att"
  "ack_features\030f \003(\001\022!\n\031internal_traffic_f"
  "eatures\030g \003(\001\022F\n\017custom_features\030n \003(\0132-"
  ".protobuf.NetworkFeatures.CustomFeatures"
  "Entry\022H\n\020feature_metadata\030o \003(\0132..protob"
  "uf.NetworkFeatures.FeatureMetadataEntry\032"
  "5\n\023CustomFeaturesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\001:\0028\001\0326\n\024FeatureMetadataEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\342\003\n\017GeoLo"
  "cationInfo\022\024\n\014country_name\030\001 \001(\t\022\024\n\014coun"
  "try_code\030\002 \001(\t\022\023\n\013region_name\030\003 \001(\t\022\021\n\tc"
  "ity_name\030\004 \001(\t\022\020\n\010latitude\030\005 \001(\001\022\021\n\tlong"
  "itude\030\006 \001(\001\022\020\n\010timezone\030\007 \001(\t\022\020\n\010isp_nam"
  "e\030\010 \001(\t\022\031\n\021organization_name\030\t \001(\t\022 \n\030au"
  "tonomous_system_number\030\n \001(\t\022\032\n\022is_anony"
  "mous_proxy\030\013 \001(\010\022\035\n\025is_satellite_provide"
  "r\030\014 \001(\010\022\030\n\020is_tor_exit_node\030\r \001(\010\022\032\n\022is_"
  "known_malicious\030\016 \001(\010\022;\n\014threat_level\030\017 "
  "\001(\0162%.protobuf.GeoLocationInfo.ThreatLev"
  "el\"G\n\013ThreatLevel\022\013\n\007UNKNOWN\020\000\022\007\n\003LOW\020\001\022"
  "\n\n\006MEDIUM\020\002\022\010\n\004HIGH\020\003\022\014\n\010CRITICAL\020\004\"\212\n\n\r"
  "GeoEnrichment\0223\n\020sniffer_node_geo\030\001 \001(\0132"
  "\031.protobuf.GeoLocationInfo\0220\n\rsource_ip_"
  "geo\030\002 \001(\0132\031.protobuf.GeoLocationInfo\0225\n\022"
  "destination_ip_geo\030\003 \001(\0132\031.protobuf.GeoL"
  "ocationInfo\022&\n\036source_destination_distan"
  "ce_km\030\n \001(\001\022\'\n\037source_destination_same_c"
  "ountry\030\013 \001(\010\022)\n!source_destination_same_"
  "continent\030\014 \001(\010\022\031\n\021distance_category\030\r \001"
  "(\t\022\"\n\032sniffer_source_distance_km\030\024 \001(\001\022#"
  "\n\033sniffer_source_same_country\030\025 \001(\010\022#\n\033s"
  "niffer_source_relationship\030\026 \001(\t\022\'\n\037snif"
  "fer_destination_distance_km\030\031 \001(\001\022(\n sni"
  "ffer_destination_same_country\030\032 \001(\010\022(\n s"
  "niffer_destination_relationship\030\033 \001(\t\022#\n"
  "\033threat_intelligence_matches\030\036 \003(\t\022\"\n\032th"
  "reat_intelligence_source\030\037 \001(\t\022 \n\030geogra"
  "phic_anomaly_score\030  \001(\002\022%\n\035suspicious_g"
  "eographic_pattern\030! \001(\010\022\035\n\025sniffer_node_"
  "enriched\030( \001(\010\022\032\n\022source_ip_enriched\030) \001"
  "(\010\022\037\n\027destination_ip_enriched\030* \001(\010\022\033\n\023e"
  "nrichment_complete\030+ \001(\010\022%\n\035public_ip_di"
  "scovery_attempted\030- \001(\010\022\033\n\023original_priv"
  "ate_ip\030. \001(\t\022\034\n\024discovered_public_ip\030/ \001"
  "(\t\022\034\n\024ip_discovery_service\0300 \001(\t\0225\n\021ip_d"
  "iscovery_time\0301 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\030\n\020enricher_version\0302 \001(\t\022\024\n\014geo"
  "ip_method\0303 \001(\t\022\036\n\026geoip_database_versio"
  "n\0304 \001(\t\022!\n\031fallback_coordinates_used\0305 \001"
  "(\010\022\037\n\027total_lookup_latency_ms\0306 \001(\002\022\022\n\nc"
  "ache_hits\0307 \001(\005\022\024\n\014cache_misses\0308 \001(\005\022\037\n"
  "\027enrichment_success_rate\0309 \001(\002\0228\n\024enrich"
  "ment_timestamp\030: \001(\0132\032.google.protobuf.T"
  "imestamp\"\273\002\n\nTimeWindow\0220\n\014window_start\030"
  "\001 \001(\0132\032.google.protobuf.Timestamp\022.\n\nwin"
  "dow_end\030\002 \001(\0132\032.google.protobuf.Timestam"
  "p\0222\n\017window_duration\030\003 \001(\0132\031.google.prot"
  "obuf.Duration\022\027\n\017sequence_number\030\004 \001(\004\0224"
  "\n\013window_type\030\005 \001(\0162\037.protobuf.TimeWindo"
  "w.WindowType\"H\n\nWindowType\022\013\n\007SLIDING\020\000\022"
  "\014\n\010TUMBLING\020\001\022\021\n\rSESSION_BASED\020\002\022\014\n\010ADAP"
  "TIVE\020\003\"\335\004\n\017FlowAggregation\022)\n\013time_windo"
  "w\030\001 \001(\0132\024.protobuf.TimeWindow\022\035\n\025total_f"
  "lows_in_window\030\002 \001(\004\022\037\n\027total_packets_in"
  "_window\030\003 \001(\004\022\035\n\025total_bytes_in_window\030\004"
  " \001(\004\022R\n\025protocol_distribution\030\005 \003(\01323.pr"
  "otobuf.FlowAggregation.ProtocolDistribut"
  "ionEntry\022J\n\021port_distribution\030\006 \003(\0132/.pr"
  "otobuf.FlowAggregation.PortDistributionE"
  "ntry\022P\n\024country_distribution\030\007 \003(\01322.pro"
  "tobuf.FlowAggregation.CountryDistributio"
  "nEntry\022\034\n\024window_anomaly_score\030\010 \001(\001\032;\n\031"
  "ProtocolDistributionEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\004:\0028\001\0327\n\025PortDistributionEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\004:\0028\001\032:\n\030Co"
  "untryDistributionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\004:\0028\001\"\232\004\n\017ModelPrediction\022\022\n\nmo"
  "del_name\030\001 \001(\t\022\025\n\rmodel_version\030\002 \001(\t\0227\n"
  "\nmodel_type\030\003 \001(\0162#.protobuf.ModelPredic"
  "tion.ModelType\022\030\n\020prediction_class\030\004 \001(\t"
  "\022\030\n\020confidence_score\030\005 \001(\001\022\033\n\023class_prob"
  "abilities\030\006 \003(\001\0228\n\024prediction_timestamp\030"
  "\007 \001(\0132\032.google.protobuf.Timestamp\0226\n\023pro"
  "cessing_duration\030\010 \001(\0132\031.google.protobuf"
  ".Duration\"\337\001\n\tModelType\022\031\n\025RANDOM_FOREST"
  "_GENERAL\020\000\022\021\n\rLIGHTGBM_DDOS\020\001\022\035\n\031NEURAL_"
  "NETWORK_RANSOMWARE\020\002\022\024\n\020ENSEMBLE_TRICAPA"
  "\020\003\022\037\n\033INTERNAL_TRAFFIC_CLASSIFIER\020\004\022\030\n\024T"
  "RANSFORMER_ADVANCED\020\005\022\026\n\022RANDOM_FOREST_D"
  "DOS\020\006\022\034\n\030RANDOM_FOREST_RANSOMWARE\020\007\"\300\005\n\021"
  "TricapaMLAnalysis\022;\n\030level1_general_dete"
  "ction\030\001 \001(\0132\031.protobuf.ModelPrediction\022\036"
  "\n\026attack_detected_level1\030\002 \001(\010\022\031\n\021level1"
  "_confidence\030\003 \001(\001\022@\n\035level2_context_clas"
  "sification\030\004 \001(\0132\031.protobuf.ModelPredict"
  "ion\022\027\n\017traffic_context\030\005 \001(\t\022A\n\036level2_s"
  "pecialized_predictions\030\t \003(\0132\031.protobuf."
  "ModelPrediction\022A\n\036level3_specialized_pr"
  "edictions\030\006 \003(\0132\031.protobuf.ModelPredicti"
  "on\022#\n\033final_threat_classification\030\007 \001(\t\022"
  "\033\n\023ensemble_confidence\030\010 \001(\001\022:\n\027total_an"
  "alysis_duration\030\n \001(\0132\031.google.protobuf."
  "Duration\022\030\n\020models_activated\030\013 \003(\t\022[\n\031fe"
  "ature_importance_scores\030\014 \003(\01328.protobuf"
  ".TricapaMLAnalysis.FeatureImportanceScor"
  "esEntry\022\035\n\025requires_human_review\030\r \001(\010\032>"
  "\n\034FeatureImportanceScoresEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\236\010\n\017DistributedNo"
  "de\022\017\n\007node_id\030\001 \001(\t\022\025\n\rnode_hostname\030\002 \001"
  "(\t\022\027\n\017node_ip_address\030\003 \001(\t\022\031\n\021physical_"
  "location\030\004 \001(\t\0225\n\tnode_role\030\005 \001(\0162\".prot"
  "obuf.DistributedNode.NodeRole\0229\n\013node_st"
  "atus\030\006 \001(\0162$.protobuf.DistributedNode.No"
  "deStatus\0222\n\016last_heartbeat\030\007 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\030\n\020operating_system"
  "\030\010 \001(\t\022\022\n\nos_version\030\t \001(\t\022\025\n\ragent_vers"
  "ion\030\n \001(\t\022\022\n\nprocess_id\030\013 \001(\005\022\024\n\014contain"
  "er_id\030\014 \001(\t\022\024\n\014cluster_name\030\r \001(\t\022\031\n\021cpu"
  "_usage_percent\030\017 \001(\002\022\027\n\017memory_usage_mb\030"
  "\020 \001(\002\022\032\n\022active_connections\030\021 \001(\005\022\023\n\013que"
  "ue_depth\030\022 \001(\005\022)\n\006uptime\030\023 \001(\0132\031.google."
  "protobuf.Duration\022J\n\021node_capabilities\030\024"
  " \003(\0132/.protobuf.DistributedNode.NodeCapa"
  "bilitiesEntry\022\033\n\023supported_protocols\030\025 \003"
  "(\t\022\035\n\025configuration_version\030\026 \001(\t\0327\n\025Nod"
  "eCapabilitiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\320\001\n\010NodeRole\022\022\n\016PACKET_SNIFFE"
  "R\020\000\022\025\n\021FEATURE_PROCESSOR\020\001\022\022\n\016GEOIP_ENRI"
  "CHER\020\002\022\017\n\013ML_ANALYZER\020\003\022\023\n\017THREAT_DETECT"
  "OR\020\004\022\027\n\023FIREWALL_CONTROLLER\020\005\022\023\n\017DATA_AG"
  "GREGATOR\020\006\022\030\n\024DASHBOARD_VISUALIZER\020\007\022\027\n\023"
  "CLUSTER_COORDINATOR\020\010\"`\n\nNodeStatus\022\n\n\006A"
  "CTIVE\020\000\022\014\n\010STARTING\020\001\022\014\n\010STOPPING\020\002\022\t\n\005E"
  "RROR\020\003\022\017\n\013MAINTENANCE\020\004\022\016\n\nOVERLOADED\020\005\""
  "\275\007\n\020PipelineTracking\022\023\n\013pipeline_id\030\001 \001("
  "\t\0222\n\016pipeline_start\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\022\032\n\022sniffer_process_id\030\003 \001("
  "\005\022\034\n\024processor_process_id\030\004 \001(\005\022\033\n\023enric"
  "her_process_id\030\005 \001(\005\022\033\n\023analyzer_process"
  "_id\030\006 \001(\005\022\033\n\023detector_process_id\030\007 \001(\005\022\035"
  "\n\025controller_process_id\030\010 \001(\005\0226\n\022packet_"
  "captured_at\030\n \001(\0132\032.google.protobuf.Time"
  "stamp\0229\n\025features_extracted_at\030\013 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\0225\n\021geoip_enrich"
  "ed_at\030\014 \001(\0132\032.google.protobuf.Timestamp\022"
  "2\n\016ml_analyzed_at\030\r \001(\0132\032.google.protobu"
  "f.Timestamp\0226\n\022threat_detected_at\030\016 \001(\0132"
  "\032.google.protobuf.Timestamp\0223\n\017action_ta"
  "ken_at\030\017 \001(\0132\032.google.protobuf.Timestamp"
  "\022;\n\030total_processing_latency\030\024 \001(\0132\031.goo"
  "gle.protobuf.Duration\022\033\n\023pipeline_hops_c"
  "ount\030\025 \001(\005\022\027\n\017processing_path\030\026 \001(\t\022\026\n\016r"
  "etry_attempts\030\031 \001(\005\022\031\n\021processing_errors"
  "\030\032 \003(\t\022\035\n\025requires_reprocessing\030\033 \001(\010\022M\n"
  "\022component_metadata\030\036 \003(\01321.protobuf.Pip"
  "elineTracking.ComponentMetadataEntry\022\027\n\017"
  "processing_tags\030\037 \003(\t\0328\n\026ComponentMetada"
  "taEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "\347\001\n\013RAGAnalysis\022\022\n\nquery_text\030\001 \001(\t\022\033\n\023r"
  "etrieved_knowledge\030\002 \003(\t\022\030\n\020relevance_sc"
  "ores\030\003 \003(\001\022\035\n\025ai_generated_analysis\030\004 \001("
  "\t\022\033\n\023analysis_confidence\030\005 \001(\001\022\031\n\021knowle"
  "dge_sources\030\006 \003(\t\0226\n\022analysis_timestamp\030"
  "\007 \001(\0132\032.google.protobuf.Timestamp\"\333\003\n\rHu"
  "manFeedback\022\023\n\013feedback_id\030\001 \001(\t\022\027\n\017anal"
  "yst_user_id\030\002 \001(\t\022\032\n\022event_reference_id\030"
  "\003 \001(\t\022;\n\rfeedback_type\030\004 \001(\0162$.protobuf."
  "HumanFeedback.FeedbackType\022\037\n\027confirmed_"
  "true_positive\030\005 \001(\010\022 \n\030confirmed_false_p"
  "ositive\030\006 \001(\010\022\033\n\023analyst_explanation\030\007 \001"
  "(\t\022\024\n\014analyst_tags\030\010 \003(\t\022!\n\031analyst_conf"
  "idence_rating\030\t \001(\005\0226\n\022feedback_timestam"
  "p\030\n \001(\0132\032.google.protobuf.Timestamp\"r\n\014F"
  "eedbackType\022\016\n\nVALIDATION\020\000\022\016\n\nCORRECTIO"
  "N\020\001\022\017\n\013ENHANCEMENT\020\002\022\031\n\025FALSE_POSITIVE_R"
  "EPORT\020\003\022\026\n\022ADDITIONAL_CONTEXT\020\004\"\243\003\n\024Huma"
  "nInTheLoopReview\022\037\n\027requires_human_analy"
  "sis\030\001 \001(\010\022F\n\017review_priority\030\002 \001(\0162-.pro"
  "tobuf.HumanInTheLoopReview.ReviewPriorit"
  "y\022\026\n\016review_reasons\030\003 \003(\t\0221\n\020analyst_fee"
  "dback\030\004 \001(\0132\027.protobuf.HumanFeedback\0227\n\023"
  "escalated_timestamp\030\005 \001(\0132\032.google.proto"
  "buf.Timestamp\0226\n\022reviewed_timestamp\030\006 \001("
  "\0132\032.google.protobuf.Timestamp\022\030\n\020review_"
  "completed\030\007 \001(\010\"L\n\016ReviewPriority\022\007\n\003LOW"
  "\020\000\022\n\n\006MEDIUM\020\001\022\010\n\004HIGH\020\002\022\014\n\010CRITICAL\020\003\022\r"
  "\n\tEMERGENCY\020\004\"\265\007\n\024NetworkSecurityEvent\022\020"
  "\n\010event_id\030\001 \001(\t\0223\n\017event_timestamp\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022\033\n\023origina"
  "ting_node_id\030\003 \001(\t\0223\n\020network_features\030\004"
  " \001(\0132\031.protobuf.NetworkFeatures\022/\n\016geo_e"
  "nrichment\030\005 \001(\0132\027.protobuf.GeoEnrichment"
  "\022)\n\013time_window\030\006 \001(\0132\024.protobuf.TimeWin"
  "dow\0220\n\013ml_analysis\030\007 \001(\0132\033.protobuf.Tric"
  "apaMLAnalysis\022\?\n\034additional_model_predic"
  "tions\030\010 \003(\0132\031.protobuf.ModelPrediction\0221"
  "\n\016capturing_node\030\t \001(\0132\031.protobuf.Distri"
  "butedNode\0225\n\021pipeline_tracking\030\n \001(\0132\032.p"
  "rotobuf.PipelineTracking\022+\n\014rag_analysis"
  "\030\013 \001(\0132\025.protobuf.RAGAnalysis\0224\n\014human_r"
  "eview\030\014 \001(\0132\036.protobuf.HumanInTheLoopRev"
  "iew\022\034\n\024overall_threat_score\030\017 \001(\001\022\034\n\024fin"
  "al_classification\030\020 \001(\t\022\027\n\017threat_catego"
  "ry\030\021 \001(\t\022\026\n\016correlation_id\030\024 \001(\t\022\031\n\021rela"
  "ted_event_ids\030\025 \003(\t\022\026\n\016event_chain_id\030\026 "
  "\001(\t\022\026\n\016schema_version\030\031 \001(\r\022K\n\017custom_me"
  "tadata\030\032 \003(\01322.protobuf.NetworkSecurityE"
  "vent.CustomMetadataEntry\022\022\n\nevent_tags\030\033"
  " \003(\t\022\030\n\020protobuf_version\030\034 \001(\t\0325\n\023Custom"
  "MetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"\325\002\n\nEventBatch\022.\n\006events\030\001 \003(\0132\036.p"
  "rotobuf.NetworkSecurityEvent\022\020\n\010batch_id"
  "\030\002 \001(\004\0224\n\020batch_created_at\030\003 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\022\n\nbatch_size\030\004 \001(\r"
  "\022<\n\017processing_mode\030\005 \001(\0162#.protobuf.Eve"
  "ntBatch.ProcessingMode\022\031\n\021batch_source_n"
  "ode\030\006 \001(\t\"b\n\016ProcessingMode\022\r\n\tREAL_TIME"
  "\020\000\022\022\n\016NEAR_REAL_TIME\020\001\022\024\n\020BATCH_PROCESSI"
  "NG\020\002\022\027\n\023HISTORICAL_ANALYSIS\020\003\"\223\005\n\023System"
  "Configuration\022\031\n\021enabled_ml_models\030\001 \003(\t"
  "\022Y\n\027threat_score_thresholds\030\002 \003(\01328.prot"
  "obuf.SystemConfiguration.ThreatScoreThre"
  "sholdsEntry\0223\n\020time_window_size\030\003 \001(\0132\031."
  "google.protobuf.Duration\022\035\n\025max_events_p"
  "er_window\030\004 \001(\r\0220\n\rcluster_nodes\030\005 \003(\0132\031"
  ".protobuf.DistributedNode\022U\n\025node_role_a"
  "ssignments\030\006 \003(\01326.protobuf.SystemConfig"
  "uration.NodeRoleAssignmentsEntry\022\032\n\022encr"
  "yption_enabled\030\007 \001(\010\022\033\n\023compression_enab"
  "led\030\010 \001(\010\022\034\n\024encryption_algorithm\030\t \001(\t\022"
  "\034\n\024rag_analysis_enabled\030\n \001(\010\022\032\n\022rag_mod"
  "el_endpoint\030\013 \001(\t\022\036\n\026knowledge_base_sour"
  "ces\030\014 \003(\t\032<\n\032ThreatScoreThresholdsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\032:\n\030NodeR"
  "oleAssignmentsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_network_5fsecurity_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_network_5fsecurity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_network_5fsecurity_2eproto = {
    false, false, 11859, descriptor_table_protodef_network_5fsecurity_2eproto,
    "network_security.proto",
    &descriptor_table_network_5fsecurity_2eproto_once, descriptor_table_network_5fsecurity_2eproto_deps, 2, 26,
    schemas, file_default_instances, TableStruct_network_5fsecurity_2eproto::offsets,
    file_level_metadata_network_5fsecurity_2eproto, file_level_enum_descriptors_network_5fsecurity_2eproto,
    file_level_service_descriptors_network_5fsecurity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_network_5fsecurity_2eproto_getter() {
  return &descriptor_table_network_5fsecurity_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_network_5fsecurity_2eproto(&descriptor_table_network_5fsecurity_2eproto);
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoLocationInfo_ThreatLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[0];
}
bool GeoLocationInfo_ThreatLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::UNKNOWN;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::LOW;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::MEDIUM;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::HIGH;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::CRITICAL;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::ThreatLevel_MIN;
constexpr GeoLocationInfo_ThreatLevel GeoLocationInfo::ThreatLevel_MAX;
constexpr int GeoLocationInfo::ThreatLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeWindow_WindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[1];
}
bool TimeWindow_WindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TimeWindow_WindowType TimeWindow::SLIDING;
constexpr TimeWindow_WindowType TimeWindow::TUMBLING;
constexpr TimeWindow_WindowType TimeWindow::SESSION_BASED;
constexpr TimeWindow_WindowType TimeWindow::ADAPTIVE;
constexpr TimeWindow_WindowType TimeWindow::WindowType_MIN;
constexpr TimeWindow_WindowType TimeWindow::WindowType_MAX;
constexpr int TimeWindow::WindowType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelPrediction_ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[2];
}
bool ModelPrediction_ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ModelPrediction_ModelType ModelPrediction::RANDOM_FOREST_GENERAL;
constexpr ModelPrediction_ModelType ModelPrediction::LIGHTGBM_DDOS;
constexpr ModelPrediction_ModelType ModelPrediction::NEURAL_NETWORK_RANSOMWARE;
constexpr ModelPrediction_ModelType ModelPrediction::ENSEMBLE_TRICAPA;
constexpr ModelPrediction_ModelType ModelPrediction::INTERNAL_TRAFFIC_CLASSIFIER;
constexpr ModelPrediction_ModelType ModelPrediction::TRANSFORMER_ADVANCED;
constexpr ModelPrediction_ModelType ModelPrediction::RANDOM_FOREST_DDOS;
constexpr ModelPrediction_ModelType ModelPrediction::RANDOM_FOREST_RANSOMWARE;
constexpr ModelPrediction_ModelType ModelPrediction::ModelType_MIN;
constexpr ModelPrediction_ModelType ModelPrediction::ModelType_MAX;
constexpr int ModelPrediction::ModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributedNode_NodeRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[3];
}
bool DistributedNode_NodeRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DistributedNode_NodeRole DistributedNode::PACKET_SNIFFER;
constexpr DistributedNode_NodeRole DistributedNode::FEATURE_PROCESSOR;
constexpr DistributedNode_NodeRole DistributedNode::GEOIP_ENRICHER;
constexpr DistributedNode_NodeRole DistributedNode::ML_ANALYZER;
constexpr DistributedNode_NodeRole DistributedNode::THREAT_DETECTOR;
constexpr DistributedNode_NodeRole DistributedNode::FIREWALL_CONTROLLER;
constexpr DistributedNode_NodeRole DistributedNode::DATA_AGGREGATOR;
constexpr DistributedNode_NodeRole DistributedNode::DASHBOARD_VISUALIZER;
constexpr DistributedNode_NodeRole DistributedNode::CLUSTER_COORDINATOR;
constexpr DistributedNode_NodeRole DistributedNode::NodeRole_MIN;
constexpr DistributedNode_NodeRole DistributedNode::NodeRole_MAX;
constexpr int DistributedNode::NodeRole_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributedNode_NodeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[4];
}
bool DistributedNode_NodeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DistributedNode_NodeStatus DistributedNode::ACTIVE;
constexpr DistributedNode_NodeStatus DistributedNode::STARTING;
constexpr DistributedNode_NodeStatus DistributedNode::STOPPING;
constexpr DistributedNode_NodeStatus DistributedNode::ERROR;
constexpr DistributedNode_NodeStatus DistributedNode::MAINTENANCE;
constexpr DistributedNode_NodeStatus DistributedNode::OVERLOADED;
constexpr DistributedNode_NodeStatus DistributedNode::NodeStatus_MIN;
constexpr DistributedNode_NodeStatus DistributedNode::NodeStatus_MAX;
constexpr int DistributedNode::NodeStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HumanFeedback_FeedbackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[5];
}
bool HumanFeedback_FeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HumanFeedback_FeedbackType HumanFeedback::VALIDATION;
constexpr HumanFeedback_FeedbackType HumanFeedback::CORRECTION;
constexpr HumanFeedback_FeedbackType HumanFeedback::ENHANCEMENT;
constexpr HumanFeedback_FeedbackType HumanFeedback::FALSE_POSITIVE_REPORT;
constexpr HumanFeedback_FeedbackType HumanFeedback::ADDITIONAL_CONTEXT;
constexpr HumanFeedback_FeedbackType HumanFeedback::FeedbackType_MIN;
constexpr HumanFeedback_FeedbackType HumanFeedback::FeedbackType_MAX;
constexpr int HumanFeedback::FeedbackType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HumanInTheLoopReview_ReviewPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[6];
}
bool HumanInTheLoopReview_ReviewPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::LOW;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::MEDIUM;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::HIGH;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::CRITICAL;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::EMERGENCY;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::ReviewPriority_MIN;
constexpr HumanInTheLoopReview_ReviewPriority HumanInTheLoopReview::ReviewPriority_MAX;
constexpr int HumanInTheLoopReview::ReviewPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventBatch_ProcessingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_network_5fsecurity_2eproto);
  return file_level_enum_descriptors_network_5fsecurity_2eproto[7];
}
bool EventBatch_ProcessingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EventBatch_ProcessingMode EventBatch::REAL_TIME;
constexpr EventBatch_ProcessingMode EventBatch::NEAR_REAL_TIME;
constexpr EventBatch_ProcessingMode EventBatch::BATCH_PROCESSING;
constexpr EventBatch_ProcessingMode EventBatch::HISTORICAL_ANALYSIS;
constexpr EventBatch_ProcessingMode EventBatch::ProcessingMode_MIN;
constexpr EventBatch_ProcessingMode EventBatch::ProcessingMode_MAX;
constexpr int EventBatch::ProcessingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

NetworkFeatures_CustomFeaturesEntry_DoNotUse::NetworkFeatures_CustomFeaturesEntry_DoNotUse() {}
NetworkFeatures_CustomFeaturesEntry_DoNotUse::NetworkFeatures_CustomFeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NetworkFeatures_CustomFeaturesEntry_DoNotUse::MergeFrom(const NetworkFeatures_CustomFeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NetworkFeatures_CustomFeaturesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[0]);
}

// ===================================================================

NetworkFeatures_FeatureMetadataEntry_DoNotUse::NetworkFeatures_FeatureMetadataEntry_DoNotUse() {}
NetworkFeatures_FeatureMetadataEntry_DoNotUse::NetworkFeatures_FeatureMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NetworkFeatures_FeatureMetadataEntry_DoNotUse::MergeFrom(const NetworkFeatures_FeatureMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NetworkFeatures_FeatureMetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[1]);
}

// ===================================================================

class NetworkFeatures::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& flow_start_time(const NetworkFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& flow_duration(const NetworkFeatures* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NetworkFeatures::_Internal::flow_start_time(const NetworkFeatures* msg) {
  return *msg->_impl_.flow_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
NetworkFeatures::_Internal::flow_duration(const NetworkFeatures* msg) {
  return *msg->_impl_.flow_duration_;
}
void NetworkFeatures::clear_flow_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.flow_start_time_ != nullptr) {
    delete _impl_.flow_start_time_;
  }
  _impl_.flow_start_time_ = nullptr;
}
void NetworkFeatures::clear_flow_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.flow_duration_ != nullptr) {
    delete _impl_.flow_duration_;
  }
  _impl_.flow_duration_ = nullptr;
}
NetworkFeatures::NetworkFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &NetworkFeatures::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.NetworkFeatures)
}
NetworkFeatures::NetworkFeatures(const NetworkFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ddos_features_){from._impl_.ddos_features_}
    , decltype(_impl_.ransomware_features_){from._impl_.ransomware_features_}
    , decltype(_impl_.general_attack_features_){from._impl_.general_attack_features_}
    , decltype(_impl_.internal_traffic_features_){from._impl_.internal_traffic_features_}
    , /*decltype(_impl_.custom_features_)*/{}
    , /*decltype(_impl_.feature_metadata_)*/{}
    , decltype(_impl_.source_ip_){}
    , decltype(_impl_.destination_ip_){}
    , decltype(_impl_.protocol_name_){}
    , decltype(_impl_.flow_start_time_){nullptr}
    , decltype(_impl_.flow_duration_){nullptr}
    , decltype(_impl_.source_port_){}
    , decltype(_impl_.destination_port_){}
    , decltype(_impl_.flow_duration_microseconds_){}
    , decltype(_impl_.total_forward_packets_){}
    , decltype(_impl_.total_backward_packets_){}
    , decltype(_impl_.total_forward_bytes_){}
    , decltype(_impl_.total_backward_bytes_){}
    , decltype(_impl_.forward_packet_length_max_){}
    , decltype(_impl_.forward_packet_length_min_){}
    , decltype(_impl_.forward_packet_length_mean_){}
    , decltype(_impl_.forward_packet_length_std_){}
    , decltype(_impl_.backward_packet_length_max_){}
    , decltype(_impl_.backward_packet_length_min_){}
    , decltype(_impl_.backward_packet_length_mean_){}
    , decltype(_impl_.backward_packet_length_std_){}
    , decltype(_impl_.protocol_number_){}
    , decltype(_impl_.fin_flag_count_){}
    , decltype(_impl_.flow_bytes_per_second_){}
    , decltype(_impl_.flow_packets_per_second_){}
    , decltype(_impl_.forward_packets_per_second_){}
    , decltype(_impl_.backward_packets_per_second_){}
    , decltype(_impl_.download_upload_ratio_){}
    , decltype(_impl_.average_packet_size_){}
    , decltype(_impl_.average_forward_segment_size_){}
    , decltype(_impl_.average_backward_segment_size_){}
    , decltype(_impl_.flow_inter_arrival_time_mean_){}
    , decltype(_impl_.flow_inter_arrival_time_std_){}
    , decltype(_impl_.flow_inter_arrival_time_max_){}
    , decltype(_impl_.flow_inter_arrival_time_min_){}
    , decltype(_impl_.forward_inter_arrival_time_total_){}
    , decltype(_impl_.forward_inter_arrival_time_mean_){}
    , decltype(_impl_.forward_inter_arrival_time_std_){}
    , decltype(_impl_.forward_inter_arrival_time_max_){}
    , decltype(_impl_.forward_inter_arrival_time_min_){}
    , decltype(_impl_.backward_inter_arrival_time_total_){}
    , decltype(_impl_.backward_inter_arrival_time_mean_){}
    , decltype(_impl_.backward_inter_arrival_time_std_){}
    , decltype(_impl_.backward_inter_arrival_time_max_){}
    , decltype(_impl_.backward_inter_arrival_time_min_){}
    , decltype(_impl_.syn_flag_count_){}
    , decltype(_impl_.rst_flag_count_){}
    , decltype(_impl_.psh_flag_count_){}
    , decltype(_impl_.ack_flag_count_){}
    , decltype(_impl_.urg_flag_count_){}
    , decltype(_impl_.cwe_flag_count_){}
    , decltype(_impl_.ece_flag_count_){}
    , decltype(_impl_.forward_psh_flags_){}
    , decltype(_impl_.backward_psh_flags_){}
    , decltype(_impl_.forward_urg_flags_){}
    , decltype(_impl_.forward_header_length_){}
    , decltype(_impl_.backward_header_length_){}
    , decltype(_impl_.forward_average_bytes_bulk_){}
    , decltype(_impl_.forward_average_packets_bulk_){}
    , decltype(_impl_.forward_average_bulk_rate_){}
    , decltype(_impl_.backward_average_bytes_bulk_){}
    , decltype(_impl_.backward_average_packets_bulk_){}
    , decltype(_impl_.backward_average_bulk_rate_){}
    , decltype(_impl_.minimum_packet_length_){}
    , decltype(_impl_.maximum_packet_length_){}
    , decltype(_impl_.packet_length_mean_){}
    , decltype(_impl_.packet_length_std_){}
    , decltype(_impl_.packet_length_variance_){}
    , decltype(_impl_.active_mean_){}
    , decltype(_impl_.idle_mean_){}
    , decltype(_impl_.backward_urg_flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.custom_features_.MergeFrom(from._impl_.custom_features_);
  _this->_impl_.feature_metadata_.MergeFrom(from._impl_.feature_metadata_);
  _impl_.source_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_ip().empty()) {
    _this->_impl_.source_ip_.Set(from._internal_source_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_ip().empty()) {
    _this->_impl_.destination_ip_.Set(from._internal_destination_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol_name().empty()) {
    _this->_impl_.protocol_name_.Set(from._internal_protocol_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flow_start_time()) {
    _this->_impl_.flow_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.flow_start_time_);
  }
  if (from._internal_has_flow_duration()) {
    _this->_impl_.flow_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.flow_duration_);
  }
  ::memcpy(&_impl_.source_port_, &from._impl_.source_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.backward_urg_flags_) -
    reinterpret_cast<char*>(&_impl_.source_port_)) + sizeof(_impl_.backward_urg_flags_));
  // @@protoc_insertion_point(copy_constructor:protobuf.NetworkFeatures)
}

inline void NetworkFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ddos_features_){arena}
    , decltype(_impl_.ransomware_features_){arena}
    , decltype(_impl_.general_attack_features_){arena}
    , decltype(_impl_.internal_traffic_features_){arena}
    , /*decltype(_impl_.custom_features_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.feature_metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.source_ip_){}
    , decltype(_impl_.destination_ip_){}
    , decltype(_impl_.protocol_name_){}
    , decltype(_impl_.flow_start_time_){nullptr}
    , decltype(_impl_.flow_duration_){nullptr}
    , decltype(_impl_.source_port_){0u}
    , decltype(_impl_.destination_port_){0u}
    , decltype(_impl_.flow_duration_microseconds_){uint64_t{0u}}
    , decltype(_impl_.total_forward_packets_){uint64_t{0u}}
    , decltype(_impl_.total_backward_packets_){uint64_t{0u}}
    , decltype(_impl_.total_forward_bytes_){uint64_t{0u}}
    , decltype(_impl_.total_backward_bytes_){uint64_t{0u}}
    , decltype(_impl_.forward_packet_length_max_){uint64_t{0u}}
    , decltype(_impl_.forward_packet_length_min_){uint64_t{0u}}
    , decltype(_impl_.forward_packet_length_mean_){0}
    , decltype(_impl_.forward_packet_length_std_){0}
    , decltype(_impl_.backward_packet_length_max_){uint64_t{0u}}
    , decltype(_impl_.backward_packet_length_min_){uint64_t{0u}}
    , decltype(_impl_.backward_packet_length_mean_){0}
    , decltype(_impl_.backward_packet_length_std_){0}
    , decltype(_impl_.protocol_number_){0u}
    , decltype(_impl_.fin_flag_count_){0u}
    , decltype(_impl_.flow_bytes_per_second_){0}
    , decltype(_impl_.flow_packets_per_second_){0}
    , decltype(_impl_.forward_packets_per_second_){0}
    , decltype(_impl_.backward_packets_per_second_){0}
    , decltype(_impl_.download_upload_ratio_){0}
    , decltype(_impl_.average_packet_size_){0}
    , decltype(_impl_.average_forward_segment_size_){0}
    , decltype(_impl_.average_backward_segment_size_){0}
    , decltype(_impl_.flow_inter_arrival_time_mean_){0}
    , decltype(_impl_.flow_inter_arrival_time_std_){0}
    , decltype(_impl_.flow_inter_arrival_time_max_){uint64_t{0u}}
    , decltype(_impl_.flow_inter_arrival_time_min_){uint64_t{0u}}
    , decltype(_impl_.forward_inter_arrival_time_total_){0}
    , decltype(_impl_.forward_inter_arrival_time_mean_){0}
    , decltype(_impl_.forward_inter_arrival_time_std_){0}
    , decltype(_impl_.forward_inter_arrival_time_max_){uint64_t{0u}}
    , decltype(_impl_.forward_inter_arrival_time_min_){uint64_t{0u}}
    , decltype(_impl_.backward_inter_arrival_time_total_){0}
    , decltype(_impl_.backward_inter_arrival_time_mean_){0}
    , decltype(_impl_.backward_inter_arrival_time_std_){0}
    , decltype(_impl_.backward_inter_arrival_time_max_){uint64_t{0u}}
    , decltype(_impl_.backward_inter_arrival_time_min_){uint64_t{0u}}
    , decltype(_impl_.syn_flag_count_){0u}
    , decltype(_impl_.rst_flag_count_){0u}
    , decltype(_impl_.psh_flag_count_){0u}
    , decltype(_impl_.ack_flag_count_){0u}
    , decltype(_impl_.urg_flag_count_){0u}
    , decltype(_impl_.cwe_flag_count_){0u}
    , decltype(_impl_.ece_flag_count_){0u}
    , decltype(_impl_.forward_psh_flags_){0u}
    , decltype(_impl_.backward_psh_flags_){0u}
    , decltype(_impl_.forward_urg_flags_){0u}
    , decltype(_impl_.forward_header_length_){0}
    , decltype(_impl_.backward_header_length_){0}
    , decltype(_impl_.forward_average_bytes_bulk_){0}
    , decltype(_impl_.forward_average_packets_bulk_){0}
    , decltype(_impl_.forward_average_bulk_rate_){0}
    , decltype(_impl_.backward_average_bytes_bulk_){0}
    , decltype(_impl_.backward_average_packets_bulk_){0}
    , decltype(_impl_.backward_average_bulk_rate_){0}
    , decltype(_impl_.minimum_packet_length_){uint64_t{0u}}
    , decltype(_impl_.maximum_packet_length_){uint64_t{0u}}
    , decltype(_impl_.packet_length_mean_){0}
    , decltype(_impl_.packet_length_std_){0}
    , decltype(_impl_.packet_length_variance_){0}
    , decltype(_impl_.active_mean_){0}
    , decltype(_impl_.idle_mean_){0}
    , decltype(_impl_.backward_urg_flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkFeatures::~NetworkFeatures() {
  // @@protoc_insertion_point(destructor:protobuf.NetworkFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void NetworkFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ddos_features_.~RepeatedField();
  _impl_.ransomware_features_.~RepeatedField();
  _impl_.general_attack_features_.~RepeatedField();
  _impl_.internal_traffic_features_.~RepeatedField();
  _impl_.custom_features_.Destruct();
  _impl_.custom_features_.~MapField();
  _impl_.feature_metadata_.Destruct();
  _impl_.feature_metadata_.~MapField();
  _impl_.source_ip_.Destroy();
  _impl_.destination_ip_.Destroy();
  _impl_.protocol_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flow_start_time_;
  if (this != internal_default_instance()) delete _impl_.flow_duration_;
}

void NetworkFeatures::ArenaDtor(void* object) {
  NetworkFeatures* _this = reinterpret_cast< NetworkFeatures* >(object);
  _this->_impl_.custom_features_.Destruct();
  _this->_impl_.feature_metadata_.Destruct();
}
void NetworkFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.NetworkFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ddos_features_.Clear();
  _impl_.ransomware_features_.Clear();
  _impl_.general_attack_features_.Clear();
  _impl_.internal_traffic_features_.Clear();
  _impl_.custom_features_.Clear();
  _impl_.feature_metadata_.Clear();
  _impl_.source_ip_.ClearToEmpty();
  _impl_.destination_ip_.ClearToEmpty();
  _impl_.protocol_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flow_start_time_ != nullptr) {
    delete _impl_.flow_start_time_;
  }
  _impl_.flow_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.flow_duration_ != nullptr) {
    delete _impl_.flow_duration_;
  }
  _impl_.flow_duration_ = nullptr;
  ::memset(&_impl_.source_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.backward_urg_flags_) -
      reinterpret_cast<char*>(&_impl_.source_port_)) + sizeof(_impl_.backward_urg_flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkFeatures.source_ip"));
        } else
          goto handle_unusual;
        continue;
      // string destination_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkFeatures.destination_ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 source_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.source_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 destination_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.destination_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 protocol_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.protocol_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_protocol_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkFeatures.protocol_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp flow_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration flow_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 flow_duration_microseconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.flow_duration_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_forward_packets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.total_forward_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_backward_packets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.total_backward_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_forward_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.total_forward_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_backward_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.total_backward_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 forward_packet_length_max = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.forward_packet_length_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 forward_packet_length_min = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.forward_packet_length_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double forward_packet_length_mean = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.forward_packet_length_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_packet_length_std = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.forward_packet_length_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 backward_packet_length_max = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.backward_packet_length_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 backward_packet_length_min = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.backward_packet_length_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double backward_packet_length_mean = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.backward_packet_length_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_packet_length_std = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.backward_packet_length_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double flow_bytes_per_second = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.flow_bytes_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double flow_packets_per_second = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.flow_packets_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_packets_per_second = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.forward_packets_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_packets_per_second = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.backward_packets_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double download_upload_ratio = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.download_upload_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_packet_size = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.average_packet_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_forward_segment_size = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.average_forward_segment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_backward_segment_size = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.average_backward_segment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double flow_inter_arrival_time_mean = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.flow_inter_arrival_time_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double flow_inter_arrival_time_std = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.flow_inter_arrival_time_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 flow_inter_arrival_time_max = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.flow_inter_arrival_time_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 flow_inter_arrival_time_min = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.flow_inter_arrival_time_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double forward_inter_arrival_time_total = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.forward_inter_arrival_time_total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_inter_arrival_time_mean = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.forward_inter_arrival_time_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_inter_arrival_time_std = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.forward_inter_arrival_time_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 forward_inter_arrival_time_max = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.forward_inter_arrival_time_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 forward_inter_arrival_time_min = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.forward_inter_arrival_time_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double backward_inter_arrival_time_total = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.backward_inter_arrival_time_total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_inter_arrival_time_mean = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.backward_inter_arrival_time_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_inter_arrival_time_std = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.backward_inter_arrival_time_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 backward_inter_arrival_time_max = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.backward_inter_arrival_time_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 backward_inter_arrival_time_min = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.backward_inter_arrival_time_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fin_flag_count = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.fin_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 syn_flag_count = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.syn_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rst_flag_count = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rst_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 psh_flag_count = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.psh_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ack_flag_count = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ack_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 urg_flag_count = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.urg_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cwe_flag_count = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.cwe_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ece_flag_count = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.ece_flag_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 forward_psh_flags = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.forward_psh_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 backward_psh_flags = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.backward_psh_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 forward_urg_flags = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.forward_urg_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 backward_urg_flags = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.backward_urg_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double forward_header_length = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.forward_header_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_header_length = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.backward_header_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_average_bytes_bulk = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.forward_average_bytes_bulk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_average_packets_bulk = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.forward_average_packets_bulk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double forward_average_bulk_rate = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.forward_average_bulk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_average_bytes_bulk = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.backward_average_bytes_bulk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_average_packets_bulk = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.backward_average_packets_bulk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double backward_average_bulk_rate = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.backward_average_bulk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 minimum_packet_length = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.minimum_packet_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 maximum_packet_length = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.maximum_packet_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double packet_length_mean = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.packet_length_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double packet_length_std = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.packet_length_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double packet_length_variance = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.packet_length_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double ddos_features = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ddos_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_ddos_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double ransomware_features = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ransomware_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_ransomware_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double general_attack_features = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_general_attack_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_general_attack_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double internal_traffic_features = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_internal_traffic_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_internal_traffic_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double active_mean = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.active_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double idle_mean = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.idle_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, double> custom_features = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.custom_features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<882>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> feature_metadata = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.feature_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<890>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.NetworkFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_ip = 1;
  if (!this->_internal_source_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_ip().data(), static_cast<int>(this->_internal_source_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.source_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_ip(), target);
  }

  // string destination_ip = 2;
  if (!this->_internal_destination_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_ip().data(), static_cast<int>(this->_internal_destination_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.destination_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_ip(), target);
  }

  // uint32 source_port = 3;
  if (this->_internal_source_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_port(), target);
  }

  // uint32 destination_port = 4;
  if (this->_internal_destination_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_destination_port(), target);
  }

  // uint32 protocol_number = 5;
  if (this->_internal_protocol_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_protocol_number(), target);
  }

  // string protocol_name = 6;
  if (!this->_internal_protocol_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_name().data(), static_cast<int>(this->_internal_protocol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkFeatures.protocol_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_protocol_name(), target);
  }

  // .google.protobuf.Timestamp flow_start_time = 7;
  if (this->_internal_has_flow_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::flow_start_time(this),
        _Internal::flow_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration flow_duration = 8;
  if (this->_internal_has_flow_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::flow_duration(this),
        _Internal::flow_duration(this).GetCachedSize(), target, stream);
  }

  // uint64 flow_duration_microseconds = 9;
  if (this->_internal_flow_duration_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_flow_duration_microseconds(), target);
  }

  // uint64 total_forward_packets = 10;
  if (this->_internal_total_forward_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_forward_packets(), target);
  }

  // uint64 total_backward_packets = 11;
  if (this->_internal_total_backward_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_total_backward_packets(), target);
  }

  // uint64 total_forward_bytes = 12;
  if (this->_internal_total_forward_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_total_forward_bytes(), target);
  }

  // uint64 total_backward_bytes = 13;
  if (this->_internal_total_backward_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_total_backward_bytes(), target);
  }

  // uint64 forward_packet_length_max = 20;
  if (this->_internal_forward_packet_length_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_forward_packet_length_max(), target);
  }

  // uint64 forward_packet_length_min = 21;
  if (this->_internal_forward_packet_length_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_forward_packet_length_min(), target);
  }

  // double forward_packet_length_mean = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_mean = this->_internal_forward_packet_length_mean();
  uint64_t raw_forward_packet_length_mean;
  memcpy(&raw_forward_packet_length_mean, &tmp_forward_packet_length_mean, sizeof(tmp_forward_packet_length_mean));
  if (raw_forward_packet_length_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_forward_packet_length_mean(), target);
  }

  // double forward_packet_length_std = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_std = this->_internal_forward_packet_length_std();
  uint64_t raw_forward_packet_length_std;
  memcpy(&raw_forward_packet_length_std, &tmp_forward_packet_length_std, sizeof(tmp_forward_packet_length_std));
  if (raw_forward_packet_length_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_forward_packet_length_std(), target);
  }

  // uint64 backward_packet_length_max = 30;
  if (this->_internal_backward_packet_length_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_backward_packet_length_max(), target);
  }

  // uint64 backward_packet_length_min = 31;
  if (this->_internal_backward_packet_length_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_backward_packet_length_min(), target);
  }

  // double backward_packet_length_mean = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_mean = this->_internal_backward_packet_length_mean();
  uint64_t raw_backward_packet_length_mean;
  memcpy(&raw_backward_packet_length_mean, &tmp_backward_packet_length_mean, sizeof(tmp_backward_packet_length_mean));
  if (raw_backward_packet_length_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_backward_packet_length_mean(), target);
  }

  // double backward_packet_length_std = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_std = this->_internal_backward_packet_length_std();
  uint64_t raw_backward_packet_length_std;
  memcpy(&raw_backward_packet_length_std, &tmp_backward_packet_length_std, sizeof(tmp_backward_packet_length_std));
  if (raw_backward_packet_length_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_backward_packet_length_std(), target);
  }

  // double flow_bytes_per_second = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_bytes_per_second = this->_internal_flow_bytes_per_second();
  uint64_t raw_flow_bytes_per_second;
  memcpy(&raw_flow_bytes_per_second, &tmp_flow_bytes_per_second, sizeof(tmp_flow_bytes_per_second));
  if (raw_flow_bytes_per_second != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(40, this->_internal_flow_bytes_per_second(), target);
  }

  // double flow_packets_per_second = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_packets_per_second = this->_internal_flow_packets_per_second();
  uint64_t raw_flow_packets_per_second;
  memcpy(&raw_flow_packets_per_second, &tmp_flow_packets_per_second, sizeof(tmp_flow_packets_per_second));
  if (raw_flow_packets_per_second != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_flow_packets_per_second(), target);
  }

  // double forward_packets_per_second = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packets_per_second = this->_internal_forward_packets_per_second();
  uint64_t raw_forward_packets_per_second;
  memcpy(&raw_forward_packets_per_second, &tmp_forward_packets_per_second, sizeof(tmp_forward_packets_per_second));
  if (raw_forward_packets_per_second != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_forward_packets_per_second(), target);
  }

  // double backward_packets_per_second = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packets_per_second = this->_internal_backward_packets_per_second();
  uint64_t raw_backward_packets_per_second;
  memcpy(&raw_backward_packets_per_second, &tmp_backward_packets_per_second, sizeof(tmp_backward_packets_per_second));
  if (raw_backward_packets_per_second != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(43, this->_internal_backward_packets_per_second(), target);
  }

  // double download_upload_ratio = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download_upload_ratio = this->_internal_download_upload_ratio();
  uint64_t raw_download_upload_ratio;
  memcpy(&raw_download_upload_ratio, &tmp_download_upload_ratio, sizeof(tmp_download_upload_ratio));
  if (raw_download_upload_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(44, this->_internal_download_upload_ratio(), target);
  }

  // double average_packet_size = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_packet_size = this->_internal_average_packet_size();
  uint64_t raw_average_packet_size;
  memcpy(&raw_average_packet_size, &tmp_average_packet_size, sizeof(tmp_average_packet_size));
  if (raw_average_packet_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(45, this->_internal_average_packet_size(), target);
  }

  // double average_forward_segment_size = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_forward_segment_size = this->_internal_average_forward_segment_size();
  uint64_t raw_average_forward_segment_size;
  memcpy(&raw_average_forward_segment_size, &tmp_average_forward_segment_size, sizeof(tmp_average_forward_segment_size));
  if (raw_average_forward_segment_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(46, this->_internal_average_forward_segment_size(), target);
  }

  // double average_backward_segment_size = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_backward_segment_size = this->_internal_average_backward_segment_size();
  uint64_t raw_average_backward_segment_size;
  memcpy(&raw_average_backward_segment_size, &tmp_average_backward_segment_size, sizeof(tmp_average_backward_segment_size));
  if (raw_average_backward_segment_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(47, this->_internal_average_backward_segment_size(), target);
  }

  // double flow_inter_arrival_time_mean = 50;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_mean = this->_internal_flow_inter_arrival_time_mean();
  uint64_t raw_flow_inter_arrival_time_mean;
  memcpy(&raw_flow_inter_arrival_time_mean, &tmp_flow_inter_arrival_time_mean, sizeof(tmp_flow_inter_arrival_time_mean));
  if (raw_flow_inter_arrival_time_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(50, this->_internal_flow_inter_arrival_time_mean(), target);
  }

  // double flow_inter_arrival_time_std = 51;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_std = this->_internal_flow_inter_arrival_time_std();
  uint64_t raw_flow_inter_arrival_time_std;
  memcpy(&raw_flow_inter_arrival_time_std, &tmp_flow_inter_arrival_time_std, sizeof(tmp_flow_inter_arrival_time_std));
  if (raw_flow_inter_arrival_time_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(51, this->_internal_flow_inter_arrival_time_std(), target);
  }

  // uint64 flow_inter_arrival_time_max = 52;
  if (this->_internal_flow_inter_arrival_time_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(52, this->_internal_flow_inter_arrival_time_max(), target);
  }

  // uint64 flow_inter_arrival_time_min = 53;
  if (this->_internal_flow_inter_arrival_time_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(53, this->_internal_flow_inter_arrival_time_min(), target);
  }

  // double forward_inter_arrival_time_total = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_total = this->_internal_forward_inter_arrival_time_total();
  uint64_t raw_forward_inter_arrival_time_total;
  memcpy(&raw_forward_inter_arrival_time_total, &tmp_forward_inter_arrival_time_total, sizeof(tmp_forward_inter_arrival_time_total));
  if (raw_forward_inter_arrival_time_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(54, this->_internal_forward_inter_arrival_time_total(), target);
  }

  // double forward_inter_arrival_time_mean = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_mean = this->_internal_forward_inter_arrival_time_mean();
  uint64_t raw_forward_inter_arrival_time_mean;
  memcpy(&raw_forward_inter_arrival_time_mean, &tmp_forward_inter_arrival_time_mean, sizeof(tmp_forward_inter_arrival_time_mean));
  if (raw_forward_inter_arrival_time_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(55, this->_internal_forward_inter_arrival_time_mean(), target);
  }

  // double forward_inter_arrival_time_std = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_std = this->_internal_forward_inter_arrival_time_std();
  uint64_t raw_forward_inter_arrival_time_std;
  memcpy(&raw_forward_inter_arrival_time_std, &tmp_forward_inter_arrival_time_std, sizeof(tmp_forward_inter_arrival_time_std));
  if (raw_forward_inter_arrival_time_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_forward_inter_arrival_time_std(), target);
  }

  // uint64 forward_inter_arrival_time_max = 57;
  if (this->_internal_forward_inter_arrival_time_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(57, this->_internal_forward_inter_arrival_time_max(), target);
  }

  // uint64 forward_inter_arrival_time_min = 58;
  if (this->_internal_forward_inter_arrival_time_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(58, this->_internal_forward_inter_arrival_time_min(), target);
  }

  // double backward_inter_arrival_time_total = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_total = this->_internal_backward_inter_arrival_time_total();
  uint64_t raw_backward_inter_arrival_time_total;
  memcpy(&raw_backward_inter_arrival_time_total, &tmp_backward_inter_arrival_time_total, sizeof(tmp_backward_inter_arrival_time_total));
  if (raw_backward_inter_arrival_time_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(59, this->_internal_backward_inter_arrival_time_total(), target);
  }

  // double backward_inter_arrival_time_mean = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_mean = this->_internal_backward_inter_arrival_time_mean();
  uint64_t raw_backward_inter_arrival_time_mean;
  memcpy(&raw_backward_inter_arrival_time_mean, &tmp_backward_inter_arrival_time_mean, sizeof(tmp_backward_inter_arrival_time_mean));
  if (raw_backward_inter_arrival_time_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(60, this->_internal_backward_inter_arrival_time_mean(), target);
  }

  // double backward_inter_arrival_time_std = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_std = this->_internal_backward_inter_arrival_time_std();
  uint64_t raw_backward_inter_arrival_time_std;
  memcpy(&raw_backward_inter_arrival_time_std, &tmp_backward_inter_arrival_time_std, sizeof(tmp_backward_inter_arrival_time_std));
  if (raw_backward_inter_arrival_time_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(61, this->_internal_backward_inter_arrival_time_std(), target);
  }

  // uint64 backward_inter_arrival_time_max = 62;
  if (this->_internal_backward_inter_arrival_time_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(62, this->_internal_backward_inter_arrival_time_max(), target);
  }

  // uint64 backward_inter_arrival_time_min = 63;
  if (this->_internal_backward_inter_arrival_time_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(63, this->_internal_backward_inter_arrival_time_min(), target);
  }

  // uint32 fin_flag_count = 70;
  if (this->_internal_fin_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(70, this->_internal_fin_flag_count(), target);
  }

  // uint32 syn_flag_count = 71;
  if (this->_internal_syn_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(71, this->_internal_syn_flag_count(), target);
  }

  // uint32 rst_flag_count = 72;
  if (this->_internal_rst_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(72, this->_internal_rst_flag_count(), target);
  }

  // uint32 psh_flag_count = 73;
  if (this->_internal_psh_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(73, this->_internal_psh_flag_count(), target);
  }

  // uint32 ack_flag_count = 74;
  if (this->_internal_ack_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(74, this->_internal_ack_flag_count(), target);
  }

  // uint32 urg_flag_count = 75;
  if (this->_internal_urg_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(75, this->_internal_urg_flag_count(), target);
  }

  // uint32 cwe_flag_count = 76;
  if (this->_internal_cwe_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(76, this->_internal_cwe_flag_count(), target);
  }

  // uint32 ece_flag_count = 77;
  if (this->_internal_ece_flag_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(77, this->_internal_ece_flag_count(), target);
  }

  // uint32 forward_psh_flags = 78;
  if (this->_internal_forward_psh_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(78, this->_internal_forward_psh_flags(), target);
  }

  // uint32 backward_psh_flags = 79;
  if (this->_internal_backward_psh_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(79, this->_internal_backward_psh_flags(), target);
  }

  // uint32 forward_urg_flags = 80;
  if (this->_internal_forward_urg_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(80, this->_internal_forward_urg_flags(), target);
  }

  // uint32 backward_urg_flags = 81;
  if (this->_internal_backward_urg_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(81, this->_internal_backward_urg_flags(), target);
  }

  // double forward_header_length = 85;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_header_length = this->_internal_forward_header_length();
  uint64_t raw_forward_header_length;
  memcpy(&raw_forward_header_length, &tmp_forward_header_length, sizeof(tmp_forward_header_length));
  if (raw_forward_header_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(85, this->_internal_forward_header_length(), target);
  }

  // double backward_header_length = 86;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_header_length = this->_internal_backward_header_length();
  uint64_t raw_backward_header_length;
  memcpy(&raw_backward_header_length, &tmp_backward_header_length, sizeof(tmp_backward_header_length));
  if (raw_backward_header_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(86, this->_internal_backward_header_length(), target);
  }

  // double forward_average_bytes_bulk = 87;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bytes_bulk = this->_internal_forward_average_bytes_bulk();
  uint64_t raw_forward_average_bytes_bulk;
  memcpy(&raw_forward_average_bytes_bulk, &tmp_forward_average_bytes_bulk, sizeof(tmp_forward_average_bytes_bulk));
  if (raw_forward_average_bytes_bulk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(87, this->_internal_forward_average_bytes_bulk(), target);
  }

  // double forward_average_packets_bulk = 88;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_packets_bulk = this->_internal_forward_average_packets_bulk();
  uint64_t raw_forward_average_packets_bulk;
  memcpy(&raw_forward_average_packets_bulk, &tmp_forward_average_packets_bulk, sizeof(tmp_forward_average_packets_bulk));
  if (raw_forward_average_packets_bulk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(88, this->_internal_forward_average_packets_bulk(), target);
  }

  // double forward_average_bulk_rate = 89;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bulk_rate = this->_internal_forward_average_bulk_rate();
  uint64_t raw_forward_average_bulk_rate;
  memcpy(&raw_forward_average_bulk_rate, &tmp_forward_average_bulk_rate, sizeof(tmp_forward_average_bulk_rate));
  if (raw_forward_average_bulk_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(89, this->_internal_forward_average_bulk_rate(), target);
  }

  // double backward_average_bytes_bulk = 90;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bytes_bulk = this->_internal_backward_average_bytes_bulk();
  uint64_t raw_backward_average_bytes_bulk;
  memcpy(&raw_backward_average_bytes_bulk, &tmp_backward_average_bytes_bulk, sizeof(tmp_backward_average_bytes_bulk));
  if (raw_backward_average_bytes_bulk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(90, this->_internal_backward_average_bytes_bulk(), target);
  }

  // double backward_average_packets_bulk = 91;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_packets_bulk = this->_internal_backward_average_packets_bulk();
  uint64_t raw_backward_average_packets_bulk;
  memcpy(&raw_backward_average_packets_bulk, &tmp_backward_average_packets_bulk, sizeof(tmp_backward_average_packets_bulk));
  if (raw_backward_average_packets_bulk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(91, this->_internal_backward_average_packets_bulk(), target);
  }

  // double backward_average_bulk_rate = 92;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bulk_rate = this->_internal_backward_average_bulk_rate();
  uint64_t raw_backward_average_bulk_rate;
  memcpy(&raw_backward_average_bulk_rate, &tmp_backward_average_bulk_rate, sizeof(tmp_backward_average_bulk_rate));
  if (raw_backward_average_bulk_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(92, this->_internal_backward_average_bulk_rate(), target);
  }

  // uint64 minimum_packet_length = 95;
  if (this->_internal_minimum_packet_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(95, this->_internal_minimum_packet_length(), target);
  }

  // uint64 maximum_packet_length = 96;
  if (this->_internal_maximum_packet_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(96, this->_internal_maximum_packet_length(), target);
  }

  // double packet_length_mean = 97;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_mean = this->_internal_packet_length_mean();
  uint64_t raw_packet_length_mean;
  memcpy(&raw_packet_length_mean, &tmp_packet_length_mean, sizeof(tmp_packet_length_mean));
  if (raw_packet_length_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(97, this->_internal_packet_length_mean(), target);
  }

  // double packet_length_std = 98;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_std = this->_internal_packet_length_std();
  uint64_t raw_packet_length_std;
  memcpy(&raw_packet_length_std, &tmp_packet_length_std, sizeof(tmp_packet_length_std));
  if (raw_packet_length_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(98, this->_internal_packet_length_std(), target);
  }

  // double packet_length_variance = 99;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_variance = this->_internal_packet_length_variance();
  uint64_t raw_packet_length_variance;
  memcpy(&raw_packet_length_variance, &tmp_packet_length_variance, sizeof(tmp_packet_length_variance));
  if (raw_packet_length_variance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(99, this->_internal_packet_length_variance(), target);
  }

  // repeated double ddos_features = 100;
  if (this->_internal_ddos_features_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_ddos_features(), target);
  }

  // repeated double ransomware_features = 101;
  if (this->_internal_ransomware_features_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_ransomware_features(), target);
  }

  // repeated double general_attack_features = 102;
  if (this->_internal_general_attack_features_size() > 0) {
    target = stream->WriteFixedPacked(102, _internal_general_attack_features(), target);
  }

  // repeated double internal_traffic_features = 103;
  if (this->_internal_internal_traffic_features_size() > 0) {
    target = stream->WriteFixedPacked(103, _internal_internal_traffic_features(), target);
  }

  // double active_mean = 104;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_active_mean = this->_internal_active_mean();
  uint64_t raw_active_mean;
  memcpy(&raw_active_mean, &tmp_active_mean, sizeof(tmp_active_mean));
  if (raw_active_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(104, this->_internal_active_mean(), target);
  }

  // double idle_mean = 105;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle_mean = this->_internal_idle_mean();
  uint64_t raw_idle_mean;
  memcpy(&raw_idle_mean, &tmp_idle_mean, sizeof(tmp_idle_mean));
  if (raw_idle_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(105, this->_internal_idle_mean(), target);
  }

  // map<string, double> custom_features = 110;
  if (!this->_internal_custom_features().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = NetworkFeatures_CustomFeaturesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_features();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.NetworkFeatures.CustomFeaturesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(110, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(110, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> feature_metadata = 111;
  if (!this->_internal_feature_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = NetworkFeatures_FeatureMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_feature_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.NetworkFeatures.FeatureMetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.NetworkFeatures.FeatureMetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(111, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(111, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.NetworkFeatures)
  return target;
}

size_t NetworkFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.NetworkFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ddos_features = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ddos_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double ransomware_features = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ransomware_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double general_attack_features = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_general_attack_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double internal_traffic_features = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_internal_traffic_features_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // map<string, double> custom_features = 110;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_custom_features().begin();
      it != this->_internal_custom_features().end(); ++it) {
    total_size += NetworkFeatures_CustomFeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> feature_metadata = 111;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feature_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_feature_metadata().begin();
      it != this->_internal_feature_metadata().end(); ++it) {
    total_size += NetworkFeatures_FeatureMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string source_ip = 1;
  if (!this->_internal_source_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_ip());
  }

  // string destination_ip = 2;
  if (!this->_internal_destination_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_ip());
  }

  // string protocol_name = 6;
  if (!this->_internal_protocol_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_name());
  }

  // .google.protobuf.Timestamp flow_start_time = 7;
  if (this->_internal_has_flow_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flow_start_time_);
  }

  // .google.protobuf.Duration flow_duration = 8;
  if (this->_internal_has_flow_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flow_duration_);
  }

  // uint32 source_port = 3;
  if (this->_internal_source_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_port());
  }

  // uint32 destination_port = 4;
  if (this->_internal_destination_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destination_port());
  }

  // uint64 flow_duration_microseconds = 9;
  if (this->_internal_flow_duration_microseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flow_duration_microseconds());
  }

  // uint64 total_forward_packets = 10;
  if (this->_internal_total_forward_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_forward_packets());
  }

  // uint64 total_backward_packets = 11;
  if (this->_internal_total_backward_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_backward_packets());
  }

  // uint64 total_forward_bytes = 12;
  if (this->_internal_total_forward_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_forward_bytes());
  }

  // uint64 total_backward_bytes = 13;
  if (this->_internal_total_backward_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_backward_bytes());
  }

  // uint64 forward_packet_length_max = 20;
  if (this->_internal_forward_packet_length_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_forward_packet_length_max());
  }

  // uint64 forward_packet_length_min = 21;
  if (this->_internal_forward_packet_length_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_forward_packet_length_min());
  }

  // double forward_packet_length_mean = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_mean = this->_internal_forward_packet_length_mean();
  uint64_t raw_forward_packet_length_mean;
  memcpy(&raw_forward_packet_length_mean, &tmp_forward_packet_length_mean, sizeof(tmp_forward_packet_length_mean));
  if (raw_forward_packet_length_mean != 0) {
    total_size += 2 + 8;
  }

  // double forward_packet_length_std = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_std = this->_internal_forward_packet_length_std();
  uint64_t raw_forward_packet_length_std;
  memcpy(&raw_forward_packet_length_std, &tmp_forward_packet_length_std, sizeof(tmp_forward_packet_length_std));
  if (raw_forward_packet_length_std != 0) {
    total_size += 2 + 8;
  }

  // uint64 backward_packet_length_max = 30;
  if (this->_internal_backward_packet_length_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_backward_packet_length_max());
  }

  // uint64 backward_packet_length_min = 31;
  if (this->_internal_backward_packet_length_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_backward_packet_length_min());
  }

  // double backward_packet_length_mean = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_mean = this->_internal_backward_packet_length_mean();
  uint64_t raw_backward_packet_length_mean;
  memcpy(&raw_backward_packet_length_mean, &tmp_backward_packet_length_mean, sizeof(tmp_backward_packet_length_mean));
  if (raw_backward_packet_length_mean != 0) {
    total_size += 2 + 8;
  }

  // double backward_packet_length_std = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_std = this->_internal_backward_packet_length_std();
  uint64_t raw_backward_packet_length_std;
  memcpy(&raw_backward_packet_length_std, &tmp_backward_packet_length_std, sizeof(tmp_backward_packet_length_std));
  if (raw_backward_packet_length_std != 0) {
    total_size += 2 + 8;
  }

  // uint32 protocol_number = 5;
  if (this->_internal_protocol_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_number());
  }

  // uint32 fin_flag_count = 70;
  if (this->_internal_fin_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fin_flag_count());
  }

  // double flow_bytes_per_second = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_bytes_per_second = this->_internal_flow_bytes_per_second();
  uint64_t raw_flow_bytes_per_second;
  memcpy(&raw_flow_bytes_per_second, &tmp_flow_bytes_per_second, sizeof(tmp_flow_bytes_per_second));
  if (raw_flow_bytes_per_second != 0) {
    total_size += 2 + 8;
  }

  // double flow_packets_per_second = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_packets_per_second = this->_internal_flow_packets_per_second();
  uint64_t raw_flow_packets_per_second;
  memcpy(&raw_flow_packets_per_second, &tmp_flow_packets_per_second, sizeof(tmp_flow_packets_per_second));
  if (raw_flow_packets_per_second != 0) {
    total_size += 2 + 8;
  }

  // double forward_packets_per_second = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packets_per_second = this->_internal_forward_packets_per_second();
  uint64_t raw_forward_packets_per_second;
  memcpy(&raw_forward_packets_per_second, &tmp_forward_packets_per_second, sizeof(tmp_forward_packets_per_second));
  if (raw_forward_packets_per_second != 0) {
    total_size += 2 + 8;
  }

  // double backward_packets_per_second = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packets_per_second = this->_internal_backward_packets_per_second();
  uint64_t raw_backward_packets_per_second;
  memcpy(&raw_backward_packets_per_second, &tmp_backward_packets_per_second, sizeof(tmp_backward_packets_per_second));
  if (raw_backward_packets_per_second != 0) {
    total_size += 2 + 8;
  }

  // double download_upload_ratio = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download_upload_ratio = this->_internal_download_upload_ratio();
  uint64_t raw_download_upload_ratio;
  memcpy(&raw_download_upload_ratio, &tmp_download_upload_ratio, sizeof(tmp_download_upload_ratio));
  if (raw_download_upload_ratio != 0) {
    total_size += 2 + 8;
  }

  // double average_packet_size = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_packet_size = this->_internal_average_packet_size();
  uint64_t raw_average_packet_size;
  memcpy(&raw_average_packet_size, &tmp_average_packet_size, sizeof(tmp_average_packet_size));
  if (raw_average_packet_size != 0) {
    total_size += 2 + 8;
  }

  // double average_forward_segment_size = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_forward_segment_size = this->_internal_average_forward_segment_size();
  uint64_t raw_average_forward_segment_size;
  memcpy(&raw_average_forward_segment_size, &tmp_average_forward_segment_size, sizeof(tmp_average_forward_segment_size));
  if (raw_average_forward_segment_size != 0) {
    total_size += 2 + 8;
  }

  // double average_backward_segment_size = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_backward_segment_size = this->_internal_average_backward_segment_size();
  uint64_t raw_average_backward_segment_size;
  memcpy(&raw_average_backward_segment_size, &tmp_average_backward_segment_size, sizeof(tmp_average_backward_segment_size));
  if (raw_average_backward_segment_size != 0) {
    total_size += 2 + 8;
  }

  // double flow_inter_arrival_time_mean = 50;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_mean = this->_internal_flow_inter_arrival_time_mean();
  uint64_t raw_flow_inter_arrival_time_mean;
  memcpy(&raw_flow_inter_arrival_time_mean, &tmp_flow_inter_arrival_time_mean, sizeof(tmp_flow_inter_arrival_time_mean));
  if (raw_flow_inter_arrival_time_mean != 0) {
    total_size += 2 + 8;
  }

  // double flow_inter_arrival_time_std = 51;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_std = this->_internal_flow_inter_arrival_time_std();
  uint64_t raw_flow_inter_arrival_time_std;
  memcpy(&raw_flow_inter_arrival_time_std, &tmp_flow_inter_arrival_time_std, sizeof(tmp_flow_inter_arrival_time_std));
  if (raw_flow_inter_arrival_time_std != 0) {
    total_size += 2 + 8;
  }

  // uint64 flow_inter_arrival_time_max = 52;
  if (this->_internal_flow_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_flow_inter_arrival_time_max());
  }

  // uint64 flow_inter_arrival_time_min = 53;
  if (this->_internal_flow_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_flow_inter_arrival_time_min());
  }

  // double forward_inter_arrival_time_total = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_total = this->_internal_forward_inter_arrival_time_total();
  uint64_t raw_forward_inter_arrival_time_total;
  memcpy(&raw_forward_inter_arrival_time_total, &tmp_forward_inter_arrival_time_total, sizeof(tmp_forward_inter_arrival_time_total));
  if (raw_forward_inter_arrival_time_total != 0) {
    total_size += 2 + 8;
  }

  // double forward_inter_arrival_time_mean = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_mean = this->_internal_forward_inter_arrival_time_mean();
  uint64_t raw_forward_inter_arrival_time_mean;
  memcpy(&raw_forward_inter_arrival_time_mean, &tmp_forward_inter_arrival_time_mean, sizeof(tmp_forward_inter_arrival_time_mean));
  if (raw_forward_inter_arrival_time_mean != 0) {
    total_size += 2 + 8;
  }

  // double forward_inter_arrival_time_std = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_std = this->_internal_forward_inter_arrival_time_std();
  uint64_t raw_forward_inter_arrival_time_std;
  memcpy(&raw_forward_inter_arrival_time_std, &tmp_forward_inter_arrival_time_std, sizeof(tmp_forward_inter_arrival_time_std));
  if (raw_forward_inter_arrival_time_std != 0) {
    total_size += 2 + 8;
  }

  // uint64 forward_inter_arrival_time_max = 57;
  if (this->_internal_forward_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_forward_inter_arrival_time_max());
  }

  // uint64 forward_inter_arrival_time_min = 58;
  if (this->_internal_forward_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_forward_inter_arrival_time_min());
  }

  // double backward_inter_arrival_time_total = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_total = this->_internal_backward_inter_arrival_time_total();
  uint64_t raw_backward_inter_arrival_time_total;
  memcpy(&raw_backward_inter_arrival_time_total, &tmp_backward_inter_arrival_time_total, sizeof(tmp_backward_inter_arrival_time_total));
  if (raw_backward_inter_arrival_time_total != 0) {
    total_size += 2 + 8;
  }

  // double backward_inter_arrival_time_mean = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_mean = this->_internal_backward_inter_arrival_time_mean();
  uint64_t raw_backward_inter_arrival_time_mean;
  memcpy(&raw_backward_inter_arrival_time_mean, &tmp_backward_inter_arrival_time_mean, sizeof(tmp_backward_inter_arrival_time_mean));
  if (raw_backward_inter_arrival_time_mean != 0) {
    total_size += 2 + 8;
  }

  // double backward_inter_arrival_time_std = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_std = this->_internal_backward_inter_arrival_time_std();
  uint64_t raw_backward_inter_arrival_time_std;
  memcpy(&raw_backward_inter_arrival_time_std, &tmp_backward_inter_arrival_time_std, sizeof(tmp_backward_inter_arrival_time_std));
  if (raw_backward_inter_arrival_time_std != 0) {
    total_size += 2 + 8;
  }

  // uint64 backward_inter_arrival_time_max = 62;
  if (this->_internal_backward_inter_arrival_time_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_backward_inter_arrival_time_max());
  }

  // uint64 backward_inter_arrival_time_min = 63;
  if (this->_internal_backward_inter_arrival_time_min() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_backward_inter_arrival_time_min());
  }

  // uint32 syn_flag_count = 71;
  if (this->_internal_syn_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_syn_flag_count());
  }

  // uint32 rst_flag_count = 72;
  if (this->_internal_rst_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rst_flag_count());
  }

  // uint32 psh_flag_count = 73;
  if (this->_internal_psh_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_psh_flag_count());
  }

  // uint32 ack_flag_count = 74;
  if (this->_internal_ack_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ack_flag_count());
  }

  // uint32 urg_flag_count = 75;
  if (this->_internal_urg_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_urg_flag_count());
  }

  // uint32 cwe_flag_count = 76;
  if (this->_internal_cwe_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cwe_flag_count());
  }

  // uint32 ece_flag_count = 77;
  if (this->_internal_ece_flag_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ece_flag_count());
  }

  // uint32 forward_psh_flags = 78;
  if (this->_internal_forward_psh_flags() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_forward_psh_flags());
  }

  // uint32 backward_psh_flags = 79;
  if (this->_internal_backward_psh_flags() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_backward_psh_flags());
  }

  // uint32 forward_urg_flags = 80;
  if (this->_internal_forward_urg_flags() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_forward_urg_flags());
  }

  // double forward_header_length = 85;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_header_length = this->_internal_forward_header_length();
  uint64_t raw_forward_header_length;
  memcpy(&raw_forward_header_length, &tmp_forward_header_length, sizeof(tmp_forward_header_length));
  if (raw_forward_header_length != 0) {
    total_size += 2 + 8;
  }

  // double backward_header_length = 86;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_header_length = this->_internal_backward_header_length();
  uint64_t raw_backward_header_length;
  memcpy(&raw_backward_header_length, &tmp_backward_header_length, sizeof(tmp_backward_header_length));
  if (raw_backward_header_length != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_bytes_bulk = 87;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bytes_bulk = this->_internal_forward_average_bytes_bulk();
  uint64_t raw_forward_average_bytes_bulk;
  memcpy(&raw_forward_average_bytes_bulk, &tmp_forward_average_bytes_bulk, sizeof(tmp_forward_average_bytes_bulk));
  if (raw_forward_average_bytes_bulk != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_packets_bulk = 88;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_packets_bulk = this->_internal_forward_average_packets_bulk();
  uint64_t raw_forward_average_packets_bulk;
  memcpy(&raw_forward_average_packets_bulk, &tmp_forward_average_packets_bulk, sizeof(tmp_forward_average_packets_bulk));
  if (raw_forward_average_packets_bulk != 0) {
    total_size += 2 + 8;
  }

  // double forward_average_bulk_rate = 89;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bulk_rate = this->_internal_forward_average_bulk_rate();
  uint64_t raw_forward_average_bulk_rate;
  memcpy(&raw_forward_average_bulk_rate, &tmp_forward_average_bulk_rate, sizeof(tmp_forward_average_bulk_rate));
  if (raw_forward_average_bulk_rate != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_bytes_bulk = 90;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bytes_bulk = this->_internal_backward_average_bytes_bulk();
  uint64_t raw_backward_average_bytes_bulk;
  memcpy(&raw_backward_average_bytes_bulk, &tmp_backward_average_bytes_bulk, sizeof(tmp_backward_average_bytes_bulk));
  if (raw_backward_average_bytes_bulk != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_packets_bulk = 91;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_packets_bulk = this->_internal_backward_average_packets_bulk();
  uint64_t raw_backward_average_packets_bulk;
  memcpy(&raw_backward_average_packets_bulk, &tmp_backward_average_packets_bulk, sizeof(tmp_backward_average_packets_bulk));
  if (raw_backward_average_packets_bulk != 0) {
    total_size += 2 + 8;
  }

  // double backward_average_bulk_rate = 92;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bulk_rate = this->_internal_backward_average_bulk_rate();
  uint64_t raw_backward_average_bulk_rate;
  memcpy(&raw_backward_average_bulk_rate, &tmp_backward_average_bulk_rate, sizeof(tmp_backward_average_bulk_rate));
  if (raw_backward_average_bulk_rate != 0) {
    total_size += 2 + 8;
  }

  // uint64 minimum_packet_length = 95;
  if (this->_internal_minimum_packet_length() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_minimum_packet_length());
  }

  // uint64 maximum_packet_length = 96;
  if (this->_internal_maximum_packet_length() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_maximum_packet_length());
  }

  // double packet_length_mean = 97;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_mean = this->_internal_packet_length_mean();
  uint64_t raw_packet_length_mean;
  memcpy(&raw_packet_length_mean, &tmp_packet_length_mean, sizeof(tmp_packet_length_mean));
  if (raw_packet_length_mean != 0) {
    total_size += 2 + 8;
  }

  // double packet_length_std = 98;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_std = this->_internal_packet_length_std();
  uint64_t raw_packet_length_std;
  memcpy(&raw_packet_length_std, &tmp_packet_length_std, sizeof(tmp_packet_length_std));
  if (raw_packet_length_std != 0) {
    total_size += 2 + 8;
  }

  // double packet_length_variance = 99;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_variance = this->_internal_packet_length_variance();
  uint64_t raw_packet_length_variance;
  memcpy(&raw_packet_length_variance, &tmp_packet_length_variance, sizeof(tmp_packet_length_variance));
  if (raw_packet_length_variance != 0) {
    total_size += 2 + 8;
  }

  // double active_mean = 104;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_active_mean = this->_internal_active_mean();
  uint64_t raw_active_mean;
  memcpy(&raw_active_mean, &tmp_active_mean, sizeof(tmp_active_mean));
  if (raw_active_mean != 0) {
    total_size += 2 + 8;
  }

  // double idle_mean = 105;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle_mean = this->_internal_idle_mean();
  uint64_t raw_idle_mean;
  memcpy(&raw_idle_mean, &tmp_idle_mean, sizeof(tmp_idle_mean));
  if (raw_idle_mean != 0) {
    total_size += 2 + 8;
  }

  // uint32 backward_urg_flags = 81;
  if (this->_internal_backward_urg_flags() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_backward_urg_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkFeatures::GetClassData() const { return &_class_data_; }


void NetworkFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkFeatures*>(&to_msg);
  auto& from = static_cast<const NetworkFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.NetworkFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ddos_features_.MergeFrom(from._impl_.ddos_features_);
  _this->_impl_.ransomware_features_.MergeFrom(from._impl_.ransomware_features_);
  _this->_impl_.general_attack_features_.MergeFrom(from._impl_.general_attack_features_);
  _this->_impl_.internal_traffic_features_.MergeFrom(from._impl_.internal_traffic_features_);
  _this->_impl_.custom_features_.MergeFrom(from._impl_.custom_features_);
  _this->_impl_.feature_metadata_.MergeFrom(from._impl_.feature_metadata_);
  if (!from._internal_source_ip().empty()) {
    _this->_internal_set_source_ip(from._internal_source_ip());
  }
  if (!from._internal_destination_ip().empty()) {
    _this->_internal_set_destination_ip(from._internal_destination_ip());
  }
  if (!from._internal_protocol_name().empty()) {
    _this->_internal_set_protocol_name(from._internal_protocol_name());
  }
  if (from._internal_has_flow_start_time()) {
    _this->_internal_mutable_flow_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_flow_start_time());
  }
  if (from._internal_has_flow_duration()) {
    _this->_internal_mutable_flow_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_flow_duration());
  }
  if (from._internal_source_port() != 0) {
    _this->_internal_set_source_port(from._internal_source_port());
  }
  if (from._internal_destination_port() != 0) {
    _this->_internal_set_destination_port(from._internal_destination_port());
  }
  if (from._internal_flow_duration_microseconds() != 0) {
    _this->_internal_set_flow_duration_microseconds(from._internal_flow_duration_microseconds());
  }
  if (from._internal_total_forward_packets() != 0) {
    _this->_internal_set_total_forward_packets(from._internal_total_forward_packets());
  }
  if (from._internal_total_backward_packets() != 0) {
    _this->_internal_set_total_backward_packets(from._internal_total_backward_packets());
  }
  if (from._internal_total_forward_bytes() != 0) {
    _this->_internal_set_total_forward_bytes(from._internal_total_forward_bytes());
  }
  if (from._internal_total_backward_bytes() != 0) {
    _this->_internal_set_total_backward_bytes(from._internal_total_backward_bytes());
  }
  if (from._internal_forward_packet_length_max() != 0) {
    _this->_internal_set_forward_packet_length_max(from._internal_forward_packet_length_max());
  }
  if (from._internal_forward_packet_length_min() != 0) {
    _this->_internal_set_forward_packet_length_min(from._internal_forward_packet_length_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_mean = from._internal_forward_packet_length_mean();
  uint64_t raw_forward_packet_length_mean;
  memcpy(&raw_forward_packet_length_mean, &tmp_forward_packet_length_mean, sizeof(tmp_forward_packet_length_mean));
  if (raw_forward_packet_length_mean != 0) {
    _this->_internal_set_forward_packet_length_mean(from._internal_forward_packet_length_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packet_length_std = from._internal_forward_packet_length_std();
  uint64_t raw_forward_packet_length_std;
  memcpy(&raw_forward_packet_length_std, &tmp_forward_packet_length_std, sizeof(tmp_forward_packet_length_std));
  if (raw_forward_packet_length_std != 0) {
    _this->_internal_set_forward_packet_length_std(from._internal_forward_packet_length_std());
  }
  if (from._internal_backward_packet_length_max() != 0) {
    _this->_internal_set_backward_packet_length_max(from._internal_backward_packet_length_max());
  }
  if (from._internal_backward_packet_length_min() != 0) {
    _this->_internal_set_backward_packet_length_min(from._internal_backward_packet_length_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_mean = from._internal_backward_packet_length_mean();
  uint64_t raw_backward_packet_length_mean;
  memcpy(&raw_backward_packet_length_mean, &tmp_backward_packet_length_mean, sizeof(tmp_backward_packet_length_mean));
  if (raw_backward_packet_length_mean != 0) {
    _this->_internal_set_backward_packet_length_mean(from._internal_backward_packet_length_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packet_length_std = from._internal_backward_packet_length_std();
  uint64_t raw_backward_packet_length_std;
  memcpy(&raw_backward_packet_length_std, &tmp_backward_packet_length_std, sizeof(tmp_backward_packet_length_std));
  if (raw_backward_packet_length_std != 0) {
    _this->_internal_set_backward_packet_length_std(from._internal_backward_packet_length_std());
  }
  if (from._internal_protocol_number() != 0) {
    _this->_internal_set_protocol_number(from._internal_protocol_number());
  }
  if (from._internal_fin_flag_count() != 0) {
    _this->_internal_set_fin_flag_count(from._internal_fin_flag_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_bytes_per_second = from._internal_flow_bytes_per_second();
  uint64_t raw_flow_bytes_per_second;
  memcpy(&raw_flow_bytes_per_second, &tmp_flow_bytes_per_second, sizeof(tmp_flow_bytes_per_second));
  if (raw_flow_bytes_per_second != 0) {
    _this->_internal_set_flow_bytes_per_second(from._internal_flow_bytes_per_second());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_packets_per_second = from._internal_flow_packets_per_second();
  uint64_t raw_flow_packets_per_second;
  memcpy(&raw_flow_packets_per_second, &tmp_flow_packets_per_second, sizeof(tmp_flow_packets_per_second));
  if (raw_flow_packets_per_second != 0) {
    _this->_internal_set_flow_packets_per_second(from._internal_flow_packets_per_second());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_packets_per_second = from._internal_forward_packets_per_second();
  uint64_t raw_forward_packets_per_second;
  memcpy(&raw_forward_packets_per_second, &tmp_forward_packets_per_second, sizeof(tmp_forward_packets_per_second));
  if (raw_forward_packets_per_second != 0) {
    _this->_internal_set_forward_packets_per_second(from._internal_forward_packets_per_second());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_packets_per_second = from._internal_backward_packets_per_second();
  uint64_t raw_backward_packets_per_second;
  memcpy(&raw_backward_packets_per_second, &tmp_backward_packets_per_second, sizeof(tmp_backward_packets_per_second));
  if (raw_backward_packets_per_second != 0) {
    _this->_internal_set_backward_packets_per_second(from._internal_backward_packets_per_second());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_download_upload_ratio = from._internal_download_upload_ratio();
  uint64_t raw_download_upload_ratio;
  memcpy(&raw_download_upload_ratio, &tmp_download_upload_ratio, sizeof(tmp_download_upload_ratio));
  if (raw_download_upload_ratio != 0) {
    _this->_internal_set_download_upload_ratio(from._internal_download_upload_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_packet_size = from._internal_average_packet_size();
  uint64_t raw_average_packet_size;
  memcpy(&raw_average_packet_size, &tmp_average_packet_size, sizeof(tmp_average_packet_size));
  if (raw_average_packet_size != 0) {
    _this->_internal_set_average_packet_size(from._internal_average_packet_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_forward_segment_size = from._internal_average_forward_segment_size();
  uint64_t raw_average_forward_segment_size;
  memcpy(&raw_average_forward_segment_size, &tmp_average_forward_segment_size, sizeof(tmp_average_forward_segment_size));
  if (raw_average_forward_segment_size != 0) {
    _this->_internal_set_average_forward_segment_size(from._internal_average_forward_segment_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_backward_segment_size = from._internal_average_backward_segment_size();
  uint64_t raw_average_backward_segment_size;
  memcpy(&raw_average_backward_segment_size, &tmp_average_backward_segment_size, sizeof(tmp_average_backward_segment_size));
  if (raw_average_backward_segment_size != 0) {
    _this->_internal_set_average_backward_segment_size(from._internal_average_backward_segment_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_mean = from._internal_flow_inter_arrival_time_mean();
  uint64_t raw_flow_inter_arrival_time_mean;
  memcpy(&raw_flow_inter_arrival_time_mean, &tmp_flow_inter_arrival_time_mean, sizeof(tmp_flow_inter_arrival_time_mean));
  if (raw_flow_inter_arrival_time_mean != 0) {
    _this->_internal_set_flow_inter_arrival_time_mean(from._internal_flow_inter_arrival_time_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flow_inter_arrival_time_std = from._internal_flow_inter_arrival_time_std();
  uint64_t raw_flow_inter_arrival_time_std;
  memcpy(&raw_flow_inter_arrival_time_std, &tmp_flow_inter_arrival_time_std, sizeof(tmp_flow_inter_arrival_time_std));
  if (raw_flow_inter_arrival_time_std != 0) {
    _this->_internal_set_flow_inter_arrival_time_std(from._internal_flow_inter_arrival_time_std());
  }
  if (from._internal_flow_inter_arrival_time_max() != 0) {
    _this->_internal_set_flow_inter_arrival_time_max(from._internal_flow_inter_arrival_time_max());
  }
  if (from._internal_flow_inter_arrival_time_min() != 0) {
    _this->_internal_set_flow_inter_arrival_time_min(from._internal_flow_inter_arrival_time_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_total = from._internal_forward_inter_arrival_time_total();
  uint64_t raw_forward_inter_arrival_time_total;
  memcpy(&raw_forward_inter_arrival_time_total, &tmp_forward_inter_arrival_time_total, sizeof(tmp_forward_inter_arrival_time_total));
  if (raw_forward_inter_arrival_time_total != 0) {
    _this->_internal_set_forward_inter_arrival_time_total(from._internal_forward_inter_arrival_time_total());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_mean = from._internal_forward_inter_arrival_time_mean();
  uint64_t raw_forward_inter_arrival_time_mean;
  memcpy(&raw_forward_inter_arrival_time_mean, &tmp_forward_inter_arrival_time_mean, sizeof(tmp_forward_inter_arrival_time_mean));
  if (raw_forward_inter_arrival_time_mean != 0) {
    _this->_internal_set_forward_inter_arrival_time_mean(from._internal_forward_inter_arrival_time_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_inter_arrival_time_std = from._internal_forward_inter_arrival_time_std();
  uint64_t raw_forward_inter_arrival_time_std;
  memcpy(&raw_forward_inter_arrival_time_std, &tmp_forward_inter_arrival_time_std, sizeof(tmp_forward_inter_arrival_time_std));
  if (raw_forward_inter_arrival_time_std != 0) {
    _this->_internal_set_forward_inter_arrival_time_std(from._internal_forward_inter_arrival_time_std());
  }
  if (from._internal_forward_inter_arrival_time_max() != 0) {
    _this->_internal_set_forward_inter_arrival_time_max(from._internal_forward_inter_arrival_time_max());
  }
  if (from._internal_forward_inter_arrival_time_min() != 0) {
    _this->_internal_set_forward_inter_arrival_time_min(from._internal_forward_inter_arrival_time_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_total = from._internal_backward_inter_arrival_time_total();
  uint64_t raw_backward_inter_arrival_time_total;
  memcpy(&raw_backward_inter_arrival_time_total, &tmp_backward_inter_arrival_time_total, sizeof(tmp_backward_inter_arrival_time_total));
  if (raw_backward_inter_arrival_time_total != 0) {
    _this->_internal_set_backward_inter_arrival_time_total(from._internal_backward_inter_arrival_time_total());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_mean = from._internal_backward_inter_arrival_time_mean();
  uint64_t raw_backward_inter_arrival_time_mean;
  memcpy(&raw_backward_inter_arrival_time_mean, &tmp_backward_inter_arrival_time_mean, sizeof(tmp_backward_inter_arrival_time_mean));
  if (raw_backward_inter_arrival_time_mean != 0) {
    _this->_internal_set_backward_inter_arrival_time_mean(from._internal_backward_inter_arrival_time_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_inter_arrival_time_std = from._internal_backward_inter_arrival_time_std();
  uint64_t raw_backward_inter_arrival_time_std;
  memcpy(&raw_backward_inter_arrival_time_std, &tmp_backward_inter_arrival_time_std, sizeof(tmp_backward_inter_arrival_time_std));
  if (raw_backward_inter_arrival_time_std != 0) {
    _this->_internal_set_backward_inter_arrival_time_std(from._internal_backward_inter_arrival_time_std());
  }
  if (from._internal_backward_inter_arrival_time_max() != 0) {
    _this->_internal_set_backward_inter_arrival_time_max(from._internal_backward_inter_arrival_time_max());
  }
  if (from._internal_backward_inter_arrival_time_min() != 0) {
    _this->_internal_set_backward_inter_arrival_time_min(from._internal_backward_inter_arrival_time_min());
  }
  if (from._internal_syn_flag_count() != 0) {
    _this->_internal_set_syn_flag_count(from._internal_syn_flag_count());
  }
  if (from._internal_rst_flag_count() != 0) {
    _this->_internal_set_rst_flag_count(from._internal_rst_flag_count());
  }
  if (from._internal_psh_flag_count() != 0) {
    _this->_internal_set_psh_flag_count(from._internal_psh_flag_count());
  }
  if (from._internal_ack_flag_count() != 0) {
    _this->_internal_set_ack_flag_count(from._internal_ack_flag_count());
  }
  if (from._internal_urg_flag_count() != 0) {
    _this->_internal_set_urg_flag_count(from._internal_urg_flag_count());
  }
  if (from._internal_cwe_flag_count() != 0) {
    _this->_internal_set_cwe_flag_count(from._internal_cwe_flag_count());
  }
  if (from._internal_ece_flag_count() != 0) {
    _this->_internal_set_ece_flag_count(from._internal_ece_flag_count());
  }
  if (from._internal_forward_psh_flags() != 0) {
    _this->_internal_set_forward_psh_flags(from._internal_forward_psh_flags());
  }
  if (from._internal_backward_psh_flags() != 0) {
    _this->_internal_set_backward_psh_flags(from._internal_backward_psh_flags());
  }
  if (from._internal_forward_urg_flags() != 0) {
    _this->_internal_set_forward_urg_flags(from._internal_forward_urg_flags());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_header_length = from._internal_forward_header_length();
  uint64_t raw_forward_header_length;
  memcpy(&raw_forward_header_length, &tmp_forward_header_length, sizeof(tmp_forward_header_length));
  if (raw_forward_header_length != 0) {
    _this->_internal_set_forward_header_length(from._internal_forward_header_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_header_length = from._internal_backward_header_length();
  uint64_t raw_backward_header_length;
  memcpy(&raw_backward_header_length, &tmp_backward_header_length, sizeof(tmp_backward_header_length));
  if (raw_backward_header_length != 0) {
    _this->_internal_set_backward_header_length(from._internal_backward_header_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bytes_bulk = from._internal_forward_average_bytes_bulk();
  uint64_t raw_forward_average_bytes_bulk;
  memcpy(&raw_forward_average_bytes_bulk, &tmp_forward_average_bytes_bulk, sizeof(tmp_forward_average_bytes_bulk));
  if (raw_forward_average_bytes_bulk != 0) {
    _this->_internal_set_forward_average_bytes_bulk(from._internal_forward_average_bytes_bulk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_packets_bulk = from._internal_forward_average_packets_bulk();
  uint64_t raw_forward_average_packets_bulk;
  memcpy(&raw_forward_average_packets_bulk, &tmp_forward_average_packets_bulk, sizeof(tmp_forward_average_packets_bulk));
  if (raw_forward_average_packets_bulk != 0) {
    _this->_internal_set_forward_average_packets_bulk(from._internal_forward_average_packets_bulk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_forward_average_bulk_rate = from._internal_forward_average_bulk_rate();
  uint64_t raw_forward_average_bulk_rate;
  memcpy(&raw_forward_average_bulk_rate, &tmp_forward_average_bulk_rate, sizeof(tmp_forward_average_bulk_rate));
  if (raw_forward_average_bulk_rate != 0) {
    _this->_internal_set_forward_average_bulk_rate(from._internal_forward_average_bulk_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bytes_bulk = from._internal_backward_average_bytes_bulk();
  uint64_t raw_backward_average_bytes_bulk;
  memcpy(&raw_backward_average_bytes_bulk, &tmp_backward_average_bytes_bulk, sizeof(tmp_backward_average_bytes_bulk));
  if (raw_backward_average_bytes_bulk != 0) {
    _this->_internal_set_backward_average_bytes_bulk(from._internal_backward_average_bytes_bulk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_packets_bulk = from._internal_backward_average_packets_bulk();
  uint64_t raw_backward_average_packets_bulk;
  memcpy(&raw_backward_average_packets_bulk, &tmp_backward_average_packets_bulk, sizeof(tmp_backward_average_packets_bulk));
  if (raw_backward_average_packets_bulk != 0) {
    _this->_internal_set_backward_average_packets_bulk(from._internal_backward_average_packets_bulk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_backward_average_bulk_rate = from._internal_backward_average_bulk_rate();
  uint64_t raw_backward_average_bulk_rate;
  memcpy(&raw_backward_average_bulk_rate, &tmp_backward_average_bulk_rate, sizeof(tmp_backward_average_bulk_rate));
  if (raw_backward_average_bulk_rate != 0) {
    _this->_internal_set_backward_average_bulk_rate(from._internal_backward_average_bulk_rate());
  }
  if (from._internal_minimum_packet_length() != 0) {
    _this->_internal_set_minimum_packet_length(from._internal_minimum_packet_length());
  }
  if (from._internal_maximum_packet_length() != 0) {
    _this->_internal_set_maximum_packet_length(from._internal_maximum_packet_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_mean = from._internal_packet_length_mean();
  uint64_t raw_packet_length_mean;
  memcpy(&raw_packet_length_mean, &tmp_packet_length_mean, sizeof(tmp_packet_length_mean));
  if (raw_packet_length_mean != 0) {
    _this->_internal_set_packet_length_mean(from._internal_packet_length_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_std = from._internal_packet_length_std();
  uint64_t raw_packet_length_std;
  memcpy(&raw_packet_length_std, &tmp_packet_length_std, sizeof(tmp_packet_length_std));
  if (raw_packet_length_std != 0) {
    _this->_internal_set_packet_length_std(from._internal_packet_length_std());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_packet_length_variance = from._internal_packet_length_variance();
  uint64_t raw_packet_length_variance;
  memcpy(&raw_packet_length_variance, &tmp_packet_length_variance, sizeof(tmp_packet_length_variance));
  if (raw_packet_length_variance != 0) {
    _this->_internal_set_packet_length_variance(from._internal_packet_length_variance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_active_mean = from._internal_active_mean();
  uint64_t raw_active_mean;
  memcpy(&raw_active_mean, &tmp_active_mean, sizeof(tmp_active_mean));
  if (raw_active_mean != 0) {
    _this->_internal_set_active_mean(from._internal_active_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_idle_mean = from._internal_idle_mean();
  uint64_t raw_idle_mean;
  memcpy(&raw_idle_mean, &tmp_idle_mean, sizeof(tmp_idle_mean));
  if (raw_idle_mean != 0) {
    _this->_internal_set_idle_mean(from._internal_idle_mean());
  }
  if (from._internal_backward_urg_flags() != 0) {
    _this->_internal_set_backward_urg_flags(from._internal_backward_urg_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkFeatures::CopyFrom(const NetworkFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.NetworkFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkFeatures::IsInitialized() const {
  return true;
}

void NetworkFeatures::InternalSwap(NetworkFeatures* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ddos_features_.InternalSwap(&other->_impl_.ddos_features_);
  _impl_.ransomware_features_.InternalSwap(&other->_impl_.ransomware_features_);
  _impl_.general_attack_features_.InternalSwap(&other->_impl_.general_attack_features_);
  _impl_.internal_traffic_features_.InternalSwap(&other->_impl_.internal_traffic_features_);
  _impl_.custom_features_.InternalSwap(&other->_impl_.custom_features_);
  _impl_.feature_metadata_.InternalSwap(&other->_impl_.feature_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_ip_, lhs_arena,
      &other->_impl_.source_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_ip_, lhs_arena,
      &other->_impl_.destination_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_name_, lhs_arena,
      &other->_impl_.protocol_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkFeatures, _impl_.backward_urg_flags_)
      + sizeof(NetworkFeatures::_impl_.backward_urg_flags_)
      - PROTOBUF_FIELD_OFFSET(NetworkFeatures, _impl_.flow_start_time_)>(
          reinterpret_cast<char*>(&_impl_.flow_start_time_),
          reinterpret_cast<char*>(&other->_impl_.flow_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[2]);
}

// ===================================================================

class GeoLocationInfo::_Internal {
 public:
};

GeoLocationInfo::GeoLocationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.GeoLocationInfo)
}
GeoLocationInfo::GeoLocationInfo(const GeoLocationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoLocationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.country_name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.region_name_){}
    , decltype(_impl_.city_name_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.isp_name_){}
    , decltype(_impl_.organization_name_){}
    , decltype(_impl_.autonomous_system_number_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.is_anonymous_proxy_){}
    , decltype(_impl_.is_satellite_provider_){}
    , decltype(_impl_.is_tor_exit_node_){}
    , decltype(_impl_.is_known_malicious_){}
    , decltype(_impl_.threat_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_name().empty()) {
    _this->_impl_.country_name_.Set(from._internal_country_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_code().empty()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region_name().empty()) {
    _this->_impl_.region_name_.Set(from._internal_region_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city_name().empty()) {
    _this->_impl_.city_name_.Set(from._internal_city_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isp_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isp_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isp_name().empty()) {
    _this->_impl_.isp_name_.Set(from._internal_isp_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.organization_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_name().empty()) {
    _this->_impl_.organization_name_.Set(from._internal_organization_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.autonomous_system_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.autonomous_system_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_autonomous_system_number().empty()) {
    _this->_impl_.autonomous_system_number_.Set(from._internal_autonomous_system_number(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.threat_level_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.threat_level_));
  // @@protoc_insertion_point(copy_constructor:protobuf.GeoLocationInfo)
}

inline void GeoLocationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.country_name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.region_name_){}
    , decltype(_impl_.city_name_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.isp_name_){}
    , decltype(_impl_.organization_name_){}
    , decltype(_impl_.autonomous_system_number_){}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.is_anonymous_proxy_){false}
    , decltype(_impl_.is_satellite_provider_){false}
    , decltype(_impl_.is_tor_exit_node_){false}
    , decltype(_impl_.is_known_malicious_){false}
    , decltype(_impl_.threat_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.country_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isp_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isp_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.organization_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.autonomous_system_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.autonomous_system_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeoLocationInfo::~GeoLocationInfo() {
  // @@protoc_insertion_point(destructor:protobuf.GeoLocationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoLocationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_name_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.region_name_.Destroy();
  _impl_.city_name_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.isp_name_.Destroy();
  _impl_.organization_name_.Destroy();
  _impl_.autonomous_system_number_.Destroy();
}

void GeoLocationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.GeoLocationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_name_.ClearToEmpty();
  _impl_.country_code_.ClearToEmpty();
  _impl_.region_name_.ClearToEmpty();
  _impl_.city_name_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.isp_name_.ClearToEmpty();
  _impl_.organization_name_.ClearToEmpty();
  _impl_.autonomous_system_number_.ClearToEmpty();
  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.threat_level_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.threat_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoLocationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string country_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.country_name"));
        } else
          goto handle_unusual;
        continue;
      // string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.country_code"));
        } else
          goto handle_unusual;
        continue;
      // string region_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.region_name"));
        } else
          goto handle_unusual;
        continue;
      // string city_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_city_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.city_name"));
        } else
          goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string timezone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string isp_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_isp_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.isp_name"));
        } else
          goto handle_unusual;
        continue;
      // string organization_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_organization_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.organization_name"));
        } else
          goto handle_unusual;
        continue;
      // string autonomous_system_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_autonomous_system_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoLocationInfo.autonomous_system_number"));
        } else
          goto handle_unusual;
        continue;
      // bool is_anonymous_proxy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_anonymous_proxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_satellite_provider = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_satellite_provider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_tor_exit_node = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_tor_exit_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_known_malicious = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_known_malicious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_threat_level(static_cast<::protobuf::GeoLocationInfo_ThreatLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoLocationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GeoLocationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string country_name = 1;
  if (!this->_internal_country_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_name().data(), static_cast<int>(this->_internal_country_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_name(), target);
  }

  // string country_code = 2;
  if (!this->_internal_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // string region_name = 3;
  if (!this->_internal_region_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_name().data(), static_cast<int>(this->_internal_region_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.region_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region_name(), target);
  }

  // string city_name = 4;
  if (!this->_internal_city_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city_name().data(), static_cast<int>(this->_internal_city_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.city_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_city_name(), target);
  }

  // double latitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // double longitude = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude(), target);
  }

  // string timezone = 7;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.timezone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timezone(), target);
  }

  // string isp_name = 8;
  if (!this->_internal_isp_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isp_name().data(), static_cast<int>(this->_internal_isp_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.isp_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_isp_name(), target);
  }

  // string organization_name = 9;
  if (!this->_internal_organization_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_name().data(), static_cast<int>(this->_internal_organization_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.organization_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_organization_name(), target);
  }

  // string autonomous_system_number = 10;
  if (!this->_internal_autonomous_system_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_autonomous_system_number().data(), static_cast<int>(this->_internal_autonomous_system_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoLocationInfo.autonomous_system_number");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_autonomous_system_number(), target);
  }

  // bool is_anonymous_proxy = 11;
  if (this->_internal_is_anonymous_proxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_anonymous_proxy(), target);
  }

  // bool is_satellite_provider = 12;
  if (this->_internal_is_satellite_provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_satellite_provider(), target);
  }

  // bool is_tor_exit_node = 13;
  if (this->_internal_is_tor_exit_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_tor_exit_node(), target);
  }

  // bool is_known_malicious = 14;
  if (this->_internal_is_known_malicious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_known_malicious(), target);
  }

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  if (this->_internal_threat_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_threat_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GeoLocationInfo)
  return target;
}

size_t GeoLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.GeoLocationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country_name = 1;
  if (!this->_internal_country_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_name());
  }

  // string country_code = 2;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // string region_name = 3;
  if (!this->_internal_region_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_name());
  }

  // string city_name = 4;
  if (!this->_internal_city_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city_name());
  }

  // string timezone = 7;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string isp_name = 8;
  if (!this->_internal_isp_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isp_name());
  }

  // string organization_name = 9;
  if (!this->_internal_organization_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_name());
  }

  // string autonomous_system_number = 10;
  if (!this->_internal_autonomous_system_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_autonomous_system_number());
  }

  // double latitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // bool is_anonymous_proxy = 11;
  if (this->_internal_is_anonymous_proxy() != 0) {
    total_size += 1 + 1;
  }

  // bool is_satellite_provider = 12;
  if (this->_internal_is_satellite_provider() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tor_exit_node = 13;
  if (this->_internal_is_tor_exit_node() != 0) {
    total_size += 1 + 1;
  }

  // bool is_known_malicious = 14;
  if (this->_internal_is_known_malicious() != 0) {
    total_size += 1 + 1;
  }

  // .protobuf.GeoLocationInfo.ThreatLevel threat_level = 15;
  if (this->_internal_threat_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_threat_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoLocationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoLocationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoLocationInfo::GetClassData() const { return &_class_data_; }


void GeoLocationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoLocationInfo*>(&to_msg);
  auto& from = static_cast<const GeoLocationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.GeoLocationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_country_name().empty()) {
    _this->_internal_set_country_name(from._internal_country_name());
  }
  if (!from._internal_country_code().empty()) {
    _this->_internal_set_country_code(from._internal_country_code());
  }
  if (!from._internal_region_name().empty()) {
    _this->_internal_set_region_name(from._internal_region_name());
  }
  if (!from._internal_city_name().empty()) {
    _this->_internal_set_city_name(from._internal_city_name());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_isp_name().empty()) {
    _this->_internal_set_isp_name(from._internal_isp_name());
  }
  if (!from._internal_organization_name().empty()) {
    _this->_internal_set_organization_name(from._internal_organization_name());
  }
  if (!from._internal_autonomous_system_number().empty()) {
    _this->_internal_set_autonomous_system_number(from._internal_autonomous_system_number());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_is_anonymous_proxy() != 0) {
    _this->_internal_set_is_anonymous_proxy(from._internal_is_anonymous_proxy());
  }
  if (from._internal_is_satellite_provider() != 0) {
    _this->_internal_set_is_satellite_provider(from._internal_is_satellite_provider());
  }
  if (from._internal_is_tor_exit_node() != 0) {
    _this->_internal_set_is_tor_exit_node(from._internal_is_tor_exit_node());
  }
  if (from._internal_is_known_malicious() != 0) {
    _this->_internal_set_is_known_malicious(from._internal_is_known_malicious());
  }
  if (from._internal_threat_level() != 0) {
    _this->_internal_set_threat_level(from._internal_threat_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoLocationInfo::CopyFrom(const GeoLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.GeoLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLocationInfo::IsInitialized() const {
  return true;
}

void GeoLocationInfo::InternalSwap(GeoLocationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_name_, lhs_arena,
      &other->_impl_.country_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_name_, lhs_arena,
      &other->_impl_.region_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_name_, lhs_arena,
      &other->_impl_.city_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isp_name_, lhs_arena,
      &other->_impl_.isp_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_name_, lhs_arena,
      &other->_impl_.organization_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.autonomous_system_number_, lhs_arena,
      &other->_impl_.autonomous_system_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoLocationInfo, _impl_.threat_level_)
      + sizeof(GeoLocationInfo::_impl_.threat_level_)
      - PROTOBUF_FIELD_OFFSET(GeoLocationInfo, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLocationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[3]);
}

// ===================================================================

class GeoEnrichment::_Internal {
 public:
  static const ::protobuf::GeoLocationInfo& sniffer_node_geo(const GeoEnrichment* msg);
  static const ::protobuf::GeoLocationInfo& source_ip_geo(const GeoEnrichment* msg);
  static const ::protobuf::GeoLocationInfo& destination_ip_geo(const GeoEnrichment* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ip_discovery_time(const GeoEnrichment* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& enrichment_timestamp(const GeoEnrichment* msg);
};

const ::protobuf::GeoLocationInfo&
GeoEnrichment::_Internal::sniffer_node_geo(const GeoEnrichment* msg) {
  return *msg->_impl_.sniffer_node_geo_;
}
const ::protobuf::GeoLocationInfo&
GeoEnrichment::_Internal::source_ip_geo(const GeoEnrichment* msg) {
  return *msg->_impl_.source_ip_geo_;
}
const ::protobuf::GeoLocationInfo&
GeoEnrichment::_Internal::destination_ip_geo(const GeoEnrichment* msg) {
  return *msg->_impl_.destination_ip_geo_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GeoEnrichment::_Internal::ip_discovery_time(const GeoEnrichment* msg) {
  return *msg->_impl_.ip_discovery_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GeoEnrichment::_Internal::enrichment_timestamp(const GeoEnrichment* msg) {
  return *msg->_impl_.enrichment_timestamp_;
}
void GeoEnrichment::clear_ip_discovery_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.ip_discovery_time_ != nullptr) {
    delete _impl_.ip_discovery_time_;
  }
  _impl_.ip_discovery_time_ = nullptr;
}
void GeoEnrichment::clear_enrichment_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.enrichment_timestamp_ != nullptr) {
    delete _impl_.enrichment_timestamp_;
  }
  _impl_.enrichment_timestamp_ = nullptr;
}
GeoEnrichment::GeoEnrichment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.GeoEnrichment)
}
GeoEnrichment::GeoEnrichment(const GeoEnrichment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoEnrichment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.threat_intelligence_matches_){from._impl_.threat_intelligence_matches_}
    , decltype(_impl_.distance_category_){}
    , decltype(_impl_.sniffer_source_relationship_){}
    , decltype(_impl_.sniffer_destination_relationship_){}
    , decltype(_impl_.threat_intelligence_source_){}
    , decltype(_impl_.original_private_ip_){}
    , decltype(_impl_.discovered_public_ip_){}
    , decltype(_impl_.ip_discovery_service_){}
    , decltype(_impl_.enricher_version_){}
    , decltype(_impl_.geoip_method_){}
    , decltype(_impl_.geoip_database_version_){}
    , decltype(_impl_.sniffer_node_geo_){nullptr}
    , decltype(_impl_.source_ip_geo_){nullptr}
    , decltype(_impl_.destination_ip_geo_){nullptr}
    , decltype(_impl_.ip_discovery_time_){nullptr}
    , decltype(_impl_.enrichment_timestamp_){nullptr}
    , decltype(_impl_.source_destination_distance_km_){}
    , decltype(_impl_.sniffer_source_distance_km_){}
    , decltype(_impl_.source_destination_same_country_){}
    , decltype(_impl_.source_destination_same_continent_){}
    , decltype(_impl_.sniffer_source_same_country_){}
    , decltype(_impl_.sniffer_destination_same_country_){}
    , decltype(_impl_.geographic_anomaly_score_){}
    , decltype(_impl_.sniffer_destination_distance_km_){}
    , decltype(_impl_.suspicious_geographic_pattern_){}
    , decltype(_impl_.sniffer_node_enriched_){}
    , decltype(_impl_.source_ip_enriched_){}
    , decltype(_impl_.destination_ip_enriched_){}
    , decltype(_impl_.enrichment_complete_){}
    , decltype(_impl_.public_ip_discovery_attempted_){}
    , decltype(_impl_.fallback_coordinates_used_){}
    , decltype(_impl_.total_lookup_latency_ms_){}
    , decltype(_impl_.cache_hits_){}
    , decltype(_impl_.cache_misses_){}
    , decltype(_impl_.enrichment_success_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.distance_category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distance_category().empty()) {
    _this->_impl_.distance_category_.Set(from._internal_distance_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sniffer_source_relationship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sniffer_source_relationship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sniffer_source_relationship().empty()) {
    _this->_impl_.sniffer_source_relationship_.Set(from._internal_sniffer_source_relationship(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sniffer_destination_relationship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sniffer_destination_relationship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sniffer_destination_relationship().empty()) {
    _this->_impl_.sniffer_destination_relationship_.Set(from._internal_sniffer_destination_relationship(), 
      _this->GetArenaForAllocation());
  }
  _impl_.threat_intelligence_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threat_intelligence_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threat_intelligence_source().empty()) {
    _this->_impl_.threat_intelligence_source_.Set(from._internal_threat_intelligence_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_private_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_private_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_private_ip().empty()) {
    _this->_impl_.original_private_ip_.Set(from._internal_original_private_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.discovered_public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.discovered_public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_discovered_public_ip().empty()) {
    _this->_impl_.discovered_public_ip_.Set(from._internal_discovered_public_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_discovery_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_discovery_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_discovery_service().empty()) {
    _this->_impl_.ip_discovery_service_.Set(from._internal_ip_discovery_service(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enricher_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enricher_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enricher_version().empty()) {
    _this->_impl_.enricher_version_.Set(from._internal_enricher_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.geoip_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geoip_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_geoip_method().empty()) {
    _this->_impl_.geoip_method_.Set(from._internal_geoip_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.geoip_database_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geoip_database_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_geoip_database_version().empty()) {
    _this->_impl_.geoip_database_version_.Set(from._internal_geoip_database_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sniffer_node_geo()) {
    _this->_impl_.sniffer_node_geo_ = new ::protobuf::GeoLocationInfo(*from._impl_.sniffer_node_geo_);
  }
  if (from._internal_has_source_ip_geo()) {
    _this->_impl_.source_ip_geo_ = new ::protobuf::GeoLocationInfo(*from._impl_.source_ip_geo_);
  }
  if (from._internal_has_destination_ip_geo()) {
    _this->_impl_.destination_ip_geo_ = new ::protobuf::GeoLocationInfo(*from._impl_.destination_ip_geo_);
  }
  if (from._internal_has_ip_discovery_time()) {
    _this->_impl_.ip_discovery_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ip_discovery_time_);
  }
  if (from._internal_has_enrichment_timestamp()) {
    _this->_impl_.enrichment_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.enrichment_timestamp_);
  }
  ::memcpy(&_impl_.source_destination_distance_km_, &from._impl_.source_destination_distance_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enrichment_success_rate_) -
    reinterpret_cast<char*>(&_impl_.source_destination_distance_km_)) + sizeof(_impl_.enrichment_success_rate_));
  // @@protoc_insertion_point(copy_constructor:protobuf.GeoEnrichment)
}

inline void GeoEnrichment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.threat_intelligence_matches_){arena}
    , decltype(_impl_.distance_category_){}
    , decltype(_impl_.sniffer_source_relationship_){}
    , decltype(_impl_.sniffer_destination_relationship_){}
    , decltype(_impl_.threat_intelligence_source_){}
    , decltype(_impl_.original_private_ip_){}
    , decltype(_impl_.discovered_public_ip_){}
    , decltype(_impl_.ip_discovery_service_){}
    , decltype(_impl_.enricher_version_){}
    , decltype(_impl_.geoip_method_){}
    , decltype(_impl_.geoip_database_version_){}
    , decltype(_impl_.sniffer_node_geo_){nullptr}
    , decltype(_impl_.source_ip_geo_){nullptr}
    , decltype(_impl_.destination_ip_geo_){nullptr}
    , decltype(_impl_.ip_discovery_time_){nullptr}
    , decltype(_impl_.enrichment_timestamp_){nullptr}
    , decltype(_impl_.source_destination_distance_km_){0}
    , decltype(_impl_.sniffer_source_distance_km_){0}
    , decltype(_impl_.source_destination_same_country_){false}
    , decltype(_impl_.source_destination_same_continent_){false}
    , decltype(_impl_.sniffer_source_same_country_){false}
    , decltype(_impl_.sniffer_destination_same_country_){false}
    , decltype(_impl_.geographic_anomaly_score_){0}
    , decltype(_impl_.sniffer_destination_distance_km_){0}
    , decltype(_impl_.suspicious_geographic_pattern_){false}
    , decltype(_impl_.sniffer_node_enriched_){false}
    , decltype(_impl_.source_ip_enriched_){false}
    , decltype(_impl_.destination_ip_enriched_){false}
    , decltype(_impl_.enrichment_complete_){false}
    , decltype(_impl_.public_ip_discovery_attempted_){false}
    , decltype(_impl_.fallback_coordinates_used_){false}
    , decltype(_impl_.total_lookup_latency_ms_){0}
    , decltype(_impl_.cache_hits_){0}
    , decltype(_impl_.cache_misses_){0}
    , decltype(_impl_.enrichment_success_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.distance_category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distance_category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sniffer_source_relationship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sniffer_source_relationship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sniffer_destination_relationship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sniffer_destination_relationship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threat_intelligence_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threat_intelligence_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_private_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_private_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.discovered_public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.discovered_public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_discovery_service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_discovery_service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enricher_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enricher_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.geoip_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geoip_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.geoip_database_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geoip_database_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeoEnrichment::~GeoEnrichment() {
  // @@protoc_insertion_point(destructor:protobuf.GeoEnrichment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoEnrichment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threat_intelligence_matches_.~RepeatedPtrField();
  _impl_.distance_category_.Destroy();
  _impl_.sniffer_source_relationship_.Destroy();
  _impl_.sniffer_destination_relationship_.Destroy();
  _impl_.threat_intelligence_source_.Destroy();
  _impl_.original_private_ip_.Destroy();
  _impl_.discovered_public_ip_.Destroy();
  _impl_.ip_discovery_service_.Destroy();
  _impl_.enricher_version_.Destroy();
  _impl_.geoip_method_.Destroy();
  _impl_.geoip_database_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sniffer_node_geo_;
  if (this != internal_default_instance()) delete _impl_.source_ip_geo_;
  if (this != internal_default_instance()) delete _impl_.destination_ip_geo_;
  if (this != internal_default_instance()) delete _impl_.ip_discovery_time_;
  if (this != internal_default_instance()) delete _impl_.enrichment_timestamp_;
}

void GeoEnrichment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoEnrichment::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.GeoEnrichment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threat_intelligence_matches_.Clear();
  _impl_.distance_category_.ClearToEmpty();
  _impl_.sniffer_source_relationship_.ClearToEmpty();
  _impl_.sniffer_destination_relationship_.ClearToEmpty();
  _impl_.threat_intelligence_source_.ClearToEmpty();
  _impl_.original_private_ip_.ClearToEmpty();
  _impl_.discovered_public_ip_.ClearToEmpty();
  _impl_.ip_discovery_service_.ClearToEmpty();
  _impl_.enricher_version_.ClearToEmpty();
  _impl_.geoip_method_.ClearToEmpty();
  _impl_.geoip_database_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sniffer_node_geo_ != nullptr) {
    delete _impl_.sniffer_node_geo_;
  }
  _impl_.sniffer_node_geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_ip_geo_ != nullptr) {
    delete _impl_.source_ip_geo_;
  }
  _impl_.source_ip_geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ip_geo_ != nullptr) {
    delete _impl_.destination_ip_geo_;
  }
  _impl_.destination_ip_geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ip_discovery_time_ != nullptr) {
    delete _impl_.ip_discovery_time_;
  }
  _impl_.ip_discovery_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enrichment_timestamp_ != nullptr) {
    delete _impl_.enrichment_timestamp_;
  }
  _impl_.enrichment_timestamp_ = nullptr;
  ::memset(&_impl_.source_destination_distance_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enrichment_success_rate_) -
      reinterpret_cast<char*>(&_impl_.source_destination_distance_km_)) + sizeof(_impl_.enrichment_success_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoEnrichment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sniffer_node_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.GeoLocationInfo source_ip_geo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_ip_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.GeoLocationInfo destination_ip_geo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination_ip_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double source_destination_distance_km = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.source_destination_distance_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool source_destination_same_country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.source_destination_same_country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool source_destination_same_continent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.source_destination_same_continent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string distance_category = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_distance_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.distance_category"));
        } else
          goto handle_unusual;
        continue;
      // double sniffer_source_distance_km = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.sniffer_source_distance_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool sniffer_source_same_country = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.sniffer_source_same_country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sniffer_source_relationship = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_sniffer_source_relationship();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.sniffer_source_relationship"));
        } else
          goto handle_unusual;
        continue;
      // double sniffer_destination_distance_km = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.sniffer_destination_distance_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool sniffer_destination_same_country = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.sniffer_destination_same_country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sniffer_destination_relationship = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_sniffer_destination_relationship();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.sniffer_destination_relationship"));
        } else
          goto handle_unusual;
        continue;
      // repeated string threat_intelligence_matches = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_threat_intelligence_matches();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.threat_intelligence_matches"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string threat_intelligence_source = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_threat_intelligence_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.threat_intelligence_source"));
        } else
          goto handle_unusual;
        continue;
      // float geographic_anomaly_score = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.geographic_anomaly_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool suspicious_geographic_pattern = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.suspicious_geographic_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sniffer_node_enriched = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.sniffer_node_enriched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool source_ip_enriched = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.source_ip_enriched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool destination_ip_enriched = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.destination_ip_enriched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enrichment_complete = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.enrichment_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool public_ip_discovery_attempted = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.public_ip_discovery_attempted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string original_private_ip = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_original_private_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.original_private_ip"));
        } else
          goto handle_unusual;
        continue;
      // string discovered_public_ip = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_discovered_public_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.discovered_public_ip"));
        } else
          goto handle_unusual;
        continue;
      // string ip_discovery_service = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_ip_discovery_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.ip_discovery_service"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ip_discovery_time = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_discovery_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enricher_version = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_enricher_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.enricher_version"));
        } else
          goto handle_unusual;
        continue;
      // string geoip_method = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_geoip_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.geoip_method"));
        } else
          goto handle_unusual;
        continue;
      // string geoip_database_version = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_geoip_database_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.GeoEnrichment.geoip_database_version"));
        } else
          goto handle_unusual;
        continue;
      // bool fallback_coordinates_used = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.fallback_coordinates_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float total_lookup_latency_ms = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.total_lookup_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 cache_hits = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.cache_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cache_misses = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.cache_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float enrichment_success_rate = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.enrichment_success_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp enrichment_timestamp = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_enrichment_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoEnrichment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GeoEnrichment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  if (this->_internal_has_sniffer_node_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sniffer_node_geo(this),
        _Internal::sniffer_node_geo(this).GetCachedSize(), target, stream);
  }

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  if (this->_internal_has_source_ip_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_ip_geo(this),
        _Internal::source_ip_geo(this).GetCachedSize(), target, stream);
  }

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  if (this->_internal_has_destination_ip_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::destination_ip_geo(this),
        _Internal::destination_ip_geo(this).GetCachedSize(), target, stream);
  }

  // double source_destination_distance_km = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_source_destination_distance_km = this->_internal_source_destination_distance_km();
  uint64_t raw_source_destination_distance_km;
  memcpy(&raw_source_destination_distance_km, &tmp_source_destination_distance_km, sizeof(tmp_source_destination_distance_km));
  if (raw_source_destination_distance_km != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_source_destination_distance_km(), target);
  }

  // bool source_destination_same_country = 11;
  if (this->_internal_source_destination_same_country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_source_destination_same_country(), target);
  }

  // bool source_destination_same_continent = 12;
  if (this->_internal_source_destination_same_continent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_source_destination_same_continent(), target);
  }

  // string distance_category = 13;
  if (!this->_internal_distance_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distance_category().data(), static_cast<int>(this->_internal_distance_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.distance_category");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_distance_category(), target);
  }

  // double sniffer_source_distance_km = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_source_distance_km = this->_internal_sniffer_source_distance_km();
  uint64_t raw_sniffer_source_distance_km;
  memcpy(&raw_sniffer_source_distance_km, &tmp_sniffer_source_distance_km, sizeof(tmp_sniffer_source_distance_km));
  if (raw_sniffer_source_distance_km != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_sniffer_source_distance_km(), target);
  }

  // bool sniffer_source_same_country = 21;
  if (this->_internal_sniffer_source_same_country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_sniffer_source_same_country(), target);
  }

  // string sniffer_source_relationship = 22;
  if (!this->_internal_sniffer_source_relationship().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sniffer_source_relationship().data(), static_cast<int>(this->_internal_sniffer_source_relationship().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_source_relationship");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_sniffer_source_relationship(), target);
  }

  // double sniffer_destination_distance_km = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_destination_distance_km = this->_internal_sniffer_destination_distance_km();
  uint64_t raw_sniffer_destination_distance_km;
  memcpy(&raw_sniffer_destination_distance_km, &tmp_sniffer_destination_distance_km, sizeof(tmp_sniffer_destination_distance_km));
  if (raw_sniffer_destination_distance_km != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_sniffer_destination_distance_km(), target);
  }

  // bool sniffer_destination_same_country = 26;
  if (this->_internal_sniffer_destination_same_country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_sniffer_destination_same_country(), target);
  }

  // string sniffer_destination_relationship = 27;
  if (!this->_internal_sniffer_destination_relationship().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sniffer_destination_relationship().data(), static_cast<int>(this->_internal_sniffer_destination_relationship().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.sniffer_destination_relationship");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_sniffer_destination_relationship(), target);
  }

  // repeated string threat_intelligence_matches = 30;
  for (int i = 0, n = this->_internal_threat_intelligence_matches_size(); i < n; i++) {
    const auto& s = this->_internal_threat_intelligence_matches(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_matches");
    target = stream->WriteString(30, s, target);
  }

  // string threat_intelligence_source = 31;
  if (!this->_internal_threat_intelligence_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_threat_intelligence_source().data(), static_cast<int>(this->_internal_threat_intelligence_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.threat_intelligence_source");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_threat_intelligence_source(), target);
  }

  // float geographic_anomaly_score = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_geographic_anomaly_score = this->_internal_geographic_anomaly_score();
  uint32_t raw_geographic_anomaly_score;
  memcpy(&raw_geographic_anomaly_score, &tmp_geographic_anomaly_score, sizeof(tmp_geographic_anomaly_score));
  if (raw_geographic_anomaly_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_geographic_anomaly_score(), target);
  }

  // bool suspicious_geographic_pattern = 33;
  if (this->_internal_suspicious_geographic_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_suspicious_geographic_pattern(), target);
  }

  // bool sniffer_node_enriched = 40;
  if (this->_internal_sniffer_node_enriched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_sniffer_node_enriched(), target);
  }

  // bool source_ip_enriched = 41;
  if (this->_internal_source_ip_enriched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_source_ip_enriched(), target);
  }

  // bool destination_ip_enriched = 42;
  if (this->_internal_destination_ip_enriched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_destination_ip_enriched(), target);
  }

  // bool enrichment_complete = 43;
  if (this->_internal_enrichment_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_enrichment_complete(), target);
  }

  // bool public_ip_discovery_attempted = 45;
  if (this->_internal_public_ip_discovery_attempted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_public_ip_discovery_attempted(), target);
  }

  // string original_private_ip = 46;
  if (!this->_internal_original_private_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_private_ip().data(), static_cast<int>(this->_internal_original_private_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.original_private_ip");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_original_private_ip(), target);
  }

  // string discovered_public_ip = 47;
  if (!this->_internal_discovered_public_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_discovered_public_ip().data(), static_cast<int>(this->_internal_discovered_public_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.discovered_public_ip");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_discovered_public_ip(), target);
  }

  // string ip_discovery_service = 48;
  if (!this->_internal_ip_discovery_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_discovery_service().data(), static_cast<int>(this->_internal_ip_discovery_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.ip_discovery_service");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_ip_discovery_service(), target);
  }

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  if (this->_internal_has_ip_discovery_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::ip_discovery_time(this),
        _Internal::ip_discovery_time(this).GetCachedSize(), target, stream);
  }

  // string enricher_version = 50;
  if (!this->_internal_enricher_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enricher_version().data(), static_cast<int>(this->_internal_enricher_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.enricher_version");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_enricher_version(), target);
  }

  // string geoip_method = 51;
  if (!this->_internal_geoip_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geoip_method().data(), static_cast<int>(this->_internal_geoip_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_method");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_geoip_method(), target);
  }

  // string geoip_database_version = 52;
  if (!this->_internal_geoip_database_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geoip_database_version().data(), static_cast<int>(this->_internal_geoip_database_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.GeoEnrichment.geoip_database_version");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_geoip_database_version(), target);
  }

  // bool fallback_coordinates_used = 53;
  if (this->_internal_fallback_coordinates_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_fallback_coordinates_used(), target);
  }

  // float total_lookup_latency_ms = 54;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_lookup_latency_ms = this->_internal_total_lookup_latency_ms();
  uint32_t raw_total_lookup_latency_ms;
  memcpy(&raw_total_lookup_latency_ms, &tmp_total_lookup_latency_ms, sizeof(tmp_total_lookup_latency_ms));
  if (raw_total_lookup_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(54, this->_internal_total_lookup_latency_ms(), target);
  }

  // int32 cache_hits = 55;
  if (this->_internal_cache_hits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_cache_hits(), target);
  }

  // int32 cache_misses = 56;
  if (this->_internal_cache_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_cache_misses(), target);
  }

  // float enrichment_success_rate = 57;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enrichment_success_rate = this->_internal_enrichment_success_rate();
  uint32_t raw_enrichment_success_rate;
  memcpy(&raw_enrichment_success_rate, &tmp_enrichment_success_rate, sizeof(tmp_enrichment_success_rate));
  if (raw_enrichment_success_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_enrichment_success_rate(), target);
  }

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  if (this->_internal_has_enrichment_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::enrichment_timestamp(this),
        _Internal::enrichment_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GeoEnrichment)
  return target;
}

size_t GeoEnrichment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.GeoEnrichment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string threat_intelligence_matches = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.threat_intelligence_matches_.size());
  for (int i = 0, n = _impl_.threat_intelligence_matches_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.threat_intelligence_matches_.Get(i));
  }

  // string distance_category = 13;
  if (!this->_internal_distance_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distance_category());
  }

  // string sniffer_source_relationship = 22;
  if (!this->_internal_sniffer_source_relationship().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sniffer_source_relationship());
  }

  // string sniffer_destination_relationship = 27;
  if (!this->_internal_sniffer_destination_relationship().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sniffer_destination_relationship());
  }

  // string threat_intelligence_source = 31;
  if (!this->_internal_threat_intelligence_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_threat_intelligence_source());
  }

  // string original_private_ip = 46;
  if (!this->_internal_original_private_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_private_ip());
  }

  // string discovered_public_ip = 47;
  if (!this->_internal_discovered_public_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_discovered_public_ip());
  }

  // string ip_discovery_service = 48;
  if (!this->_internal_ip_discovery_service().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_discovery_service());
  }

  // string enricher_version = 50;
  if (!this->_internal_enricher_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enricher_version());
  }

  // string geoip_method = 51;
  if (!this->_internal_geoip_method().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geoip_method());
  }

  // string geoip_database_version = 52;
  if (!this->_internal_geoip_database_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geoip_database_version());
  }

  // .protobuf.GeoLocationInfo sniffer_node_geo = 1;
  if (this->_internal_has_sniffer_node_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sniffer_node_geo_);
  }

  // .protobuf.GeoLocationInfo source_ip_geo = 2;
  if (this->_internal_has_source_ip_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_ip_geo_);
  }

  // .protobuf.GeoLocationInfo destination_ip_geo = 3;
  if (this->_internal_has_destination_ip_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_ip_geo_);
  }

  // .google.protobuf.Timestamp ip_discovery_time = 49;
  if (this->_internal_has_ip_discovery_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ip_discovery_time_);
  }

  // .google.protobuf.Timestamp enrichment_timestamp = 58;
  if (this->_internal_has_enrichment_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enrichment_timestamp_);
  }

  // double source_destination_distance_km = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_source_destination_distance_km = this->_internal_source_destination_distance_km();
  uint64_t raw_source_destination_distance_km;
  memcpy(&raw_source_destination_distance_km, &tmp_source_destination_distance_km, sizeof(tmp_source_destination_distance_km));
  if (raw_source_destination_distance_km != 0) {
    total_size += 1 + 8;
  }

  // double sniffer_source_distance_km = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_source_distance_km = this->_internal_sniffer_source_distance_km();
  uint64_t raw_sniffer_source_distance_km;
  memcpy(&raw_sniffer_source_distance_km, &tmp_sniffer_source_distance_km, sizeof(tmp_sniffer_source_distance_km));
  if (raw_sniffer_source_distance_km != 0) {
    total_size += 2 + 8;
  }

  // bool source_destination_same_country = 11;
  if (this->_internal_source_destination_same_country() != 0) {
    total_size += 1 + 1;
  }

  // bool source_destination_same_continent = 12;
  if (this->_internal_source_destination_same_continent() != 0) {
    total_size += 1 + 1;
  }

  // bool sniffer_source_same_country = 21;
  if (this->_internal_sniffer_source_same_country() != 0) {
    total_size += 2 + 1;
  }

  // bool sniffer_destination_same_country = 26;
  if (this->_internal_sniffer_destination_same_country() != 0) {
    total_size += 2 + 1;
  }

  // float geographic_anomaly_score = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_geographic_anomaly_score = this->_internal_geographic_anomaly_score();
  uint32_t raw_geographic_anomaly_score;
  memcpy(&raw_geographic_anomaly_score, &tmp_geographic_anomaly_score, sizeof(tmp_geographic_anomaly_score));
  if (raw_geographic_anomaly_score != 0) {
    total_size += 2 + 4;
  }

  // double sniffer_destination_distance_km = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_destination_distance_km = this->_internal_sniffer_destination_distance_km();
  uint64_t raw_sniffer_destination_distance_km;
  memcpy(&raw_sniffer_destination_distance_km, &tmp_sniffer_destination_distance_km, sizeof(tmp_sniffer_destination_distance_km));
  if (raw_sniffer_destination_distance_km != 0) {
    total_size += 2 + 8;
  }

  // bool suspicious_geographic_pattern = 33;
  if (this->_internal_suspicious_geographic_pattern() != 0) {
    total_size += 2 + 1;
  }

  // bool sniffer_node_enriched = 40;
  if (this->_internal_sniffer_node_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool source_ip_enriched = 41;
  if (this->_internal_source_ip_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool destination_ip_enriched = 42;
  if (this->_internal_destination_ip_enriched() != 0) {
    total_size += 2 + 1;
  }

  // bool enrichment_complete = 43;
  if (this->_internal_enrichment_complete() != 0) {
    total_size += 2 + 1;
  }

  // bool public_ip_discovery_attempted = 45;
  if (this->_internal_public_ip_discovery_attempted() != 0) {
    total_size += 2 + 1;
  }

  // bool fallback_coordinates_used = 53;
  if (this->_internal_fallback_coordinates_used() != 0) {
    total_size += 2 + 1;
  }

  // float total_lookup_latency_ms = 54;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_lookup_latency_ms = this->_internal_total_lookup_latency_ms();
  uint32_t raw_total_lookup_latency_ms;
  memcpy(&raw_total_lookup_latency_ms, &tmp_total_lookup_latency_ms, sizeof(tmp_total_lookup_latency_ms));
  if (raw_total_lookup_latency_ms != 0) {
    total_size += 2 + 4;
  }

  // int32 cache_hits = 55;
  if (this->_internal_cache_hits() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cache_hits());
  }

  // int32 cache_misses = 56;
  if (this->_internal_cache_misses() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cache_misses());
  }

  // float enrichment_success_rate = 57;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enrichment_success_rate = this->_internal_enrichment_success_rate();
  uint32_t raw_enrichment_success_rate;
  memcpy(&raw_enrichment_success_rate, &tmp_enrichment_success_rate, sizeof(tmp_enrichment_success_rate));
  if (raw_enrichment_success_rate != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoEnrichment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoEnrichment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoEnrichment::GetClassData() const { return &_class_data_; }


void GeoEnrichment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoEnrichment*>(&to_msg);
  auto& from = static_cast<const GeoEnrichment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.GeoEnrichment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.threat_intelligence_matches_.MergeFrom(from._impl_.threat_intelligence_matches_);
  if (!from._internal_distance_category().empty()) {
    _this->_internal_set_distance_category(from._internal_distance_category());
  }
  if (!from._internal_sniffer_source_relationship().empty()) {
    _this->_internal_set_sniffer_source_relationship(from._internal_sniffer_source_relationship());
  }
  if (!from._internal_sniffer_destination_relationship().empty()) {
    _this->_internal_set_sniffer_destination_relationship(from._internal_sniffer_destination_relationship());
  }
  if (!from._internal_threat_intelligence_source().empty()) {
    _this->_internal_set_threat_intelligence_source(from._internal_threat_intelligence_source());
  }
  if (!from._internal_original_private_ip().empty()) {
    _this->_internal_set_original_private_ip(from._internal_original_private_ip());
  }
  if (!from._internal_discovered_public_ip().empty()) {
    _this->_internal_set_discovered_public_ip(from._internal_discovered_public_ip());
  }
  if (!from._internal_ip_discovery_service().empty()) {
    _this->_internal_set_ip_discovery_service(from._internal_ip_discovery_service());
  }
  if (!from._internal_enricher_version().empty()) {
    _this->_internal_set_enricher_version(from._internal_enricher_version());
  }
  if (!from._internal_geoip_method().empty()) {
    _this->_internal_set_geoip_method(from._internal_geoip_method());
  }
  if (!from._internal_geoip_database_version().empty()) {
    _this->_internal_set_geoip_database_version(from._internal_geoip_database_version());
  }
  if (from._internal_has_sniffer_node_geo()) {
    _this->_internal_mutable_sniffer_node_geo()->::protobuf::GeoLocationInfo::MergeFrom(
        from._internal_sniffer_node_geo());
  }
  if (from._internal_has_source_ip_geo()) {
    _this->_internal_mutable_source_ip_geo()->::protobuf::GeoLocationInfo::MergeFrom(
        from._internal_source_ip_geo());
  }
  if (from._internal_has_destination_ip_geo()) {
    _this->_internal_mutable_destination_ip_geo()->::protobuf::GeoLocationInfo::MergeFrom(
        from._internal_destination_ip_geo());
  }
  if (from._internal_has_ip_discovery_time()) {
    _this->_internal_mutable_ip_discovery_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ip_discovery_time());
  }
  if (from._internal_has_enrichment_timestamp()) {
    _this->_internal_mutable_enrichment_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_enrichment_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_source_destination_distance_km = from._internal_source_destination_distance_km();
  uint64_t raw_source_destination_distance_km;
  memcpy(&raw_source_destination_distance_km, &tmp_source_destination_distance_km, sizeof(tmp_source_destination_distance_km));
  if (raw_source_destination_distance_km != 0) {
    _this->_internal_set_source_destination_distance_km(from._internal_source_destination_distance_km());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_source_distance_km = from._internal_sniffer_source_distance_km();
  uint64_t raw_sniffer_source_distance_km;
  memcpy(&raw_sniffer_source_distance_km, &tmp_sniffer_source_distance_km, sizeof(tmp_sniffer_source_distance_km));
  if (raw_sniffer_source_distance_km != 0) {
    _this->_internal_set_sniffer_source_distance_km(from._internal_sniffer_source_distance_km());
  }
  if (from._internal_source_destination_same_country() != 0) {
    _this->_internal_set_source_destination_same_country(from._internal_source_destination_same_country());
  }
  if (from._internal_source_destination_same_continent() != 0) {
    _this->_internal_set_source_destination_same_continent(from._internal_source_destination_same_continent());
  }
  if (from._internal_sniffer_source_same_country() != 0) {
    _this->_internal_set_sniffer_source_same_country(from._internal_sniffer_source_same_country());
  }
  if (from._internal_sniffer_destination_same_country() != 0) {
    _this->_internal_set_sniffer_destination_same_country(from._internal_sniffer_destination_same_country());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_geographic_anomaly_score = from._internal_geographic_anomaly_score();
  uint32_t raw_geographic_anomaly_score;
  memcpy(&raw_geographic_anomaly_score, &tmp_geographic_anomaly_score, sizeof(tmp_geographic_anomaly_score));
  if (raw_geographic_anomaly_score != 0) {
    _this->_internal_set_geographic_anomaly_score(from._internal_geographic_anomaly_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sniffer_destination_distance_km = from._internal_sniffer_destination_distance_km();
  uint64_t raw_sniffer_destination_distance_km;
  memcpy(&raw_sniffer_destination_distance_km, &tmp_sniffer_destination_distance_km, sizeof(tmp_sniffer_destination_distance_km));
  if (raw_sniffer_destination_distance_km != 0) {
    _this->_internal_set_sniffer_destination_distance_km(from._internal_sniffer_destination_distance_km());
  }
  if (from._internal_suspicious_geographic_pattern() != 0) {
    _this->_internal_set_suspicious_geographic_pattern(from._internal_suspicious_geographic_pattern());
  }
  if (from._internal_sniffer_node_enriched() != 0) {
    _this->_internal_set_sniffer_node_enriched(from._internal_sniffer_node_enriched());
  }
  if (from._internal_source_ip_enriched() != 0) {
    _this->_internal_set_source_ip_enriched(from._internal_source_ip_enriched());
  }
  if (from._internal_destination_ip_enriched() != 0) {
    _this->_internal_set_destination_ip_enriched(from._internal_destination_ip_enriched());
  }
  if (from._internal_enrichment_complete() != 0) {
    _this->_internal_set_enrichment_complete(from._internal_enrichment_complete());
  }
  if (from._internal_public_ip_discovery_attempted() != 0) {
    _this->_internal_set_public_ip_discovery_attempted(from._internal_public_ip_discovery_attempted());
  }
  if (from._internal_fallback_coordinates_used() != 0) {
    _this->_internal_set_fallback_coordinates_used(from._internal_fallback_coordinates_used());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_lookup_latency_ms = from._internal_total_lookup_latency_ms();
  uint32_t raw_total_lookup_latency_ms;
  memcpy(&raw_total_lookup_latency_ms, &tmp_total_lookup_latency_ms, sizeof(tmp_total_lookup_latency_ms));
  if (raw_total_lookup_latency_ms != 0) {
    _this->_internal_set_total_lookup_latency_ms(from._internal_total_lookup_latency_ms());
  }
  if (from._internal_cache_hits() != 0) {
    _this->_internal_set_cache_hits(from._internal_cache_hits());
  }
  if (from._internal_cache_misses() != 0) {
    _this->_internal_set_cache_misses(from._internal_cache_misses());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enrichment_success_rate = from._internal_enrichment_success_rate();
  uint32_t raw_enrichment_success_rate;
  memcpy(&raw_enrichment_success_rate, &tmp_enrichment_success_rate, sizeof(tmp_enrichment_success_rate));
  if (raw_enrichment_success_rate != 0) {
    _this->_internal_set_enrichment_success_rate(from._internal_enrichment_success_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoEnrichment::CopyFrom(const GeoEnrichment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.GeoEnrichment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoEnrichment::IsInitialized() const {
  return true;
}

void GeoEnrichment::InternalSwap(GeoEnrichment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.threat_intelligence_matches_.InternalSwap(&other->_impl_.threat_intelligence_matches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.distance_category_, lhs_arena,
      &other->_impl_.distance_category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sniffer_source_relationship_, lhs_arena,
      &other->_impl_.sniffer_source_relationship_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sniffer_destination_relationship_, lhs_arena,
      &other->_impl_.sniffer_destination_relationship_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.threat_intelligence_source_, lhs_arena,
      &other->_impl_.threat_intelligence_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_private_ip_, lhs_arena,
      &other->_impl_.original_private_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.discovered_public_ip_, lhs_arena,
      &other->_impl_.discovered_public_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_discovery_service_, lhs_arena,
      &other->_impl_.ip_discovery_service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enricher_version_, lhs_arena,
      &other->_impl_.enricher_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.geoip_method_, lhs_arena,
      &other->_impl_.geoip_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.geoip_database_version_, lhs_arena,
      &other->_impl_.geoip_database_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoEnrichment, _impl_.enrichment_success_rate_)
      + sizeof(GeoEnrichment::_impl_.enrichment_success_rate_)
      - PROTOBUF_FIELD_OFFSET(GeoEnrichment, _impl_.sniffer_node_geo_)>(
          reinterpret_cast<char*>(&_impl_.sniffer_node_geo_),
          reinterpret_cast<char*>(&other->_impl_.sniffer_node_geo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoEnrichment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[4]);
}

// ===================================================================

class TimeWindow::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_start(const TimeWindow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& window_end(const TimeWindow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& window_duration(const TimeWindow* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeWindow::_Internal::window_start(const TimeWindow* msg) {
  return *msg->_impl_.window_start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeWindow::_Internal::window_end(const TimeWindow* msg) {
  return *msg->_impl_.window_end_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TimeWindow::_Internal::window_duration(const TimeWindow* msg) {
  return *msg->_impl_.window_duration_;
}
void TimeWindow::clear_window_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_start_ != nullptr) {
    delete _impl_.window_start_;
  }
  _impl_.window_start_ = nullptr;
}
void TimeWindow::clear_window_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_end_ != nullptr) {
    delete _impl_.window_end_;
  }
  _impl_.window_end_ = nullptr;
}
void TimeWindow::clear_window_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_duration_ != nullptr) {
    delete _impl_.window_duration_;
  }
  _impl_.window_duration_ = nullptr;
}
TimeWindow::TimeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.TimeWindow)
}
TimeWindow::TimeWindow(const TimeWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeWindow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_start_){nullptr}
    , decltype(_impl_.window_end_){nullptr}
    , decltype(_impl_.window_duration_){nullptr}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.window_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_window_start()) {
    _this->_impl_.window_start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.window_start_);
  }
  if (from._internal_has_window_end()) {
    _this->_impl_.window_end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.window_end_);
  }
  if (from._internal_has_window_duration()) {
    _this->_impl_.window_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.window_duration_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.window_type_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.window_type_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TimeWindow)
}

inline void TimeWindow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_start_){nullptr}
    , decltype(_impl_.window_end_){nullptr}
    , decltype(_impl_.window_duration_){nullptr}
    , decltype(_impl_.sequence_number_){uint64_t{0u}}
    , decltype(_impl_.window_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeWindow::~TimeWindow() {
  // @@protoc_insertion_point(destructor:protobuf.TimeWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.window_start_;
  if (this != internal_default_instance()) delete _impl_.window_end_;
  if (this != internal_default_instance()) delete _impl_.window_duration_;
}

void TimeWindow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TimeWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.window_start_ != nullptr) {
    delete _impl_.window_start_;
  }
  _impl_.window_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_end_ != nullptr) {
    delete _impl_.window_end_;
  }
  _impl_.window_end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_duration_ != nullptr) {
    delete _impl_.window_duration_;
  }
  _impl_.window_duration_ = nullptr;
  ::memset(&_impl_.sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.window_type_) -
      reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.window_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp window_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp window_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration window_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.TimeWindow.WindowType window_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_window_type(static_cast<::protobuf::TimeWindow_WindowType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TimeWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp window_start = 1;
  if (this->_internal_has_window_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::window_start(this),
        _Internal::window_start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp window_end = 2;
  if (this->_internal_has_window_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_end(this),
        _Internal::window_end(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration window_duration = 3;
  if (this->_internal_has_window_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::window_duration(this),
        _Internal::window_duration(this).GetCachedSize(), target, stream);
  }

  // uint64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // .protobuf.TimeWindow.WindowType window_type = 5;
  if (this->_internal_window_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_window_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TimeWindow)
  return target;
}

size_t TimeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TimeWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp window_start = 1;
  if (this->_internal_has_window_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_start_);
  }

  // .google.protobuf.Timestamp window_end = 2;
  if (this->_internal_has_window_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_end_);
  }

  // .google.protobuf.Duration window_duration = 3;
  if (this->_internal_has_window_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_duration_);
  }

  // uint64 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence_number());
  }

  // .protobuf.TimeWindow.WindowType window_type = 5;
  if (this->_internal_window_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_window_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeWindow::GetClassData() const { return &_class_data_; }


void TimeWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeWindow*>(&to_msg);
  auto& from = static_cast<const TimeWindow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TimeWindow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_window_start()) {
    _this->_internal_mutable_window_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_window_start());
  }
  if (from._internal_has_window_end()) {
    _this->_internal_mutable_window_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_window_end());
  }
  if (from._internal_has_window_duration()) {
    _this->_internal_mutable_window_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_window_duration());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_window_type() != 0) {
    _this->_internal_set_window_type(from._internal_window_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeWindow::CopyFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeWindow::IsInitialized() const {
  return true;
}

void TimeWindow::InternalSwap(TimeWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeWindow, _impl_.window_type_)
      + sizeof(TimeWindow::_impl_.window_type_)
      - PROTOBUF_FIELD_OFFSET(TimeWindow, _impl_.window_start_)>(
          reinterpret_cast<char*>(&_impl_.window_start_),
          reinterpret_cast<char*>(&other->_impl_.window_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeWindow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[5]);
}

// ===================================================================

FlowAggregation_ProtocolDistributionEntry_DoNotUse::FlowAggregation_ProtocolDistributionEntry_DoNotUse() {}
FlowAggregation_ProtocolDistributionEntry_DoNotUse::FlowAggregation_ProtocolDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowAggregation_ProtocolDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_ProtocolDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowAggregation_ProtocolDistributionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[6]);
}

// ===================================================================

FlowAggregation_PortDistributionEntry_DoNotUse::FlowAggregation_PortDistributionEntry_DoNotUse() {}
FlowAggregation_PortDistributionEntry_DoNotUse::FlowAggregation_PortDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowAggregation_PortDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_PortDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowAggregation_PortDistributionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[7]);
}

// ===================================================================

FlowAggregation_CountryDistributionEntry_DoNotUse::FlowAggregation_CountryDistributionEntry_DoNotUse() {}
FlowAggregation_CountryDistributionEntry_DoNotUse::FlowAggregation_CountryDistributionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlowAggregation_CountryDistributionEntry_DoNotUse::MergeFrom(const FlowAggregation_CountryDistributionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlowAggregation_CountryDistributionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[8]);
}

// ===================================================================

class FlowAggregation::_Internal {
 public:
  static const ::protobuf::TimeWindow& time_window(const FlowAggregation* msg);
};

const ::protobuf::TimeWindow&
FlowAggregation::_Internal::time_window(const FlowAggregation* msg) {
  return *msg->_impl_.time_window_;
}
FlowAggregation::FlowAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FlowAggregation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.FlowAggregation)
}
FlowAggregation::FlowAggregation(const FlowAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.protocol_distribution_)*/{}
    , /*decltype(_impl_.port_distribution_)*/{}
    , /*decltype(_impl_.country_distribution_)*/{}
    , decltype(_impl_.time_window_){nullptr}
    , decltype(_impl_.total_flows_in_window_){}
    , decltype(_impl_.total_packets_in_window_){}
    , decltype(_impl_.total_bytes_in_window_){}
    , decltype(_impl_.window_anomaly_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.protocol_distribution_.MergeFrom(from._impl_.protocol_distribution_);
  _this->_impl_.port_distribution_.MergeFrom(from._impl_.port_distribution_);
  _this->_impl_.country_distribution_.MergeFrom(from._impl_.country_distribution_);
  if (from._internal_has_time_window()) {
    _this->_impl_.time_window_ = new ::protobuf::TimeWindow(*from._impl_.time_window_);
  }
  ::memcpy(&_impl_.total_flows_in_window_, &from._impl_.total_flows_in_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.window_anomaly_score_) -
    reinterpret_cast<char*>(&_impl_.total_flows_in_window_)) + sizeof(_impl_.window_anomaly_score_));
  // @@protoc_insertion_point(copy_constructor:protobuf.FlowAggregation)
}

inline void FlowAggregation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.protocol_distribution_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.port_distribution_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.country_distribution_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.time_window_){nullptr}
    , decltype(_impl_.total_flows_in_window_){uint64_t{0u}}
    , decltype(_impl_.total_packets_in_window_){uint64_t{0u}}
    , decltype(_impl_.total_bytes_in_window_){uint64_t{0u}}
    , decltype(_impl_.window_anomaly_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlowAggregation::~FlowAggregation() {
  // @@protoc_insertion_point(destructor:protobuf.FlowAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FlowAggregation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_distribution_.Destruct();
  _impl_.protocol_distribution_.~MapField();
  _impl_.port_distribution_.Destruct();
  _impl_.port_distribution_.~MapField();
  _impl_.country_distribution_.Destruct();
  _impl_.country_distribution_.~MapField();
  if (this != internal_default_instance()) delete _impl_.time_window_;
}

void FlowAggregation::ArenaDtor(void* object) {
  FlowAggregation* _this = reinterpret_cast< FlowAggregation* >(object);
  _this->_impl_.protocol_distribution_.Destruct();
  _this->_impl_.port_distribution_.Destruct();
  _this->_impl_.country_distribution_.Destruct();
}
void FlowAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.FlowAggregation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_distribution_.Clear();
  _impl_.port_distribution_.Clear();
  _impl_.country_distribution_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_ != nullptr) {
    delete _impl_.time_window_;
  }
  _impl_.time_window_ = nullptr;
  ::memset(&_impl_.total_flows_in_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.window_anomaly_score_) -
      reinterpret_cast<char*>(&_impl_.total_flows_in_window_)) + sizeof(_impl_.window_anomaly_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.TimeWindow time_window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_flows_in_window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_flows_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_packets_in_window = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_packets_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_bytes_in_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_bytes_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, uint64> protocol_distribution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.protocol_distribution_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint64> port_distribution = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.port_distribution_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint64> country_distribution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.country_distribution_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double window_anomaly_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.window_anomaly_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlowAggregation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.FlowAggregation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.TimeWindow time_window = 1;
  if (this->_internal_has_time_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_window(this),
        _Internal::time_window(this).GetCachedSize(), target, stream);
  }

  // uint64 total_flows_in_window = 2;
  if (this->_internal_total_flows_in_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_flows_in_window(), target);
  }

  // uint64 total_packets_in_window = 3;
  if (this->_internal_total_packets_in_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_packets_in_window(), target);
  }

  // uint64 total_bytes_in_window = 4;
  if (this->_internal_total_bytes_in_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_bytes_in_window(), target);
  }

  // map<string, uint64> protocol_distribution = 5;
  if (!this->_internal_protocol_distribution().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = FlowAggregation_ProtocolDistributionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_protocol_distribution();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.FlowAggregation.ProtocolDistributionEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, uint64> port_distribution = 6;
  if (!this->_internal_port_distribution().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = FlowAggregation_PortDistributionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_port_distribution();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.FlowAggregation.PortDistributionEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, uint64> country_distribution = 7;
  if (!this->_internal_country_distribution().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = FlowAggregation_CountryDistributionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_country_distribution();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.FlowAggregation.CountryDistributionEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // double window_anomaly_score = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_window_anomaly_score = this->_internal_window_anomaly_score();
  uint64_t raw_window_anomaly_score;
  memcpy(&raw_window_anomaly_score, &tmp_window_anomaly_score, sizeof(tmp_window_anomaly_score));
  if (raw_window_anomaly_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_window_anomaly_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.FlowAggregation)
  return target;
}

size_t FlowAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.FlowAggregation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint64> protocol_distribution = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_protocol_distribution_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_protocol_distribution().begin();
      it != this->_internal_protocol_distribution().end(); ++it) {
    total_size += FlowAggregation_ProtocolDistributionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint64> port_distribution = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_port_distribution_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_port_distribution().begin();
      it != this->_internal_port_distribution().end(); ++it) {
    total_size += FlowAggregation_PortDistributionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint64> country_distribution = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_country_distribution_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_country_distribution().begin();
      it != this->_internal_country_distribution().end(); ++it) {
    total_size += FlowAggregation_CountryDistributionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .protobuf.TimeWindow time_window = 1;
  if (this->_internal_has_time_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_window_);
  }

  // uint64 total_flows_in_window = 2;
  if (this->_internal_total_flows_in_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_flows_in_window());
  }

  // uint64 total_packets_in_window = 3;
  if (this->_internal_total_packets_in_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_packets_in_window());
  }

  // uint64 total_bytes_in_window = 4;
  if (this->_internal_total_bytes_in_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_bytes_in_window());
  }

  // double window_anomaly_score = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_window_anomaly_score = this->_internal_window_anomaly_score();
  uint64_t raw_window_anomaly_score;
  memcpy(&raw_window_anomaly_score, &tmp_window_anomaly_score, sizeof(tmp_window_anomaly_score));
  if (raw_window_anomaly_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowAggregation::GetClassData() const { return &_class_data_; }


void FlowAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowAggregation*>(&to_msg);
  auto& from = static_cast<const FlowAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.FlowAggregation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.protocol_distribution_.MergeFrom(from._impl_.protocol_distribution_);
  _this->_impl_.port_distribution_.MergeFrom(from._impl_.port_distribution_);
  _this->_impl_.country_distribution_.MergeFrom(from._impl_.country_distribution_);
  if (from._internal_has_time_window()) {
    _this->_internal_mutable_time_window()->::protobuf::TimeWindow::MergeFrom(
        from._internal_time_window());
  }
  if (from._internal_total_flows_in_window() != 0) {
    _this->_internal_set_total_flows_in_window(from._internal_total_flows_in_window());
  }
  if (from._internal_total_packets_in_window() != 0) {
    _this->_internal_set_total_packets_in_window(from._internal_total_packets_in_window());
  }
  if (from._internal_total_bytes_in_window() != 0) {
    _this->_internal_set_total_bytes_in_window(from._internal_total_bytes_in_window());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_window_anomaly_score = from._internal_window_anomaly_score();
  uint64_t raw_window_anomaly_score;
  memcpy(&raw_window_anomaly_score, &tmp_window_anomaly_score, sizeof(tmp_window_anomaly_score));
  if (raw_window_anomaly_score != 0) {
    _this->_internal_set_window_anomaly_score(from._internal_window_anomaly_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowAggregation::CopyFrom(const FlowAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.FlowAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowAggregation::IsInitialized() const {
  return true;
}

void FlowAggregation::InternalSwap(FlowAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.protocol_distribution_.InternalSwap(&other->_impl_.protocol_distribution_);
  _impl_.port_distribution_.InternalSwap(&other->_impl_.port_distribution_);
  _impl_.country_distribution_.InternalSwap(&other->_impl_.country_distribution_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowAggregation, _impl_.window_anomaly_score_)
      + sizeof(FlowAggregation::_impl_.window_anomaly_score_)
      - PROTOBUF_FIELD_OFFSET(FlowAggregation, _impl_.time_window_)>(
          reinterpret_cast<char*>(&_impl_.time_window_),
          reinterpret_cast<char*>(&other->_impl_.time_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[9]);
}

// ===================================================================

class ModelPrediction::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& prediction_timestamp(const ModelPrediction* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& processing_duration(const ModelPrediction* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ModelPrediction::_Internal::prediction_timestamp(const ModelPrediction* msg) {
  return *msg->_impl_.prediction_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ModelPrediction::_Internal::processing_duration(const ModelPrediction* msg) {
  return *msg->_impl_.processing_duration_;
}
void ModelPrediction::clear_prediction_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.prediction_timestamp_ != nullptr) {
    delete _impl_.prediction_timestamp_;
  }
  _impl_.prediction_timestamp_ = nullptr;
}
void ModelPrediction::clear_processing_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.processing_duration_ != nullptr) {
    delete _impl_.processing_duration_;
  }
  _impl_.processing_duration_ = nullptr;
}
ModelPrediction::ModelPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.ModelPrediction)
}
ModelPrediction::ModelPrediction(const ModelPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelPrediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_probabilities_){from._impl_.class_probabilities_}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_version_){}
    , decltype(_impl_.prediction_class_){}
    , decltype(_impl_.prediction_timestamp_){nullptr}
    , decltype(_impl_.processing_duration_){nullptr}
    , decltype(_impl_.confidence_score_){}
    , decltype(_impl_.model_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version().empty()) {
    _this->_impl_.model_version_.Set(from._internal_model_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prediction_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prediction_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prediction_class().empty()) {
    _this->_impl_.prediction_class_.Set(from._internal_prediction_class(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_prediction_timestamp()) {
    _this->_impl_.prediction_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.prediction_timestamp_);
  }
  if (from._internal_has_processing_duration()) {
    _this->_impl_.processing_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.processing_duration_);
  }
  ::memcpy(&_impl_.confidence_score_, &from._impl_.confidence_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.model_type_) -
    reinterpret_cast<char*>(&_impl_.confidence_score_)) + sizeof(_impl_.model_type_));
  // @@protoc_insertion_point(copy_constructor:protobuf.ModelPrediction)
}

inline void ModelPrediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.class_probabilities_){arena}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_version_){}
    , decltype(_impl_.prediction_class_){}
    , decltype(_impl_.prediction_timestamp_){nullptr}
    , decltype(_impl_.processing_duration_){nullptr}
    , decltype(_impl_.confidence_score_){0}
    , decltype(_impl_.model_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prediction_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prediction_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelPrediction::~ModelPrediction() {
  // @@protoc_insertion_point(destructor:protobuf.ModelPrediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_probabilities_.~RepeatedField();
  _impl_.model_name_.Destroy();
  _impl_.model_version_.Destroy();
  _impl_.prediction_class_.Destroy();
  if (this != internal_default_instance()) delete _impl_.prediction_timestamp_;
  if (this != internal_default_instance()) delete _impl_.processing_duration_;
}

void ModelPrediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ModelPrediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_probabilities_.Clear();
  _impl_.model_name_.ClearToEmpty();
  _impl_.model_version_.ClearToEmpty();
  _impl_.prediction_class_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.prediction_timestamp_ != nullptr) {
    delete _impl_.prediction_timestamp_;
  }
  _impl_.prediction_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.processing_duration_ != nullptr) {
    delete _impl_.processing_duration_;
  }
  _impl_.processing_duration_ = nullptr;
  ::memset(&_impl_.confidence_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.model_type_) -
      reinterpret_cast<char*>(&_impl_.confidence_score_)) + sizeof(_impl_.model_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPrediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.ModelPrediction.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.ModelPrediction.model_version"));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.ModelPrediction.ModelType model_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_type(static_cast<::protobuf::ModelPrediction_ModelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string prediction_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prediction_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.ModelPrediction.prediction_class"));
        } else
          goto handle_unusual;
        continue;
      // double confidence_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.confidence_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double class_probabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_class_probabilities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_class_probabilities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp prediction_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration processing_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPrediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ModelPrediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // string model_version = 2;
  if (!this->_internal_model_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version().data(), static_cast<int>(this->_internal_model_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.model_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_version(), target);
  }

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  if (this->_internal_model_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model_type(), target);
  }

  // string prediction_class = 4;
  if (!this->_internal_prediction_class().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prediction_class().data(), static_cast<int>(this->_internal_prediction_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ModelPrediction.prediction_class");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prediction_class(), target);
  }

  // double confidence_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_score = this->_internal_confidence_score();
  uint64_t raw_confidence_score;
  memcpy(&raw_confidence_score, &tmp_confidence_score, sizeof(tmp_confidence_score));
  if (raw_confidence_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_confidence_score(), target);
  }

  // repeated double class_probabilities = 6;
  if (this->_internal_class_probabilities_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_class_probabilities(), target);
  }

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  if (this->_internal_has_prediction_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::prediction_timestamp(this),
        _Internal::prediction_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration processing_duration = 8;
  if (this->_internal_has_processing_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::processing_duration(this),
        _Internal::processing_duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ModelPrediction)
  return target;
}

size_t ModelPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ModelPrediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double class_probabilities = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_class_probabilities_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string model_version = 2;
  if (!this->_internal_model_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version());
  }

  // string prediction_class = 4;
  if (!this->_internal_prediction_class().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prediction_class());
  }

  // .google.protobuf.Timestamp prediction_timestamp = 7;
  if (this->_internal_has_prediction_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prediction_timestamp_);
  }

  // .google.protobuf.Duration processing_duration = 8;
  if (this->_internal_has_processing_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processing_duration_);
  }

  // double confidence_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_score = this->_internal_confidence_score();
  uint64_t raw_confidence_score;
  memcpy(&raw_confidence_score, &tmp_confidence_score, sizeof(tmp_confidence_score));
  if (raw_confidence_score != 0) {
    total_size += 1 + 8;
  }

  // .protobuf.ModelPrediction.ModelType model_type = 3;
  if (this->_internal_model_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_model_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPrediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelPrediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPrediction::GetClassData() const { return &_class_data_; }


void ModelPrediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelPrediction*>(&to_msg);
  auto& from = static_cast<const ModelPrediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ModelPrediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.class_probabilities_.MergeFrom(from._impl_.class_probabilities_);
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_model_version().empty()) {
    _this->_internal_set_model_version(from._internal_model_version());
  }
  if (!from._internal_prediction_class().empty()) {
    _this->_internal_set_prediction_class(from._internal_prediction_class());
  }
  if (from._internal_has_prediction_timestamp()) {
    _this->_internal_mutable_prediction_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_prediction_timestamp());
  }
  if (from._internal_has_processing_duration()) {
    _this->_internal_mutable_processing_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_processing_duration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_score = from._internal_confidence_score();
  uint64_t raw_confidence_score;
  memcpy(&raw_confidence_score, &tmp_confidence_score, sizeof(tmp_confidence_score));
  if (raw_confidence_score != 0) {
    _this->_internal_set_confidence_score(from._internal_confidence_score());
  }
  if (from._internal_model_type() != 0) {
    _this->_internal_set_model_type(from._internal_model_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPrediction::CopyFrom(const ModelPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ModelPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPrediction::IsInitialized() const {
  return true;
}

void ModelPrediction::InternalSwap(ModelPrediction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.class_probabilities_.InternalSwap(&other->_impl_.class_probabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_, lhs_arena,
      &other->_impl_.model_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prediction_class_, lhs_arena,
      &other->_impl_.prediction_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPrediction, _impl_.model_type_)
      + sizeof(ModelPrediction::_impl_.model_type_)
      - PROTOBUF_FIELD_OFFSET(ModelPrediction, _impl_.prediction_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.prediction_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.prediction_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPrediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[10]);
}

// ===================================================================

TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse() {}
TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::MergeFrom(const TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[11]);
}

// ===================================================================

class TricapaMLAnalysis::_Internal {
 public:
  static const ::protobuf::ModelPrediction& level1_general_detection(const TricapaMLAnalysis* msg);
  static const ::protobuf::ModelPrediction& level2_context_classification(const TricapaMLAnalysis* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& total_analysis_duration(const TricapaMLAnalysis* msg);
};

const ::protobuf::ModelPrediction&
TricapaMLAnalysis::_Internal::level1_general_detection(const TricapaMLAnalysis* msg) {
  return *msg->_impl_.level1_general_detection_;
}
const ::protobuf::ModelPrediction&
TricapaMLAnalysis::_Internal::level2_context_classification(const TricapaMLAnalysis* msg) {
  return *msg->_impl_.level2_context_classification_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TricapaMLAnalysis::_Internal::total_analysis_duration(const TricapaMLAnalysis* msg) {
  return *msg->_impl_.total_analysis_duration_;
}
void TricapaMLAnalysis::clear_total_analysis_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_analysis_duration_ != nullptr) {
    delete _impl_.total_analysis_duration_;
  }
  _impl_.total_analysis_duration_ = nullptr;
}
TricapaMLAnalysis::TricapaMLAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TricapaMLAnalysis::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.TricapaMLAnalysis)
}
TricapaMLAnalysis::TricapaMLAnalysis(const TricapaMLAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TricapaMLAnalysis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level3_specialized_predictions_){from._impl_.level3_specialized_predictions_}
    , decltype(_impl_.level2_specialized_predictions_){from._impl_.level2_specialized_predictions_}
    , decltype(_impl_.models_activated_){from._impl_.models_activated_}
    , /*decltype(_impl_.feature_importance_scores_)*/{}
    , decltype(_impl_.traffic_context_){}
    , decltype(_impl_.final_threat_classification_){}
    , decltype(_impl_.level1_general_detection_){nullptr}
    , decltype(_impl_.level2_context_classification_){nullptr}
    , decltype(_impl_.total_analysis_duration_){nullptr}
    , decltype(_impl_.level1_confidence_){}
    , decltype(_impl_.ensemble_confidence_){}
    , decltype(_impl_.attack_detected_level1_){}
    , decltype(_impl_.requires_human_review_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.feature_importance_scores_.MergeFrom(from._impl_.feature_importance_scores_);
  _impl_.traffic_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traffic_context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traffic_context().empty()) {
    _this->_impl_.traffic_context_.Set(from._internal_traffic_context(), 
      _this->GetArenaForAllocation());
  }
  _impl_.final_threat_classification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_threat_classification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_final_threat_classification().empty()) {
    _this->_impl_.final_threat_classification_.Set(from._internal_final_threat_classification(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_level1_general_detection()) {
    _this->_impl_.level1_general_detection_ = new ::protobuf::ModelPrediction(*from._impl_.level1_general_detection_);
  }
  if (from._internal_has_level2_context_classification()) {
    _this->_impl_.level2_context_classification_ = new ::protobuf::ModelPrediction(*from._impl_.level2_context_classification_);
  }
  if (from._internal_has_total_analysis_duration()) {
    _this->_impl_.total_analysis_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.total_analysis_duration_);
  }
  ::memcpy(&_impl_.level1_confidence_, &from._impl_.level1_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requires_human_review_) -
    reinterpret_cast<char*>(&_impl_.level1_confidence_)) + sizeof(_impl_.requires_human_review_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TricapaMLAnalysis)
}

inline void TricapaMLAnalysis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level3_specialized_predictions_){arena}
    , decltype(_impl_.level2_specialized_predictions_){arena}
    , decltype(_impl_.models_activated_){arena}
    , /*decltype(_impl_.feature_importance_scores_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.traffic_context_){}
    , decltype(_impl_.final_threat_classification_){}
    , decltype(_impl_.level1_general_detection_){nullptr}
    , decltype(_impl_.level2_context_classification_){nullptr}
    , decltype(_impl_.total_analysis_duration_){nullptr}
    , decltype(_impl_.level1_confidence_){0}
    , decltype(_impl_.ensemble_confidence_){0}
    , decltype(_impl_.attack_detected_level1_){false}
    , decltype(_impl_.requires_human_review_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.traffic_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traffic_context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.final_threat_classification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_threat_classification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TricapaMLAnalysis::~TricapaMLAnalysis() {
  // @@protoc_insertion_point(destructor:protobuf.TricapaMLAnalysis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TricapaMLAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.level3_specialized_predictions_.~RepeatedPtrField();
  _impl_.level2_specialized_predictions_.~RepeatedPtrField();
  _impl_.models_activated_.~RepeatedPtrField();
  _impl_.feature_importance_scores_.Destruct();
  _impl_.feature_importance_scores_.~MapField();
  _impl_.traffic_context_.Destroy();
  _impl_.final_threat_classification_.Destroy();
  if (this != internal_default_instance()) delete _impl_.level1_general_detection_;
  if (this != internal_default_instance()) delete _impl_.level2_context_classification_;
  if (this != internal_default_instance()) delete _impl_.total_analysis_duration_;
}

void TricapaMLAnalysis::ArenaDtor(void* object) {
  TricapaMLAnalysis* _this = reinterpret_cast< TricapaMLAnalysis* >(object);
  _this->_impl_.feature_importance_scores_.Destruct();
}
void TricapaMLAnalysis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TricapaMLAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TricapaMLAnalysis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level3_specialized_predictions_.Clear();
  _impl_.level2_specialized_predictions_.Clear();
  _impl_.models_activated_.Clear();
  _impl_.feature_importance_scores_.Clear();
  _impl_.traffic_context_.ClearToEmpty();
  _impl_.final_threat_classification_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.level1_general_detection_ != nullptr) {
    delete _impl_.level1_general_detection_;
  }
  _impl_.level1_general_detection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.level2_context_classification_ != nullptr) {
    delete _impl_.level2_context_classification_;
  }
  _impl_.level2_context_classification_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_analysis_duration_ != nullptr) {
    delete _impl_.total_analysis_duration_;
  }
  _impl_.total_analysis_duration_ = nullptr;
  ::memset(&_impl_.level1_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requires_human_review_) -
      reinterpret_cast<char*>(&_impl_.level1_confidence_)) + sizeof(_impl_.requires_human_review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TricapaMLAnalysis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.ModelPrediction level1_general_detection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_level1_general_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool attack_detected_level1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attack_detected_level1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double level1_confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.level1_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.ModelPrediction level2_context_classification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_level2_context_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string traffic_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_traffic_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.TricapaMLAnalysis.traffic_context"));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_level3_specialized_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string final_threat_classification = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_final_threat_classification();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.TricapaMLAnalysis.final_threat_classification"));
        } else
          goto handle_unusual;
        continue;
      // double ensemble_confidence = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.ensemble_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.ModelPrediction level2_specialized_predictions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_level2_specialized_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_analysis_duration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_analysis_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string models_activated = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_models_activated();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.TricapaMLAnalysis.models_activated"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> feature_importance_scores = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.feature_importance_scores_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool requires_human_review = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.requires_human_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TricapaMLAnalysis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TricapaMLAnalysis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.ModelPrediction level1_general_detection = 1;
  if (this->_internal_has_level1_general_detection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::level1_general_detection(this),
        _Internal::level1_general_detection(this).GetCachedSize(), target, stream);
  }

  // bool attack_detected_level1 = 2;
  if (this->_internal_attack_detected_level1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_attack_detected_level1(), target);
  }

  // double level1_confidence = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_level1_confidence = this->_internal_level1_confidence();
  uint64_t raw_level1_confidence;
  memcpy(&raw_level1_confidence, &tmp_level1_confidence, sizeof(tmp_level1_confidence));
  if (raw_level1_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_level1_confidence(), target);
  }

  // .protobuf.ModelPrediction level2_context_classification = 4;
  if (this->_internal_has_level2_context_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::level2_context_classification(this),
        _Internal::level2_context_classification(this).GetCachedSize(), target, stream);
  }

  // string traffic_context = 5;
  if (!this->_internal_traffic_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traffic_context().data(), static_cast<int>(this->_internal_traffic_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.traffic_context");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_traffic_context(), target);
  }

  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_level3_specialized_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_level3_specialized_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string final_threat_classification = 7;
  if (!this->_internal_final_threat_classification().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_final_threat_classification().data(), static_cast<int>(this->_internal_final_threat_classification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.final_threat_classification");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_final_threat_classification(), target);
  }

  // double ensemble_confidence = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ensemble_confidence = this->_internal_ensemble_confidence();
  uint64_t raw_ensemble_confidence;
  memcpy(&raw_ensemble_confidence, &tmp_ensemble_confidence, sizeof(tmp_ensemble_confidence));
  if (raw_ensemble_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ensemble_confidence(), target);
  }

  // repeated .protobuf.ModelPrediction level2_specialized_predictions = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_level2_specialized_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_level2_specialized_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration total_analysis_duration = 10;
  if (this->_internal_has_total_analysis_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::total_analysis_duration(this),
        _Internal::total_analysis_duration(this).GetCachedSize(), target, stream);
  }

  // repeated string models_activated = 11;
  for (int i = 0, n = this->_internal_models_activated_size(); i < n; i++) {
    const auto& s = this->_internal_models_activated(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TricapaMLAnalysis.models_activated");
    target = stream->WriteString(11, s, target);
  }

  // map<string, double> feature_importance_scores = 12;
  if (!this->_internal_feature_importance_scores().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_feature_importance_scores();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.TricapaMLAnalysis.FeatureImportanceScoresEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool requires_human_review = 13;
  if (this->_internal_requires_human_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_requires_human_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TricapaMLAnalysis)
  return target;
}

size_t TricapaMLAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TricapaMLAnalysis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.ModelPrediction level3_specialized_predictions = 6;
  total_size += 1UL * this->_internal_level3_specialized_predictions_size();
  for (const auto& msg : this->_impl_.level3_specialized_predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.ModelPrediction level2_specialized_predictions = 9;
  total_size += 1UL * this->_internal_level2_specialized_predictions_size();
  for (const auto& msg : this->_impl_.level2_specialized_predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string models_activated = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.models_activated_.size());
  for (int i = 0, n = _impl_.models_activated_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.models_activated_.Get(i));
  }

  // map<string, double> feature_importance_scores = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feature_importance_scores_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_feature_importance_scores().begin();
      it != this->_internal_feature_importance_scores().end(); ++it) {
    total_size += TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string traffic_context = 5;
  if (!this->_internal_traffic_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traffic_context());
  }

  // string final_threat_classification = 7;
  if (!this->_internal_final_threat_classification().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_threat_classification());
  }

  // .protobuf.ModelPrediction level1_general_detection = 1;
  if (this->_internal_has_level1_general_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.level1_general_detection_);
  }

  // .protobuf.ModelPrediction level2_context_classification = 4;
  if (this->_internal_has_level2_context_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.level2_context_classification_);
  }

  // .google.protobuf.Duration total_analysis_duration = 10;
  if (this->_internal_has_total_analysis_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_analysis_duration_);
  }

  // double level1_confidence = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_level1_confidence = this->_internal_level1_confidence();
  uint64_t raw_level1_confidence;
  memcpy(&raw_level1_confidence, &tmp_level1_confidence, sizeof(tmp_level1_confidence));
  if (raw_level1_confidence != 0) {
    total_size += 1 + 8;
  }

  // double ensemble_confidence = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ensemble_confidence = this->_internal_ensemble_confidence();
  uint64_t raw_ensemble_confidence;
  memcpy(&raw_ensemble_confidence, &tmp_ensemble_confidence, sizeof(tmp_ensemble_confidence));
  if (raw_ensemble_confidence != 0) {
    total_size += 1 + 8;
  }

  // bool attack_detected_level1 = 2;
  if (this->_internal_attack_detected_level1() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_human_review = 13;
  if (this->_internal_requires_human_review() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TricapaMLAnalysis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TricapaMLAnalysis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TricapaMLAnalysis::GetClassData() const { return &_class_data_; }


void TricapaMLAnalysis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TricapaMLAnalysis*>(&to_msg);
  auto& from = static_cast<const TricapaMLAnalysis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TricapaMLAnalysis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.level3_specialized_predictions_.MergeFrom(from._impl_.level3_specialized_predictions_);
  _this->_impl_.level2_specialized_predictions_.MergeFrom(from._impl_.level2_specialized_predictions_);
  _this->_impl_.models_activated_.MergeFrom(from._impl_.models_activated_);
  _this->_impl_.feature_importance_scores_.MergeFrom(from._impl_.feature_importance_scores_);
  if (!from._internal_traffic_context().empty()) {
    _this->_internal_set_traffic_context(from._internal_traffic_context());
  }
  if (!from._internal_final_threat_classification().empty()) {
    _this->_internal_set_final_threat_classification(from._internal_final_threat_classification());
  }
  if (from._internal_has_level1_general_detection()) {
    _this->_internal_mutable_level1_general_detection()->::protobuf::ModelPrediction::MergeFrom(
        from._internal_level1_general_detection());
  }
  if (from._internal_has_level2_context_classification()) {
    _this->_internal_mutable_level2_context_classification()->::protobuf::ModelPrediction::MergeFrom(
        from._internal_level2_context_classification());
  }
  if (from._internal_has_total_analysis_duration()) {
    _this->_internal_mutable_total_analysis_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_total_analysis_duration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_level1_confidence = from._internal_level1_confidence();
  uint64_t raw_level1_confidence;
  memcpy(&raw_level1_confidence, &tmp_level1_confidence, sizeof(tmp_level1_confidence));
  if (raw_level1_confidence != 0) {
    _this->_internal_set_level1_confidence(from._internal_level1_confidence());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ensemble_confidence = from._internal_ensemble_confidence();
  uint64_t raw_ensemble_confidence;
  memcpy(&raw_ensemble_confidence, &tmp_ensemble_confidence, sizeof(tmp_ensemble_confidence));
  if (raw_ensemble_confidence != 0) {
    _this->_internal_set_ensemble_confidence(from._internal_ensemble_confidence());
  }
  if (from._internal_attack_detected_level1() != 0) {
    _this->_internal_set_attack_detected_level1(from._internal_attack_detected_level1());
  }
  if (from._internal_requires_human_review() != 0) {
    _this->_internal_set_requires_human_review(from._internal_requires_human_review());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TricapaMLAnalysis::CopyFrom(const TricapaMLAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TricapaMLAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TricapaMLAnalysis::IsInitialized() const {
  return true;
}

void TricapaMLAnalysis::InternalSwap(TricapaMLAnalysis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.level3_specialized_predictions_.InternalSwap(&other->_impl_.level3_specialized_predictions_);
  _impl_.level2_specialized_predictions_.InternalSwap(&other->_impl_.level2_specialized_predictions_);
  _impl_.models_activated_.InternalSwap(&other->_impl_.models_activated_);
  _impl_.feature_importance_scores_.InternalSwap(&other->_impl_.feature_importance_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.traffic_context_, lhs_arena,
      &other->_impl_.traffic_context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.final_threat_classification_, lhs_arena,
      &other->_impl_.final_threat_classification_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TricapaMLAnalysis, _impl_.requires_human_review_)
      + sizeof(TricapaMLAnalysis::_impl_.requires_human_review_)
      - PROTOBUF_FIELD_OFFSET(TricapaMLAnalysis, _impl_.level1_general_detection_)>(
          reinterpret_cast<char*>(&_impl_.level1_general_detection_),
          reinterpret_cast<char*>(&other->_impl_.level1_general_detection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TricapaMLAnalysis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[12]);
}

// ===================================================================

DistributedNode_NodeCapabilitiesEntry_DoNotUse::DistributedNode_NodeCapabilitiesEntry_DoNotUse() {}
DistributedNode_NodeCapabilitiesEntry_DoNotUse::DistributedNode_NodeCapabilitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DistributedNode_NodeCapabilitiesEntry_DoNotUse::MergeFrom(const DistributedNode_NodeCapabilitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DistributedNode_NodeCapabilitiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[13]);
}

// ===================================================================

class DistributedNode::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_heartbeat(const DistributedNode* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& uptime(const DistributedNode* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DistributedNode::_Internal::last_heartbeat(const DistributedNode* msg) {
  return *msg->_impl_.last_heartbeat_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
DistributedNode::_Internal::uptime(const DistributedNode* msg) {
  return *msg->_impl_.uptime_;
}
void DistributedNode::clear_last_heartbeat() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_heartbeat_ != nullptr) {
    delete _impl_.last_heartbeat_;
  }
  _impl_.last_heartbeat_ = nullptr;
}
void DistributedNode::clear_uptime() {
  if (GetArenaForAllocation() == nullptr && _impl_.uptime_ != nullptr) {
    delete _impl_.uptime_;
  }
  _impl_.uptime_ = nullptr;
}
DistributedNode::DistributedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DistributedNode::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.DistributedNode)
}
DistributedNode::DistributedNode(const DistributedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DistributedNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.node_capabilities_)*/{}
    , decltype(_impl_.supported_protocols_){from._impl_.supported_protocols_}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.node_hostname_){}
    , decltype(_impl_.node_ip_address_){}
    , decltype(_impl_.physical_location_){}
    , decltype(_impl_.operating_system_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.agent_version_){}
    , decltype(_impl_.container_id_){}
    , decltype(_impl_.cluster_name_){}
    , decltype(_impl_.configuration_version_){}
    , decltype(_impl_.last_heartbeat_){nullptr}
    , decltype(_impl_.uptime_){nullptr}
    , decltype(_impl_.node_role_){}
    , decltype(_impl_.node_status_){}
    , decltype(_impl_.process_id_){}
    , decltype(_impl_.cpu_usage_percent_){}
    , decltype(_impl_.memory_usage_mb_){}
    , decltype(_impl_.active_connections_){}
    , decltype(_impl_.queue_depth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.node_capabilities_.MergeFrom(from._impl_.node_capabilities_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_hostname().empty()) {
    _this->_impl_.node_hostname_.Set(from._internal_node_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_ip_address().empty()) {
    _this->_impl_.node_ip_address_.Set(from._internal_node_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.physical_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_physical_location().empty()) {
    _this->_impl_.physical_location_.Set(from._internal_physical_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operating_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operating_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operating_system().empty()) {
    _this->_impl_.operating_system_.Set(from._internal_operating_system(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_version().empty()) {
    _this->_impl_.os_version_.Set(from._internal_os_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agent_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_version().empty()) {
    _this->_impl_.agent_version_.Set(from._internal_agent_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.container_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.container_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_container_id().empty()) {
    _this->_impl_.container_id_.Set(from._internal_container_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cluster_name().empty()) {
    _this->_impl_.cluster_name_.Set(from._internal_cluster_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.configuration_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configuration_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_configuration_version().empty()) {
    _this->_impl_.configuration_version_.Set(from._internal_configuration_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_heartbeat()) {
    _this->_impl_.last_heartbeat_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_heartbeat_);
  }
  if (from._internal_has_uptime()) {
    _this->_impl_.uptime_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.uptime_);
  }
  ::memcpy(&_impl_.node_role_, &from._impl_.node_role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.queue_depth_) -
    reinterpret_cast<char*>(&_impl_.node_role_)) + sizeof(_impl_.queue_depth_));
  // @@protoc_insertion_point(copy_constructor:protobuf.DistributedNode)
}

inline void DistributedNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.node_capabilities_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.supported_protocols_){arena}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.node_hostname_){}
    , decltype(_impl_.node_ip_address_){}
    , decltype(_impl_.physical_location_){}
    , decltype(_impl_.operating_system_){}
    , decltype(_impl_.os_version_){}
    , decltype(_impl_.agent_version_){}
    , decltype(_impl_.container_id_){}
    , decltype(_impl_.cluster_name_){}
    , decltype(_impl_.configuration_version_){}
    , decltype(_impl_.last_heartbeat_){nullptr}
    , decltype(_impl_.uptime_){nullptr}
    , decltype(_impl_.node_role_){0}
    , decltype(_impl_.node_status_){0}
    , decltype(_impl_.process_id_){0}
    , decltype(_impl_.cpu_usage_percent_){0}
    , decltype(_impl_.memory_usage_mb_){0}
    , decltype(_impl_.active_connections_){0}
    , decltype(_impl_.queue_depth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.physical_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operating_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operating_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agent_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.container_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.container_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cluster_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cluster_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.configuration_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configuration_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistributedNode::~DistributedNode() {
  // @@protoc_insertion_point(destructor:protobuf.DistributedNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DistributedNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_capabilities_.Destruct();
  _impl_.node_capabilities_.~MapField();
  _impl_.supported_protocols_.~RepeatedPtrField();
  _impl_.node_id_.Destroy();
  _impl_.node_hostname_.Destroy();
  _impl_.node_ip_address_.Destroy();
  _impl_.physical_location_.Destroy();
  _impl_.operating_system_.Destroy();
  _impl_.os_version_.Destroy();
  _impl_.agent_version_.Destroy();
  _impl_.container_id_.Destroy();
  _impl_.cluster_name_.Destroy();
  _impl_.configuration_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_heartbeat_;
  if (this != internal_default_instance()) delete _impl_.uptime_;
}

void DistributedNode::ArenaDtor(void* object) {
  DistributedNode* _this = reinterpret_cast< DistributedNode* >(object);
  _this->_impl_.node_capabilities_.Destruct();
}
void DistributedNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistributedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.DistributedNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_capabilities_.Clear();
  _impl_.supported_protocols_.Clear();
  _impl_.node_id_.ClearToEmpty();
  _impl_.node_hostname_.ClearToEmpty();
  _impl_.node_ip_address_.ClearToEmpty();
  _impl_.physical_location_.ClearToEmpty();
  _impl_.operating_system_.ClearToEmpty();
  _impl_.os_version_.ClearToEmpty();
  _impl_.agent_version_.ClearToEmpty();
  _impl_.container_id_.ClearToEmpty();
  _impl_.cluster_name_.ClearToEmpty();
  _impl_.configuration_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_heartbeat_ != nullptr) {
    delete _impl_.last_heartbeat_;
  }
  _impl_.last_heartbeat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uptime_ != nullptr) {
    delete _impl_.uptime_;
  }
  _impl_.uptime_ = nullptr;
  ::memset(&_impl_.node_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.queue_depth_) -
      reinterpret_cast<char*>(&_impl_.node_role_)) + sizeof(_impl_.queue_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistributedNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.node_id"));
        } else
          goto handle_unusual;
        continue;
      // string node_hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.node_hostname"));
        } else
          goto handle_unusual;
        continue;
      // string node_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_node_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.node_ip_address"));
        } else
          goto handle_unusual;
        continue;
      // string physical_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_physical_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.physical_location"));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.DistributedNode.NodeRole node_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_node_role(static_cast<::protobuf::DistributedNode_NodeRole>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.DistributedNode.NodeStatus node_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_node_status(static_cast<::protobuf::DistributedNode_NodeStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_heartbeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string operating_system = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_operating_system();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.operating_system"));
        } else
          goto handle_unusual;
        continue;
      // string os_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_os_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.os_version"));
        } else
          goto handle_unusual;
        continue;
      // string agent_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_agent_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.agent_version"));
        } else
          goto handle_unusual;
        continue;
      // int32 process_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string container_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_container_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.container_id"));
        } else
          goto handle_unusual;
        continue;
      // string cluster_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_cluster_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.cluster_name"));
        } else
          goto handle_unusual;
        continue;
      // float cpu_usage_percent = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.cpu_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float memory_usage_mb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.memory_usage_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 active_connections = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.active_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 queue_depth = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.queue_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration uptime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> node_capabilities = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.node_capabilities_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_protocols = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_supported_protocols();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.supported_protocols"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string configuration_version = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_configuration_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.DistributedNode.configuration_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistributedNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.DistributedNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string node_hostname = 2;
  if (!this->_internal_node_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_hostname().data(), static_cast<int>(this->_internal_node_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_hostname(), target);
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_ip_address().data(), static_cast<int>(this->_internal_node_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.node_ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_ip_address(), target);
  }

  // string physical_location = 4;
  if (!this->_internal_physical_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_location().data(), static_cast<int>(this->_internal_physical_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.physical_location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_physical_location(), target);
  }

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  if (this->_internal_node_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_node_role(), target);
  }

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  if (this->_internal_node_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_node_status(), target);
  }

  // .google.protobuf.Timestamp last_heartbeat = 7;
  if (this->_internal_has_last_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_heartbeat(this),
        _Internal::last_heartbeat(this).GetCachedSize(), target, stream);
  }

  // string operating_system = 8;
  if (!this->_internal_operating_system().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operating_system().data(), static_cast<int>(this->_internal_operating_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.operating_system");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_operating_system(), target);
  }

  // string os_version = 9;
  if (!this->_internal_os_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.os_version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_os_version(), target);
  }

  // string agent_version = 10;
  if (!this->_internal_agent_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_version().data(), static_cast<int>(this->_internal_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.agent_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_agent_version(), target);
  }

  // int32 process_id = 11;
  if (this->_internal_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_process_id(), target);
  }

  // string container_id = 12;
  if (!this->_internal_container_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_id().data(), static_cast<int>(this->_internal_container_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.container_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_container_id(), target);
  }

  // string cluster_name = 13;
  if (!this->_internal_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_name().data(), static_cast<int>(this->_internal_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.cluster_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cluster_name(), target);
  }

  // float cpu_usage_percent = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint32_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_cpu_usage_percent(), target);
  }

  // float memory_usage_mb = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint32_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_memory_usage_mb(), target);
  }

  // int32 active_connections = 17;
  if (this->_internal_active_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_active_connections(), target);
  }

  // int32 queue_depth = 18;
  if (this->_internal_queue_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_queue_depth(), target);
  }

  // .google.protobuf.Duration uptime = 19;
  if (this->_internal_has_uptime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::uptime(this),
        _Internal::uptime(this).GetCachedSize(), target, stream);
  }

  // map<string, string> node_capabilities = 20;
  if (!this->_internal_node_capabilities().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DistributedNode_NodeCapabilitiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_node_capabilities();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.DistributedNode.NodeCapabilitiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.DistributedNode.NodeCapabilitiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string supported_protocols = 21;
  for (int i = 0, n = this->_internal_supported_protocols_size(); i < n; i++) {
    const auto& s = this->_internal_supported_protocols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.supported_protocols");
    target = stream->WriteString(21, s, target);
  }

  // string configuration_version = 22;
  if (!this->_internal_configuration_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configuration_version().data(), static_cast<int>(this->_internal_configuration_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.DistributedNode.configuration_version");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_configuration_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.DistributedNode)
  return target;
}

size_t DistributedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.DistributedNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> node_capabilities = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_node_capabilities_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_node_capabilities().begin();
      it != this->_internal_node_capabilities().end(); ++it) {
    total_size += DistributedNode_NodeCapabilitiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string supported_protocols = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_protocols_.size());
  for (int i = 0, n = _impl_.supported_protocols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_protocols_.Get(i));
  }

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string node_hostname = 2;
  if (!this->_internal_node_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_hostname());
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_ip_address());
  }

  // string physical_location = 4;
  if (!this->_internal_physical_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_location());
  }

  // string operating_system = 8;
  if (!this->_internal_operating_system().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operating_system());
  }

  // string os_version = 9;
  if (!this->_internal_os_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string agent_version = 10;
  if (!this->_internal_agent_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_version());
  }

  // string container_id = 12;
  if (!this->_internal_container_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_id());
  }

  // string cluster_name = 13;
  if (!this->_internal_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_name());
  }

  // string configuration_version = 22;
  if (!this->_internal_configuration_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configuration_version());
  }

  // .google.protobuf.Timestamp last_heartbeat = 7;
  if (this->_internal_has_last_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_heartbeat_);
  }

  // .google.protobuf.Duration uptime = 19;
  if (this->_internal_has_uptime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uptime_);
  }

  // .protobuf.DistributedNode.NodeRole node_role = 5;
  if (this->_internal_node_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_node_role());
  }

  // .protobuf.DistributedNode.NodeStatus node_status = 6;
  if (this->_internal_node_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_node_status());
  }

  // int32 process_id = 11;
  if (this->_internal_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_id());
  }

  // float cpu_usage_percent = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint32_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    total_size += 1 + 4;
  }

  // float memory_usage_mb = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint32_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    total_size += 2 + 4;
  }

  // int32 active_connections = 17;
  if (this->_internal_active_connections() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_active_connections());
  }

  // int32 queue_depth = 18;
  if (this->_internal_queue_depth() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_queue_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistributedNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DistributedNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistributedNode::GetClassData() const { return &_class_data_; }


void DistributedNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DistributedNode*>(&to_msg);
  auto& from = static_cast<const DistributedNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.DistributedNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_capabilities_.MergeFrom(from._impl_.node_capabilities_);
  _this->_impl_.supported_protocols_.MergeFrom(from._impl_.supported_protocols_);
  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_node_hostname().empty()) {
    _this->_internal_set_node_hostname(from._internal_node_hostname());
  }
  if (!from._internal_node_ip_address().empty()) {
    _this->_internal_set_node_ip_address(from._internal_node_ip_address());
  }
  if (!from._internal_physical_location().empty()) {
    _this->_internal_set_physical_location(from._internal_physical_location());
  }
  if (!from._internal_operating_system().empty()) {
    _this->_internal_set_operating_system(from._internal_operating_system());
  }
  if (!from._internal_os_version().empty()) {
    _this->_internal_set_os_version(from._internal_os_version());
  }
  if (!from._internal_agent_version().empty()) {
    _this->_internal_set_agent_version(from._internal_agent_version());
  }
  if (!from._internal_container_id().empty()) {
    _this->_internal_set_container_id(from._internal_container_id());
  }
  if (!from._internal_cluster_name().empty()) {
    _this->_internal_set_cluster_name(from._internal_cluster_name());
  }
  if (!from._internal_configuration_version().empty()) {
    _this->_internal_set_configuration_version(from._internal_configuration_version());
  }
  if (from._internal_has_last_heartbeat()) {
    _this->_internal_mutable_last_heartbeat()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_heartbeat());
  }
  if (from._internal_has_uptime()) {
    _this->_internal_mutable_uptime()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_uptime());
  }
  if (from._internal_node_role() != 0) {
    _this->_internal_set_node_role(from._internal_node_role());
  }
  if (from._internal_node_status() != 0) {
    _this->_internal_set_node_status(from._internal_node_status());
  }
  if (from._internal_process_id() != 0) {
    _this->_internal_set_process_id(from._internal_process_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage_percent = from._internal_cpu_usage_percent();
  uint32_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    _this->_internal_set_cpu_usage_percent(from._internal_cpu_usage_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage_mb = from._internal_memory_usage_mb();
  uint32_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    _this->_internal_set_memory_usage_mb(from._internal_memory_usage_mb());
  }
  if (from._internal_active_connections() != 0) {
    _this->_internal_set_active_connections(from._internal_active_connections());
  }
  if (from._internal_queue_depth() != 0) {
    _this->_internal_set_queue_depth(from._internal_queue_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistributedNode::CopyFrom(const DistributedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.DistributedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedNode::IsInitialized() const {
  return true;
}

void DistributedNode::InternalSwap(DistributedNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_capabilities_.InternalSwap(&other->_impl_.node_capabilities_);
  _impl_.supported_protocols_.InternalSwap(&other->_impl_.supported_protocols_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_hostname_, lhs_arena,
      &other->_impl_.node_hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_ip_address_, lhs_arena,
      &other->_impl_.node_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.physical_location_, lhs_arena,
      &other->_impl_.physical_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operating_system_, lhs_arena,
      &other->_impl_.operating_system_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_version_, lhs_arena,
      &other->_impl_.os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_version_, lhs_arena,
      &other->_impl_.agent_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.container_id_, lhs_arena,
      &other->_impl_.container_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cluster_name_, lhs_arena,
      &other->_impl_.cluster_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.configuration_version_, lhs_arena,
      &other->_impl_.configuration_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistributedNode, _impl_.queue_depth_)
      + sizeof(DistributedNode::_impl_.queue_depth_)
      - PROTOBUF_FIELD_OFFSET(DistributedNode, _impl_.last_heartbeat_)>(
          reinterpret_cast<char*>(&_impl_.last_heartbeat_),
          reinterpret_cast<char*>(&other->_impl_.last_heartbeat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistributedNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[14]);
}

// ===================================================================

PipelineTracking_ComponentMetadataEntry_DoNotUse::PipelineTracking_ComponentMetadataEntry_DoNotUse() {}
PipelineTracking_ComponentMetadataEntry_DoNotUse::PipelineTracking_ComponentMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PipelineTracking_ComponentMetadataEntry_DoNotUse::MergeFrom(const PipelineTracking_ComponentMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PipelineTracking_ComponentMetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[15]);
}

// ===================================================================

class PipelineTracking::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pipeline_start(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& packet_captured_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& features_extracted_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& geoip_enriched_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ml_analyzed_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& threat_detected_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& action_taken_at(const PipelineTracking* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& total_processing_latency(const PipelineTracking* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::pipeline_start(const PipelineTracking* msg) {
  return *msg->_impl_.pipeline_start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::packet_captured_at(const PipelineTracking* msg) {
  return *msg->_impl_.packet_captured_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::features_extracted_at(const PipelineTracking* msg) {
  return *msg->_impl_.features_extracted_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::geoip_enriched_at(const PipelineTracking* msg) {
  return *msg->_impl_.geoip_enriched_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::ml_analyzed_at(const PipelineTracking* msg) {
  return *msg->_impl_.ml_analyzed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::threat_detected_at(const PipelineTracking* msg) {
  return *msg->_impl_.threat_detected_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PipelineTracking::_Internal::action_taken_at(const PipelineTracking* msg) {
  return *msg->_impl_.action_taken_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
PipelineTracking::_Internal::total_processing_latency(const PipelineTracking* msg) {
  return *msg->_impl_.total_processing_latency_;
}
void PipelineTracking::clear_pipeline_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.pipeline_start_ != nullptr) {
    delete _impl_.pipeline_start_;
  }
  _impl_.pipeline_start_ = nullptr;
}
void PipelineTracking::clear_packet_captured_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.packet_captured_at_ != nullptr) {
    delete _impl_.packet_captured_at_;
  }
  _impl_.packet_captured_at_ = nullptr;
}
void PipelineTracking::clear_features_extracted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_extracted_at_ != nullptr) {
    delete _impl_.features_extracted_at_;
  }
  _impl_.features_extracted_at_ = nullptr;
}
void PipelineTracking::clear_geoip_enriched_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.geoip_enriched_at_ != nullptr) {
    delete _impl_.geoip_enriched_at_;
  }
  _impl_.geoip_enriched_at_ = nullptr;
}
void PipelineTracking::clear_ml_analyzed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.ml_analyzed_at_ != nullptr) {
    delete _impl_.ml_analyzed_at_;
  }
  _impl_.ml_analyzed_at_ = nullptr;
}
void PipelineTracking::clear_threat_detected_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.threat_detected_at_ != nullptr) {
    delete _impl_.threat_detected_at_;
  }
  _impl_.threat_detected_at_ = nullptr;
}
void PipelineTracking::clear_action_taken_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.action_taken_at_ != nullptr) {
    delete _impl_.action_taken_at_;
  }
  _impl_.action_taken_at_ = nullptr;
}
void PipelineTracking::clear_total_processing_latency() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_processing_latency_ != nullptr) {
    delete _impl_.total_processing_latency_;
  }
  _impl_.total_processing_latency_ = nullptr;
}
PipelineTracking::PipelineTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PipelineTracking::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.PipelineTracking)
}
PipelineTracking::PipelineTracking(const PipelineTracking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PipelineTracking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processing_errors_){from._impl_.processing_errors_}
    , /*decltype(_impl_.component_metadata_)*/{}
    , decltype(_impl_.processing_tags_){from._impl_.processing_tags_}
    , decltype(_impl_.pipeline_id_){}
    , decltype(_impl_.processing_path_){}
    , decltype(_impl_.pipeline_start_){nullptr}
    , decltype(_impl_.packet_captured_at_){nullptr}
    , decltype(_impl_.features_extracted_at_){nullptr}
    , decltype(_impl_.geoip_enriched_at_){nullptr}
    , decltype(_impl_.ml_analyzed_at_){nullptr}
    , decltype(_impl_.threat_detected_at_){nullptr}
    , decltype(_impl_.action_taken_at_){nullptr}
    , decltype(_impl_.total_processing_latency_){nullptr}
    , decltype(_impl_.sniffer_process_id_){}
    , decltype(_impl_.processor_process_id_){}
    , decltype(_impl_.enricher_process_id_){}
    , decltype(_impl_.analyzer_process_id_){}
    , decltype(_impl_.detector_process_id_){}
    , decltype(_impl_.controller_process_id_){}
    , decltype(_impl_.pipeline_hops_count_){}
    , decltype(_impl_.retry_attempts_){}
    , decltype(_impl_.requires_reprocessing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.component_metadata_.MergeFrom(from._impl_.component_metadata_);
  _impl_.pipeline_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pipeline_id().empty()) {
    _this->_impl_.pipeline_id_.Set(from._internal_pipeline_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processing_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processing_path().empty()) {
    _this->_impl_.processing_path_.Set(from._internal_processing_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pipeline_start()) {
    _this->_impl_.pipeline_start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pipeline_start_);
  }
  if (from._internal_has_packet_captured_at()) {
    _this->_impl_.packet_captured_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.packet_captured_at_);
  }
  if (from._internal_has_features_extracted_at()) {
    _this->_impl_.features_extracted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.features_extracted_at_);
  }
  if (from._internal_has_geoip_enriched_at()) {
    _this->_impl_.geoip_enriched_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.geoip_enriched_at_);
  }
  if (from._internal_has_ml_analyzed_at()) {
    _this->_impl_.ml_analyzed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ml_analyzed_at_);
  }
  if (from._internal_has_threat_detected_at()) {
    _this->_impl_.threat_detected_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.threat_detected_at_);
  }
  if (from._internal_has_action_taken_at()) {
    _this->_impl_.action_taken_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.action_taken_at_);
  }
  if (from._internal_has_total_processing_latency()) {
    _this->_impl_.total_processing_latency_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.total_processing_latency_);
  }
  ::memcpy(&_impl_.sniffer_process_id_, &from._impl_.sniffer_process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requires_reprocessing_) -
    reinterpret_cast<char*>(&_impl_.sniffer_process_id_)) + sizeof(_impl_.requires_reprocessing_));
  // @@protoc_insertion_point(copy_constructor:protobuf.PipelineTracking)
}

inline void PipelineTracking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processing_errors_){arena}
    , /*decltype(_impl_.component_metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.processing_tags_){arena}
    , decltype(_impl_.pipeline_id_){}
    , decltype(_impl_.processing_path_){}
    , decltype(_impl_.pipeline_start_){nullptr}
    , decltype(_impl_.packet_captured_at_){nullptr}
    , decltype(_impl_.features_extracted_at_){nullptr}
    , decltype(_impl_.geoip_enriched_at_){nullptr}
    , decltype(_impl_.ml_analyzed_at_){nullptr}
    , decltype(_impl_.threat_detected_at_){nullptr}
    , decltype(_impl_.action_taken_at_){nullptr}
    , decltype(_impl_.total_processing_latency_){nullptr}
    , decltype(_impl_.sniffer_process_id_){0}
    , decltype(_impl_.processor_process_id_){0}
    , decltype(_impl_.enricher_process_id_){0}
    , decltype(_impl_.analyzer_process_id_){0}
    , decltype(_impl_.detector_process_id_){0}
    , decltype(_impl_.controller_process_id_){0}
    , decltype(_impl_.pipeline_hops_count_){0}
    , decltype(_impl_.retry_attempts_){0}
    , decltype(_impl_.requires_reprocessing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pipeline_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pipeline_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processing_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PipelineTracking::~PipelineTracking() {
  // @@protoc_insertion_point(destructor:protobuf.PipelineTracking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PipelineTracking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processing_errors_.~RepeatedPtrField();
  _impl_.component_metadata_.Destruct();
  _impl_.component_metadata_.~MapField();
  _impl_.processing_tags_.~RepeatedPtrField();
  _impl_.pipeline_id_.Destroy();
  _impl_.processing_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pipeline_start_;
  if (this != internal_default_instance()) delete _impl_.packet_captured_at_;
  if (this != internal_default_instance()) delete _impl_.features_extracted_at_;
  if (this != internal_default_instance()) delete _impl_.geoip_enriched_at_;
  if (this != internal_default_instance()) delete _impl_.ml_analyzed_at_;
  if (this != internal_default_instance()) delete _impl_.threat_detected_at_;
  if (this != internal_default_instance()) delete _impl_.action_taken_at_;
  if (this != internal_default_instance()) delete _impl_.total_processing_latency_;
}

void PipelineTracking::ArenaDtor(void* object) {
  PipelineTracking* _this = reinterpret_cast< PipelineTracking* >(object);
  _this->_impl_.component_metadata_.Destruct();
}
void PipelineTracking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PipelineTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.PipelineTracking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processing_errors_.Clear();
  _impl_.component_metadata_.Clear();
  _impl_.processing_tags_.Clear();
  _impl_.pipeline_id_.ClearToEmpty();
  _impl_.processing_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pipeline_start_ != nullptr) {
    delete _impl_.pipeline_start_;
  }
  _impl_.pipeline_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.packet_captured_at_ != nullptr) {
    delete _impl_.packet_captured_at_;
  }
  _impl_.packet_captured_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.features_extracted_at_ != nullptr) {
    delete _impl_.features_extracted_at_;
  }
  _impl_.features_extracted_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geoip_enriched_at_ != nullptr) {
    delete _impl_.geoip_enriched_at_;
  }
  _impl_.geoip_enriched_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ml_analyzed_at_ != nullptr) {
    delete _impl_.ml_analyzed_at_;
  }
  _impl_.ml_analyzed_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.threat_detected_at_ != nullptr) {
    delete _impl_.threat_detected_at_;
  }
  _impl_.threat_detected_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.action_taken_at_ != nullptr) {
    delete _impl_.action_taken_at_;
  }
  _impl_.action_taken_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.total_processing_latency_ != nullptr) {
    delete _impl_.total_processing_latency_;
  }
  _impl_.total_processing_latency_ = nullptr;
  ::memset(&_impl_.sniffer_process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requires_reprocessing_) -
      reinterpret_cast<char*>(&_impl_.sniffer_process_id_)) + sizeof(_impl_.requires_reprocessing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineTracking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pipeline_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pipeline_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.PipelineTracking.pipeline_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp pipeline_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sniffer_process_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sniffer_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processor_process_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.processor_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 enricher_process_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.enricher_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 analyzer_process_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.analyzer_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 detector_process_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.detector_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 controller_process_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.controller_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp packet_captured_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_captured_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp features_extracted_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_features_extracted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp geoip_enriched_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_geoip_enriched_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ml_analyzed_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ml_analyzed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp threat_detected_at = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_threat_detected_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp action_taken_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_taken_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_processing_latency = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_processing_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pipeline_hops_count = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.pipeline_hops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string processing_path = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_processing_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.PipelineTracking.processing_path"));
        } else
          goto handle_unusual;
        continue;
      // int32 retry_attempts = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.retry_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string processing_errors = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_processing_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.PipelineTracking.processing_errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool requires_reprocessing = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.requires_reprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> component_metadata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.component_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string processing_tags = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_processing_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.PipelineTracking.processing_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PipelineTracking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.PipelineTracking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pipeline_id = 1;
  if (!this->_internal_pipeline_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_id().data(), static_cast<int>(this->_internal_pipeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.pipeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pipeline_id(), target);
  }

  // .google.protobuf.Timestamp pipeline_start = 2;
  if (this->_internal_has_pipeline_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pipeline_start(this),
        _Internal::pipeline_start(this).GetCachedSize(), target, stream);
  }

  // int32 sniffer_process_id = 3;
  if (this->_internal_sniffer_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sniffer_process_id(), target);
  }

  // int32 processor_process_id = 4;
  if (this->_internal_processor_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_processor_process_id(), target);
  }

  // int32 enricher_process_id = 5;
  if (this->_internal_enricher_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_enricher_process_id(), target);
  }

  // int32 analyzer_process_id = 6;
  if (this->_internal_analyzer_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_analyzer_process_id(), target);
  }

  // int32 detector_process_id = 7;
  if (this->_internal_detector_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_detector_process_id(), target);
  }

  // int32 controller_process_id = 8;
  if (this->_internal_controller_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_controller_process_id(), target);
  }

  // .google.protobuf.Timestamp packet_captured_at = 10;
  if (this->_internal_has_packet_captured_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::packet_captured_at(this),
        _Internal::packet_captured_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp features_extracted_at = 11;
  if (this->_internal_has_features_extracted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::features_extracted_at(this),
        _Internal::features_extracted_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  if (this->_internal_has_geoip_enriched_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::geoip_enriched_at(this),
        _Internal::geoip_enriched_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  if (this->_internal_has_ml_analyzed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ml_analyzed_at(this),
        _Internal::ml_analyzed_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp threat_detected_at = 14;
  if (this->_internal_has_threat_detected_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::threat_detected_at(this),
        _Internal::threat_detected_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp action_taken_at = 15;
  if (this->_internal_has_action_taken_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::action_taken_at(this),
        _Internal::action_taken_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration total_processing_latency = 20;
  if (this->_internal_has_total_processing_latency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::total_processing_latency(this),
        _Internal::total_processing_latency(this).GetCachedSize(), target, stream);
  }

  // int32 pipeline_hops_count = 21;
  if (this->_internal_pipeline_hops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_pipeline_hops_count(), target);
  }

  // string processing_path = 22;
  if (!this->_internal_processing_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processing_path().data(), static_cast<int>(this->_internal_processing_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_path");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_processing_path(), target);
  }

  // int32 retry_attempts = 25;
  if (this->_internal_retry_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_retry_attempts(), target);
  }

  // repeated string processing_errors = 26;
  for (int i = 0, n = this->_internal_processing_errors_size(); i < n; i++) {
    const auto& s = this->_internal_processing_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_errors");
    target = stream->WriteString(26, s, target);
  }

  // bool requires_reprocessing = 27;
  if (this->_internal_requires_reprocessing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_requires_reprocessing(), target);
  }

  // map<string, string> component_metadata = 30;
  if (!this->_internal_component_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = PipelineTracking_ComponentMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_component_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.PipelineTracking.ComponentMetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.PipelineTracking.ComponentMetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(30, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(30, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string processing_tags = 31;
  for (int i = 0, n = this->_internal_processing_tags_size(); i < n; i++) {
    const auto& s = this->_internal_processing_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.PipelineTracking.processing_tags");
    target = stream->WriteString(31, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.PipelineTracking)
  return target;
}

size_t PipelineTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.PipelineTracking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string processing_errors = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processing_errors_.size());
  for (int i = 0, n = _impl_.processing_errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processing_errors_.Get(i));
  }

  // map<string, string> component_metadata = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_component_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_component_metadata().begin();
      it != this->_internal_component_metadata().end(); ++it) {
    total_size += PipelineTracking_ComponentMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string processing_tags = 31;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processing_tags_.size());
  for (int i = 0, n = _impl_.processing_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processing_tags_.Get(i));
  }

  // string pipeline_id = 1;
  if (!this->_internal_pipeline_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_id());
  }

  // string processing_path = 22;
  if (!this->_internal_processing_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processing_path());
  }

  // .google.protobuf.Timestamp pipeline_start = 2;
  if (this->_internal_has_pipeline_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pipeline_start_);
  }

  // .google.protobuf.Timestamp packet_captured_at = 10;
  if (this->_internal_has_packet_captured_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_captured_at_);
  }

  // .google.protobuf.Timestamp features_extracted_at = 11;
  if (this->_internal_has_features_extracted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_extracted_at_);
  }

  // .google.protobuf.Timestamp geoip_enriched_at = 12;
  if (this->_internal_has_geoip_enriched_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geoip_enriched_at_);
  }

  // .google.protobuf.Timestamp ml_analyzed_at = 13;
  if (this->_internal_has_ml_analyzed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ml_analyzed_at_);
  }

  // .google.protobuf.Timestamp threat_detected_at = 14;
  if (this->_internal_has_threat_detected_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.threat_detected_at_);
  }

  // .google.protobuf.Timestamp action_taken_at = 15;
  if (this->_internal_has_action_taken_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.action_taken_at_);
  }

  // .google.protobuf.Duration total_processing_latency = 20;
  if (this->_internal_has_total_processing_latency()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_processing_latency_);
  }

  // int32 sniffer_process_id = 3;
  if (this->_internal_sniffer_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sniffer_process_id());
  }

  // int32 processor_process_id = 4;
  if (this->_internal_processor_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processor_process_id());
  }

  // int32 enricher_process_id = 5;
  if (this->_internal_enricher_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enricher_process_id());
  }

  // int32 analyzer_process_id = 6;
  if (this->_internal_analyzer_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_analyzer_process_id());
  }

  // int32 detector_process_id = 7;
  if (this->_internal_detector_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_detector_process_id());
  }

  // int32 controller_process_id = 8;
  if (this->_internal_controller_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_controller_process_id());
  }

  // int32 pipeline_hops_count = 21;
  if (this->_internal_pipeline_hops_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pipeline_hops_count());
  }

  // int32 retry_attempts = 25;
  if (this->_internal_retry_attempts() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_retry_attempts());
  }

  // bool requires_reprocessing = 27;
  if (this->_internal_requires_reprocessing() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PipelineTracking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PipelineTracking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PipelineTracking::GetClassData() const { return &_class_data_; }


void PipelineTracking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PipelineTracking*>(&to_msg);
  auto& from = static_cast<const PipelineTracking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.PipelineTracking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processing_errors_.MergeFrom(from._impl_.processing_errors_);
  _this->_impl_.component_metadata_.MergeFrom(from._impl_.component_metadata_);
  _this->_impl_.processing_tags_.MergeFrom(from._impl_.processing_tags_);
  if (!from._internal_pipeline_id().empty()) {
    _this->_internal_set_pipeline_id(from._internal_pipeline_id());
  }
  if (!from._internal_processing_path().empty()) {
    _this->_internal_set_processing_path(from._internal_processing_path());
  }
  if (from._internal_has_pipeline_start()) {
    _this->_internal_mutable_pipeline_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_pipeline_start());
  }
  if (from._internal_has_packet_captured_at()) {
    _this->_internal_mutable_packet_captured_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_packet_captured_at());
  }
  if (from._internal_has_features_extracted_at()) {
    _this->_internal_mutable_features_extracted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_features_extracted_at());
  }
  if (from._internal_has_geoip_enriched_at()) {
    _this->_internal_mutable_geoip_enriched_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_geoip_enriched_at());
  }
  if (from._internal_has_ml_analyzed_at()) {
    _this->_internal_mutable_ml_analyzed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ml_analyzed_at());
  }
  if (from._internal_has_threat_detected_at()) {
    _this->_internal_mutable_threat_detected_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_threat_detected_at());
  }
  if (from._internal_has_action_taken_at()) {
    _this->_internal_mutable_action_taken_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_action_taken_at());
  }
  if (from._internal_has_total_processing_latency()) {
    _this->_internal_mutable_total_processing_latency()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_total_processing_latency());
  }
  if (from._internal_sniffer_process_id() != 0) {
    _this->_internal_set_sniffer_process_id(from._internal_sniffer_process_id());
  }
  if (from._internal_processor_process_id() != 0) {
    _this->_internal_set_processor_process_id(from._internal_processor_process_id());
  }
  if (from._internal_enricher_process_id() != 0) {
    _this->_internal_set_enricher_process_id(from._internal_enricher_process_id());
  }
  if (from._internal_analyzer_process_id() != 0) {
    _this->_internal_set_analyzer_process_id(from._internal_analyzer_process_id());
  }
  if (from._internal_detector_process_id() != 0) {
    _this->_internal_set_detector_process_id(from._internal_detector_process_id());
  }
  if (from._internal_controller_process_id() != 0) {
    _this->_internal_set_controller_process_id(from._internal_controller_process_id());
  }
  if (from._internal_pipeline_hops_count() != 0) {
    _this->_internal_set_pipeline_hops_count(from._internal_pipeline_hops_count());
  }
  if (from._internal_retry_attempts() != 0) {
    _this->_internal_set_retry_attempts(from._internal_retry_attempts());
  }
  if (from._internal_requires_reprocessing() != 0) {
    _this->_internal_set_requires_reprocessing(from._internal_requires_reprocessing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PipelineTracking::CopyFrom(const PipelineTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.PipelineTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineTracking::IsInitialized() const {
  return true;
}

void PipelineTracking::InternalSwap(PipelineTracking* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processing_errors_.InternalSwap(&other->_impl_.processing_errors_);
  _impl_.component_metadata_.InternalSwap(&other->_impl_.component_metadata_);
  _impl_.processing_tags_.InternalSwap(&other->_impl_.processing_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pipeline_id_, lhs_arena,
      &other->_impl_.pipeline_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processing_path_, lhs_arena,
      &other->_impl_.processing_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PipelineTracking, _impl_.requires_reprocessing_)
      + sizeof(PipelineTracking::_impl_.requires_reprocessing_)
      - PROTOBUF_FIELD_OFFSET(PipelineTracking, _impl_.pipeline_start_)>(
          reinterpret_cast<char*>(&_impl_.pipeline_start_),
          reinterpret_cast<char*>(&other->_impl_.pipeline_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineTracking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[16]);
}

// ===================================================================

class RAGAnalysis::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& analysis_timestamp(const RAGAnalysis* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RAGAnalysis::_Internal::analysis_timestamp(const RAGAnalysis* msg) {
  return *msg->_impl_.analysis_timestamp_;
}
void RAGAnalysis::clear_analysis_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.analysis_timestamp_ != nullptr) {
    delete _impl_.analysis_timestamp_;
  }
  _impl_.analysis_timestamp_ = nullptr;
}
RAGAnalysis::RAGAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.RAGAnalysis)
}
RAGAnalysis::RAGAnalysis(const RAGAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RAGAnalysis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retrieved_knowledge_){from._impl_.retrieved_knowledge_}
    , decltype(_impl_.relevance_scores_){from._impl_.relevance_scores_}
    , decltype(_impl_.knowledge_sources_){from._impl_.knowledge_sources_}
    , decltype(_impl_.query_text_){}
    , decltype(_impl_.ai_generated_analysis_){}
    , decltype(_impl_.analysis_timestamp_){nullptr}
    , decltype(_impl_.analysis_confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_text().empty()) {
    _this->_impl_.query_text_.Set(from._internal_query_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ai_generated_analysis_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ai_generated_analysis_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ai_generated_analysis().empty()) {
    _this->_impl_.ai_generated_analysis_.Set(from._internal_ai_generated_analysis(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_analysis_timestamp()) {
    _this->_impl_.analysis_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.analysis_timestamp_);
  }
  _this->_impl_.analysis_confidence_ = from._impl_.analysis_confidence_;
  // @@protoc_insertion_point(copy_constructor:protobuf.RAGAnalysis)
}

inline void RAGAnalysis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retrieved_knowledge_){arena}
    , decltype(_impl_.relevance_scores_){arena}
    , decltype(_impl_.knowledge_sources_){arena}
    , decltype(_impl_.query_text_){}
    , decltype(_impl_.ai_generated_analysis_){}
    , decltype(_impl_.analysis_timestamp_){nullptr}
    , decltype(_impl_.analysis_confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ai_generated_analysis_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ai_generated_analysis_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RAGAnalysis::~RAGAnalysis() {
  // @@protoc_insertion_point(destructor:protobuf.RAGAnalysis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RAGAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.retrieved_knowledge_.~RepeatedPtrField();
  _impl_.relevance_scores_.~RepeatedField();
  _impl_.knowledge_sources_.~RepeatedPtrField();
  _impl_.query_text_.Destroy();
  _impl_.ai_generated_analysis_.Destroy();
  if (this != internal_default_instance()) delete _impl_.analysis_timestamp_;
}

void RAGAnalysis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RAGAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RAGAnalysis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retrieved_knowledge_.Clear();
  _impl_.relevance_scores_.Clear();
  _impl_.knowledge_sources_.Clear();
  _impl_.query_text_.ClearToEmpty();
  _impl_.ai_generated_analysis_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.analysis_timestamp_ != nullptr) {
    delete _impl_.analysis_timestamp_;
  }
  _impl_.analysis_timestamp_ = nullptr;
  _impl_.analysis_confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RAGAnalysis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.RAGAnalysis.query_text"));
        } else
          goto handle_unusual;
        continue;
      // repeated string retrieved_knowledge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_retrieved_knowledge();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.RAGAnalysis.retrieved_knowledge"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double relevance_scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_relevance_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_relevance_scores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string ai_generated_analysis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ai_generated_analysis();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.RAGAnalysis.ai_generated_analysis"));
        } else
          goto handle_unusual;
        continue;
      // double analysis_confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.analysis_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string knowledge_sources = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_knowledge_sources();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.RAGAnalysis.knowledge_sources"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp analysis_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RAGAnalysis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RAGAnalysis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_text = 1;
  if (!this->_internal_query_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_text().data(), static_cast<int>(this->_internal_query_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.query_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_text(), target);
  }

  // repeated string retrieved_knowledge = 2;
  for (int i = 0, n = this->_internal_retrieved_knowledge_size(); i < n; i++) {
    const auto& s = this->_internal_retrieved_knowledge(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.retrieved_knowledge");
    target = stream->WriteString(2, s, target);
  }

  // repeated double relevance_scores = 3;
  if (this->_internal_relevance_scores_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_relevance_scores(), target);
  }

  // string ai_generated_analysis = 4;
  if (!this->_internal_ai_generated_analysis().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ai_generated_analysis().data(), static_cast<int>(this->_internal_ai_generated_analysis().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.ai_generated_analysis");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ai_generated_analysis(), target);
  }

  // double analysis_confidence = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_analysis_confidence = this->_internal_analysis_confidence();
  uint64_t raw_analysis_confidence;
  memcpy(&raw_analysis_confidence, &tmp_analysis_confidence, sizeof(tmp_analysis_confidence));
  if (raw_analysis_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_analysis_confidence(), target);
  }

  // repeated string knowledge_sources = 6;
  for (int i = 0, n = this->_internal_knowledge_sources_size(); i < n; i++) {
    const auto& s = this->_internal_knowledge_sources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RAGAnalysis.knowledge_sources");
    target = stream->WriteString(6, s, target);
  }

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  if (this->_internal_has_analysis_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::analysis_timestamp(this),
        _Internal::analysis_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RAGAnalysis)
  return target;
}

size_t RAGAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RAGAnalysis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string retrieved_knowledge = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.retrieved_knowledge_.size());
  for (int i = 0, n = _impl_.retrieved_knowledge_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.retrieved_knowledge_.Get(i));
  }

  // repeated double relevance_scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relevance_scores_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string knowledge_sources = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.knowledge_sources_.size());
  for (int i = 0, n = _impl_.knowledge_sources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.knowledge_sources_.Get(i));
  }

  // string query_text = 1;
  if (!this->_internal_query_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_text());
  }

  // string ai_generated_analysis = 4;
  if (!this->_internal_ai_generated_analysis().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ai_generated_analysis());
  }

  // .google.protobuf.Timestamp analysis_timestamp = 7;
  if (this->_internal_has_analysis_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.analysis_timestamp_);
  }

  // double analysis_confidence = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_analysis_confidence = this->_internal_analysis_confidence();
  uint64_t raw_analysis_confidence;
  memcpy(&raw_analysis_confidence, &tmp_analysis_confidence, sizeof(tmp_analysis_confidence));
  if (raw_analysis_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RAGAnalysis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RAGAnalysis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RAGAnalysis::GetClassData() const { return &_class_data_; }


void RAGAnalysis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RAGAnalysis*>(&to_msg);
  auto& from = static_cast<const RAGAnalysis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RAGAnalysis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.retrieved_knowledge_.MergeFrom(from._impl_.retrieved_knowledge_);
  _this->_impl_.relevance_scores_.MergeFrom(from._impl_.relevance_scores_);
  _this->_impl_.knowledge_sources_.MergeFrom(from._impl_.knowledge_sources_);
  if (!from._internal_query_text().empty()) {
    _this->_internal_set_query_text(from._internal_query_text());
  }
  if (!from._internal_ai_generated_analysis().empty()) {
    _this->_internal_set_ai_generated_analysis(from._internal_ai_generated_analysis());
  }
  if (from._internal_has_analysis_timestamp()) {
    _this->_internal_mutable_analysis_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_analysis_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_analysis_confidence = from._internal_analysis_confidence();
  uint64_t raw_analysis_confidence;
  memcpy(&raw_analysis_confidence, &tmp_analysis_confidence, sizeof(tmp_analysis_confidence));
  if (raw_analysis_confidence != 0) {
    _this->_internal_set_analysis_confidence(from._internal_analysis_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RAGAnalysis::CopyFrom(const RAGAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RAGAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAGAnalysis::IsInitialized() const {
  return true;
}

void RAGAnalysis::InternalSwap(RAGAnalysis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.retrieved_knowledge_.InternalSwap(&other->_impl_.retrieved_knowledge_);
  _impl_.relevance_scores_.InternalSwap(&other->_impl_.relevance_scores_);
  _impl_.knowledge_sources_.InternalSwap(&other->_impl_.knowledge_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_text_, lhs_arena,
      &other->_impl_.query_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ai_generated_analysis_, lhs_arena,
      &other->_impl_.ai_generated_analysis_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RAGAnalysis, _impl_.analysis_confidence_)
      + sizeof(RAGAnalysis::_impl_.analysis_confidence_)
      - PROTOBUF_FIELD_OFFSET(RAGAnalysis, _impl_.analysis_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.analysis_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.analysis_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RAGAnalysis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[17]);
}

// ===================================================================

class HumanFeedback::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& feedback_timestamp(const HumanFeedback* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HumanFeedback::_Internal::feedback_timestamp(const HumanFeedback* msg) {
  return *msg->_impl_.feedback_timestamp_;
}
void HumanFeedback::clear_feedback_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.feedback_timestamp_ != nullptr) {
    delete _impl_.feedback_timestamp_;
  }
  _impl_.feedback_timestamp_ = nullptr;
}
HumanFeedback::HumanFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.HumanFeedback)
}
HumanFeedback::HumanFeedback(const HumanFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HumanFeedback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.analyst_tags_){from._impl_.analyst_tags_}
    , decltype(_impl_.feedback_id_){}
    , decltype(_impl_.analyst_user_id_){}
    , decltype(_impl_.event_reference_id_){}
    , decltype(_impl_.analyst_explanation_){}
    , decltype(_impl_.feedback_timestamp_){nullptr}
    , decltype(_impl_.feedback_type_){}
    , decltype(_impl_.confirmed_true_positive_){}
    , decltype(_impl_.confirmed_false_positive_){}
    , decltype(_impl_.analyst_confidence_rating_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feedback_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feedback_id().empty()) {
    _this->_impl_.feedback_id_.Set(from._internal_feedback_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.analyst_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyst_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_analyst_user_id().empty()) {
    _this->_impl_.analyst_user_id_.Set(from._internal_analyst_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_reference_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_reference_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_reference_id().empty()) {
    _this->_impl_.event_reference_id_.Set(from._internal_event_reference_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.analyst_explanation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyst_explanation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_analyst_explanation().empty()) {
    _this->_impl_.analyst_explanation_.Set(from._internal_analyst_explanation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_feedback_timestamp()) {
    _this->_impl_.feedback_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.feedback_timestamp_);
  }
  ::memcpy(&_impl_.feedback_type_, &from._impl_.feedback_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.analyst_confidence_rating_) -
    reinterpret_cast<char*>(&_impl_.feedback_type_)) + sizeof(_impl_.analyst_confidence_rating_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HumanFeedback)
}

inline void HumanFeedback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.analyst_tags_){arena}
    , decltype(_impl_.feedback_id_){}
    , decltype(_impl_.analyst_user_id_){}
    , decltype(_impl_.event_reference_id_){}
    , decltype(_impl_.analyst_explanation_){}
    , decltype(_impl_.feedback_timestamp_){nullptr}
    , decltype(_impl_.feedback_type_){0}
    , decltype(_impl_.confirmed_true_positive_){false}
    , decltype(_impl_.confirmed_false_positive_){false}
    , decltype(_impl_.analyst_confidence_rating_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feedback_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.feedback_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.analyst_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyst_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_reference_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_reference_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.analyst_explanation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analyst_explanation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HumanFeedback::~HumanFeedback() {
  // @@protoc_insertion_point(destructor:protobuf.HumanFeedback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HumanFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.analyst_tags_.~RepeatedPtrField();
  _impl_.feedback_id_.Destroy();
  _impl_.analyst_user_id_.Destroy();
  _impl_.event_reference_id_.Destroy();
  _impl_.analyst_explanation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.feedback_timestamp_;
}

void HumanFeedback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HumanFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HumanFeedback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.analyst_tags_.Clear();
  _impl_.feedback_id_.ClearToEmpty();
  _impl_.analyst_user_id_.ClearToEmpty();
  _impl_.event_reference_id_.ClearToEmpty();
  _impl_.analyst_explanation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.feedback_timestamp_ != nullptr) {
    delete _impl_.feedback_timestamp_;
  }
  _impl_.feedback_timestamp_ = nullptr;
  ::memset(&_impl_.feedback_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.analyst_confidence_rating_) -
      reinterpret_cast<char*>(&_impl_.feedback_type_)) + sizeof(_impl_.analyst_confidence_rating_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HumanFeedback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feedback_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feedback_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanFeedback.feedback_id"));
        } else
          goto handle_unusual;
        continue;
      // string analyst_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_analyst_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanFeedback.analyst_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string event_reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_reference_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanFeedback.event_reference_id"));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feedback_type(static_cast<::protobuf::HumanFeedback_FeedbackType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool confirmed_true_positive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.confirmed_true_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool confirmed_false_positive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.confirmed_false_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string analyst_explanation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_analyst_explanation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanFeedback.analyst_explanation"));
        } else
          goto handle_unusual;
        continue;
      // repeated string analyst_tags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_analyst_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanFeedback.analyst_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 analyst_confidence_rating = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.analyst_confidence_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp feedback_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedback_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HumanFeedback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HumanFeedback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feedback_id = 1;
  if (!this->_internal_feedback_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feedback_id().data(), static_cast<int>(this->_internal_feedback_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.feedback_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feedback_id(), target);
  }

  // string analyst_user_id = 2;
  if (!this->_internal_analyst_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analyst_user_id().data(), static_cast<int>(this->_internal_analyst_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_analyst_user_id(), target);
  }

  // string event_reference_id = 3;
  if (!this->_internal_event_reference_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_reference_id().data(), static_cast<int>(this->_internal_event_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.event_reference_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_reference_id(), target);
  }

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  if (this->_internal_feedback_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_feedback_type(), target);
  }

  // bool confirmed_true_positive = 5;
  if (this->_internal_confirmed_true_positive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_confirmed_true_positive(), target);
  }

  // bool confirmed_false_positive = 6;
  if (this->_internal_confirmed_false_positive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_confirmed_false_positive(), target);
  }

  // string analyst_explanation = 7;
  if (!this->_internal_analyst_explanation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analyst_explanation().data(), static_cast<int>(this->_internal_analyst_explanation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_explanation");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_analyst_explanation(), target);
  }

  // repeated string analyst_tags = 8;
  for (int i = 0, n = this->_internal_analyst_tags_size(); i < n; i++) {
    const auto& s = this->_internal_analyst_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanFeedback.analyst_tags");
    target = stream->WriteString(8, s, target);
  }

  // int32 analyst_confidence_rating = 9;
  if (this->_internal_analyst_confidence_rating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_analyst_confidence_rating(), target);
  }

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  if (this->_internal_has_feedback_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::feedback_timestamp(this),
        _Internal::feedback_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HumanFeedback)
  return target;
}

size_t HumanFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HumanFeedback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string analyst_tags = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.analyst_tags_.size());
  for (int i = 0, n = _impl_.analyst_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.analyst_tags_.Get(i));
  }

  // string feedback_id = 1;
  if (!this->_internal_feedback_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feedback_id());
  }

  // string analyst_user_id = 2;
  if (!this->_internal_analyst_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analyst_user_id());
  }

  // string event_reference_id = 3;
  if (!this->_internal_event_reference_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_reference_id());
  }

  // string analyst_explanation = 7;
  if (!this->_internal_analyst_explanation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analyst_explanation());
  }

  // .google.protobuf.Timestamp feedback_timestamp = 10;
  if (this->_internal_has_feedback_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feedback_timestamp_);
  }

  // .protobuf.HumanFeedback.FeedbackType feedback_type = 4;
  if (this->_internal_feedback_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_feedback_type());
  }

  // bool confirmed_true_positive = 5;
  if (this->_internal_confirmed_true_positive() != 0) {
    total_size += 1 + 1;
  }

  // bool confirmed_false_positive = 6;
  if (this->_internal_confirmed_false_positive() != 0) {
    total_size += 1 + 1;
  }

  // int32 analyst_confidence_rating = 9;
  if (this->_internal_analyst_confidence_rating() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_analyst_confidence_rating());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HumanFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HumanFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HumanFeedback::GetClassData() const { return &_class_data_; }


void HumanFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HumanFeedback*>(&to_msg);
  auto& from = static_cast<const HumanFeedback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HumanFeedback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.analyst_tags_.MergeFrom(from._impl_.analyst_tags_);
  if (!from._internal_feedback_id().empty()) {
    _this->_internal_set_feedback_id(from._internal_feedback_id());
  }
  if (!from._internal_analyst_user_id().empty()) {
    _this->_internal_set_analyst_user_id(from._internal_analyst_user_id());
  }
  if (!from._internal_event_reference_id().empty()) {
    _this->_internal_set_event_reference_id(from._internal_event_reference_id());
  }
  if (!from._internal_analyst_explanation().empty()) {
    _this->_internal_set_analyst_explanation(from._internal_analyst_explanation());
  }
  if (from._internal_has_feedback_timestamp()) {
    _this->_internal_mutable_feedback_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_feedback_timestamp());
  }
  if (from._internal_feedback_type() != 0) {
    _this->_internal_set_feedback_type(from._internal_feedback_type());
  }
  if (from._internal_confirmed_true_positive() != 0) {
    _this->_internal_set_confirmed_true_positive(from._internal_confirmed_true_positive());
  }
  if (from._internal_confirmed_false_positive() != 0) {
    _this->_internal_set_confirmed_false_positive(from._internal_confirmed_false_positive());
  }
  if (from._internal_analyst_confidence_rating() != 0) {
    _this->_internal_set_analyst_confidence_rating(from._internal_analyst_confidence_rating());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HumanFeedback::CopyFrom(const HumanFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HumanFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanFeedback::IsInitialized() const {
  return true;
}

void HumanFeedback::InternalSwap(HumanFeedback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.analyst_tags_.InternalSwap(&other->_impl_.analyst_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feedback_id_, lhs_arena,
      &other->_impl_.feedback_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analyst_user_id_, lhs_arena,
      &other->_impl_.analyst_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_reference_id_, lhs_arena,
      &other->_impl_.event_reference_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analyst_explanation_, lhs_arena,
      &other->_impl_.analyst_explanation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HumanFeedback, _impl_.analyst_confidence_rating_)
      + sizeof(HumanFeedback::_impl_.analyst_confidence_rating_)
      - PROTOBUF_FIELD_OFFSET(HumanFeedback, _impl_.feedback_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.feedback_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.feedback_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HumanFeedback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[18]);
}

// ===================================================================

class HumanInTheLoopReview::_Internal {
 public:
  static const ::protobuf::HumanFeedback& analyst_feedback(const HumanInTheLoopReview* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& escalated_timestamp(const HumanInTheLoopReview* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& reviewed_timestamp(const HumanInTheLoopReview* msg);
};

const ::protobuf::HumanFeedback&
HumanInTheLoopReview::_Internal::analyst_feedback(const HumanInTheLoopReview* msg) {
  return *msg->_impl_.analyst_feedback_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HumanInTheLoopReview::_Internal::escalated_timestamp(const HumanInTheLoopReview* msg) {
  return *msg->_impl_.escalated_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HumanInTheLoopReview::_Internal::reviewed_timestamp(const HumanInTheLoopReview* msg) {
  return *msg->_impl_.reviewed_timestamp_;
}
void HumanInTheLoopReview::clear_escalated_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.escalated_timestamp_ != nullptr) {
    delete _impl_.escalated_timestamp_;
  }
  _impl_.escalated_timestamp_ = nullptr;
}
void HumanInTheLoopReview::clear_reviewed_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.reviewed_timestamp_ != nullptr) {
    delete _impl_.reviewed_timestamp_;
  }
  _impl_.reviewed_timestamp_ = nullptr;
}
HumanInTheLoopReview::HumanInTheLoopReview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.HumanInTheLoopReview)
}
HumanInTheLoopReview::HumanInTheLoopReview(const HumanInTheLoopReview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HumanInTheLoopReview* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.review_reasons_){from._impl_.review_reasons_}
    , decltype(_impl_.analyst_feedback_){nullptr}
    , decltype(_impl_.escalated_timestamp_){nullptr}
    , decltype(_impl_.reviewed_timestamp_){nullptr}
    , decltype(_impl_.review_priority_){}
    , decltype(_impl_.requires_human_analysis_){}
    , decltype(_impl_.review_completed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_analyst_feedback()) {
    _this->_impl_.analyst_feedback_ = new ::protobuf::HumanFeedback(*from._impl_.analyst_feedback_);
  }
  if (from._internal_has_escalated_timestamp()) {
    _this->_impl_.escalated_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.escalated_timestamp_);
  }
  if (from._internal_has_reviewed_timestamp()) {
    _this->_impl_.reviewed_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.reviewed_timestamp_);
  }
  ::memcpy(&_impl_.review_priority_, &from._impl_.review_priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.review_completed_) -
    reinterpret_cast<char*>(&_impl_.review_priority_)) + sizeof(_impl_.review_completed_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HumanInTheLoopReview)
}

inline void HumanInTheLoopReview::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.review_reasons_){arena}
    , decltype(_impl_.analyst_feedback_){nullptr}
    , decltype(_impl_.escalated_timestamp_){nullptr}
    , decltype(_impl_.reviewed_timestamp_){nullptr}
    , decltype(_impl_.review_priority_){0}
    , decltype(_impl_.requires_human_analysis_){false}
    , decltype(_impl_.review_completed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HumanInTheLoopReview::~HumanInTheLoopReview() {
  // @@protoc_insertion_point(destructor:protobuf.HumanInTheLoopReview)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HumanInTheLoopReview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.review_reasons_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.analyst_feedback_;
  if (this != internal_default_instance()) delete _impl_.escalated_timestamp_;
  if (this != internal_default_instance()) delete _impl_.reviewed_timestamp_;
}

void HumanInTheLoopReview::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HumanInTheLoopReview::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HumanInTheLoopReview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.review_reasons_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.analyst_feedback_ != nullptr) {
    delete _impl_.analyst_feedback_;
  }
  _impl_.analyst_feedback_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.escalated_timestamp_ != nullptr) {
    delete _impl_.escalated_timestamp_;
  }
  _impl_.escalated_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reviewed_timestamp_ != nullptr) {
    delete _impl_.reviewed_timestamp_;
  }
  _impl_.reviewed_timestamp_ = nullptr;
  ::memset(&_impl_.review_priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.review_completed_) -
      reinterpret_cast<char*>(&_impl_.review_priority_)) + sizeof(_impl_.review_completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HumanInTheLoopReview::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool requires_human_analysis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requires_human_analysis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_review_priority(static_cast<::protobuf::HumanInTheLoopReview_ReviewPriority>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string review_reasons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_review_reasons();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.HumanInTheLoopReview.review_reasons"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.HumanFeedback analyst_feedback = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_analyst_feedback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp escalated_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_escalated_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reviewed_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reviewed_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool review_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.review_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HumanInTheLoopReview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HumanInTheLoopReview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool requires_human_analysis = 1;
  if (this->_internal_requires_human_analysis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_requires_human_analysis(), target);
  }

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  if (this->_internal_review_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_review_priority(), target);
  }

  // repeated string review_reasons = 3;
  for (int i = 0, n = this->_internal_review_reasons_size(); i < n; i++) {
    const auto& s = this->_internal_review_reasons(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HumanInTheLoopReview.review_reasons");
    target = stream->WriteString(3, s, target);
  }

  // .protobuf.HumanFeedback analyst_feedback = 4;
  if (this->_internal_has_analyst_feedback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::analyst_feedback(this),
        _Internal::analyst_feedback(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  if (this->_internal_has_escalated_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::escalated_timestamp(this),
        _Internal::escalated_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  if (this->_internal_has_reviewed_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::reviewed_timestamp(this),
        _Internal::reviewed_timestamp(this).GetCachedSize(), target, stream);
  }

  // bool review_completed = 7;
  if (this->_internal_review_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_review_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HumanInTheLoopReview)
  return target;
}

size_t HumanInTheLoopReview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HumanInTheLoopReview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string review_reasons = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.review_reasons_.size());
  for (int i = 0, n = _impl_.review_reasons_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.review_reasons_.Get(i));
  }

  // .protobuf.HumanFeedback analyst_feedback = 4;
  if (this->_internal_has_analyst_feedback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.analyst_feedback_);
  }

  // .google.protobuf.Timestamp escalated_timestamp = 5;
  if (this->_internal_has_escalated_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.escalated_timestamp_);
  }

  // .google.protobuf.Timestamp reviewed_timestamp = 6;
  if (this->_internal_has_reviewed_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reviewed_timestamp_);
  }

  // .protobuf.HumanInTheLoopReview.ReviewPriority review_priority = 2;
  if (this->_internal_review_priority() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_review_priority());
  }

  // bool requires_human_analysis = 1;
  if (this->_internal_requires_human_analysis() != 0) {
    total_size += 1 + 1;
  }

  // bool review_completed = 7;
  if (this->_internal_review_completed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HumanInTheLoopReview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HumanInTheLoopReview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HumanInTheLoopReview::GetClassData() const { return &_class_data_; }


void HumanInTheLoopReview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HumanInTheLoopReview*>(&to_msg);
  auto& from = static_cast<const HumanInTheLoopReview&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HumanInTheLoopReview)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.review_reasons_.MergeFrom(from._impl_.review_reasons_);
  if (from._internal_has_analyst_feedback()) {
    _this->_internal_mutable_analyst_feedback()->::protobuf::HumanFeedback::MergeFrom(
        from._internal_analyst_feedback());
  }
  if (from._internal_has_escalated_timestamp()) {
    _this->_internal_mutable_escalated_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_escalated_timestamp());
  }
  if (from._internal_has_reviewed_timestamp()) {
    _this->_internal_mutable_reviewed_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_reviewed_timestamp());
  }
  if (from._internal_review_priority() != 0) {
    _this->_internal_set_review_priority(from._internal_review_priority());
  }
  if (from._internal_requires_human_analysis() != 0) {
    _this->_internal_set_requires_human_analysis(from._internal_requires_human_analysis());
  }
  if (from._internal_review_completed() != 0) {
    _this->_internal_set_review_completed(from._internal_review_completed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HumanInTheLoopReview::CopyFrom(const HumanInTheLoopReview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HumanInTheLoopReview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanInTheLoopReview::IsInitialized() const {
  return true;
}

void HumanInTheLoopReview::InternalSwap(HumanInTheLoopReview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.review_reasons_.InternalSwap(&other->_impl_.review_reasons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HumanInTheLoopReview, _impl_.review_completed_)
      + sizeof(HumanInTheLoopReview::_impl_.review_completed_)
      - PROTOBUF_FIELD_OFFSET(HumanInTheLoopReview, _impl_.analyst_feedback_)>(
          reinterpret_cast<char*>(&_impl_.analyst_feedback_),
          reinterpret_cast<char*>(&other->_impl_.analyst_feedback_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HumanInTheLoopReview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[19]);
}

// ===================================================================

NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse() {}
NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::MergeFrom(const NetworkSecurityEvent_CustomMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[20]);
}

// ===================================================================

class NetworkSecurityEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_timestamp(const NetworkSecurityEvent* msg);
  static const ::protobuf::NetworkFeatures& network_features(const NetworkSecurityEvent* msg);
  static const ::protobuf::GeoEnrichment& geo_enrichment(const NetworkSecurityEvent* msg);
  static const ::protobuf::TimeWindow& time_window(const NetworkSecurityEvent* msg);
  static const ::protobuf::TricapaMLAnalysis& ml_analysis(const NetworkSecurityEvent* msg);
  static const ::protobuf::DistributedNode& capturing_node(const NetworkSecurityEvent* msg);
  static const ::protobuf::PipelineTracking& pipeline_tracking(const NetworkSecurityEvent* msg);
  static const ::protobuf::RAGAnalysis& rag_analysis(const NetworkSecurityEvent* msg);
  static const ::protobuf::HumanInTheLoopReview& human_review(const NetworkSecurityEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NetworkSecurityEvent::_Internal::event_timestamp(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.event_timestamp_;
}
const ::protobuf::NetworkFeatures&
NetworkSecurityEvent::_Internal::network_features(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.network_features_;
}
const ::protobuf::GeoEnrichment&
NetworkSecurityEvent::_Internal::geo_enrichment(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.geo_enrichment_;
}
const ::protobuf::TimeWindow&
NetworkSecurityEvent::_Internal::time_window(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.time_window_;
}
const ::protobuf::TricapaMLAnalysis&
NetworkSecurityEvent::_Internal::ml_analysis(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.ml_analysis_;
}
const ::protobuf::DistributedNode&
NetworkSecurityEvent::_Internal::capturing_node(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.capturing_node_;
}
const ::protobuf::PipelineTracking&
NetworkSecurityEvent::_Internal::pipeline_tracking(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.pipeline_tracking_;
}
const ::protobuf::RAGAnalysis&
NetworkSecurityEvent::_Internal::rag_analysis(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.rag_analysis_;
}
const ::protobuf::HumanInTheLoopReview&
NetworkSecurityEvent::_Internal::human_review(const NetworkSecurityEvent* msg) {
  return *msg->_impl_.human_review_;
}
void NetworkSecurityEvent::clear_event_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_timestamp_ != nullptr) {
    delete _impl_.event_timestamp_;
  }
  _impl_.event_timestamp_ = nullptr;
}
NetworkSecurityEvent::NetworkSecurityEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &NetworkSecurityEvent::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.NetworkSecurityEvent)
}
NetworkSecurityEvent::NetworkSecurityEvent(const NetworkSecurityEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkSecurityEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_model_predictions_){from._impl_.additional_model_predictions_}
    , decltype(_impl_.related_event_ids_){from._impl_.related_event_ids_}
    , /*decltype(_impl_.custom_metadata_)*/{}
    , decltype(_impl_.event_tags_){from._impl_.event_tags_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.originating_node_id_){}
    , decltype(_impl_.final_classification_){}
    , decltype(_impl_.threat_category_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.event_chain_id_){}
    , decltype(_impl_.protobuf_version_){}
    , decltype(_impl_.event_timestamp_){nullptr}
    , decltype(_impl_.network_features_){nullptr}
    , decltype(_impl_.geo_enrichment_){nullptr}
    , decltype(_impl_.time_window_){nullptr}
    , decltype(_impl_.ml_analysis_){nullptr}
    , decltype(_impl_.capturing_node_){nullptr}
    , decltype(_impl_.pipeline_tracking_){nullptr}
    , decltype(_impl_.rag_analysis_){nullptr}
    , decltype(_impl_.human_review_){nullptr}
    , decltype(_impl_.overall_threat_score_){}
    , decltype(_impl_.schema_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.custom_metadata_.MergeFrom(from._impl_.custom_metadata_);
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_id().empty()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originating_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originating_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_originating_node_id().empty()) {
    _this->_impl_.originating_node_id_.Set(from._internal_originating_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.final_classification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_classification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_final_classification().empty()) {
    _this->_impl_.final_classification_.Set(from._internal_final_classification(), 
      _this->GetArenaForAllocation());
  }
  _impl_.threat_category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threat_category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threat_category().empty()) {
    _this->_impl_.threat_category_.Set(from._internal_threat_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_correlation_id().empty()) {
    _this->_impl_.correlation_id_.Set(from._internal_correlation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_chain_id().empty()) {
    _this->_impl_.event_chain_id_.Set(from._internal_event_chain_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protobuf_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protobuf_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protobuf_version().empty()) {
    _this->_impl_.protobuf_version_.Set(from._internal_protobuf_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event_timestamp()) {
    _this->_impl_.event_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.event_timestamp_);
  }
  if (from._internal_has_network_features()) {
    _this->_impl_.network_features_ = new ::protobuf::NetworkFeatures(*from._impl_.network_features_);
  }
  if (from._internal_has_geo_enrichment()) {
    _this->_impl_.geo_enrichment_ = new ::protobuf::GeoEnrichment(*from._impl_.geo_enrichment_);
  }
  if (from._internal_has_time_window()) {
    _this->_impl_.time_window_ = new ::protobuf::TimeWindow(*from._impl_.time_window_);
  }
  if (from._internal_has_ml_analysis()) {
    _this->_impl_.ml_analysis_ = new ::protobuf::TricapaMLAnalysis(*from._impl_.ml_analysis_);
  }
  if (from._internal_has_capturing_node()) {
    _this->_impl_.capturing_node_ = new ::protobuf::DistributedNode(*from._impl_.capturing_node_);
  }
  if (from._internal_has_pipeline_tracking()) {
    _this->_impl_.pipeline_tracking_ = new ::protobuf::PipelineTracking(*from._impl_.pipeline_tracking_);
  }
  if (from._internal_has_rag_analysis()) {
    _this->_impl_.rag_analysis_ = new ::protobuf::RAGAnalysis(*from._impl_.rag_analysis_);
  }
  if (from._internal_has_human_review()) {
    _this->_impl_.human_review_ = new ::protobuf::HumanInTheLoopReview(*from._impl_.human_review_);
  }
  ::memcpy(&_impl_.overall_threat_score_, &from._impl_.overall_threat_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.schema_version_) -
    reinterpret_cast<char*>(&_impl_.overall_threat_score_)) + sizeof(_impl_.schema_version_));
  // @@protoc_insertion_point(copy_constructor:protobuf.NetworkSecurityEvent)
}

inline void NetworkSecurityEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_model_predictions_){arena}
    , decltype(_impl_.related_event_ids_){arena}
    , /*decltype(_impl_.custom_metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.event_tags_){arena}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.originating_node_id_){}
    , decltype(_impl_.final_classification_){}
    , decltype(_impl_.threat_category_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.event_chain_id_){}
    , decltype(_impl_.protobuf_version_){}
    , decltype(_impl_.event_timestamp_){nullptr}
    , decltype(_impl_.network_features_){nullptr}
    , decltype(_impl_.geo_enrichment_){nullptr}
    , decltype(_impl_.time_window_){nullptr}
    , decltype(_impl_.ml_analysis_){nullptr}
    , decltype(_impl_.capturing_node_){nullptr}
    , decltype(_impl_.pipeline_tracking_){nullptr}
    , decltype(_impl_.rag_analysis_){nullptr}
    , decltype(_impl_.human_review_){nullptr}
    , decltype(_impl_.overall_threat_score_){0}
    , decltype(_impl_.schema_version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originating_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originating_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.final_classification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_classification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threat_category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threat_category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.correlation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.correlation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protobuf_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protobuf_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkSecurityEvent::~NetworkSecurityEvent() {
  // @@protoc_insertion_point(destructor:protobuf.NetworkSecurityEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void NetworkSecurityEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_model_predictions_.~RepeatedPtrField();
  _impl_.related_event_ids_.~RepeatedPtrField();
  _impl_.custom_metadata_.Destruct();
  _impl_.custom_metadata_.~MapField();
  _impl_.event_tags_.~RepeatedPtrField();
  _impl_.event_id_.Destroy();
  _impl_.originating_node_id_.Destroy();
  _impl_.final_classification_.Destroy();
  _impl_.threat_category_.Destroy();
  _impl_.correlation_id_.Destroy();
  _impl_.event_chain_id_.Destroy();
  _impl_.protobuf_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_timestamp_;
  if (this != internal_default_instance()) delete _impl_.network_features_;
  if (this != internal_default_instance()) delete _impl_.geo_enrichment_;
  if (this != internal_default_instance()) delete _impl_.time_window_;
  if (this != internal_default_instance()) delete _impl_.ml_analysis_;
  if (this != internal_default_instance()) delete _impl_.capturing_node_;
  if (this != internal_default_instance()) delete _impl_.pipeline_tracking_;
  if (this != internal_default_instance()) delete _impl_.rag_analysis_;
  if (this != internal_default_instance()) delete _impl_.human_review_;
}

void NetworkSecurityEvent::ArenaDtor(void* object) {
  NetworkSecurityEvent* _this = reinterpret_cast< NetworkSecurityEvent* >(object);
  _this->_impl_.custom_metadata_.Destruct();
}
void NetworkSecurityEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkSecurityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.NetworkSecurityEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_model_predictions_.Clear();
  _impl_.related_event_ids_.Clear();
  _impl_.custom_metadata_.Clear();
  _impl_.event_tags_.Clear();
  _impl_.event_id_.ClearToEmpty();
  _impl_.originating_node_id_.ClearToEmpty();
  _impl_.final_classification_.ClearToEmpty();
  _impl_.threat_category_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  _impl_.event_chain_id_.ClearToEmpty();
  _impl_.protobuf_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_timestamp_ != nullptr) {
    delete _impl_.event_timestamp_;
  }
  _impl_.event_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.network_features_ != nullptr) {
    delete _impl_.network_features_;
  }
  _impl_.network_features_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geo_enrichment_ != nullptr) {
    delete _impl_.geo_enrichment_;
  }
  _impl_.geo_enrichment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_ != nullptr) {
    delete _impl_.time_window_;
  }
  _impl_.time_window_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ml_analysis_ != nullptr) {
    delete _impl_.ml_analysis_;
  }
  _impl_.ml_analysis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.capturing_node_ != nullptr) {
    delete _impl_.capturing_node_;
  }
  _impl_.capturing_node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pipeline_tracking_ != nullptr) {
    delete _impl_.pipeline_tracking_;
  }
  _impl_.pipeline_tracking_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rag_analysis_ != nullptr) {
    delete _impl_.rag_analysis_;
  }
  _impl_.rag_analysis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.human_review_ != nullptr) {
    delete _impl_.human_review_;
  }
  _impl_.human_review_ = nullptr;
  ::memset(&_impl_.overall_threat_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.schema_version_) -
      reinterpret_cast<char*>(&_impl_.overall_threat_score_)) + sizeof(_impl_.schema_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkSecurityEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp event_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string originating_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_originating_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.originating_node_id"));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.NetworkFeatures network_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.GeoEnrichment geo_enrichment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_enrichment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.TimeWindow time_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.TricapaMLAnalysis ml_analysis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ml_analysis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_model_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.DistributedNode capturing_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_capturing_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.PipelineTracking pipeline_tracking = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_tracking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.RAGAnalysis rag_analysis = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rag_analysis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.HumanInTheLoopReview human_review = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_human_review(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double overall_threat_score = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.overall_threat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string final_classification = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_final_classification();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.final_classification"));
        } else
          goto handle_unusual;
        continue;
      // string threat_category = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_threat_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.threat_category"));
        } else
          goto handle_unusual;
        continue;
      // string correlation_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.correlation_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string related_event_ids = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_related_event_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.related_event_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string event_chain_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_event_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.event_chain_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 schema_version = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> custom_metadata = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.custom_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string event_tags = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_event_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.event_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string protobuf_version = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_protobuf_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.NetworkSecurityEvent.protobuf_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkSecurityEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.NetworkSecurityEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .google.protobuf.Timestamp event_timestamp = 2;
  if (this->_internal_has_event_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::event_timestamp(this),
        _Internal::event_timestamp(this).GetCachedSize(), target, stream);
  }

  // string originating_node_id = 3;
  if (!this->_internal_originating_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originating_node_id().data(), static_cast<int>(this->_internal_originating_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.originating_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_originating_node_id(), target);
  }

  // .protobuf.NetworkFeatures network_features = 4;
  if (this->_internal_has_network_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::network_features(this),
        _Internal::network_features(this).GetCachedSize(), target, stream);
  }

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  if (this->_internal_has_geo_enrichment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::geo_enrichment(this),
        _Internal::geo_enrichment(this).GetCachedSize(), target, stream);
  }

  // .protobuf.TimeWindow time_window = 6;
  if (this->_internal_has_time_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time_window(this),
        _Internal::time_window(this).GetCachedSize(), target, stream);
  }

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  if (this->_internal_has_ml_analysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ml_analysis(this),
        _Internal::ml_analysis(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_model_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_model_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .protobuf.DistributedNode capturing_node = 9;
  if (this->_internal_has_capturing_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::capturing_node(this),
        _Internal::capturing_node(this).GetCachedSize(), target, stream);
  }

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  if (this->_internal_has_pipeline_tracking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::pipeline_tracking(this),
        _Internal::pipeline_tracking(this).GetCachedSize(), target, stream);
  }

  // .protobuf.RAGAnalysis rag_analysis = 11;
  if (this->_internal_has_rag_analysis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::rag_analysis(this),
        _Internal::rag_analysis(this).GetCachedSize(), target, stream);
  }

  // .protobuf.HumanInTheLoopReview human_review = 12;
  if (this->_internal_has_human_review()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::human_review(this),
        _Internal::human_review(this).GetCachedSize(), target, stream);
  }

  // double overall_threat_score = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overall_threat_score = this->_internal_overall_threat_score();
  uint64_t raw_overall_threat_score;
  memcpy(&raw_overall_threat_score, &tmp_overall_threat_score, sizeof(tmp_overall_threat_score));
  if (raw_overall_threat_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_overall_threat_score(), target);
  }

  // string final_classification = 16;
  if (!this->_internal_final_classification().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_final_classification().data(), static_cast<int>(this->_internal_final_classification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.final_classification");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_final_classification(), target);
  }

  // string threat_category = 17;
  if (!this->_internal_threat_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_threat_category().data(), static_cast<int>(this->_internal_threat_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.threat_category");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_threat_category(), target);
  }

  // string correlation_id = 20;
  if (!this->_internal_correlation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.correlation_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_correlation_id(), target);
  }

  // repeated string related_event_ids = 21;
  for (int i = 0, n = this->_internal_related_event_ids_size(); i < n; i++) {
    const auto& s = this->_internal_related_event_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.related_event_ids");
    target = stream->WriteString(21, s, target);
  }

  // string event_chain_id = 22;
  if (!this->_internal_event_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_chain_id().data(), static_cast<int>(this->_internal_event_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_chain_id");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_event_chain_id(), target);
  }

  // uint32 schema_version = 25;
  if (this->_internal_schema_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_schema_version(), target);
  }

  // map<string, string> custom_metadata = 26;
  if (!this->_internal_custom_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.NetworkSecurityEvent.CustomMetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.NetworkSecurityEvent.CustomMetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string event_tags = 27;
  for (int i = 0, n = this->_internal_event_tags_size(); i < n; i++) {
    const auto& s = this->_internal_event_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.event_tags");
    target = stream->WriteString(27, s, target);
  }

  // string protobuf_version = 28;
  if (!this->_internal_protobuf_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protobuf_version().data(), static_cast<int>(this->_internal_protobuf_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.NetworkSecurityEvent.protobuf_version");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_protobuf_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.NetworkSecurityEvent)
  return target;
}

size_t NetworkSecurityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.NetworkSecurityEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.ModelPrediction additional_model_predictions = 8;
  total_size += 1UL * this->_internal_additional_model_predictions_size();
  for (const auto& msg : this->_impl_.additional_model_predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string related_event_ids = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.related_event_ids_.size());
  for (int i = 0, n = _impl_.related_event_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.related_event_ids_.Get(i));
  }

  // map<string, string> custom_metadata = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_custom_metadata().begin();
      it != this->_internal_custom_metadata().end(); ++it) {
    total_size += NetworkSecurityEvent_CustomMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string event_tags = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_tags_.size());
  for (int i = 0, n = _impl_.event_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_tags_.Get(i));
  }

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string originating_node_id = 3;
  if (!this->_internal_originating_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originating_node_id());
  }

  // string final_classification = 16;
  if (!this->_internal_final_classification().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_classification());
  }

  // string threat_category = 17;
  if (!this->_internal_threat_category().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_threat_category());
  }

  // string correlation_id = 20;
  if (!this->_internal_correlation_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string event_chain_id = 22;
  if (!this->_internal_event_chain_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_chain_id());
  }

  // string protobuf_version = 28;
  if (!this->_internal_protobuf_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protobuf_version());
  }

  // .google.protobuf.Timestamp event_timestamp = 2;
  if (this->_internal_has_event_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_timestamp_);
  }

  // .protobuf.NetworkFeatures network_features = 4;
  if (this->_internal_has_network_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.network_features_);
  }

  // .protobuf.GeoEnrichment geo_enrichment = 5;
  if (this->_internal_has_geo_enrichment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geo_enrichment_);
  }

  // .protobuf.TimeWindow time_window = 6;
  if (this->_internal_has_time_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_window_);
  }

  // .protobuf.TricapaMLAnalysis ml_analysis = 7;
  if (this->_internal_has_ml_analysis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ml_analysis_);
  }

  // .protobuf.DistributedNode capturing_node = 9;
  if (this->_internal_has_capturing_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capturing_node_);
  }

  // .protobuf.PipelineTracking pipeline_tracking = 10;
  if (this->_internal_has_pipeline_tracking()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pipeline_tracking_);
  }

  // .protobuf.RAGAnalysis rag_analysis = 11;
  if (this->_internal_has_rag_analysis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rag_analysis_);
  }

  // .protobuf.HumanInTheLoopReview human_review = 12;
  if (this->_internal_has_human_review()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.human_review_);
  }

  // double overall_threat_score = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overall_threat_score = this->_internal_overall_threat_score();
  uint64_t raw_overall_threat_score;
  memcpy(&raw_overall_threat_score, &tmp_overall_threat_score, sizeof(tmp_overall_threat_score));
  if (raw_overall_threat_score != 0) {
    total_size += 1 + 8;
  }

  // uint32 schema_version = 25;
  if (this->_internal_schema_version() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_schema_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkSecurityEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkSecurityEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkSecurityEvent::GetClassData() const { return &_class_data_; }


void NetworkSecurityEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkSecurityEvent*>(&to_msg);
  auto& from = static_cast<const NetworkSecurityEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.NetworkSecurityEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_model_predictions_.MergeFrom(from._impl_.additional_model_predictions_);
  _this->_impl_.related_event_ids_.MergeFrom(from._impl_.related_event_ids_);
  _this->_impl_.custom_metadata_.MergeFrom(from._impl_.custom_metadata_);
  _this->_impl_.event_tags_.MergeFrom(from._impl_.event_tags_);
  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_originating_node_id().empty()) {
    _this->_internal_set_originating_node_id(from._internal_originating_node_id());
  }
  if (!from._internal_final_classification().empty()) {
    _this->_internal_set_final_classification(from._internal_final_classification());
  }
  if (!from._internal_threat_category().empty()) {
    _this->_internal_set_threat_category(from._internal_threat_category());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  if (!from._internal_event_chain_id().empty()) {
    _this->_internal_set_event_chain_id(from._internal_event_chain_id());
  }
  if (!from._internal_protobuf_version().empty()) {
    _this->_internal_set_protobuf_version(from._internal_protobuf_version());
  }
  if (from._internal_has_event_timestamp()) {
    _this->_internal_mutable_event_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_event_timestamp());
  }
  if (from._internal_has_network_features()) {
    _this->_internal_mutable_network_features()->::protobuf::NetworkFeatures::MergeFrom(
        from._internal_network_features());
  }
  if (from._internal_has_geo_enrichment()) {
    _this->_internal_mutable_geo_enrichment()->::protobuf::GeoEnrichment::MergeFrom(
        from._internal_geo_enrichment());
  }
  if (from._internal_has_time_window()) {
    _this->_internal_mutable_time_window()->::protobuf::TimeWindow::MergeFrom(
        from._internal_time_window());
  }
  if (from._internal_has_ml_analysis()) {
    _this->_internal_mutable_ml_analysis()->::protobuf::TricapaMLAnalysis::MergeFrom(
        from._internal_ml_analysis());
  }
  if (from._internal_has_capturing_node()) {
    _this->_internal_mutable_capturing_node()->::protobuf::DistributedNode::MergeFrom(
        from._internal_capturing_node());
  }
  if (from._internal_has_pipeline_tracking()) {
    _this->_internal_mutable_pipeline_tracking()->::protobuf::PipelineTracking::MergeFrom(
        from._internal_pipeline_tracking());
  }
  if (from._internal_has_rag_analysis()) {
    _this->_internal_mutable_rag_analysis()->::protobuf::RAGAnalysis::MergeFrom(
        from._internal_rag_analysis());
  }
  if (from._internal_has_human_review()) {
    _this->_internal_mutable_human_review()->::protobuf::HumanInTheLoopReview::MergeFrom(
        from._internal_human_review());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_overall_threat_score = from._internal_overall_threat_score();
  uint64_t raw_overall_threat_score;
  memcpy(&raw_overall_threat_score, &tmp_overall_threat_score, sizeof(tmp_overall_threat_score));
  if (raw_overall_threat_score != 0) {
    _this->_internal_set_overall_threat_score(from._internal_overall_threat_score());
  }
  if (from._internal_schema_version() != 0) {
    _this->_internal_set_schema_version(from._internal_schema_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkSecurityEvent::CopyFrom(const NetworkSecurityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.NetworkSecurityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSecurityEvent::IsInitialized() const {
  return true;
}

void NetworkSecurityEvent::InternalSwap(NetworkSecurityEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_model_predictions_.InternalSwap(&other->_impl_.additional_model_predictions_);
  _impl_.related_event_ids_.InternalSwap(&other->_impl_.related_event_ids_);
  _impl_.custom_metadata_.InternalSwap(&other->_impl_.custom_metadata_);
  _impl_.event_tags_.InternalSwap(&other->_impl_.event_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originating_node_id_, lhs_arena,
      &other->_impl_.originating_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.final_classification_, lhs_arena,
      &other->_impl_.final_classification_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.threat_category_, lhs_arena,
      &other->_impl_.threat_category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.correlation_id_, lhs_arena,
      &other->_impl_.correlation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_chain_id_, lhs_arena,
      &other->_impl_.event_chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protobuf_version_, lhs_arena,
      &other->_impl_.protobuf_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkSecurityEvent, _impl_.schema_version_)
      + sizeof(NetworkSecurityEvent::_impl_.schema_version_)
      - PROTOBUF_FIELD_OFFSET(NetworkSecurityEvent, _impl_.event_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.event_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.event_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSecurityEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[21]);
}

// ===================================================================

class EventBatch::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& batch_created_at(const EventBatch* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EventBatch::_Internal::batch_created_at(const EventBatch* msg) {
  return *msg->_impl_.batch_created_at_;
}
void EventBatch::clear_batch_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.batch_created_at_ != nullptr) {
    delete _impl_.batch_created_at_;
  }
  _impl_.batch_created_at_ = nullptr;
}
EventBatch::EventBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.EventBatch)
}
EventBatch::EventBatch(const EventBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.batch_source_node_){}
    , decltype(_impl_.batch_created_at_){nullptr}
    , decltype(_impl_.batch_id_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.processing_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batch_source_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_source_node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_source_node().empty()) {
    _this->_impl_.batch_source_node_.Set(from._internal_batch_source_node(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_batch_created_at()) {
    _this->_impl_.batch_created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.batch_created_at_);
  }
  ::memcpy(&_impl_.batch_id_, &from._impl_.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processing_mode_) -
    reinterpret_cast<char*>(&_impl_.batch_id_)) + sizeof(_impl_.processing_mode_));
  // @@protoc_insertion_point(copy_constructor:protobuf.EventBatch)
}

inline void EventBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.batch_source_node_){}
    , decltype(_impl_.batch_created_at_){nullptr}
    , decltype(_impl_.batch_id_){uint64_t{0u}}
    , decltype(_impl_.batch_size_){0u}
    , decltype(_impl_.processing_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.batch_source_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_source_node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBatch::~EventBatch() {
  // @@protoc_insertion_point(destructor:protobuf.EventBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.batch_source_node_.Destroy();
  if (this != internal_default_instance()) delete _impl_.batch_created_at_;
}

void EventBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.EventBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.batch_source_node_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.batch_created_at_ != nullptr) {
    delete _impl_.batch_created_at_;
  }
  _impl_.batch_created_at_ = nullptr;
  ::memset(&_impl_.batch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processing_mode_) -
      reinterpret_cast<char*>(&_impl_.batch_id_)) + sizeof(_impl_.processing_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.NetworkSecurityEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 batch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp batch_created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_processing_mode(static_cast<::protobuf::EventBatch_ProcessingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string batch_source_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_batch_source_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.EventBatch.batch_source_node"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.EventBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.NetworkSecurityEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 batch_id = 2;
  if (this->_internal_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_batch_id(), target);
  }

  // .google.protobuf.Timestamp batch_created_at = 3;
  if (this->_internal_has_batch_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::batch_created_at(this),
        _Internal::batch_created_at(this).GetCachedSize(), target, stream);
  }

  // uint32 batch_size = 4;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  if (this->_internal_processing_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_processing_mode(), target);
  }

  // string batch_source_node = 6;
  if (!this->_internal_batch_source_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_source_node().data(), static_cast<int>(this->_internal_batch_source_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.EventBatch.batch_source_node");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_batch_source_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.EventBatch)
  return target;
}

size_t EventBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.EventBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.NetworkSecurityEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string batch_source_node = 6;
  if (!this->_internal_batch_source_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_source_node());
  }

  // .google.protobuf.Timestamp batch_created_at = 3;
  if (this->_internal_has_batch_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_created_at_);
  }

  // uint64 batch_id = 2;
  if (this->_internal_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_id());
  }

  // uint32 batch_size = 4;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
  }

  // .protobuf.EventBatch.ProcessingMode processing_mode = 5;
  if (this->_internal_processing_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_processing_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBatch::GetClassData() const { return &_class_data_; }


void EventBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBatch*>(&to_msg);
  auto& from = static_cast<const EventBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.EventBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_batch_source_node().empty()) {
    _this->_internal_set_batch_source_node(from._internal_batch_source_node());
  }
  if (from._internal_has_batch_created_at()) {
    _this->_internal_mutable_batch_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_batch_created_at());
  }
  if (from._internal_batch_id() != 0) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_processing_mode() != 0) {
    _this->_internal_set_processing_mode(from._internal_processing_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBatch::CopyFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBatch::IsInitialized() const {
  return true;
}

void EventBatch::InternalSwap(EventBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_source_node_, lhs_arena,
      &other->_impl_.batch_source_node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventBatch, _impl_.processing_mode_)
      + sizeof(EventBatch::_impl_.processing_mode_)
      - PROTOBUF_FIELD_OFFSET(EventBatch, _impl_.batch_created_at_)>(
          reinterpret_cast<char*>(&_impl_.batch_created_at_),
          reinterpret_cast<char*>(&other->_impl_.batch_created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[22]);
}

// ===================================================================

SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse() {}
SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::MergeFrom(const SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[23]);
}

// ===================================================================

SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse() {}
SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::MergeFrom(const SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[24]);
}

// ===================================================================

class SystemConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_window_size(const SystemConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SystemConfiguration::_Internal::time_window_size(const SystemConfiguration* msg) {
  return *msg->_impl_.time_window_size_;
}
void SystemConfiguration::clear_time_window_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_size_ != nullptr) {
    delete _impl_.time_window_size_;
  }
  _impl_.time_window_size_ = nullptr;
}
SystemConfiguration::SystemConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SystemConfiguration::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.SystemConfiguration)
}
SystemConfiguration::SystemConfiguration(const SystemConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_ml_models_){from._impl_.enabled_ml_models_}
    , /*decltype(_impl_.threat_score_thresholds_)*/{}
    , decltype(_impl_.cluster_nodes_){from._impl_.cluster_nodes_}
    , /*decltype(_impl_.node_role_assignments_)*/{}
    , decltype(_impl_.knowledge_base_sources_){from._impl_.knowledge_base_sources_}
    , decltype(_impl_.encryption_algorithm_){}
    , decltype(_impl_.rag_model_endpoint_){}
    , decltype(_impl_.time_window_size_){nullptr}
    , decltype(_impl_.max_events_per_window_){}
    , decltype(_impl_.encryption_enabled_){}
    , decltype(_impl_.compression_enabled_){}
    , decltype(_impl_.rag_analysis_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.threat_score_thresholds_.MergeFrom(from._impl_.threat_score_thresholds_);
  _this->_impl_.node_role_assignments_.MergeFrom(from._impl_.node_role_assignments_);
  _impl_.encryption_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryption_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encryption_algorithm().empty()) {
    _this->_impl_.encryption_algorithm_.Set(from._internal_encryption_algorithm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rag_model_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rag_model_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rag_model_endpoint().empty()) {
    _this->_impl_.rag_model_endpoint_.Set(from._internal_rag_model_endpoint(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_window_size()) {
    _this->_impl_.time_window_size_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_window_size_);
  }
  ::memcpy(&_impl_.max_events_per_window_, &from._impl_.max_events_per_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rag_analysis_enabled_) -
    reinterpret_cast<char*>(&_impl_.max_events_per_window_)) + sizeof(_impl_.rag_analysis_enabled_));
  // @@protoc_insertion_point(copy_constructor:protobuf.SystemConfiguration)
}

inline void SystemConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_ml_models_){arena}
    , /*decltype(_impl_.threat_score_thresholds_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.cluster_nodes_){arena}
    , /*decltype(_impl_.node_role_assignments_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.knowledge_base_sources_){arena}
    , decltype(_impl_.encryption_algorithm_){}
    , decltype(_impl_.rag_model_endpoint_){}
    , decltype(_impl_.time_window_size_){nullptr}
    , decltype(_impl_.max_events_per_window_){0u}
    , decltype(_impl_.encryption_enabled_){false}
    , decltype(_impl_.compression_enabled_){false}
    , decltype(_impl_.rag_analysis_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encryption_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryption_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rag_model_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rag_model_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemConfiguration::~SystemConfiguration() {
  // @@protoc_insertion_point(destructor:protobuf.SystemConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SystemConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_ml_models_.~RepeatedPtrField();
  _impl_.threat_score_thresholds_.Destruct();
  _impl_.threat_score_thresholds_.~MapField();
  _impl_.cluster_nodes_.~RepeatedPtrField();
  _impl_.node_role_assignments_.Destruct();
  _impl_.node_role_assignments_.~MapField();
  _impl_.knowledge_base_sources_.~RepeatedPtrField();
  _impl_.encryption_algorithm_.Destroy();
  _impl_.rag_model_endpoint_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_window_size_;
}

void SystemConfiguration::ArenaDtor(void* object) {
  SystemConfiguration* _this = reinterpret_cast< SystemConfiguration* >(object);
  _this->_impl_.threat_score_thresholds_.Destruct();
  _this->_impl_.node_role_assignments_.Destruct();
}
void SystemConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.SystemConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_ml_models_.Clear();
  _impl_.threat_score_thresholds_.Clear();
  _impl_.cluster_nodes_.Clear();
  _impl_.node_role_assignments_.Clear();
  _impl_.knowledge_base_sources_.Clear();
  _impl_.encryption_algorithm_.ClearToEmpty();
  _impl_.rag_model_endpoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_window_size_ != nullptr) {
    delete _impl_.time_window_size_;
  }
  _impl_.time_window_size_ = nullptr;
  ::memset(&_impl_.max_events_per_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rag_analysis_enabled_) -
      reinterpret_cast<char*>(&_impl_.max_events_per_window_)) + sizeof(_impl_.rag_analysis_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string enabled_ml_models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enabled_ml_models();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.SystemConfiguration.enabled_ml_models"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> threat_score_thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.threat_score_thresholds_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_window_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_window_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_events_per_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_events_per_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.DistributedNode cluster_nodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cluster_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> node_role_assignments = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.node_role_assignments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool encryption_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.encryption_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool compression_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.compression_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encryption_algorithm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_encryption_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.SystemConfiguration.encryption_algorithm"));
        } else
          goto handle_unusual;
        continue;
      // bool rag_analysis_enabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rag_analysis_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rag_model_endpoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_rag_model_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.SystemConfiguration.rag_model_endpoint"));
        } else
          goto handle_unusual;
        continue;
      // repeated string knowledge_base_sources = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_knowledge_base_sources();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protobuf.SystemConfiguration.knowledge_base_sources"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.SystemConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enabled_ml_models = 1;
  for (int i = 0, n = this->_internal_enabled_ml_models_size(); i < n; i++) {
    const auto& s = this->_internal_enabled_ml_models(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.enabled_ml_models");
    target = stream->WriteString(1, s, target);
  }

  // map<string, double> threat_score_thresholds = 2;
  if (!this->_internal_threat_score_thresholds().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_threat_score_thresholds();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.SystemConfiguration.ThreatScoreThresholdsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Duration time_window_size = 3;
  if (this->_internal_has_time_window_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_window_size(this),
        _Internal::time_window_size(this).GetCachedSize(), target, stream);
  }

  // uint32 max_events_per_window = 4;
  if (this->_internal_max_events_per_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_events_per_window(), target);
  }

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cluster_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cluster_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, string> node_role_assignments = 6;
  if (!this->_internal_node_role_assignments().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_node_role_assignments();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protobuf.SystemConfiguration.NodeRoleAssignmentsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool encryption_enabled = 7;
  if (this->_internal_encryption_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_encryption_enabled(), target);
  }

  // bool compression_enabled = 8;
  if (this->_internal_compression_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_compression_enabled(), target);
  }

  // string encryption_algorithm = 9;
  if (!this->_internal_encryption_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encryption_algorithm().data(), static_cast<int>(this->_internal_encryption_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.encryption_algorithm");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_encryption_algorithm(), target);
  }

  // bool rag_analysis_enabled = 10;
  if (this->_internal_rag_analysis_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_rag_analysis_enabled(), target);
  }

  // string rag_model_endpoint = 11;
  if (!this->_internal_rag_model_endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rag_model_endpoint().data(), static_cast<int>(this->_internal_rag_model_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.rag_model_endpoint");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_rag_model_endpoint(), target);
  }

  // repeated string knowledge_base_sources = 12;
  for (int i = 0, n = this->_internal_knowledge_base_sources_size(); i < n; i++) {
    const auto& s = this->_internal_knowledge_base_sources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.SystemConfiguration.knowledge_base_sources");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.SystemConfiguration)
  return target;
}

size_t SystemConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.SystemConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enabled_ml_models = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.enabled_ml_models_.size());
  for (int i = 0, n = _impl_.enabled_ml_models_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.enabled_ml_models_.Get(i));
  }

  // map<string, double> threat_score_thresholds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_threat_score_thresholds_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_threat_score_thresholds().begin();
      it != this->_internal_threat_score_thresholds().end(); ++it) {
    total_size += SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protobuf.DistributedNode cluster_nodes = 5;
  total_size += 1UL * this->_internal_cluster_nodes_size();
  for (const auto& msg : this->_impl_.cluster_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> node_role_assignments = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_node_role_assignments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_node_role_assignments().begin();
      it != this->_internal_node_role_assignments().end(); ++it) {
    total_size += SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string knowledge_base_sources = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.knowledge_base_sources_.size());
  for (int i = 0, n = _impl_.knowledge_base_sources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.knowledge_base_sources_.Get(i));
  }

  // string encryption_algorithm = 9;
  if (!this->_internal_encryption_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encryption_algorithm());
  }

  // string rag_model_endpoint = 11;
  if (!this->_internal_rag_model_endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rag_model_endpoint());
  }

  // .google.protobuf.Duration time_window_size = 3;
  if (this->_internal_has_time_window_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_window_size_);
  }

  // uint32 max_events_per_window = 4;
  if (this->_internal_max_events_per_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_events_per_window());
  }

  // bool encryption_enabled = 7;
  if (this->_internal_encryption_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool compression_enabled = 8;
  if (this->_internal_compression_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool rag_analysis_enabled = 10;
  if (this->_internal_rag_analysis_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemConfiguration::GetClassData() const { return &_class_data_; }


void SystemConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemConfiguration*>(&to_msg);
  auto& from = static_cast<const SystemConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SystemConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_ml_models_.MergeFrom(from._impl_.enabled_ml_models_);
  _this->_impl_.threat_score_thresholds_.MergeFrom(from._impl_.threat_score_thresholds_);
  _this->_impl_.cluster_nodes_.MergeFrom(from._impl_.cluster_nodes_);
  _this->_impl_.node_role_assignments_.MergeFrom(from._impl_.node_role_assignments_);
  _this->_impl_.knowledge_base_sources_.MergeFrom(from._impl_.knowledge_base_sources_);
  if (!from._internal_encryption_algorithm().empty()) {
    _this->_internal_set_encryption_algorithm(from._internal_encryption_algorithm());
  }
  if (!from._internal_rag_model_endpoint().empty()) {
    _this->_internal_set_rag_model_endpoint(from._internal_rag_model_endpoint());
  }
  if (from._internal_has_time_window_size()) {
    _this->_internal_mutable_time_window_size()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_window_size());
  }
  if (from._internal_max_events_per_window() != 0) {
    _this->_internal_set_max_events_per_window(from._internal_max_events_per_window());
  }
  if (from._internal_encryption_enabled() != 0) {
    _this->_internal_set_encryption_enabled(from._internal_encryption_enabled());
  }
  if (from._internal_compression_enabled() != 0) {
    _this->_internal_set_compression_enabled(from._internal_compression_enabled());
  }
  if (from._internal_rag_analysis_enabled() != 0) {
    _this->_internal_set_rag_analysis_enabled(from._internal_rag_analysis_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemConfiguration::CopyFrom(const SystemConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SystemConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemConfiguration::IsInitialized() const {
  return true;
}

void SystemConfiguration::InternalSwap(SystemConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enabled_ml_models_.InternalSwap(&other->_impl_.enabled_ml_models_);
  _impl_.threat_score_thresholds_.InternalSwap(&other->_impl_.threat_score_thresholds_);
  _impl_.cluster_nodes_.InternalSwap(&other->_impl_.cluster_nodes_);
  _impl_.node_role_assignments_.InternalSwap(&other->_impl_.node_role_assignments_);
  _impl_.knowledge_base_sources_.InternalSwap(&other->_impl_.knowledge_base_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encryption_algorithm_, lhs_arena,
      &other->_impl_.encryption_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rag_model_endpoint_, lhs_arena,
      &other->_impl_.rag_model_endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemConfiguration, _impl_.rag_analysis_enabled_)
      + sizeof(SystemConfiguration::_impl_.rag_analysis_enabled_)
      - PROTOBUF_FIELD_OFFSET(SystemConfiguration, _impl_.time_window_size_)>(
          reinterpret_cast<char*>(&_impl_.time_window_size_),
          reinterpret_cast<char*>(&other->_impl_.time_window_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_5fsecurity_2eproto_getter, &descriptor_table_network_5fsecurity_2eproto_once,
      file_level_metadata_network_5fsecurity_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::NetworkFeatures_CustomFeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::NetworkFeatures_FeatureMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::NetworkFeatures*
Arena::CreateMaybeMessage< ::protobuf::NetworkFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::NetworkFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::GeoLocationInfo*
Arena::CreateMaybeMessage< ::protobuf::GeoLocationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::GeoLocationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::GeoEnrichment*
Arena::CreateMaybeMessage< ::protobuf::GeoEnrichment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::GeoEnrichment >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::TimeWindow*
Arena::CreateMaybeMessage< ::protobuf::TimeWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TimeWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::FlowAggregation_ProtocolDistributionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::FlowAggregation_PortDistributionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::FlowAggregation_CountryDistributionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::FlowAggregation*
Arena::CreateMaybeMessage< ::protobuf::FlowAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::FlowAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::ModelPrediction*
Arena::CreateMaybeMessage< ::protobuf::ModelPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::ModelPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TricapaMLAnalysis_FeatureImportanceScoresEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::TricapaMLAnalysis*
Arena::CreateMaybeMessage< ::protobuf::TricapaMLAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TricapaMLAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::DistributedNode_NodeCapabilitiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::DistributedNode*
Arena::CreateMaybeMessage< ::protobuf::DistributedNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::DistributedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::PipelineTracking_ComponentMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::PipelineTracking*
Arena::CreateMaybeMessage< ::protobuf::PipelineTracking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::PipelineTracking >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::RAGAnalysis*
Arena::CreateMaybeMessage< ::protobuf::RAGAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::RAGAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::HumanFeedback*
Arena::CreateMaybeMessage< ::protobuf::HumanFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HumanFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::HumanInTheLoopReview*
Arena::CreateMaybeMessage< ::protobuf::HumanInTheLoopReview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HumanInTheLoopReview >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::NetworkSecurityEvent_CustomMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::NetworkSecurityEvent*
Arena::CreateMaybeMessage< ::protobuf::NetworkSecurityEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::NetworkSecurityEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::EventBatch*
Arena::CreateMaybeMessage< ::protobuf::EventBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::EventBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::SystemConfiguration_ThreatScoreThresholdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::SystemConfiguration_NodeRoleAssignmentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::SystemConfiguration*
Arena::CreateMaybeMessage< ::protobuf::SystemConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::SystemConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
