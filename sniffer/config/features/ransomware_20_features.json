{
  "_header": "Ransomware Detection Features v1.0 - RPi Version",
  "_version": "1.0.0",
  "_date": "2025-10-28",
  "_target_hardware": "Raspberry Pi 4 (1GB-4GB RAM)",
  "_feature_count": 20,
  "_description": "Critical features for real-time ransomware detection before encryption starts",
  
  "extraction_windows": {
    "short_window_seconds": 30,
    "medium_window_seconds": 300,
    "long_window_seconds": 600,
    "history_retention_hours": 24
  },
  
  "categories": {
    "c2_communication": {
      "count": 6,
      "description": "Command & Control detection - catches ransomware at initial infection"
    },
    "lateral_movement": {
      "count": 4,
      "description": "Network spreading detection - catches ransomware before it spreads"
    },
    "exfiltration": {
      "count": 4,
      "description": "Data theft detection - catches double-extortion ransomware"
    },
    "behavioral": {
      "count": 6,
      "description": "Anomaly detection - reduces false positives"
    }
  },
  
  "features": [
    {
      "id": 1,
      "name": "dns_query_entropy",
      "category": "c2_communication",
      "type": "float",
      "range": [0.0, 8.0],
      "description": "Shannon entropy of DNS queries in 30s window (DGA detection)",
      "computation": "shannon_entropy(dns_query_names)",
      "window": "short_window_seconds",
      "dependencies": ["dns_queries"],
      "extraction_location": "user_space",
      "priority": "critical",
      "evasion_difficulty": "hard",
      "expected_benign_range": [2.0, 4.5],
      "expected_malicious_range": [6.0, 8.0],
      "implementation_notes": "Use SIMD for fast entropy calculation. Cache DNS queries in 1K ring buffer."
    },
    {
      "id": 2,
      "name": "new_external_ips_30s",
      "category": "c2_communication",
      "type": "int",
      "range": [0, 1000],
      "description": "Count of never-seen-before external IPs in 30s window",
      "computation": "count(dst_ip WHERE dst_ip NOT IN last_24h_ips AND is_external(dst_ip))",
      "window": "short_window_seconds",
      "dependencies": ["flow_table", "ip_whitelist_24h"],
      "extraction_location": "user_space",
      "priority": "critical",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0, 5],
      "expected_malicious_range": [10, 100],
      "implementation_notes": "Use LRU cache (10K entries) for IP whitelist. Evict after 24h."
    },
    {
      "id": 3,
      "name": "dns_query_rate_per_min",
      "category": "c2_communication",
      "type": "float",
      "range": [0.0, 1000.0],
      "description": "DNS queries per minute (beaconing detection)",
      "computation": "count(dns_queries) / time_window_minutes",
      "window": "medium_window_seconds",
      "dependencies": ["dns_queries"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0.1, 5.0],
      "expected_malicious_range": [10.0, 60.0],
      "implementation_notes": "Calculate over 5-minute rolling window. Use counter per source IP."
    },
    {
      "id": 4,
      "name": "failed_dns_queries_ratio",
      "category": "c2_communication",
      "type": "float",
      "range": [0.0, 1.0],
      "description": "Failed DNS queries / Total DNS queries (DGA generates failures)",
      "computation": "count(dns_nxdomain) / count(dns_queries)",
      "window": "short_window_seconds",
      "dependencies": ["dns_queries", "dns_responses"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "hard",
      "expected_benign_range": [0.0, 0.1],
      "expected_malicious_range": [0.3, 0.9],
      "implementation_notes": "Track DNS response codes. NXDOMAIN = failed query."
    },
    {
      "id": 5,
      "name": "tls_self_signed_cert_count",
      "category": "c2_communication",
      "type": "int",
      "range": [0, 100],
      "description": "Self-signed TLS certificates in 30s window",
      "computation": "count(tls_handshakes WHERE cert.issuer == cert.subject)",
      "window": "short_window_seconds",
      "dependencies": ["tls_handshakes", "certificate_parsing"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0, 1],
      "expected_malicious_range": [2, 20],
      "implementation_notes": "Parse TLS Server Hello. Compare issuer DN with subject DN. Expensive operation - may need sampling."
    },
    {
      "id": 6,
      "name": "non_standard_port_http_count",
      "category": "c2_communication",
      "type": "int",
      "range": [0, 100],
      "description": "HTTP traffic on non-80/443 ports (C&C often on odd ports)",
      "computation": "count(tcp_flows WHERE has_http_signature AND port NOT IN [80, 443, 8080, 8443])",
      "window": "short_window_seconds",
      "dependencies": ["tcp_flows", "port_numbers", "payload_inspection"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "easy",
      "expected_benign_range": [0, 2],
      "expected_malicious_range": [5, 50],
      "implementation_notes": "Deep packet inspection for HTTP signatures (GET/POST/HTTP/1.1). Use Boyer-Moore for fast string matching."
    },
    {
      "id": 7,
      "name": "smb_connection_diversity",
      "category": "lateral_movement",
      "type": "int",
      "range": [0, 254],
      "description": "Unique internal IPs contacted via SMB (worm spreading)",
      "computation": "count_unique(dst_ip WHERE is_internal(dst_ip) AND dst_port IN [139, 445])",
      "window": "short_window_seconds",
      "dependencies": ["tcp_flows", "port_numbers"],
      "extraction_location": "user_space",
      "priority": "critical",
      "evasion_difficulty": "hard",
      "expected_benign_range": [0, 2],
      "expected_malicious_range": [10, 254],
      "implementation_notes": "Track SMB ports (139, 445). Use hash set for unique IP counting. Alert if >5 unique internal IPs."
    },
    {
      "id": 8,
      "name": "rdp_failed_auth_count",
      "category": "lateral_movement",
      "type": "int",
      "range": [0, 1000],
      "description": "Failed RDP authentication attempts (brute force)",
      "computation": "count(rdp_auth_failures)",
      "window": "short_window_seconds",
      "dependencies": ["rdp_protocol_analysis"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0, 1],
      "expected_malicious_range": [5, 100],
      "implementation_notes": "Deep packet inspection for RDP (port 3389). Parse RDP protocol for auth failures. Complex - may need to parse RDP protocol."
    },
    {
      "id": 9,
      "name": "new_internal_connections_30s",
      "category": "lateral_movement",
      "type": "int",
      "range": [0, 1000],
      "description": "New internal IP pairs that never communicated before",
      "computation": "count((src_ip, dst_ip) WHERE is_internal(src_ip) AND is_internal(dst_ip) AND pair NOT IN history)",
      "window": "short_window_seconds",
      "dependencies": ["flow_table", "internal_topology_history"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0, 3],
      "expected_malicious_range": [10, 100],
      "implementation_notes": "Maintain topology map of internal communications. Use Bloom filter for space efficiency."
    },
    {
      "id": 10,
      "name": "port_scan_pattern_score",
      "category": "lateral_movement",
      "type": "float",
      "range": [0.0, 1.0],
      "description": "Sequential port attempts / total connections (port scanning)",
      "computation": "sequential_port_count / total_connection_attempts",
      "window": "short_window_seconds",
      "dependencies": ["tcp_syn_packets", "port_sequence_analysis"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "hard",
      "expected_benign_range": [0.0, 0.1],
      "expected_malicious_range": [0.5, 1.0],
      "implementation_notes": "Track SYN packets per src_ip. Detect sequential ports (e.g., 1,2,3,4,5...). Use sliding window."
    },
    {
      "id": 11,
      "name": "upload_download_ratio_30s",
      "category": "exfiltration",
      "type": "float",
      "range": [0.0, 100.0],
      "description": "Upload bytes / Download bytes (exfiltration detection)",
      "computation": "sum(bytes_sent) / sum(bytes_received)",
      "window": "short_window_seconds",
      "dependencies": ["flow_byte_counters"],
      "extraction_location": "kernel_and_user",
      "priority": "high",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0.0, 2.0],
      "expected_malicious_range": [5.0, 50.0],
      "implementation_notes": "Aggregate byte counters from eBPF flow table. Normal traffic is download-heavy. Exfil is upload-heavy."
    },
    {
      "id": 12,
      "name": "burst_connections_count",
      "category": "exfiltration",
      "type": "int",
      "range": [0, 1000],
      "description": "Connections started in <5s window (sudden activity spike)",
      "computation": "count(new_connections WHERE timestamp_diff < 5s)",
      "window": "short_window_seconds",
      "dependencies": ["flow_table", "connection_timestamps"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0, 10],
      "expected_malicious_range": [50, 500],
      "implementation_notes": "Use sub-window of 5 seconds. Count connection initiation rate. Use sliding window for efficiency."
    },
    {
      "id": 13,
      "name": "unique_destinations_30s",
      "category": "exfiltration",
      "type": "int",
      "range": [0, 1000],
      "description": "Unique external IPs contacted in 30s (multiple exfil channels)",
      "computation": "count_unique(dst_ip WHERE is_external(dst_ip))",
      "window": "short_window_seconds",
      "dependencies": ["flow_table"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "hard",
      "expected_benign_range": [1, 10],
      "expected_malicious_range": [20, 200],
      "implementation_notes": "Use hash set for unique counting. Exclude common CDN IPs (cloudflare, akamai)."
    },
    {
      "id": 14,
      "name": "large_upload_sessions_count",
      "category": "exfiltration",
      "type": "int",
      "range": [0, 100],
      "description": "Uploads >10MB in single session (large file theft)",
      "computation": "count(flows WHERE bytes_sent > 10MB)",
      "window": "short_window_seconds",
      "dependencies": ["flow_byte_counters"],
      "extraction_location": "kernel_and_user",
      "priority": "medium",
      "evasion_difficulty": "easy",
      "expected_benign_range": [0, 1],
      "expected_malicious_range": [5, 50],
      "implementation_notes": "Track per-flow byte counters. 10MB threshold may need tuning per network."
    },
    {
      "id": 15,
      "name": "nocturnal_activity_flag",
      "category": "behavioral",
      "type": "bool",
      "range": [0, 1],
      "description": "Activity between 00:00-05:00 local time (off-hours attack)",
      "computation": "current_hour >= 0 AND current_hour < 5",
      "window": "N/A",
      "dependencies": ["system_clock"],
      "extraction_location": "user_space",
      "priority": "low",
      "evasion_difficulty": "easy",
      "expected_benign_range": [0, 0],
      "expected_malicious_range": [1, 1],
      "implementation_notes": "Simple time check. May need timezone configuration. Exclude if scheduled backups detected."
    },
    {
      "id": 16,
      "name": "connection_rate_stddev",
      "category": "behavioral",
      "type": "float",
      "range": [0.0, 1000.0],
      "description": "Std deviation of connections/min over 5min (burstiness)",
      "computation": "stddev(connections_per_minute over 5min)",
      "window": "medium_window_seconds",
      "dependencies": ["connection_rate_history"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0.0, 5.0],
      "expected_malicious_range": [20.0, 200.0],
      "implementation_notes": "Maintain 5-minute sliding window of connection rates. Use Welford's online algorithm for efficient stddev."
    },
    {
      "id": 17,
      "name": "protocol_diversity_score",
      "category": "behavioral",
      "type": "float",
      "range": [0.0, 1.0],
      "description": "Unique protocols used / time window (ransomware uses many protocols)",
      "computation": "count_unique(protocols) / max_expected_protocols",
      "window": "short_window_seconds",
      "dependencies": ["protocol_detection"],
      "extraction_location": "user_space",
      "priority": "high",
      "evasion_difficulty": "hard",
      "expected_benign_range": [0.1, 0.3],
      "expected_malicious_range": [0.6, 1.0],
      "implementation_notes": "Track protocols: TCP, UDP, ICMP, HTTP, HTTPS, SMB, RDP, DNS. Use hash set. Normalize by window size."
    },
    {
      "id": 18,
      "name": "avg_flow_duration_seconds",
      "category": "behavioral",
      "type": "float",
      "range": [0.0, 600.0],
      "description": "Average connection duration (ransomware has short, bursty flows)",
      "computation": "avg(flow_end_time - flow_start_time)",
      "window": "short_window_seconds",
      "dependencies": ["flow_timestamps"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [10.0, 300.0],
      "expected_malicious_range": [0.1, 5.0],
      "implementation_notes": "Track flow start/end times. Calculate average over window. Exclude long-lived connections (e.g., SSH)."
    },
    {
      "id": 19,
      "name": "tcp_rst_ratio",
      "category": "behavioral",
      "type": "float",
      "range": [0.0, 1.0],
      "description": "RST packets / Total TCP packets (scanning causes RSTs)",
      "computation": "count(tcp_rst_flag) / count(tcp_packets)",
      "window": "short_window_seconds",
      "dependencies": ["tcp_flag_counters"],
      "extraction_location": "kernel_and_user",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0.0, 0.05],
      "expected_malicious_range": [0.2, 0.8],
      "implementation_notes": "Count RST flags from eBPF. Divide by total TCP packets. High RST = failed connections."
    },
    {
      "id": 20,
      "name": "syn_without_ack_ratio",
      "category": "behavioral",
      "type": "float",
      "range": [0.0, 1.0],
      "description": "SYN without ACK / Total SYN packets (failed connections)",
      "computation": "count(syn_without_ack) / count(syn_packets)",
      "window": "short_window_seconds",
      "dependencies": ["tcp_handshake_tracking"],
      "extraction_location": "user_space",
      "priority": "medium",
      "evasion_difficulty": "medium",
      "expected_benign_range": [0.0, 0.1],
      "expected_malicious_range": [0.5, 0.9],
      "implementation_notes": "Track TCP 3-way handshake. SYN without SYN-ACK = failed connection. Use state machine per flow."
    }
  ],
  
  "implementation_priority": {
    "phase1_critical": [1, 2, 7],
    "phase2_high": [3, 4, 9, 11, 13, 17],
    "phase3_medium": [5, 6, 8, 10, 12, 14, 16, 18, 19, 20],
    "phase4_low": [15]
  },
  
  "performance_budget": {
    "total_extraction_time_us": 400,
    "per_feature_avg_us": 20,
    "memory_per_feature_bytes": 1024,
    "total_memory_kb": 20
  },
  
  "validation": {
    "expected_accuracy": 0.95,
    "expected_fpr": 0.01,
    "expected_fnr": 0.05,
    "inference_time_us": 500,
    "model_size_mb": 50
  }
}
