// Enhanced eBPF Sniffer - Main Application (Versión mínima compatible)
#include <iostream>
#include <memory>
#include <csignal>
#include <atomic>
#include <thread>
#include <chrono>

#include "config_manager.hpp"
#include "ebpf_loader.hpp"
#include "ring_consumer.hpp"
#include "compression_handler.hpp"
#include "zmq_pool_manager.hpp"

// Global shutdown flag
std::atomic<bool> g_shutdown{false};

// Signal handler
void signal_handler(int signal) {
    std::cout << "\nReceived signal " << signal << ", shutting down..." << std::endl;
    g_shutdown = true;
}

int main(int argc, char* argv[]) {
    // Parse command line arguments
    std::string config_file = "config/sniffer.json";

    if (argc > 2 && std::string(argv[1]) == "--config") {
        config_file = argv[2];
    }

    // Setup signal handlers
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);

    std::cout << "Enhanced eBPF Sniffer v3.1 starting..." << std::endl;

    try {
        // Initialize configuration
        auto config_manager = std::make_unique<sniffer::ConfigManager>();
        if (!config_manager->load_from_file(config_file)) {
            std::cerr << "Failed to load configuration" << std::endl;
            return 1;
        }

        // Get configuration
        auto config = config_manager->get_config();

        // Initialize compression handler
        auto compression_handler = std::make_unique<sniffer::CompressionHandler>();

        // Initialize ZMQ pool
        auto zmq_pool = std::make_unique<sniffer::ZMQPoolManager>(4);
        std::string zmq_endpoint = "tcp://192.168.56.20:5571";

        if (!zmq_pool->connect(zmq_endpoint)) {
            std::cerr << "Failed to connect to ZMQ endpoint" << std::endl;
            return 1;
        }

        // Initialize eBPF loader
        auto ebpf_loader = std::make_unique<sniffer::EbpfLoader>();
        if (!ebpf_loader->load_program("sniffer.bpf.o")) {
            std::cerr << "Failed to load eBPF program" << std::endl;
            return 1;
        }

        // Initialize ring buffer consumer with config
        auto ring_consumer = std::make_unique<sniffer::RingBufferConsumer>(config);

        std::cout << "Sniffer initialized successfully" << std::endl;
        std::cout << "Press Ctrl+C to stop" << std::endl;

        // Simple main loop
        while (!g_shutdown) {
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }

        std::cout << "Shutting down..." << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "Fatal error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}